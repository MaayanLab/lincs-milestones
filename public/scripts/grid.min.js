/**
 * @author Michael McDermott
 * Created on 7/28/15.
 */

d3Clust.$inject = ["d3", "lodash"];
Docent3Controller.$inject = ["$window", "$scope", "$http", "$modal", "d3", "d3Data", "lodash"];
angular
  .module('clustergram', [])
  .directive('clustergram', clustergramDir);

function clustergramDir() {
  ClustergramController.$inject = ["$timeout", "lodash", "d3", "d3Clust"];
  return {
    restrict: 'E',
    scope: {
      arguments: '='
    },
    templateUrl: 'clustergram.html',
    controller: ClustergramController,
    controllerAs: 'vm',
    bindToController: true
  };

  /* @ngInject */
  function ClustergramController($timeout, lodash, d3, d3Clust) {
    var vm = this;
    vm.setOrder = setOrder;
    vm.active = 'rank';
    var clustergram;
    var clustColors = {
      'PromoCell Myocytes': '#5D4A66',
      'Cell Free': '#DAA49A',
    };
    var orangeGroup = ['L1000', 'RNA-Seq', 'ATAC-Seq'];
    var purpleGroup = ['GCP', 'P100', 'RPPA', 'SWATH-MS'];
    var darkGreenGroup = ['MEMA', 'Viability', 'Immunofluorescence']

    function setOrder(orderString) {
      vm.active = orderString;
      if (clustergram) {
        clustergram.reorder(orderString);
      } else {
        clustergram = d3Clust.clustergram(vm.arguments);
        clustergram.reorder(orderString);
      }
    }

    function renderClust() {
      vm.arguments.order = vm.active;
      if (!clustergram) {
        clustergram = d3Clust.clustergram(vm.arguments);
      }

      d3.selectAll('.row_label_text').each(function(d, i) {
        var label = d3.select(this).text();
        d3.selectAll('.row_triangle_group').each(function(e, j) {
          var path = d3.select(this).select('path');
          if (i !== j) {
            return;
          }
          if (orangeGroup.indexOf(label) > -1) {
            path.style('fill', 'orange');
          } else if (purpleGroup.indexOf(label) > -1) {
            path.style('fill', 'purple');
          } else if (darkGreenGroup.indexOf(label) > -1) {
            path.style('fill', '#373F47');
          } else {
            path.style('fill', 'red')
          }
        });
      });

      d3.selectAll('.col_label_text').each(function(d, i) {
        var node = d3.select(this);
        var label = node.text();
        var path = node.select('path');
        if (lodash.has(clustColors, label)) {
          path.style('fill', clustColors[label]);
        } else if (label.split(' ')[0] === 'iPSC') {
          path.style('fill', '#008000');
        } else {
          path.style('fill', '#cc9');
        }
      });
    }

    function simulateClick() {
      d3.select('.tile').each(function(d, i) {
        d3.select(this).on('click').apply(this, [d, i]);
      });
    }

    renderClust();
    simulateClick();
  }
}
;/**
 * @author Michael McDermott
 * Created on 7/20/15.
 */

angular
  .module('clustergram')
  .factory('d3', d3Service);

function d3Service() {
  /*eslint-disable */
  var d3 = {
    version: "3.5.3"
  };
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  var d3_arraySlice = [].slice,
    d3_array = function(list) {
      return d3_arraySlice.call(list);
    };
  var d3_document = document,
    d3_documentElement = d3_document.documentElement,
    d3_window = window;
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = function(list) {
      var i = list.length,
        array = new Array(i);
      while (i--) array[i] = list[i];
      return array;
    };
  }
  try {
    d3_document.createElement("div").style.setProperty("opacity", 0, "");
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype,
      d3_element_setAttribute = d3_element_prototype.setAttribute,
      d3_element_setAttributeNS = d3_element_prototype.setAttributeNS,
      d3_style_prototype = d3_window.CSSStyleDeclaration.prototype,
      d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function(name, value) {
      d3_element_setAttribute.call(this, name, value + "");
    };
    d3_element_prototype.setAttributeNS = function(space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + "");
    };
    d3_style_prototype.setProperty = function(name, value, priority) {
      d3_style_setProperty.call(this, name, value + "", priority);
    };
  }
  d3.ascending = d3_ascending;

  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1,
      n = array.length,
      a, b;
    if (arguments.length === 1) {
      while (++i < n)
        if ((b = array[i]) != null && b >= b) {
          a = b;
          break;
        }
      while (++i < n)
        if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && b >= b) {
          a = b;
          break;
        }
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1,
      n = array.length,
      a, b;
    if (arguments.length === 1) {
      while (++i < n)
        if ((b = array[i]) != null && b >= b) {
          a = b;
          break;
        }
      while (++i < n)
        if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && b >= b) {
          a = b;
          break;
        }
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1,
      n = array.length,
      a, b, c;
    if (arguments.length === 1) {
      while (++i < n)
        if ((b = array[i]) != null && b >= b) {
          a = c = b;
          break;
        }
      while (++i < n)
        if ((b = array[i]) != null) {
          if (a > b) a = b;
          if (c < b) c = b;
        }
    } else {
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && b >= b) {
          a = c = b;
          break;
        }
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null) {
          if (a > b) a = b;
          if (c < b) c = b;
        }
    }
    return [a, c];
  };

  function d3_number(x) {
    return x === null ? NaN : +x;
  }

  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0,
      n = array.length,
      a, i = -1;
    if (arguments.length === 1) {
      while (++i < n)
        if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n)
        if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0,
      n = array.length,
      a, i = -1,
      j = n;
    if (arguments.length === 1) {
      while (++i < n)
        if (d3_numeric(a = d3_number(array[i]))) s += a;
        else --j;
    } else {
      while (++i < n)
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a;
        else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1,
      h = Math.floor(H),
      v = +values[h - 1],
      e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [],
      n = array.length,
      a, i = -1;
    if (arguments.length === 1) {
      while (++i < n)
        if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n)
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers
          .push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length,
      m = 0,
      a, d, s = 0,
      i = -1,
      j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };

  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0,
      t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length,
      permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0,
      n = array.length - 1,
      p0, p1 = array[0],
      pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [p0 = p1, p1 = array[++i]];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(
        m); ++i < m;) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n;) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };

  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length,
      m, i = -1,
      j = 0,
      merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error(
      "infinite range");
    var range = [],
      k = d3_range_integerScale(abs(step)),
      i = -1,
      j;
    start *= k, stop *= k, step *= k;
    if (step < 0)
      while ((j = start + step * ++i) > stop) range.push(j / k);
    else
      while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };

  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }

  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1,
        n = object.length,
        o;
      if (arguments.length === 1)
        while (++i < n) map.set(i, object[i]);
      else
        while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };

  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__",
    d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this
        ._[key]);
    }
  });

  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ?
      d3_map_zero + key : key;
  }

  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }

  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }

  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }

  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }

  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }

  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {},
      keys = [],
      sortKeys = [],
      sortValues, rollup;

    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) :
        sortValues ? array.sort(sortValues) : array;
      var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue, object, setter, valuesByKey = new d3_Map(),
        values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [object]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }

    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [],
        sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array)
      for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };

  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  d3.rebind = function(target, source) {
    var i = 1,
      n = arguments.length,
      method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target,
      source, source[method]);
    return target;
  };

  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }

  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];

  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(),
      i = -1,
      n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };

  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."),
      name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[
      type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null)
        for (type in this) {
          if (this.hasOwnProperty(type)) this[type].on(name, null);
        }
      return this;
    }
  };

  function d3_dispatch_event(dispatch) {
    var listeners = [],
      listenerByName = new d3_Map();

    function event() {
      var z = listeners,
        i = -1,
        n = z.length,
        l;
      while (++i < n)
        if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name),
        i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(
          listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;

  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }

  function d3_eventSource() {
    var e = d3.event,
      s;
    while (s = e.sourceEvent) e = s;
    return e;
  }

  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(),
      i = 0,
      n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };

  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
      return n.querySelector(s);
    },
    d3_selectAll = function(s, n) {
      return n.querySelectorAll(s);
    },
    d3_selectMatcher = d3_documentElement.matches || d3_documentElement[
      d3_vendorSymbol(d3_documentElement, "matchesSelector")],
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [],
      subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };

  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [],
      subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__,
            i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };

  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"),
        prefix = name;
      if (i >= 0) {
        prefix = name.slice(0, i);
        name = name.slice(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) :
          node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };

  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);

    function attrNull() {
      this.removeAttribute(name);
    }

    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }

    function attrConstant() {
      this.setAttribute(name, value);
    }

    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }

    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name);
      else this.setAttribute(name, x);
    }

    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local);
      else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value ===
      "function" ? name.local ? attrFunctionNS : attrFunction : name.local ?
      attrConstantNS : attrConstant;
  }

  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(),
          n = (name = d3_selection_classes(name)).length,
          i = -1;
        if (value = node.classList) {
          while (++i < n)
            if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n)
            if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[
        value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };

  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }

  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }

  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;

    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }

    function classedFunction() {
      var i = -1,
        x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }

  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " +
          name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority,
          name[priority], value));
        return this;
      }
      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(
        name);
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };

  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }

    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }

    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name);
      else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ?
      styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[
        value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };

  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }

    function propertyConstant() {
      this[name] = value;
    }

    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name];
      else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ?
      propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ?
      function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      } : value == null ? function() {
        this.textContent = "";
      } : function() {
        this.textContent = value;
      }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ?
      function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      } : value == null ? function() {
        this.innerHTML = "";
      } : function() {
        this.innerHTML = value;
      }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };

  function d3_selection_creator(name) {
    return typeof name === "function" ? name : (name = d3.ns.qualify(name))
      .local ? function() {
        return this.ownerDocument.createElementNS(name.space, name.local);
      } : function() {
        return this.ownerDocument.createElementNS(this.namespaceURI, name);
      };
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(
        this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };

  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1,
      n = this.length,
      group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }

    function bind(group, groupData) {
      var i, n = group.length,
        m = groupData.length,
        n0 = Math.min(n, m),
        updateNodes = new Array(m),
        enterNodes = new Array(m),
        exitNodes = new Array(n),
        node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(),
          keyValues = new Array(n),
          keyValue;
        for (i = -1; ++i < n;) {
          if (nodeByKeyValue.has(keyValue = key.call(node = group[i],
              node.__data__, i))) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues[i] = keyValue;
        }
        for (i = -1; ++i < m;) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData,
              nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n;) {
          if (nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0;) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (; i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (; i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode =
        group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]),
      update = d3_selection([]),
      exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__,
          i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };

  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property(
      "__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [],
      subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };

  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = group.length - 1, next = group[i],
          node; --i >= 0;) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(
            node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m;) this[j].sort(comparator);
    return this.order();
  };

  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };

  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };

  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [],
      subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m;) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode,
            node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(
      this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };

  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update,
        n = group.length,
        node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n);
      return node;
    };
  }
  d3.select = function(node) {
    var group = [typeof node === "string" ? d3_select(node, d3_document) :
      node
    ];
    group.parentNode = d3_documentElement;
    return d3_selection([group]);
  };
  d3.selectAll = function(nodes) {
    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes,
      d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([group]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[
          capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };

  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type,
      i = type.indexOf("."),
      wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;

    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }

    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }

    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"),
        match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  d3_selection_onFilters.forEach(function(k) {
    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
  });

  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }

  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this,
        related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(
          target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = "onselectstart" in d3_document ? null :
    d3_vendorSymbol(d3_documentElement.style, "userSelect"),
    d3_event_dragId = 0;

  function d3_event_dragSuppress() {
    var name = ".dragsuppress-" + ++d3_event_dragId,
      click = "click" + name,
      w = d3.select(d3_window).on("touchmove" + name,
        d3_eventPreventDefault).on("dragstart" + name,
        d3_eventPreventDefault).on("selectstart" + name,
        d3_eventPreventDefault);
    if (d3_event_dragSelect) {
      var style = d3_documentElement.style,
        select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 :
    0;

  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select("body").append("svg").style({
          position: "absolute",
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: "none"
        }, "important");
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY;
      else point.x = e.clientX,
        point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    var rect = container.getBoundingClientRect();
    return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top -
      container.clientTop
    ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches =
      d3_eventSource().changedTouches;
    if (touches)
      for (var i = 0, n = touches.length, touch; i < n; ++i) {
        if ((touch = touches[i]).identifier === identifier) {
          return d3_mousePoint(container, touch);
        }
      }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"),
      origin = null,
      mousedown = dragstart(d3_noop, d3.mouse,
        d3_behavior_dragMouseSubject, "mousemove", "mouseup"),
      touchstart = dragstart(d3_behavior_dragTouchId, d3.touch,
        d3_behavior_dragTouchSubject, "touchmove", "touchend");

    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag",
        touchstart);
    }

    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this,
          target = d3.event.target,
          parent = that.parentNode,
          dispatch = event.of(that, arguments),
          dragged = 0,
          dragId = id(),
          dragName = ".drag" + (dragId == null ? "" : "-" + dragId),
          dragOffset, dragSubject = d3.select(subject()).on(move +
            dragName, moved).on(end + dragName, ended),
          dragRestore = d3_event_dragSuppress(),
          position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [dragOffset.x - position0[0], dragOffset.y -
            position0[1]
          ];
        } else {
          dragOffset = [0, 0];
        }
        dispatch({
          type: "dragstart"
        });

        function moved() {
          var position1 = position(parent, dragId),
            dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }

        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged && d3.event.target === target);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };

  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }

  function d3_behavior_dragTouchSubject() {
    return d3.event.target;
  }

  function d3_behavior_dragMouseSubject() {
    return d3_window;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6,
    ε2 = ε * ε,
    π = Math.PI,
    τ = 2 * π,
    τε = τ - ε,
    halfπ = π / 2,
    d3_radians = π / 180,
    d3_degrees = 180 / π;

  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }

  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }

  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }

  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }

  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }

  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }

  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }

  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2,
    ρ2 = 2,
    ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2];
    var dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      d1 = Math.sqrt(d2),
      b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1),
      b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1),
      r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
      r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1),
      dr = r1 - r0,
      S = (dr || Math.log(w1 / w0)) / ρ;

    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0),
          u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s +
          r0)];
      }
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s)];
    }
    interpolate.duration = S * 1e3;
    return interpolate;
  };
  d3.behavior.zoom = function() {
    var view = {
        x: 0,
        y: 0,
        k: 1
      },
      translate0, center0, center, size = [960, 500],
      scaleExtent = d3_behavior_zoomInfinity,
      duration = 250,
      zooming = 0,
      mousedown = "mousedown.zoom",
      mousemove = "mousemove.zoom",
      mouseup = "mouseup.zoom",
      mousewheelTimer, touchstart = "touchstart.zoom",
      touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom",
        "zoomend"),
      x0, x1, y0, y1;

    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom",
        mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart,
        touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments),
          view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0],
              dy = size[1],
              cx = center0 ? center0[0] : dx / 2,
              cy = center0 ? center0[1] : dy / 2,
              i = d3.interpolateZoom([(cx - view.x) / view.k, (
                cy - view.y) / view.k, dx / view.k], [(cx -
                  view1.x) / view1.k, (cy - view1.y) / view1.k,
                dx / view1.k
              ]);
            return function(t) {
              var l = i(t),
                k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [view.x, view.y];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [+_[0], +_[1]];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [+_[0], +_[1]];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [+_[0], +_[1]];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };

    function location(p) {
      return [(p[0] - view.x) / view.k, (p[1] - view.y) / view.k];
    }

    function point(l) {
      return [l[0] * view.k + view.x, l[1] * view.k + view.y];
    }

    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }

    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }

    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }

    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }

    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }

    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [view.x, view.y]
      });
    }

    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      });
      center0 = null;
    }

    function mousedowned() {
      var that = this,
        target = d3.event.target,
        dispatch = event.of(that, arguments),
        dragged = 0,
        subject = d3.select(d3_window).on(mousemove, moved).on(mouseup,
          ended),
        location0 = location(d3.mouse(that)),
        dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);

      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }

      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === target);
        zoomended(dispatch);
      }
    }

    function touchstarted() {
      var that = this,
        dispatch = event.of(that, arguments),
        locations0 = {},
        distance0 = 0,
        scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier,
        touchmove = "touchmove" + zoomName,
        touchend = "touchend" + zoomName,
        targets = [],
        subject = d3.select(that),
        dragRestore = d3_event_dragSuppress();
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);

      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] =
            location(t);
        });
        return touches;
      }

      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(),
          now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(
              view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0],
            q = touches[1],
            dx = p[0] - q[0],
            dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }

      function moved() {
        var touches = d3.touches(that),
          p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (
              distance1 = p1[1] - p0[1]) * distance1,
            scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
          l0 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }

      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }

    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer);
      else translate0 = location(center0 = center || d3.mouse(this)),
        d3_selection_interrupt.call(this), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }

    function dblclicked() {
      var p = d3.mouse(this),
        k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 :
        Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [0, Infinity];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in
    d3_document ? (d3_behavior_zoomDelta = function() {
      return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
    }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta =
      function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
      return -d3.event.detail;
    }, "MozMousePixelScroll");
  d3.color = d3_color;

  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;

  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void(this.h = +h, this.s = +s, this.l = +
      l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h
      .s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h,
      s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };

  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;

    function v(h) {
      if (h > 360) h -= 360;
      else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }

    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;

  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void(this.h = +h, this.c = +c, this.l = +
        l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h
        .c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) :
      d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) :
      new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (
      arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (
      arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };

  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;

  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void(this.l = +l, this.a = +a, this.b = +
        b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l
        .a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) :
      d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047,
    d3_lab_Y = 1,
    d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ?
      k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ?
      k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };

  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116,
      x = y + a / 500,
      z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 *
        z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z),
      d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }

  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a *
      a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }

  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }

  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }

  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r,
      1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;

  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void(this.r = ~~r, this.g = ~~g, this.b = ~
      ~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r,
      r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r,
      g, b);
  }

  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }

  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r,
      g = this.g,
      b = this.b,
      i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(
      255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(
      this.b);
  };

  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(
      16);
  }

  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0,
      g = 0,
      b = 0,
      m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
        case "hsl":
          {
            return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100,
              parseFloat(m2[2]) / 100);
          }

        case "rgb":
          {
            return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]),
              d3_rgb_parseNumber(m2[2]));
          }
      }
    }
    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g,
      color.b);
    if (format != null && format.charAt(0) === "#" && !isNaN(color =
        parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }

  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255),
      max = Math.max(r, g, b),
      d = max - min,
      h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0);
      else if (g == max) h = (b - r) / d + 2;
      else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }

  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) /
        d3_lab_X),
      y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y),
      z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }

  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055,
      2.4);
  }

  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });

  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;

  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);

  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function")
        callback = mimeType,
        mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }

  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {},
      dispatch = d3.dispatch("beforesend", "progress", "load", "error"),
      headers = {},
      request = new XMLHttpRequest(),
      responseType = null;
    if (d3_window.XDomainRequest && !("withCredentials" in request) &&
      /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond :
      request.onreadystatechange = function() {
        request.readyState > 3 && respond();
      };

    function respond() {
      var status = request.status,
        result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status <
        300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name];
      else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    ["get", "post"].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback =
        data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] =
        mimeType + ",*/*";
      if (request.setRequestHeader)
        for (var name in headers) request.setRequestHeader(name, headers[
          name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(
        mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(
        request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }

  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }

  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"),
      delimiterCode = delimiter.charCodeAt(0);

    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response :
        typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ?
          response : typedResponse(_)) : row;
      };
      return xhr;
    }

    function response(request) {
      return dsv.parse(request.responseText);
    }

    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(
          name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {},
        EOF = {},
        rows = [],
        N = text.length,
        I = 0,
        n = 0,
        t, eol;

      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++),
            k = 1;
          if (c === 10) eol = true;
          else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(),
        fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [fields.map(formatValue).join(delimiter)].concat(rows.map(
        function(row) {
          return fields.map(function(field) {
            return formatValue(row[field]);
          }).join(delimiter);
        })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };

    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }

    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' :
        text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv(" ", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval,
    d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[
      d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(
      callback) {
      setTimeout(callback, 17);
    };
  d3.timer = function(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay,
      timer = {
        c: callback,
        t: time,
        f: false,
        n: null
      };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer;
    else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };

  function d3_timer_step() {
    var now = d3_timer_mark(),
      delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };

  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(
        now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }

  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead,
      time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }

  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k",
    "M", "G", "T", "P", "E", "Z", "Y"
  ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value,
        precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };

  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }

  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal,
      locale_thousands = locale.thousands,
      locale_grouping = locale.grouping,
      locale_currency = locale.currency,
      formatGroup = locale_grouping && locale_thousands ? function(value,
        width) {
        var i = value.length,
          t = [],
          j = 0,
          g = locale_grouping[0],
          length = 0;
        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = locale_grouping[j = (j + 1) % locale_grouping.length];
        }
        return t.reverse().join(locale_thousands);
      } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier),
        fill = match[1] || " ",
        align = match[2] || ">",
        sign = match[3] || "-",
        symbol = match[4] || "",
        zfill = match[5],
        width = +match[6],
        comma = match[7],
        precision = match[8],
        type = match[9],
        scale = 1,
        prefix = "",
        suffix = "",
        integer = false,
        exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
        case "n":
          comma = true;
          type = "g";
          break;

        case "%":
          scale = 100;
          suffix = "%";
          type = "f";
          break;

        case "p":
          scale = 100;
          suffix = "%";
          type = "r";
          break;

        case "b":
        case "o":
        case "x":
        case "X":
          if (symbol === "#") prefix = "0" + type.toLowerCase();

        case "c":
          exponent = false;

        case "d":
          integer = true;
          precision = 0;
          break;

        case "s":
          scale = -1;
          type = "r";
          break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix =
        locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision));
        else if (type == "e" || type == "f") precision = Math.max(0, Math
          .min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (
          value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."),
          before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = "";
          else before = value.substring(0, j), after = value.substring(
            j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (
            zcomma ? 0 : negative.length),
          padding = length < width ? new Array(length = width - length +
            1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ?
          width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align ===
            ">" ? padding + negative + value : align === "^" ? padding.substring(
              0, length >>= 1) + negative + value + padding.substring(
              length) : negative + (zcomma ? value : padding + value)) +
          fullSuffix;
      };
    };
  }
  var d3_format_re =
    /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(
        Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15),
          p))));
    }
  });

  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {},
    d3_date = Date;

  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) :
      arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;

  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date),
        d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }

    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }

    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }

    function range(t0, t1, dt) {
      var time = ceil(t0),
        times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }

    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }

  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) *
      6e4) / 864e5);
  };
  ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday",
    "saturday"
  ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() +
        i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) /
        7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;

  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_days = locale.days,
      locale_shortDays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

    function d3_time_format(template) {
      var n = template.length;

      function format(date) {
        var string = [],
          i = -1,
          j = 0,
          c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null)
              c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ?
              " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
            y: 1900,
            m: 0,
            d: 1,
            H: 0,
            M: 0,
            S: 0,
            L: 0,
            Z: null
          },
          i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc,
          date = new(localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j);
        else if ("w" in d && ("W" in d || "U" in d)) {
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (
            date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() +
            6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }

    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0,
        n = template.length,
        m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) :
            t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);

      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(),
      d3_time_dayRe = d3_time_formatRe(locale_days),
      d3_time_dayLookup = d3_time_formatLookup(locale_days),
      d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays),
      d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays),
      d3_time_monthRe = d3_time_formatRe(locale_months),
      d3_time_monthLookup = d3_time_formatLookup(locale_months),
      d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths),
      d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };

    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()),
        i + n[0].length) : -1;
    }

    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[
        0].length) : -1;
    }

    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()),
        i + n[0].length) : -1;
    }

    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i +
        n[0].length) : -1;
    }

    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }

    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }

    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }

    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
      "-": "",
      _: " ",
      "0": "0"
    },
    d3_time_numberRe = /^\s*\d+/,
    d3_time_percentRe = /^%/;

  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) +
      string : string);
  }

  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }

  function d3_time_formatLookup(names) {
    var map = new d3_Map(),
      i = -1,
      n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }

  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }

  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -
      string,
      i + 5) : -1;
  }

  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }

  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }

  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }

  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }

  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(),
      zs = z > 0 ? "-" : "+",
      zh = abs(z) / 60 | 0,
      zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0",
      2);
  }

  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }

  function d3_time_formatMulti(formats) {
    var n = formats.length,
      i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0,
        f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [3],
    currency: ["$", ""],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
      "Friday", "Saturday"
    ],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November",
      "December"
    ],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
      "Aug", "Sep", "Oct", "Nov", "Dec"
    ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};

  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t;
      else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();

  function d3_adderSum(a, b, o) {
    var x = o.s = a + b,
      bv = x - a,
      av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };

  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features,
        i = -1,
        n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry,
        listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0],
        object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries,
        i = -1,
        n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };

  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1,
      n = coordinates.length - closed,
      coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[
      0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }

  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1,
      n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point =
        d3_noop;
    }
  };

  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) *
          d3_radians / 2 + π / 4),
        sinφ0 = Math.sin(φ);
    };

    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0,
        sdλ = dλ >= 0 ? 1 : -1,
        adλ = sdλ * dλ,
        cosφ = Math.cos(φ),
        sinφ = Math.sin(φ),
        k = sinφ0 * sinφ,
        u = cosφ0 * cosφ + k * Math.cos(adλ),
        v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }

  function d3_geo_cartesian(spherical) {
    var λ = spherical[0],
      φ = spherical[1],
      cosφ = Math.cos(φ);
    return [cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ)];
  }

  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }

  function d3_geo_cartesianCross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[
      1] - a[1] * b[0]];
  }

  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }

  function d3_geo_cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  }

  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }

  function d3_geo_spherical(cartesian) {
    return [Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2])];
  }

  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);
        else if (dλSum > ε) φ1 = 90;
        else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };

    function point(λ, φ) {
      ranges.push(range = [λ0 = λ, λ1 = λ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }

    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([λ * d3_radians, φ * d3_radians]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p),
          equatorial = [normal[1], -normal[0], 0],
          inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_,
          s = dλ > 0 ? 1 : -1,
          λi = inflection[0] * d3_degrees * s,
          antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ <
            λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }

    function lineStart() {
      bound.point = linePoint;
    }

    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }

    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }

    function ringStart() {
      d3_geo_area.lineStart();
    }

    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }

    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }

    function compareRanges(a, b) {
      return a[0] - b[0];
    }

    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x <
        range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity,
          dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a =
          b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 =
            a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [
        [NaN, NaN],
        [NaN, NaN]
      ] : [
        [λ0, φ0],
        [λ1, φ1]
      ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 =
      d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 =
      d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 =
      d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2,
      y = d3_geo_centroidY2,
      z = d3_geo_centroidZ2,
      m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y =
        d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [NaN, NaN];
    }
    return [Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) *
      d3_degrees
    ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0,
    d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1,
    d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2,
    d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };

  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(
      φ));
  }

  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }

  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };

    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians),
        x = cosφ * Math.cos(λ),
        y = cosφ * Math.sin(λ),
        z = Math.sin(φ),
        w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x -
            x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 *
          z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }

  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }

  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };

    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians),
        x = cosφ * Math.cos(λ),
        y = cosφ * Math.sin(λ),
        z = Math.sin(φ),
        cx = y0 * z - z0 * y,
        cy = z0 * x - x0 * z,
        cz = x0 * y - y0 * x,
        m = Math.sqrt(cx * cx + cy * cy + cz * cz),
        u = x0 * x + y0 * y + z0 * z,
        v = m && -d3_acos(u) / m,
        w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }

  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }

  function d3_true() {
    return true;
  }

  function d3_geo_clipPolygon(segments, compare, clipStartInside,
    interpolate, listener) {
    var subject = [],
      clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0],
        p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0],
          p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null,
          true),
        b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0],
      points, point;
    while (1) {
      var current = start,
        isSubject = true;
      while (current.v)
        if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((
              point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((
              point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }

  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0,
      a = array[0],
      b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }

  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }

  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener),
        rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(
            rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(),
              polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort,
              clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(),
              polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted =
            false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };

      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }

      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }

      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }

      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(),
        ringListener = clipLine(buffer),
        polygonStarted = false,
        polygon, ring;

      function pointRing(λ, φ) {
        ring.push([λ, φ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }

      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }

      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(),
          ringSegments = buffer.buffer(),
          segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1,
            i = -1,
            point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted =
              true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[
              1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(
          ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }

  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }

  function d3_geo_clipBufferListener() {
    var lines = [],
      line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([λ, φ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }

  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[
      0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true,
    d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [-π, -
      π / 2
    ]);

  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN,
      φ0 = NaN,
      sλ0 = NaN,
      clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π,
          dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }

  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(
        φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) *
      Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }

  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }

  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0],
      parallel = point[1],
      meridianNormal = [Math.sin(meridian), -Math.cos(meridian), 0],
      polarAngle = 0,
      winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i],
        m = ring.length;
      if (!m) continue;
      var point0 = ring[0],
        λ0 = point0[0],
        φ0 = point0[1] / 2 + π / 4,
        sinφ0 = Math.sin(φ0),
        cosφ0 = Math.cos(φ0),
        j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0],
          φ = point[1] / 2 + π / 4,
          sinφ = Math.sin(φ),
          cosφ = Math.cos(φ),
          dλ = λ - λ0,
          sdλ = dλ >= 0 ? 1 : -1,
          adλ = sdλ * dλ,
          antimeridian = adλ > π,
          k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 *
          cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0),
            d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(
            intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^
      winding & 1;
  }

  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius),
      smallRadius = cr > 0,
      notHemisphere = abs(cr) > ε,
      interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [0, -
      radius
    ] : [-π, radius - π]);

    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }

    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [λ, φ],
            point2, v = visible(λ, φ),
            c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ?
              π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) ||
              d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }

    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a),
        pb = d3_geo_cartesian(b);
      var n1 = [1, 0, 0],
        n2 = d3_geo_cartesianCross(pa, pb),
        n2n2 = d3_geo_cartesianDot(n2, n2),
        n1n2 = n2[0],
        determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = d3_geo_cartesianCross(n1, n2),
        A = d3_geo_cartesianScale(n1, c1),
        B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2,
        w = d3_geo_cartesianDot(A, u),
        uu = d3_geo_cartesianDot(u, u),
        t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2),
        q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0],
        λ1 = b[0],
        φ0 = a[1],
        φ1 = b[1],
        z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0,
        polar = abs(δλ - π) < ε,
        meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 :
          φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <=
          λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [q, d3_geo_spherical(q1)];
      }
    }

    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius,
        code = 0;
      if (λ < -r) code |= 1;
      else if (λ > r) code |= 2;
      if (φ < -r) code |= 4;
      else if (φ > r) code |= 8;
      return code;
    }
  }

  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a,
        b = line.b,
        ax = a.x,
        ay = a.y,
        bx = b.x,
        by = b.y,
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [
          [x0, y0],
          [x1, y1]
        ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +
          _[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([
      [0, 0],
      [960, 500]
    ]);
  };

  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener,
        bufferListener = d3_geo_clipBufferListener(),
        clipLine = d3_geom_clipLine(x0, y0, x1, y1),
        segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([x0, y1]),
            inside = clean && clipStartInside,
            visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside,
                interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };

      function insidePolygon(p) {
        var wn = 0,
          n = polygon.length,
          y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j <
            m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }

      function interpolate(from, to, direction, listener) {
        var a = 0,
          a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 =
            corner(to, direction)) || comparePoints(from, to) < 0 ^
          direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }

      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }

      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;

      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }

      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }

      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX,
          x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX,
          y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([x, y]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y);
          else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };

    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) <
        ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 :
        0 : direction > 0 ? 3 : 2;
    }

    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }

    function comparePoints(a, b) {
      var ca = corner(a, 1),
        cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] -
        b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }

  function d3_geo_conic(projectAt) {
    var φ0 = 0,
      φ1 = π / 3,
      m = d3_geo_projectionMutator(projectAt),
      p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [φ0 / π * 180, φ1 / π * 180];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }

  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0),
      n = (sinφ0 + Math.sin(φ1)) / 2,
      C = 1 + sinφ0 * (2 * n - sinφ0),
      ρ0 = Math.sqrt(C) / n;

    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ)];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) *
        n * n) / (2 * n))];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([96, 0]).center([-.6, 38.7]).parallels(
      [29.5, 45.5]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([154, 0]).center([-2,
      58.5
    ]).parallels([55, 65]);
    var hawaii = d3.geo.conicEqualArea().rotate([157, 0]).center([-3,
      19.9
    ]).parallels([8, 18]);
    var point, pointStream = {
        point: function(x, y) {
          point = [x, y];
        }
      },
      lower48Point, alaskaPoint, hawaiiPoint;

    function albersUsa(coordinates) {
      var x = coordinates[0],
        y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) ||
      hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska :
        y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii :
        lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream),
        alaskaStream = alaska.stream(stream),
        hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([
        [x - .455 * k, y - .238 * k],
        [x + .455 * k, y + .238 * k]
      ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([x - .307 * k, y + .201 * k]).clipExtent(
        [
          [x - .425 * k + ε, y + .12 * k + ε],
          [x - .214 * k - ε, y + .234 * k - ε]
        ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([x - .205 * k, y + .212 * k]).clipExtent(
        [
          [x - .214 * k + ε, y + .166 * k + ε],
          [x - .115 * k - ε, y + .234 * k - ε]
        ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd =
        d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };

  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };

    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1,
    d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };

  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }

  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5),
      buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };

    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }

    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }

    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }

    function lineEnd() {
      stream.point = point;
    }

    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }

  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 *
      radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };

  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }

  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };

    function nextPoint(x, y) {
      var dx = x - x0,
        dy = y - y0,
        z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }

  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }

  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };

    function nextPoint(x, y) {
      var dx = x - x0,
        dy = y - y0,
        z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }

  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };

    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }

    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }

    function pointLine(x, y) {
      context.lineTo(x, y);
    }

    function lineEnd() {
      stream.point = point;
    }

    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }

  function d3_geo_resample(project) {
    var δ2 = .5,
      cosMinDistance = Math.cos(30 * d3_radians),
      maxDepth = 16;

    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }

    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }

    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };

      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }

      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }

      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([λ, φ]),
          p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ,
          a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }

      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }

      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }

      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0,
          c00 = c0;
        resample.point = linePoint;
      }

      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00,
          maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }

    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1,
      depth, stream) {
      var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = Math.sqrt(a * a + b * b + c * c),
          φ2 = Math.asin(c /= m),
          λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 :
          Math.atan2(b, a),
          p = project(λ2, φ2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 ||
          a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m,
            c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth,
            stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5,
      projection, context, projectStream, contextStream, cacheStream;

    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+
          pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream =
          projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 =
        d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 =
        d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [d3_geo_centroidX2 / d3_geo_centroidZ2,
        d3_geo_centroidY2 / d3_geo_centroidZ2
      ] : d3_geo_centroidZ1 ? [d3_geo_centroidX1 / d3_geo_centroidZ1,
        d3_geo_centroidY1 / d3_geo_centroidZ1
      ] : d3_geo_centroidZ0 ? [d3_geo_centroidX0 / d3_geo_centroidZ0,
        d3_geo_centroidY0 / d3_geo_centroidZ0
      ] : [NaN, NaN];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 =
        d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [
        [d3_geo_pathBoundsX0, d3_geo_pathBoundsY0],
        [d3_geo_pathBoundsX1, d3_geo_pathBoundsY1]
      ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream ||
        d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() :
        new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(
        pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+
        _), +_);
      return path;
    };

    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };

  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([x * d3_degrees, y * d3_degrees]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };

  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };

  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;

  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }

  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(
        function(x, y) {
          x = project(x, y);
          return [x[0] * k + δx, δy - x[1] * k];
        }),
      k = 150,
      x = 480,
      y = 250,
      λ = 0,
      φ = 0,
      δλ = 0,
      δφ = 0,
      δγ = 0,
      δx, δy, preclip = d3_geo_clipAntimeridian,
      postclip = d3_identity,
      clipAngle = null,
      clipExtent = null,
      stream;

    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [point[0] * k + δx, δy - point[1] * k];
    }

    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [point[0] * d3_degrees, point[1] * d3_degrees];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(
        postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) :
        d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) :
        d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [x, y];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [λ * d3_degrees, φ * d3_degrees];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [δλ * d3_degrees, δφ * d3_degrees, δγ *
        d3_degrees
      ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");

    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ),
        project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }

    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }

  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }

  function d3_geo_equirectangular(λ, φ) {
    return [λ, φ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] *
      d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);

    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] *
        d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees,
        coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians,
        coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees,
        coordinates;
    };
    return forward;
  };

  function d3_geo_identityRotation(λ, φ) {
    return [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;

  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ),
        d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ?
      d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }

  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];
    };
  }

  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }

  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ),
      sinδφ = Math.sin(δφ),
      cosδγ = Math.cos(δγ),
      sinδγ = Math.sin(δγ);

    function rotation(λ, φ) {
      var cosφ = Math.cos(φ),
        x = Math.cos(λ) * cosφ,
        y = Math.sin(λ) * cosφ,
        z = Math.sin(φ),
        k = z * cosδφ + x * sinδφ;
      return [Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ),
        d3_asin(k * cosδγ + y * sinδγ)
      ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ),
        x = Math.cos(λ) * cosφ,
        y = Math.sin(λ) * cosφ,
        z = Math.sin(φ),
        k = z * cosδγ - y * sinδγ;
      return [Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ),
        d3_asin(k * cosδφ - x * sinδφ)
      ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [0, 0],
      angle, precision = 6,
      interpolate;

    function circle() {
      var center = typeof origin === "function" ? origin.apply(this,
          arguments) : origin,
        rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] *
          d3_radians, 0).invert,
        ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ring]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians,
        precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (
        precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };

  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius),
      sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -=
        step) {
        listener.point((point = d3_geo_spherical([cr, -sr * Math.cos(t), -
          sr * Math.sin(t)
        ]))[0], point[1]);
      }
    };
  }

  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians,
      φ0 = a[1] * d3_radians,
      φ1 = b[1] * d3_radians,
      sinΔλ = Math.sin(Δλ),
      cosΔλ = Math.cos(Δλ),
      sinφ0 = Math.sin(φ0),
      cosφ0 = Math.cos(φ0),
      sinφ1 = Math.sin(φ1),
      cosφ1 = Math.cos(φ1),
      t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 *
        sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 *
      cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x, y, X, Y, precision = 2.5;

    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }

    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(
        Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(
        x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(
        function(y) {
          return abs(y % DY) > ε;
        }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(
          1), Y(Y0).reverse().slice(1))]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [
        [X0, Y0],
        [X1, Y1]
      ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [
        [x0, y0],
        [x1, y1]
      ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [DX, DY];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [dx, dy];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([
      [-180, -90 + ε],
      [180, 90 - ε]
    ]).minorExtent([
      [-180, -80 - ε],
      [180, 80 + ε]
    ]);
  };

  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [x, y];
      });
    };
  }

  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [x, y];
      });
    };
  }

  function d3_source(d) {
    return d.source;
  }

  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source,
      source_, target = d3_target,
      target_;

    function greatArc() {
      return {
        type: "LineString",
        coordinates: [source_ || source.apply(this, arguments), target_ ||
          target.apply(this, arguments)
        ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments),
        target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] *
      d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };

  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0),
      sy0 = Math.sin(y0),
      cy1 = Math.cos(y1),
      sy1 = Math.sin(y1),
      kx0 = cy0 * Math.cos(x0),
      ky0 = cy0 * Math.sin(x0),
      kx1 = cy1 * Math.cos(x1),
      ky1 = cy1 * Math.sin(x1),
      d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 *
        d3_haversin(x1 - x0))),
      k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k,
        A = Math.sin(d - t) * k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
      return [Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x *
        x + y * y)) * d3_degrees];
    } : function() {
      return [x0 * d3_degrees, y0 * d3_degrees];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };

  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 =
        Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };

    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians),
        cosφ = Math.cos(φ),
        t = abs((λ *= d3_radians) - λ0),
        cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t +
          (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ +
        cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }

  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ),
        cosφ = Math.cos(φ),
        k = scale(cosλ * cosφ);
      return [k * cosφ * Math.sin(λ), k * Math.sin(φ)];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y),
        c = angle(ρ),
        sinc = Math.sin(c),
        cosc = Math.cos(c);
      return [Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ)];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;

  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0),
      t = function(φ) {
        return Math.tan(π / 4 + φ / 2);
      },
      n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(
        t(φ1) / t(φ0)),
      F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;

    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ)];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y,
        ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 /
        n)) - halfπ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;

  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0),
      n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0),
      G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;

    function forward(λ, φ) {
      var ρ = G - φ;
      return [ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ)];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x +
        ρ0_y * ρ0_y)];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;

  function d3_geo_mercator(λ, φ) {
    return [λ, Math.log(Math.tan(π / 4 + φ / 2))];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [x, 2 * Math.atan(Math.exp(y)) - halfπ];
  };

  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project),
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(),
            t = translate();
          clipExtent([
            [t[0] - k, t[1] - k],
            [t[0] + k, t[1] + k]
          ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;

  function d3_geo_transverseMercator(λ, φ) {
    return [Math.log(Math.tan(π / 4 + φ / 2)), -λ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [-y, 2 * Math.atan(Math.exp(x)) - halfπ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator),
      center = projection.center,
      rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) :
        (_ = rotate(), [_[0], _[1], _[2] - 90]);
    };
    return rotate([0, 0, 90]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};

  function d3_geom_pointX(d) {
    return d[0];
  }

  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX,
      y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);

    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x),
        fy = d3_functor(y),
        i, n = data.length,
        points = [],
        flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([+fx.call(this, data[i], i), +fy.call(this, data[i],
          i), i]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([points[i][0], -points[i]
        [1]
      ]);
      var upper = d3_geom_hullUpper(points),
        lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0],
        skipRight = lower[lower.length - 1] === upper[upper.length - 1],
        polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[
        upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(
        data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };

  function d3_geom_hullUpper(points) {
    var n = points.length,
      hull = [0, 1],
      hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]],
          points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }

  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1,
      n = this.length,
      a, b = this[n - 1],
      area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1,
      n = this.length,
      x = 0,
      y = 0,
      a, b = this[n - 1],
      c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [x * k, y * k];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject),
      i = -1,
      n = this.length - d3_geom_polygonClosed(this),
      j, m, a = this[n - 1],
      b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };

  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }

  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0],
      x3 = a[0],
      x21 = d[0] - x1,
      x43 = b[0] - x3,
      y1 = c[1],
      y3 = a[1],
      y21 = d[1] - y1,
      y43 = b[1] - y3,
      ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [x1 + ua * x21, y1 + ua * y21];
  }

  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0],
      b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches,
    d3_geom_voronoiBeachPool = [],
    d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles,
    d3_geom_voronoiCirclePool = [];

  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }

  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }

  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }

  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = {
        x: x,
        y: y
      },
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle
        .cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle
        .cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length,
      iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null,
      vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }

  function d3_geom_voronoiAddBeach(site) {
    var x = site.x,
      directrix = site.y,
      lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L;
      else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc
        .site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site,
      ax = lSite.x,
      ay = lSite.y,
      bx = site.x - ax,
      by = site.y - ay,
      rSite = rArc.site,
      cx = rSite.x - ax,
      cy = rSite.y - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = {
        x: (cy * hb - by * hc) / d + ax,
        y: (bx * hc - cx * hb) / d + ay
      };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }

  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site,
      rfocx = site.x,
      rfocy = site.y,
      pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x,
      lfocy = site.y,
      plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 *
      plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }

  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }

  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges,
      iHalfEdge = halfEdges.length,
      edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };

  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0],
      x1 = extent[1][0],
      y0 = extent[0][1],
      y1 = extent[1][1],
      x2, y2, x3, y3, cells = d3_geom_voronoiCells,
      iCell = cells.length,
      cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x,
          y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(
            d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) <
              ε && y1 - y3 > ε ? {
                x: x0,
                y: abs(x2 - x0) < ε ? y2 : y1
              } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
                x: abs(y2 - y1) < ε ? x2 : x1,
                y: y1
              } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
                x: x1,
                y: abs(x2 - x1) < ε ? y2 : y0
              } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
                x: abs(y2 - y0) < ε ? x2 : x0,
                y: y0
              } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }

  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }

  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }

  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P,
      rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x,
      by = cSite.y,
      ax = lSite.x - bx,
      ay = lSite.y - by,
      cx = rSite.x - bx,
      cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d,
      cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null,
      node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L;
        else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R;
        else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }

  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }

  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges,
      clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0],
        extent[1][1]),
      i = edges.length,
      e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x -
          e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }

  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a,
      x0 = extent[0][0],
      x1 = extent[1][0],
      y0 = extent[0][1],
      y1 = extent[1][1],
      lSite = edge.l,
      rSite = edge.r,
      lx = lSite.x,
      ly = lSite.y,
      rx = rSite.x,
      ry = rSite.y,
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        };
        else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        };
        else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          };
          else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          };
          else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          };
          else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          };
          else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }

  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }

  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(
      edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(
      edge, rSite, lSite));
    return edge;
  }

  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }

  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }

  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a,
      vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) :
      edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(
        va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };

  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }

  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U,
        sibling, left = node.L,
        right = node.R,
        next, red;
      if (!left) next = right;
      else if (!right) next = left;
      else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next;
        else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };

  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node,
      q = node.R,
      parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q;
      else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }

  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node,
      q = node.L,
      parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q;
      else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }

  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }

  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(),
      x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y &&
          site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(
      bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges =
      d3_geom_voronoiCells = null;
    return diagram;
  }

  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX,
      y = d3_geom_pointY,
      fx = x,
      fy = y,
      clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);

    function voronoi(data) {
      var polygons = new Array(data.length),
        x0 = clipExtent[0][0],
        y0 = clipExtent[0][1],
        x1 = clipExtent[1][0],
        y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(
        cell, i) {
        var edges = cell.edges,
          site = cell.site,
          polygon = polygons[i] = edges.length ? edges.map(function(e) {
            var s = e.start();
            return [s.x, s.y];
          }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <=
          y1 ? [
            [x0, y1],
            [x1, y1],
            [x1, y0],
            [x0, y0]
          ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }

    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site,
          edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder),
          j = -1,
          m = edges.length,
          e0, s0, e1 = edges[m - 1].edge,
          s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(
              site, s0, s1) < 0) {
            triangles.push([data[i], data[s0.i], data[s1.i]]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent ===
        d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent ===
        d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [
        [0, 0], _
      ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [
    [-1e6, -1e6],
    [1e6, 1e6]
  ];

  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX,
      y = d3_geom_pointY,
      compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }

    function quadtree(data) {
      var d, fx = d3_functor(x),
        fy = d3_functor(y),
        xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat)
          for (i = 0; i < n; ++i) {
            d = data[i];
            if (d.x < x1_) x1_ = d.x;
            if (d.y < y1_) y1_ = d.y;
            if (d.x > x2_) x2_ = d.x;
            if (d.y > y2_) y2_ = d.y;
            xs.push(d.x);
            ys.push(d.y);
          } else
            for (i = 0; i < n; ++i) {
              var x_ = +fx(d = data[i], i),
                y_ = +fy(d, i);
              if (x_ < x1_) x1_ = x_;
              if (y_ < y1_) y1_ = y_;
              if (x_ > x2_) x2_ = x_;
              if (y_ > y2_) y2_ = y_;
              xs.push(x_);
              ys.push(y_);
            }
      }
      var dx = x2_ - x1_,
        dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx;
      else x2_ = x1_ + dy;

      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x,
            ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }

      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5,
          ym = (y1 + y2) * .5,
          right = x >= xm,
          below = y >= ym,
          i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm;
        else x2 = xm;
        if (below) y1 = ym;
        else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_,
          x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [
        [x1, y1],
        [x2, y2]
      ];
      if (_ == null) x1 = y1 = x2 = y2 = null;
      else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0],
        y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [x2 - x1, y2 -
        y1
      ];
      if (_ == null) x1 = y1 = x2 = y2 = null;
      else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };

  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }

  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }

  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }

  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5,
        sy = (y1 + y2) * .5,
        children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }

  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity,
      closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - point[0],
          dy = y - point[1],
          distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes,
        xm = (x1 + x2) * .5,
        ym = (y1 + y2) * .5,
        right = x >= xm,
        below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
          case 0:
            find(node, x1, y1, xm, ym);
            break;

          case 1:
            find(node, xm, y1, x2, ym);
            break;

          case 2:
            find(node, x1, ym, xm, y2);
            break;

          case 3:
            find(node, xm, ym, x2, y2);
            break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;

  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r,
      ag = a.g,
      ab = a.b,
      br = b.r - ar,
      bg = b.g - ag,
      bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(
        ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;

  function d3_interpolateObject(a, b) {
    var i = {},
      c = {},
      k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;

  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;

  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex =
      0,
      am, bm, bs, i = -1,
      s = [],
      q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm =
        d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs;
        else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm;
        else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs;
      else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA =
    /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;

  function d3_interpolate(a, b) {
    var i = d3.interpolators.length,
      f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b)));
    return f;
  }
  d3.interpolators = [function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(
        b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ?
      d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t ===
      "object" && isNaN(b) ? d3_interpolateObject :
      d3_interpolateNumber)(a, b);
  }];
  d3.interpolateArray = d3_interpolateArray;

  function d3_interpolateArray(a, b) {
    var x = [],
      c = [],
      na = a.length,
      nb = b.length,
      n0 = Math.min(a.length, b.length),
      i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (; i < na; ++i) c[i] = a[i];
    for (; i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"),
      t = i >= 0 ? name.slice(0, i) : name,
      m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };

  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }

  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }

  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }

  function d3_ease_quad(t) {
    return t * t;
  }

  function d3_ease_cubic(t) {
    return t * t * t;
  }

  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t,
      t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }

  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }

  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }

  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }

  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }

  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a);
    else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }

  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }

  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -=
        1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) *
      t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;

  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h,
      ac = a.c,
      al = a.l,
      bh = b.h - ah,
      bc = b.c - ac,
      bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;
    else if (bh > 180) bh -= 360;
    else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;

  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h,
      as = a.s,
      al = a.l,
      bh = b.h - ah,
      bs = b.s - as,
      bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;
    else if (bh > 180) bh -= 360;
    else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;

  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l,
      aa = a.a,
      ab = a.b,
      bl = b.l - al,
      ba = b.a - aa,
      bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;

  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };

  function d3_transform(m) {
    var r0 = [m.a, m.b],
      r1 = [m.c, m.d],
      kx = d3_transformNormalize(r0),
      kz = d3_transformDot(r0, r1),
      ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) *
      d3_degrees;
    this.translate = [m.e, m.f];
    this.scale = [kx, ky];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate +
      ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };

  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }

  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }

  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;

  function d3_interpolateTransform(a, b) {
    var s = [],
      q = [],
      n, A = d3.transform(a),
      B = d3.transform(b),
      ta = A.translate,
      tb = B.translate,
      ra = A.rotate,
      rb = B.rotate,
      wa = A.skew,
      wb = B.skew,
      ka = A.scale,
      kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push("translate(", null, ",", null, ")");
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    } else {
      s.push("");
    }
    if (ra != rb) {
      if (ra - rb > 180) rb += 360;
      else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(s.pop() + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + "rotate(" + rb + ")");
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + "skewX(" + wb + ")");
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + "scale(", null, ",", null, ")");
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + "scale(" + kb + ")");
    }
    n = q.length;
    return function(t) {
      var i = -1,
        o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }

  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }

  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [],
        i = -1,
        n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };

  function d3_layout_bundlePath(link) {
    var start = link.source,
      end = link.target,
      lca = d3_layout_bundleLeastCommonAncestor(start, end),
      points = [start];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }

  function d3_layout_bundleAncestors(node) {
    var ancestors = [],
      parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }

  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a),
      bNodes = d3_layout_bundleAncestors(b),
      aNode = aNodes.pop(),
      bNode = bNodes.pop(),
      sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {},
      chords, groups, matrix, n, padding = 0,
      sortGroups, sortSubgroups, sortChords;

    function relayout() {
      var subgroups = {},
        groupSums = [],
        groupIndex = d3.range(n),
        subgroupIndex = [],
        k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j],
            target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }

    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source
          .value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {},
      event = d3.dispatch("start", "tick", "end"),
      size = [1, 1],
      drag, alpha, friction = .9,
      linkDistance = d3_layout_forceLinkDistance,
      linkStrength = d3_layout_forceLinkStrength,
      charge = -30,
      chargeDistance2 = d3_layout_forceChargeDistance2,
      gravity = .1,
      theta2 = .64,
      nodes = [],
      links = [],
      distances, strengths, charges;

    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x,
            dy = quad.cy - node.y,
            dw = x2 - x1,
            dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length,
        m = links.length,
        q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) /
            l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k)
          while (++i < n) {
            o = nodes[i];
            o.x += (x - o.x) * k;
            o.y += (y - o.y) * k;
          }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha,
          charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) alpha = x;
        else alpha = 0;
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length,
        m = links.length,
        w = size[0],
        h = size[1],
        neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function")
        for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this,
          links[i], i);
      else
        for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function")
        for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this,
          links[i], i);
      else
        for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function")
        for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i],
          i);
      else
        for (i = 0; i < n; ++i) charges[i] = charge;

      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i],
          j = -1,
          m = candidates.length,
          x;
        while (++j < m)
          if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(
        "dragstart.force", d3_layout_forceDragstart).on("drag.force",
        dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on(
        "mouseout.force", d3_layout_forceMouseout).call(drag);
    };

    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };

  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }

  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }

  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }

  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }

  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0,
      cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes,
        n = nodes.length,
        i = -1,
        c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20,
    d3_layout_forceLinkStrength = 1,
    d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort,
      children = d3_layout_hierarchyChildren,
      value = d3_layout_hierarchyValue;

    function hierarchy(root) {
      var stack = [root],
        nodes = [],
        node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n =
            childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) ||
            0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy,
            node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };

  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }

  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [node];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }

  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [node],
      nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1,
          n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }

  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }

  function d3_layout_hierarchyValue(d) {
    return d.value;
  }

  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }

  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(),
      size = [1, 1];

    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1,
          n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }

    function depth(node) {
      var children = node.children,
        d = 0;
      if (children && (n = children.length)) {
        var i = -1,
          n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }

    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number,
      sort = d3_layout_pieSortByValue,
      startAngle = 0,
      endAngle = τ,
      padAngle = 0;

    function pie(data) {
      var n = data.length,
        values = data.map(function(d, i) {
          return +value.call(pie, d, i);
        }),
        a = +(typeof startAngle === "function" ? startAngle.apply(this,
          arguments) : startAngle),
        da = (typeof endAngle === "function" ? endAngle.apply(this,
          arguments) : endAngle) - a,
        p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ?
          padAngle.apply(this, arguments) : padAngle)),
        pa = p * (da < 0 ? -1 : 1),
        k = (da - n * pa) / d3.sum(values),
        index = d3.range(n),
        arcs = [],
        v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ?
        function(i, j) {
          return values[j] - values[i];
        } : function(i, j) {
          return sort(data[i], data[j]);
        });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity,
      order = d3_layout_stackOrderDefault,
      offset = d3_layout_stackOffsetZero,
      out = d3_layout_stackOut,
      x = d3_layout_stackX,
      y = d3_layout_stackY;

    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [x.call(stack, v, i), y.call(stack, v, i)];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length,
        n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[
            i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) ||
        d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(
        x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };

  function d3_layout_stackX(d) {
    return d.x;
  }

  function d3_layout_stackY(d) {
    return d.y;
  }

  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length,
        i, j, max = data.map(d3_layout_stackMaxIndex),
        sums = data.map(d3_layout_stackReduceSum),
        index = d3.range(n).sort(function(a, b) {
          return max[a] - max[b];
        }),
        top = 0,
        bottom = 0,
        tops = [],
        bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length,
        m = data[0].length,
        sums = [],
        max = 0,
        i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length,
        x = data[0],
        m = x.length,
        i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 *
              dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length,
        m = data[0].length,
        k = 1 / n,
        i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o)
          for (i = 0; i < n; i++) data[i][j][1] /= o;
        else
          for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });

  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }

  function d3_layout_stackOffsetZero(data) {
    var j = -1,
      m = data[0].length,
      y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }

  function d3_layout_stackMaxIndex(array) {
    var i = 1,
      j = 0,
      v = array[0][1],
      k, n = array.length;
    for (; i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }

  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }

  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true,
      valuer = Number,
      ranger = d3_layout_histogramRange,
      binner = d3_layout_histogramBinSturges;

    function histogram(data, i) {
      var bins = [],
        values = data.map(valuer, this),
        range = ranger.call(this, values, i),
        thresholds = binner.call(this, range, values, i),
        bin, i = -1,
        n = values.length,
        m = thresholds.length - 1,
        k = frequency ? 1 : 1 / n,
        x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };

  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) /
      Math.LN2 + 1));
  }

  function d3_layout_histogramBinFixed(range, n) {
    var x = -1,
      b = +range[0],
      m = (range[1] - b) / n,
      f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }

  function d3_layout_histogramRange(values) {
    return [d3.min(values), d3.max(values)];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort),
      padding = 0,
      size = [1, 1],
      radius;

    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i),
        root = nodes[0],
        w = size[0],
        h = size[1],
        r = radius == null ? Math.sqrt : typeof radius === "function" ?
        radius : function() {
          return radius;
        };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 *
          root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(
        2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };

  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }

  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }

  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }

  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x,
      dy = b.y - a.y,
      dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }

  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity,
      xMax = -Infinity,
      yMin = Infinity,
      yMax = -Infinity,
      a, b, c, i, j, k, n;

    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0,
            s1 = 1,
            s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b =
              j);
            else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2,
      cy = (yMin + yMax) / 2,
      cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }

  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }

  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }

  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1,
        n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }

  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r,
        dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc),
        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da *
          da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null),
      separation = d3_layout_treeSeparation,
      size = [1, 1],
      nodeSize = null;

    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i),
        root0 = nodes[0],
        root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -
        root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode);
      else {
        var left = root0,
          right = root0,
          bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x,
          kx = size[0] / (right.x + separation(right, left) / 2 + tx),
          ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }

    function wrapTree(root0) {
      var root1 = {
          A: null,
          children: [root0]
        },
        queue = [root1],
        node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i <
          n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }

    function firstWalk(v) {
      var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) /
          2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }

    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }

    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(
            vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor),
              v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }

    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };

  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }

  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }

  function d3_layout_treeRight(v) {
    var children = v.children,
      n;
    return (n = children.length) ? children[n - 1] : v.t;
  }

  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }

  function d3_layout_treeShift(v) {
    var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }

  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null),
      separation = d3_layout_treeSeparation,
      size = [1, 1],
      nodeSize = false;

    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i),
        root = nodes[0],
        previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) :
            0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root),
        right = d3_layout_clusterRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };

  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }

  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }

  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) :
      node;
  }

  function d3_layout_clusterRight(node) {
    var children = node.children,
      n;
    return children && (n = children.length) ? d3_layout_clusterRight(
      children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(),
      round = Math.round,
      size = [1, 1],
      padding = null,
      pad = d3_layout_treemapPadNull,
      sticky = false,
      stickies, mode = "squarify",
      ratio = .5 * (1 + Math.sqrt(5));

    function scale(children, k) {
      var i = -1,
        n = children.length,
        child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }

    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node),
          row = [],
          remaining = children.slice(),
          child, best = Infinity,
          score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy :
          mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx :
          Math.min(rect.dx, rect.dy),
          n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }

    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node),
          remaining = children.slice(),
          child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }

    function worst(row, u) {
      var s = row.area,
        r, rmax = 0,
        rmin = Infinity,
        i = -1,
        n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) :
        Infinity;
    }

    function position(row, u, rect, flush) {
      var i = -1,
        n = row.length,
        x = rect.x,
        y = rect.y,
        v = u ? round(row.area / u) : 0,
        o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) :
            0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) :
            0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }

    function treemap(d) {
      var nodes = stickies || hierarchy(d),
        root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies) hierarchy.revalue(root);
      scale([root], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;

      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) :
          d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p,
            p
          ] : p);
      }

      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type =
          typeof x) === "function" ? padFunction : type === "number" ?
        (x = [x, x, x, x],
          padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };

  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }

  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3],
      y = node.y + padding[0],
      dx = node.dx - padding[1] - padding[3],
      dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};

  function d3_scaleExtent(domain) {
    var start = domain[0],
      stop = domain[domain.length - 1];
    return start < stop ? [start, stop] : [stop, start];
  }

  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }

  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]),
      i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }

  function d3_scale_nice(domain, nice) {
    var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }

  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };

  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [],
      i = [],
      j = 0,
      k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false);
  };

  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;

    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ?
        d3_scale_polylinear : d3_scale_bilinear,
        uninterpolate = clamp ? d3_uninterpolateClamp :
        d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }

    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }

  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate",
      "clamp");
  }

  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(
      domain, m)[2]));
  }

  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain),
      span = extent[1] - extent[0],
      step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)),
      err = m / span * step;
    if (err <= .15) step *= 10;
    else if (err <= .35) step *= 5;
    else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }

  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }

  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(
          range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[
        8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };

  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }

  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p -
        d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) +
      +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([0, 1]), 10, true, [1,
      10
    ]);
  };

  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) /
        Math.log(base);
    }

    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }

    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math :
        d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain),
        ticks = [],
        u = extent[0],
        v = extent[1],
        i = Math.floor(log(u)),
        j = Math.ceil(log(v)),
        n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (; i < j; i++)
            for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (; i++ < j;)
            for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat;
      else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length),
        f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12,
          Math.floor),
        e;
      return function(d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"),
    d3_scale_logNiceNegative = {
      floor: function(x) {
        return -Math.ceil(-x);
      },
      ceil: function(x) {
        return -Math.floor(-x);
      }
    };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [0, 1]);
  };

  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent),
      powb = d3_scale_powPow(1 / exponent);

    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }

  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [
        []
      ]
    });
  };

  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;

    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x,
        domain.push(x)) : NaN)) - 1) % range.length];
    }

    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1,
        n = x.length,
        xi;
      while (++i < n)
        if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0],
        stop = x[1],
        step = domain.length < 2 ? (start = (start + stop) / 2,
          0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0],
        stop = x[1],
        step = domain.length < 2 ? (start = stop = Math.round((start +
            stop) / 2),
          0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start -
        (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0],
        start = x[reverse - 0],
        stop = x[1 - reverse],
        step = (stop - start) / (domain.length - padding + 2 *
          outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0],
        start = x[reverse - 0],
        stop = x[1 - reverse],
        step = Math.floor((stop - start) / (domain.length - padding + 2 *
          outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length -
        padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [2062260, 16744206, 2924588, 14034728, 9725885,
    9197131, 14907330, 8355711, 12369186, 1556175
  ].map(d3_rgbString);
  var d3_category20 = [2062260, 11454440, 16744206, 16759672, 2924588,
    10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140,
    14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175,
    10410725
  ].map(d3_rgbString);
  var d3_category20b = [3750777, 5395619, 7040719, 10264286, 6519097,
    9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932,
    8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509,
    14589654
  ].map(d3_rgbString);
  var d3_category20c = [3244733, 7057110, 10406625, 13032431, 15095053,
    16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504,
    7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877,
    14277081
  ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };

  function d3_scale_quantile(domain, range) {
    var thresholds;

    function rescale() {
      var k = 0,
        q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }

    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [NaN, NaN] : [y > 0 ? thresholds[y - 1] : domain[0],
        y < thresholds.length ? thresholds[y] : domain[domain.length -
          1]
      ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [0, 1]);
  };

  function d3_scale_quantize(x0, x1, range) {
    var kx, i;

    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }

    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [x0, x1];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [y, y + 1 / kx];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([.5], [0, 1]);
  };

  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [domain[y - 1], domain[y]];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([0, 1]);
  };

  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};

  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius,
      outerRadius = d3_svg_arcOuterRadius,
      cornerRadius = d3_zero,
      padRadius = d3_svg_arcAuto,
      startAngle = d3_svg_arcStartAngle,
      endAngle = d3_svg_arcEndAngle,
      padAngle = d3_svg_arcPadAngle;

    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)),
        r1 = Math.max(0, +outerRadius.apply(this, arguments)),
        a0 = startAngle.apply(this, arguments) - halfπ,
        a1 = endAngle.apply(this, arguments) - halfπ,
        da = Math.abs(a1 - a0),
        cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0,
        1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0,
        p1 = 0,
        x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) :
          +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this,
          arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var oc = x3 == null ? [x2, y2] : x1 == null ? [x0, y0] :
          d3_geom_polygonIntersect([x0, y0], [x3, y3], [x1, y1], [x2, y2]),
          ax = x0 - oc[0],
          ay = y0 - oc[1],
          bx = x1 - oc[0],
          by = y1 - oc[1],
          kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax *
            ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
          lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
        if (x1 != null) {
          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)),
            t30 = d3_svg_arcCornerTangents(x3 == null ? [x2, y2] : [x3,
              y3
            ], [x0, y0], r1, rc1, cw),
            t12 = d3_svg_arcCornerTangents([x1, y1], [x2, y2], r1, rc1,
              cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ",
              t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(
                t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw,
              " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]
            );
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ",
              t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)),
            t03 = d3_svg_arcCornerTangents([x0, y0], [x3, y3], r0, -rc0,
              cw),
            t21 = d3_svg_arcCornerTangents([x2, y2], x1 == null ? [x0, y0] : [
              x1, y1
            ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ",
              t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[
                1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw,
              " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]
            );
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ",
              t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw,
          " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 -
          cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }

    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -
        r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(
          this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this,
          arguments)) / 2 - halfπ;
      return [Math.cos(a) * r, Math.sin(a) * r];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";

  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }

  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }

  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }

  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }

  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }

  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }

  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0],
      y01 = p0[1] - p1[1],
      lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x1 = p0[0] + ox,
      y1 = p0[1] + oy,
      x2 = p1[0] + ox,
      y2 = p1[1] + oy,
      x3 = (x1 + x2) / 2,
      y3 = (y1 + y2) / 2,
      dx = x2 - x1,
      dy = y2 - y1,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x1 * y2 - x2 * y1,
      d = (dy < 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x3,
      dy0 = cy0 - y3,
      dx1 = cx1 - x3,
      dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [
      [cx0 - ox, cy0 - oy],
      [cx0 * r1 / r, cy0 * r1 / r]
    ];
  }

  function d3_svg_line(projection) {
    var x = d3_geom_pointX,
      y = d3_geom_pointY,
      defined = d3_true,
      interpolate = d3_svg_lineLinear,
      interpolateKey = interpolate.key,
      tension = .7;

    function line(data) {
      var segments = [],
        points = [],
        i = -1,
        n = data.length,
        d, fx = d3_functor(x),
        fy = d3_functor(y);

      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([+fx.call(this, d, i), +fy.call(this, d, i)]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _;
      else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) ||
        d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });

  function d3_svg_lineLinear(points) {
    return points.join("L");
  }

  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + "Z";
  }

  function d3_svg_lineStep(points) {
    var i = 0,
      n = points.length,
      p = points[0],
      path = [p[0], ",", p[1]];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[
      1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }

  function d3_svg_lineStepBefore(points) {
    var i = 0,
      n = points.length,
      p = points[0],
      path = [p[0], ",", p[1]];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }

  function d3_svg_lineStepAfter(points) {
    var i = 0,
      n = points.length,
      p = points[0],
      path = [p[0], ",", p[1]];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }

  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] +
      d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(
        points, tension));
  }

  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] +
      d3_svg_lineHermite((points.push(points[0]),
        points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(
        points, [points[1]]), tension));
  }

  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] +
      d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points,
        tension));
  }

  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length !=
      tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length,
      path = "",
      p0 = points[0],
      p = points[1],
      t0 = tangents[0],
      t = t0,
      pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) +
        "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] -
        t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] +
          "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) +
        "," + lp[0] + "," + lp[1];
    }
    return path;
  }

  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [],
      a = (1 - tension) / 2,
      p0, p1 = points[0],
      p2 = points[1],
      i = 1,
      n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])]);
    }
    return tangents;
  }

  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1,
      n = points.length,
      pi = points[0],
      x0 = pi[0],
      y0 = pi[1],
      px = [x0, x0, x0, (pi = points[1])[0]],
      py = [y0, y0, y0, pi[1]],
      path = [x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px),
        ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
      ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }

  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [],
      i = -1,
      n = points.length,
      pi, px = [0],
      py = [0];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," +
      d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }

  function d3_svg_lineBasisClosed(points) {
    var path, i = -1,
      n = points.length,
      m = n + 4,
      pi, px = [],
      py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",",
      d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
    ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }

  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0],
        y0 = points[0][1],
        dx = points[n][0] - x0,
        dy = points[n][1] - y0,
        i = -1,
        p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }

  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [0, 2 / 3, 1 / 3, 0],
    d3_svg_lineBasisBezier2 = [0, 1 / 3, 2 / 3, 0],
    d3_svg_lineBasisBezier3 = [0, 1 / 6, 2 / 3, 1 / 6];

  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",",
      d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(
        d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(
        d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(
        d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(
        d3_svg_lineBasisBezier3, y));
  }

  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }

  function d3_svg_lineFiniteDifferences(points) {
    var i = 0,
      j = points.length - 1,
      m = [],
      p0 = points[0],
      p1 = points[1],
      d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }

  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [],
      d, a, b, s, m = d3_svg_lineFiniteDifferences(points),
      i = -1,
      j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) /
        (6 * (1 + m[i] * m[i]));
      tangents.push([s || 0, m[i] * s || 0]);
    }
    return tangents;
  }

  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] +
      d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };

  function d3_svg_lineRadial(points) {
    var point, i = -1,
      n = points.length,
      r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }

  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX,
      x1 = d3_geom_pointX,
      y0 = 0,
      y1 = d3_geom_pointY,
      defined = d3_true,
      interpolate = d3_svg_lineLinear,
      interpolateKey = interpolate.key,
      interpolateReverse = interpolate,
      L = "L",
      tension = .7;

    function area(data) {
      var segments = [],
        points0 = [],
        points1 = [],
        i = -1,
        n = data.length,
        d, fx0 = d3_functor(x0),
        fy0 = d3_functor(y0),
        fx1 = x0 === x1 ? function() {
          return x;
        } : d3_functor(x1),
        fy1 = y0 === y1 ? function() {
          return y;
        } : d3_functor(y1),
        x, y;

      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L,
          interpolateReverse(projection(points0.reverse()), tension), "Z"
        );
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([x = +fx0.call(this, d, i), y = +fy0.call(this, d, i)]);
          points1.push([+fx1.call(this, d, i), +fy1.call(this, d, i)]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _;
      else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) ||
        d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source,
      target = d3_target,
      radius = d3_svg_chordRadius,
      startAngle = d3_svg_arcStartAngle,
      endAngle = d3_svg_arcEndAngle;

    function chord(d, i) {
      var s = subgroup(this, source, d, i),
        t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ?
        curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(
          t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }

    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i),
        r = radius.call(self, subgroup, i),
        a0 = startAngle.call(self, subgroup, i) - halfπ,
        a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [r * Math.cos(a0), r * Math.sin(a0)],
        p1: [r * Math.cos(a1), r * Math.sin(a1)]
      };
    }

    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }

    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }

    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };

  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source,
      target = d3_target,
      projection = d3_svg_diagonalProjection;

    function diagonal(d, i) {
      var p0 = source.call(this, d, i),
        p3 = target.call(this, d, i),
        m = (p0.y + p3.y) / 2,
        p = [p0, {
          x: p0.x,
          y: m
        }, {
          x: p3.x,
          y: m
        }, p3];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };

  function d3_svg_diagonalProjection(d) {
    return [d.x, d.y];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(),
      projection = d3_svg_diagonalProjection,
      projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(
        d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };

  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments),
        r = d[0],
        a = d[1] - halfπ;
      return [r * Math.cos(a), r * Math.sin(a)];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType,
      size = d3_svg_symbolSize;

    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) ||
        d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };

  function d3_svg_symbolSize() {
    return 64;
  }

  function d3_svg_symbolType() {
    return "circle";
  }

  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," +
      r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" +
        r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r +
        "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)),
        rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx +
        ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," +
        r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
        ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -
        ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
        ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry +
        "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3),
    d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId,
      ns = d3_transitionNamespace(name),
      subgroups = [],
      subgroup, node, transition = d3_transitionInherit || {
        time: Date.now(),
        ease: d3_ease_cubicInOut,
        delay: 0,
        duration: 250
      };
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id,
          transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt :
      d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(
    d3_transitionNamespace());

  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, active;
      if ((lock = this[ns]) && (active = lock[lock.active])) {
        if (--lock.count) delete lock[lock.active];
        else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__,
          active.index);
      }
    };
  }

  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [],
    d3_transitionId = 0,
    d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ?
      selection.transition(name) : selection : d3_selectionRoot.transition(
        selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id,
      ns = this.namespace,
      subgroups = [],
      subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__,
            i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id,
      ns = this.namespace,
      subgroups = [],
      subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o;) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns,
              id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [],
      subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id,
      ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };

  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id,
      ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(
      node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__,
        i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform :
      d3_interpolate,
      name = d3.ns.qualify(nameNS);

    function attrNull() {
      this.removeAttribute(name);
    }

    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }

    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name),
          i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }

    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local),
          i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ?
      attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);

    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }

    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name
        .local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS :
      attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }

    function styleNull() {
      this.style.removeProperty(name);
    }

    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(
            name),
          i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";

    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this,
        null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };

  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(
        this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id,
      ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id,
      ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(
      node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id,
      ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(
      node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__,
        i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id,
      ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit,
        inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start",
          "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id,
      id1 = ++d3_transitionId,
      ns = this.namespace,
      subgroups = [],
      subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };

  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }

  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
        active: 0,
        count: 0
      }),
      transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
      d3.timer(function(elapsed) {
        var delay = transition.delay,
          duration, ease, timer = d3_timer_active,
          tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;

        function start(elapsed) {
          if (lock.active > id) return stop();
          var active = lock[lock.active];
          if (active) {
            --lock.count;
            delete lock[lock.active];
            active.event && active.event.interrupt.call(node, node.__data__,
              active.index);
          }
          lock.active = id;
          transition.event && transition.event.start.call(node, node.__data__,
            i);
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, node.__data__, i)) {
              tweened.push(value);
            }
          });
          ease = transition.ease;
          duration = transition.duration;
          d3.timer(function() {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }

        function tick(elapsed) {
          if (lock.active !== id) return 1;
          var t = elapsed / duration,
            e = ease(t),
            n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, node.__data__,
              i);
            return stop();
          }
        }

        function stop() {
          if (--lock.count) delete lock[id];
          else delete node[ns];
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(),
      orient = d3_svg_axisDefaultOrient,
      innerTickSize = 6,
      outerTickSize = 6,
      tickPadding = 3,
      tickArguments_ = [10],
      tickValues = null,
      tickFormat_;

    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale,
          scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(
            scale1, tickArguments_) : scale1.domain() : tickValues,
          tickFormat = tickFormat_ == null ? scale1.tickFormat ?
          scale1.tickFormat.apply(scale1, tickArguments_) :
          d3_identity : tickFormat_,
          tick = g.selectAll(".tick").data(ticks, scale1),
          tickEnter = tick.enter().insert("g", ".domain").attr(
            "class", "tick").style("opacity", ε),
          tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(),
          tickUpdate = d3.transition(tick.order()).style("opacity", 1),
          tickSpacing = Math.max(innerTickSize, 0) + tickPadding,
          tickTransform;
        var range = d3_scaleRange(scale1),
          path = g.selectAll(".domain").data([0]),
          pathUpdate = (path.enter().append("path").attr("class",
              "domain"),
            d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"),
          lineUpdate = tickUpdate.select("line"),
          text = tick.select("text").text(tickFormat),
          textEnter = tickEnter.select("text"),
          textUpdate = tickUpdate.select("text"),
          sign = orient === "top" || orient === "left" ? -1 : 1,
          x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2",
            y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style(
            "text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign *
            outerTickSize + "V0H" + range[1] + "V" + sign *
            outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2",
            y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ?
            "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," +
            range[0] + "H0V" + range[1] + "H" + sign *
            outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1,
            dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" :
        d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom",
    d3_svg_axisOrients = {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    };

  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }

  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"),
      x = null,
      y = null,
      xExtent = [0, 0],
      yExtent = [0, 0],
      xExtentDomain, yExtentDomain, xClamp = true,
      yClamp = true,
      resizes = d3_svg_brushResizes[0];

    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style(
          "-webkit-tap-highlight-color", "rgba(0,0,0,0)").on(
          "mousedown.brush", brushstart).on("touchstart.brush",
          brushstart);
        var background = g.selectAll(".background").data([0]);
        background.enter().append("rect").attr("class", "background")
          .style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([0]).enter().append("rect").attr(
          "class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility",
          "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g),
          backgroundUpdate = d3.transition(background),
          range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] -
            range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] -
            range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments),
          extent1 = {
            x: xExtent,
            y: yExtent,
            i: xExtentDomain,
            j: yExtentDomain
          },
          extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x),
              yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };

    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+
          /^s/.test(d)] + ")";
      });
    }

    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] -
        xExtent[0]);
    }

    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] -
        yExtent[0]);
    }

    function brushstart() {
      var target = this,
        eventTarget = d3.select(d3.event.target),
        event_ = event.of(target, arguments),
        g = d3.select(target),
        resizing = eventTarget.datum(),
        resizingX = !/^(n|s)$/.test(resizing) && x,
        resizingY = !/^(e|w)$/.test(resizing) && y,
        dragging = eventTarget.classed("extent"),
        dragRestore = d3_event_dragSuppress(),
        center, origin = d3.mouse(target),
        offset;
      var w = d3.select(d3_window).on("keydown.brush", keydown).on(
        "keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing),
          ey = +/^n/.test(resizing);
        offset = [xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1]];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style(
        "display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();

      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }

      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }

      function brushmove() {
        var point = d3.mouse(target),
          moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [(xExtent[0] + xExtent[1]) / 2, (
              yExtent[0] + yExtent[1]) / 2];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }

      function move1(point, scale, i) {
        var range = d3_scaleRange(scale),
          r0 = range[0],
          r1 = range[1],
          position = origin[i],
          extent = i ? yExtent : xExtent,
          size = extent[1] - extent[0],
          min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) :
          point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] -
            min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null;
          else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }

      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style(
          "display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on(
          "touchmove.brush", null).on("touchend.brush", null).on(
          "keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [xClamp, yClamp] : x ?
        xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1];
      else if (x) xClamp = !!z;
      else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [
          [x0, y0],
          [x1, y1]
        ] : x ? [x0, x1] : y && [y0, y1];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [x0, x1];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [x0, x1];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [y0, y1];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [y0, y1];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [0, 0], yExtent = [0, 0];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] ==
        yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [
    ["n", "e", "s", "w", "nw", "ne", "se", "sw"],
    ["e", "w"],
    ["n", "s"],
    []
  ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date(
      "2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative :
    d3_time_formatIso;

  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) *
      36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;

  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };

    function tickMethod(extent, count) {
      var span = extent[1] - extent[0],
        target = span / count,
        i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [methods.year,
        d3_scale_linearTickRange(extent.map(function(d) {
          return d / 31536e6;
        }), count)[2]
      ] : !i ? [d3_time_scaleMilliseconds, d3_scale_linearTickRange(
        extent, count)[2]] : methods[target / d3_time_scaleSteps[i - 1] <
        d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(),
        extent = d3_scaleExtent(domain),
        method = interval == null ? tickMethod(extent, 10) : typeof interval ===
        "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];

      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+
          date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date =
            d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date =
            d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()),
        method = interval == null ? tickMethod(extent, 10) : typeof interval ===
        "number" ? tickMethod(extent, interval) : !interval.range && [{
          range: interval
        }, skip];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1),
        skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }

  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5,
    108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6
  ];
  var d3_time_scaleLocalMethods = [
    [d3_time.second, 1],
    [d3_time.second, 5],
    [d3_time.second, 15],
    [d3_time.second, 30],
    [d3_time.minute, 1],
    [d3_time.minute, 5],
    [d3_time.minute, 15],
    [d3_time.minute, 30],
    [d3_time.hour, 1],
    [d3_time.hour, 3],
    [d3_time.hour, 6],
    [d3_time.hour, 12],
    [d3_time.day, 1],
    [d3_time.day, 2],
    [d3_time.week, 1],
    [d3_time.month, 1],
    [d3_time.month, 3],
    [d3_time.year, 1]
  ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([
    [".%L", function(d) {
      return d.getMilliseconds();
    }],
    [":%S", function(d) {
      return d.getSeconds();
    }],
    ["%I:%M", function(d) {
      return d.getMinutes();
    }],
    ["%I %p", function(d) {
      return d.getHours();
    }],
    ["%a %d", function(d) {
      return d.getDay() && d.getDate() != 1;
    }],
    ["%b %d", function(d) {
      return d.getDate() != 1;
    }],
    ["%B", function(d) {
      return d.getMonth();
    }],
    ["%Y", d3_true]
  ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(
        d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods,
      d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [m[0].utc, m[1]];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([
    [".%L", function(d) {
      return d.getUTCMilliseconds();
    }],
    [":%S", function(d) {
      return d.getUTCSeconds();
    }],
    ["%I:%M", function(d) {
      return d.getUTCMinutes();
    }],
    ["%I %p", function(d) {
      return d.getUTCHours();
    }],
    ["%a %d", function(d) {
      return d.getUTCDay() && d.getUTCDate() != 1;
    }],
    ["%b %d", function(d) {
      return d.getUTCDate() != 1;
    }],
    ["%B", function(d) {
      return d.getUTCMonth();
    }],
    ["%Y", d3_true]
  ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods,
      d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };

  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };

  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) define(d3);
  else if (typeof module === "object" && module.exports) module.exports =
    d3;
  this.d3 = d3;

  return d3;
  /*eslint-disable */
};
;/*eslint camelcase: 0*/

/**
 * @author Michael McDermott
 * Created on 7/20/15.
 */

angular
  .module('clustergram')
  .factory('d3Clust', d3Clust);

/* @ngInject */
function d3Clust(d3, lodash) {

  /* d3_clustergram 1.0
   * Nick Fernandez, Ma'ayan Lab, Icahn School of Medicine at Mount Sinai
   * (c) 2015
   */
  function d3_clustergram(args) {
    'use strict';

    /* Utility functions
     * ----------------------------------------------------------------------- */
    var Utils = {

      /* Returns whether or not an object has a certain property.
       */
      has: function(obj, key) {
        return obj != null && hasOwnProperty.call(obj, key);
      },

      /* Returns true if the object is undefined.
       */
      is_undefined: function(obj) {
        return obj === void 0;
      },

      /* Mixes two objects in together, overwriting a target with a source.
       */
      extend: function(target, source) {
        target = target || {};
        for (var prop in source) {
          if (typeof source[prop] === 'object') {
            target[prop] = this.extend(target[prop], source[prop]);
          } else {
            target[prop] = source[prop];
          }
        }
        return target;
      }
    };

    function Config(args) {

      var config,
        defaults;

      defaults = {

        // Label options
        row_label_scale: 1,
        col_label_scale: 1,
        super_labels: false,
        show_tooltips: false,

        // matrix options
        transpose: false,
        tile_colors: ['#FF0000', '#1C86EE'],
        bar_colors: ['#FF0000', '#1C86EE'],
        outline_colors: ['orange', 'black'],
        highlight_color: '#FFFF00',
        tile_title: false,
        // Default domain is set to 0, which means that the domain will be set automatically
        input_domain: 0,
        opacity_scale: 'linear',

        // Viz Options
        // This should be a DOM element, not a selector.
        svg_div_id: 'svg_id',
        do_zoom: true,
        background_color: '#FFFFFF',
        super_border_color: '#F5F5F5',
        resize: true,
        outer_margins: {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0
        },
        outer_margins_expand: {
          top: -666,
          bottom: 0,
          left: 0,
          right: 0
        },
        ini_expand: false,
        // Gray border around the visualization
        grey_border_width: 3,
        // the distance between labels and clustergram
        // a universal margin for the clustergram
        uni_margin: 4,
        // force the visualization to be square
        force_square: 0,
        tile_click_hlight: false
      };

      // Mixin defaults with user-defined arguments.
      config = Utils.extend(defaults, args);

      if (config.outer_margins_expand.top === -666) {
        config.expand_button = false;
      } else {
        config.expand_button = true;
      }

      // save network_data to config
      // extend does not properly pass network_data
      config.network_data = args.network_data;

      // transpose network if necessary
      if (config.transpose) {
        config.network_data = transpose_network(args.network_data);
        var tmp_col_label = args.col_label;
        var tmp_row_label = args.row_label;
        args.row_label = tmp_col_label;
        args.col_label = tmp_row_label;
      }

      // super-row/col labels
      if (!Utils.is_undefined(args.row_label) && !Utils.is_undefined(args.col_label)) {
        config.super_labels = true;
        config.super = {};
        config.super.row = args.row_label;
        config.super.col = args.col_label;
      }

      // initialize cluster ordering
      if (!Utils.is_undefined(args.order) && is_supported_order(args.order)) {
        config.inst_order = args.order;
      } else {
        config.inst_order = 'clust';
      }

      config.show_dendrogram = Utils.has(args.network_data.row_nodes[0], 'group') || Utils.has(args.network_data.col_nodes[0], 'group');
      config.show_categories = Utils.has(args.network_data.row_nodes[0], 'cl') || Utils.has(args.network_data.col_nodes[0], 'cl');


      // check for category information
      if (config.show_categories) {

        // !! set up option for manual color specification
        config.class_colors = {};

        // associate classes with colors
        var class_rows = lodash.uniq(lodash.pluck(args.network_data.row_nodes, 'cl'));
        config.class_colors.row = {};
        lodash.each(class_rows, function(c_row, i) {
          if (i === 0) {
            config.class_colors.row[c_row] = '#eee';
          } else {
            config.class_colors.row[c_row] = Colors.get_random_color(i);
          }
        });

        // associate classes with colors
        var class_cols = lodash.uniq(lodash.pluck(args.network_data.col_nodes, 'cl'));
        config.class_colors.col = {};
        lodash.each(class_cols, function(c_col, i) {
          if (i === 0) {
            config.class_colors.col[c_col] = '#eee';
          } else {
            config.class_colors.col[c_col] = Colors.get_random_color(i);
          }
        });
      }

      /* Transpose network.
       */
      function transpose_network(net) {
        var tnet = {},
          inst_link,
          i;

        tnet.row_nodes = net.col_nodes;
        tnet.col_nodes = net.row_nodes;
        tnet.links = [];

        for (i = 0; i < net.links.length; i++) {
          inst_link = {};
          inst_link.source = net.links[i].target;
          inst_link.target = net.links[i].source;
          inst_link.value = net.links[i].value;

          // Optional highlight.
          if (Utils.has(net.links[i], 'highlight')) {
            inst_link.highlight = net.links[i].highlight;
          }
          if (Utils.has(net.links[i], 'value_up')) {
            inst_link.value_up = net.links[i].value_up;
          }
          if (Utils.has(net.links[i], 'value_dn')) {
            inst_link.value_dn = net.links[i].value_dn;
          }
          if (Utils.has(net.links[i], 'info')) {
            inst_link.info = net.links[i].info;
          }
          tnet.links.push(inst_link);
        }

        return tnet;
      }


      function is_supported_order(order) {
        return order === 'ini' || order === 'clust' || order === 'rank' || order === 'class';
      }

      return config;
    }

    var Colors = (function() {

      // colors from http://graphicdesign.stackexchange.com/revisions/3815/8
      var rand_colors;

      // generate random colors
      var tmp0 = ['#000000', '#FF34FF', '#FFFF00', '#FF4A46']
      var tmp1 = d3.scale.category20().range().reverse();
      var tmp2 = d3.scale.category20b().range();
      var tmp3 = d3.scale.category20c().range();
      rand_colors = tmp0.concat(tmp1).concat(tmp2).concat(tmp3);

      function get_default_color() {
        //return rand_colors[0];
        return '#EEE';
      }

      function get_random_color(i) {
        return rand_colors[i % get_num_colors()];
      }

      function get_num_colors() {
        return rand_colors.length;
      }

      return {
        get_default_color: get_default_color,
        get_random_color: get_random_color,
        get_num_colors: get_num_colors
      }

    })();


    /* Dendrogram color bar.
     */
    function Dendrogram(type, params, elem) {

      var group_colors = [],
        dom_class,
        i;

      build_color_groups();

      if (type === 'row') {
        dom_class = 'row_class_rect';
        build_row_dendro();
      } else {
        dom_class = 'col_class_rect';
        build_col_dendro();
      }

      function build_color_groups() {
        var max_groups;
        if (params.network_data.row_nodes.length > params.network_data.col_nodes.length) {
          max_groups = params.network_data.row_nodes;
        } else {
          max_groups = params.network_data.col_nodes;
        }
        for (i = 0; i < params.network_data.row_nodes.length; i++) {
          // grab colors from the list
          if (i === 1) {
            group_colors[i] = Colors.get_default_color();
          } else {
            group_colors[i] = Colors.get_random_color(i);
          }
        }
      }

      /* Changes the groupings (x- and y-axis color bars).
       */
      function change_groups(inst_index) {
        d3.selectAll('.' + dom_class)
          .style('fill', function(d) {
            return group_colors[d.group[inst_index]];
          });
      }

      function color_group(j) {
        return group_colors[j];
      }

      function get_group_color(j) {
        return group_colors[j];
      }

      function build_row_dendro() {
        elem
          .append('rect')
          .attr('class', dom_class)
          .attr('width', function() {
            var inst_width = params.class_room.symbol_width - 1;
            return inst_width + 'px';
          })
          .attr('height', params.matrix.y_scale.rangeBand())
          .style('fill', function(d) {
            var inst_level = params.group_level.row;
            return get_group_color(d.group[inst_level]);
          })
          .attr('x', function() {
            var inst_offset = params.class_room.symbol_width + 1;
            return inst_offset + 'px';
          });
      }

      function build_col_dendro() {
        elem
          .append('rect')
          .attr('class', dom_class)
          .attr('width', params.matrix.x_scale.rangeBand())
          .attr('height', function() {
            var inst_height = params.class_room.col - 1;
            return inst_height;
          })
          .style('fill', function(d) {
            var inst_level = params.group_level.col;
            return get_group_color(d.group[inst_level]);
          });
      }

      // add callback functions
      /////////////////////////////

      // !! optional row callback on click
      if (typeof params.click_group === 'function') {
        // only add click functionality to row rect
        row_class_rect
          .on('click', function(d) {
            var inst_level = params.group_level.row;
            var inst_group = d.group[inst_level];
            // find all row names that are in the same group at the same group_level
            // get row_nodes
            row_nodes = params.network_data.row_nodes;
            var group_nodes = [];

            lodash.each(row_nodes, function(node) {
              // check that the node is in the group
              if (node.group[inst_level] === inst_group) {
                // make a list of genes that are in inst_group at this group_level
                group_nodes.push(node.name);
              }
            });

            // return the following information to the user
            // row or col, distance cutoff level, nodes
            var group_info = {};
            group_info.type = 'row';
            group_info.nodes = group_nodes;
            group_info.info = {
              'type': 'distance',
              'cutoff': inst_level / 10
            };

            // pass information to group_click callback
            params.click_group(group_info);

          });
      }

      return {
        color_group: color_group,
        get_group_color: get_group_color,
        change_groups: change_groups
      };
    }


    function Matrix(network_data, svg_elem, params) {

      var matrix = [],
        row_nodes = network_data.row_nodes,
        col_nodes = network_data.col_nodes,
        clust_group;

      // make the matrix
      initialize_matrix();

      // append a group that will hold clust_group and position it once
      clust_group = svg_elem
        .append('g')
        .attr('transform', 'translate(' +
          params.viz.clust.margin.left + ',' +
          params.viz.clust.margin.top + ')')
        .append('g')
        .attr('id', 'clust_group');

      // clustergram background rect
      clust_group
        .append('rect')
        .attr('class', 'background')
        .attr('id', 'grey_background')
        .style('fill', '#eee')
        .attr('width', params.viz.clust.dim.width)
        .attr('height', params.viz.clust.dim.height);

      // do the databind
      var row_groups = clust_group.selectAll('.row')
        .data(matrix)
        .enter()
        .append('g')
        .attr('class', 'row')
        .attr('transform', function(d, index) {
          return 'translate(0,' + params.matrix.y_scale(index) + ')';
        });

      // draw rows of clustergram
      if (params.matrix.tile_type === 'simple') {
        row_groups = row_groups.each(draw_simple_rows);
      } else {
        row_groups = row_groups.each(draw_group_rows);
      }


      // add callback function to tile group - if one is supplied by the user
      if (typeof params.click_tile === 'function') {
        d3.selectAll('.tile')
          .on('click', function(d) {
            // export row/col name and value from tile
            var tile_info = {};
            tile_info.row = params.network_data.row_nodes[d.pos_y].name;
            tile_info.col = params.network_data.col_nodes[d.pos_x].name;
            tile_info.value = d.value;
            if (Utils.has(d, 'value_up')) {
              tile_info.value_up = d.value_up;
            }
            if (Utils.has(d, 'value_dn')) {
              tile_info.value_dn = d.value_dn;
            }
            if (Utils.has(d, 'info')) {
              tile_info.info = d.info;
            }
            // run the user supplied callback function
            params.click_tile(tile_info);
            add_click_hlight(this);
          });
      } else {

        // highlight clicked tile
        if (params.tile_click_hlight) {

          d3.selectAll('.tile')
            .on('click', function(d) {

              add_click_hlight(this)

            })
        }

      }


      function add_click_hlight(clicked_rect) {

        // get x position of rectangle
        d3.select(clicked_rect).each(function(d) {
          var pos_x = d.pos_x;
          var pos_y = d.pos_y;

          d3.selectAll('.click_hlight')
            .remove();

          if (pos_x != params.matrix.click_hlight_x || pos_y != params.matrix.click_hlight_y) {

            // save pos_x to params.viz.click_hlight_x
            params.matrix.click_hlight_x = pos_x;
            params.matrix.click_hlight_y = pos_y;

            // draw the highlighting rectangle as four rectangles
            // so that the width and height can be controlled
            // separately

            var rel_width_hlight = 6;
            var opacity_hlight = 0.85;

            var hlight_width = rel_width_hlight * params.viz.border_width;
            var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

            // top highlight
            d3.select(clicked_rect.parentNode)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'top_hlight')
              .attr('width', params.matrix.x_scale.rangeBand())
              .attr('height', hlight_height)
              .attr('fill', params.matrix.hlight_color)
              .attr('transform', function() {
                return 'translate(' + params.matrix.x_scale(pos_x) + ',0)';
              })
              .attr('opacity', opacity_hlight);

            // left highlight
            d3.select(clicked_rect.parentNode)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'left_hlight')
              .attr('width', hlight_width)
              .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
              .attr('fill', params.matrix.hlight_color)
              .attr('transform', function() {
                return 'translate(' + params.matrix.x_scale(pos_x) + ',' +
                  hlight_height * 0.99 + ')';
              })
              .attr('opacity', opacity_hlight);

            // right highlight
            d3.select(clicked_rect.parentNode)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'right_hlight')
              .attr('width', hlight_width)
              .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
              .attr('fill', params.matrix.hlight_color)
              .attr('transform', function() {
                var tmp_translate = params.matrix.x_scale(pos_x) + params.matrix.x_scale.rangeBand() - hlight_width;
                return 'translate(' + tmp_translate + ',' +
                  hlight_height * 0.99 + ')';
              })
              .attr('opacity', opacity_hlight);

            // bottom highlight
            d3.select(clicked_rect.parentNode)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'bottom_hlight')
              .attr('width', function() {
                return params.matrix.x_scale.rangeBand() - 1.98 * hlight_width
              })
              .attr('height', hlight_height)
              .attr('fill', params.matrix.hlight_color)
              .attr('transform', function() {
                var tmp_translate_x = params.matrix.x_scale(pos_x) + hlight_width * 0.99;
                var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;
                return 'translate(' + tmp_translate_x + ',' +
                  tmp_translate_y + ')';
              })
              .attr('opacity', opacity_hlight);

          } else {
            params.matrix.click_hlight_x = -666;
            params.matrix.click_hlight_y = -666;
          }


        })
      }

      // draw grid lines after drawing tiles
      draw_grid_lines();

      function initialize_matrix() {
        lodash.each(row_nodes, function(tmp, row_index) {
          matrix[row_index] = d3.range(col_nodes.length).map(function(col_index) {
            return {
              pos_x: col_index,
              pos_y: row_index,
              value: 0,
              highlight: 0
            };
          });
        });

        lodash.each(network_data.links, function(link) {
          matrix[link.source][link.target].value = link.value;
          // transfer additional link information is necessary
          if (link.value_up && link.value_dn) {
            matrix[link.source][link.target].value_up = link.value_up;
            matrix[link.source][link.target].value_dn = link.value_dn;
          }
          if (link.highlight) {
            matrix[link.source][link.target].highlight = link.highlight;
          }
          if (link.info) {
            matrix[link.source][link.target].info = link.info;
          }
        });

        return matrix;
      }

      function draw_grid_lines() {

        // append horizontal lines
        clust_group
          .selectAll('.horz_lines')
          .data(row_nodes)
          .enter()
          .append('g')
          .attr('class', 'horz_lines')
          .attr('transform', function(d, index) {
            return 'translate(0,' + params.matrix.y_scale(index) + ') rotate(0)';
          })
          .append('line')
          .attr('x1', 0)
          .attr('x2', params.viz.clust.dim.width)
          .style('stroke-width', params.viz.border_width / params.viz.zoom_switch + 'px')
          .style('stroke', 'white')

        // append vertical line groups
        clust_group
          .selectAll('.vert_lines')
          .data(col_nodes)
          .enter()
          .append('g')
          .attr('class', 'vert_lines')
          .attr('transform', function(d, index) {
            return 'translate(' + params.matrix.x_scale(index) + ') rotate(-90)';
          })
          .append('line')
          .attr('x1', 0)
          .attr('x2', -params.viz.clust.dim.height)
          .style('stroke-width', params.viz.border_width + 'px')
          .style('stroke', 'white');
      }

      // make each row in the clustergram
      function draw_simple_rows(inp_row_data) {

        // remove zero values to make visualization faster
        var row_data = lodash.filter(inp_row_data, function(num) {
          return num.value !== 0;
        });

        // generate tiles in the current row
        var tile = d3.select(this)
          .selectAll('rect')
          .data(row_data)
          .enter()
          .append('rect')
          .attr('class', 'tile')

        .attr('width', params.matrix.x_scale.rangeBand())
          .attr('height', params.matrix.y_scale.rangeBand())
          // switch the color based on up/dn value
          .style('fill', function(d) {
            return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];
          })
          .on('mouseover', function(p) {
            // highlight row - set text to active if
            d3.selectAll('.row_label_text text')
              .classed('active', function(d, i) {
                return i === p.pos_y;
              });

            d3.selectAll('.col_label_text text')
              .classed('active', function(d, i) {
                return i === p.pos_x;
              });
          })
          .on('mouseout', function mouseout() {
            d3.selectAll('text').classed('active', false);
          })
          .attr('title', function(d) {
            return d.value;
          });

        tile
          .style('fill-opacity', function(d) {
            // calculate output opacity using the opacity scale
            var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));
            return output_opacity;
          });

        tile
          .attr('transform', function(d) {
            return 'translate(' + params.matrix.x_scale(d.pos_x) + ',0)';
          })



        // append title to group
        if (params.matrix.tile_title) {
          tile.append('title')
            .text(function(d) {
              var inst_string = 'value: ' + d.value;
              return inst_string;
            });
        }

      }

      // make each row in the clustergram
      function draw_group_rows(inp_row_data) {

        // remove zero values to make visualization faster
        var row_data = lodash.filter(inp_row_data, function(num) {
          return num.value !== 0;
        });

        // generate groups
        var tile = d3.select(this)
          // data join
          .selectAll('g')
          .data(row_data)
          .enter()
          .append('g')
          .attr('class', 'tile')
          .attr('transform', function(d) {
            return 'translate(' + params.matrix.x_scale(d.pos_x) + ',0)';
          });

        // append rect
        tile
          .append('rect')
          .attr('class', 'tile_group')
          .attr('width', params.matrix.x_scale.rangeBand())
          .attr('height', params.matrix.y_scale.rangeBand())
          .style('fill-opacity', function(d) {
            // calculate output opacity using the opacity scale
            var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));
            if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {
              output_opacity = 0;
            }
            return output_opacity;
          })
          // switch the color based on up/dn value
          .style('fill', function(d) {
            // normal rule
            return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];
          });

        tile
          .on('mouseover', function(p) {
            // highlight row - set text to active if
            d3.selectAll('.row_label_text text')
              .classed('active', function(d, i) {
                return i === p.pos_y;
              });
            d3.selectAll('.col_label_text text')
              .classed('active', function(d, i) {
                return i === p.pos_x;
              });
          })
          .on('mouseout', function mouseout() {
            d3.selectAll('text').classed('active', false);
          })
          .attr('title', function(d) {
            return d.value;
          });


        // // // append evidence highlighting - black rects
        // if (params.matrix.highlight === 1) {

        // tile
        //   .append('rect')
        //   .attr('width', params.matrix.x_scale.rangeBand() * 0.80)
        //   .attr('height', params.matrix.y_scale.rangeBand() * 0.80)
        //   .attr('class', 'highlighting_rect')
        //   .attr('transform', 'translate(' + params.matrix.x_scale.rangeBand() / 10 +
        //   ' , ' + params.matrix.y_scale.rangeBand() / 10 + ')')
        //   .attr('class', 'cell_highlight')
        //   .attr('stroke', 'black')
        //   .attr('stroke-width', 1.0)
        //   .attr('fill-opacity', 0.0)
        //   .attr('stroke-opacity', function(d) {
        //     // initialize opacity to 0
        //     var inst_opacity = 0;
        //     // set opacity to 1 if there is evidence
        //     if (d.highlight === 1) {
        //     inst_opacity = 1;
        //     }
        //     return inst_opacity;
        //   });


        var rel_width_hlight = 4;
        var highlight_opacity = 0.0;

        var hlight_width = rel_width_hlight * params.viz.border_width;
        var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

        // top highlight
        tile
          .append('rect')
          .attr('class', 'highlight')
          .attr('id', 'perm_top_hlight')
          .attr('width', params.matrix.x_scale.rangeBand())
          .attr('height', hlight_height)
          .attr('fill', function(d) {
            return d.highlight > 0 ? params.matrix.outline_colors[0] : params.matrix.outline_colors[1];
          })
          .attr('opacity', function(d) {
            return Math.abs(d.highlight);
          });

        // left highlight
        tile
          .append('rect')
          .attr('class', 'highlight')
          .attr('id', 'perm_left_hlight')
          .attr('width', hlight_width)
          .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
          .attr('fill', function(d) {
            return d.highlight > 0 ? params.matrix.outline_colors[0] : params.matrix.outline_colors[1];
          })
          .attr('transform', function() {
            return 'translate(' + 0 + ',' +
              hlight_height * 0.99 + ')';
          })
          .attr('opacity', function(d) {
            return Math.abs(d.highlight);
          });

        // right highlight
        tile
          .append('rect')
          .attr('class', 'highlight')
          .attr('id', 'perm_right_hlight')
          .attr('width', hlight_width)
          .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
          .attr('fill', function(d) {
            return d.highlight > 0 ? params.matrix.outline_colors[0] : params.matrix.outline_colors[1];
          })
          .attr('transform', function() {
            var tmp_translate = params.matrix.x_scale.rangeBand() - hlight_width;
            return 'translate(' + tmp_translate + ',' +
              hlight_height * 0.99 + ')';
          })
          .attr('opacity', function(d) {
            return Math.abs(d.highlight);
          });

        // bottom highlight
        tile
          .append('rect')
          .attr('class', 'highlight')
          .attr('id', 'perm_ottom_hlight')
          .attr('width', function() {
            return params.matrix.x_scale.rangeBand() - 1.98 * hlight_width
          })
          .attr('height', hlight_height)
          .attr('fill', function(d) {
            return d.highlight > 0 ? params.matrix.outline_colors[0] : params.matrix.outline_colors[1];
          })
          .attr('transform', function() {
            var tmp_translate_x = hlight_width * 0.99;
            var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;
            return 'translate(' + tmp_translate_x + ',' +
              tmp_translate_y + ')';
          })
          .attr('opacity', function(d) {
            return Math.abs(d.highlight);
          });

        // }


        // split-up
        tile
          .append('path')
          // .style('stroke', 'black')
          .attr('class', 'tile_split_up')
          .style('stroke-width', 0)
          .attr('d', function() {
            var start_x = 0;
            var final_x = params.matrix.x_scale.rangeBand();
            var start_y = 0;
            var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() /
              60;
            var output_string = 'M' + start_x + ',' + start_y + ', L' +
              start_x + ', ' + final_y + ', L' + final_x + ',0 Z';
            return output_string;
          })
          .style('fill-opacity', function(d) {
            // calculate output opacity using the opacity scale
            var output_opacity = 0;
            if (Math.abs(d.value_dn) > 0) {
              output_opacity = params.matrix.opacity_scale(Math.abs(d.value_up));
            }
            return output_opacity;
          })
          // switch the color based on up/dn value
          .style('fill', function() {
            // rl_t (released) blue
            return params.matrix.tile_colors[0];
          });


        // split-dn
        tile
          .append('path')
          .attr('class', 'tile_split_dn')
          // .style('stroke', 'black')
          .style('stroke-width', 0)
          .attr('d', function() {
            var start_x = 0;
            var final_x = params.matrix.x_scale.rangeBand();
            var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() /
              60;
            var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() /
              60;
            var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' +
              final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';
            return output_string;
          })
          .style('fill-opacity', function(d) {
            // calculate output opacity using the opacity scale
            var output_opacity = 0;
            if (Math.abs(d.value_up) > 0) {
              output_opacity = params.matrix.opacity_scale(Math.abs(d.value_dn));
            }
            return output_opacity;
          })
          // switch the color based on up/dn value
          .style('fill', function() {
            return params.matrix.tile_colors[1];
          });

        // append title to group
        if (params.matrix.tile_title) {
          tile
            .append('title')
            .text(function(d) {
              var inst_string = 'value: ' + d.value;
              return inst_string;
            });
        }
      }

      // Matrix API
      return {
        get_clust_group: function() {
          return clust_group;
        },
        get_matrix: function() {
          return matrix;
        },
        get_nodes: function(type) {
          if (type === 'row') {
            var nodes = network_data.row_nodes;
          } else {
            var nodes = network_data.col_nodes;
          }
          return nodes;
        }
      }

    }


    /* Handles searching rows or columns.
     !! need to generalize to column and row
     * ----------------------------------------------------------------------- */
    function Search(params, nodes, prop) {

      /* Collect entities from row or columns.
       */
      var entities = [],
        i;

      for (i = 0; i < nodes.length; i++) {
        entities.push(nodes[i][prop]);
      }

      /* Find a gene (row) in the clustergram.
       */
      function find_entities(search_term) {
        if (entities.indexOf(search_term) !== -1) {
          un_highlight_entities();
          zoom_and_highlight_found_entity(search_term);
          highlight_entity(search_term);
        }
      }

      /* Zoom into and highlight the found the gene
       */
      function zoom_and_highlight_found_entity(search_term) {
        var idx = lodash.indexOf(entities, search_term),
          inst_y_pos = params.matrix.y_scale(idx),
          pan_dy = params.viz.clust.dim.height / 2 - inst_y_pos;

        // viz exposes two_translate_zoom from zoom object
        viz.two_translate_zoom(0, pan_dy, params.viz.zoom_switch);
      }

      function un_highlight_entities() {
        d3.selectAll('.row_label_text').select('rect').style('opacity', 0);
      }

      function highlight_entity(search_term) {

        d3.selectAll('.row_label_text')
          .filter(function(d) {
            return d[prop] === search_term;
          })
          .select('rect')
          .style('opacity', 1);
      }

      /* Returns all the genes in the clustergram.
       */
      function get_entities() {
        return entities;
      }

      return {
        find_entities: find_entities,
        get_entities: get_entities
      }
    }
    /* VizParams Module
     */
    function VizParams(config) {

      var params = initialize_visualization(config)

      // Define Visualization Dimensions
      function initialize_visualization(config) {

        // initialize params object from config
        var params = config;

        // Label Paramsters
        params.labels = {};
        params.labels.super_labels = config.super_labels;
        // Super Labels Detais
        if (params.labels.super_labels) {
          params.labels.super_label_width = 20;
          params.labels.super = {};
          params.labels.super.row = config.super.row;
          params.labels.super.col = config.super.col;
        } else {
          params.labels.super_label_width = 0;
        }
        // optional classification
        params.labels.show_categories = config.show_categories;
        if (params.labels.show_categories) {
          params.labels.class_colors = config.class_colors;
        }
        params.labels.show_tooltips = config.show_tooltips;

        // Matrix Options
        params.matrix = {};
        params.matrix.tile_colors = config.tile_colors;
        params.matrix.bar_colors = config.bar_colors;
        params.matrix.outline_colors = config.outline_colors;
        params.matrix.hlight_color = config.highlight_color
        params.matrix.tile_title = config.tile_title;

        // Visualization Options
        params.viz = {};
        params.viz.svg_div_id = config.svg_div_id;
        params.viz.do_zoom = config.do_zoom;
        params.viz.resize = config.resize;
        // background colors
        params.viz.background_color = config.background_color;
        params.viz.super_border_color = config.super_border_color;
        // margin widths
        params.viz.outer_margins = config.outer_margins;
        params.viz.outer_margins_expand = config.outer_margins_expand;
        params.viz.expand = config.ini_expand;
        params.viz.uni_margin = config.uni_margin;
        params.viz.grey_border_width = config.grey_border_width;
        params.viz.show_dendrogram = config.show_dendrogram;
        params.viz.tile_click_hlight = config.tile_click_hlight;

        // initialized clicked tile and rows
        params.matrix.click_hlight_x = -666;
        params.matrix.click_hlight_y = -666;
        params.matrix.click_hlight_row = -666;
        params.matrix.click_hlight_col = -666;

        // initial order of clustergram
        params.viz.inst_order = config.inst_order;

        params.matrix.opacity_function = config.opacity_scale;

        // not initialized in expand state
        // params.viz.expand = false;
        if (params.viz.expand === true) {
          d3.select('#clust_instruct_container')
            .style('display', 'none');
        }
        params.viz.expand_button = config.expand_button;

        // pass network_data to params
        params.network_data = config.network_data;

        var network_data = params.network_data;

        // resize based on parent div
        parent_div_size_pos(params);

        // get height and width from parent div
        params.viz.svg_dim = {};
        params.viz.svg_dim.width = Number(d3.select('#' + params.viz.svg_div_id).style('width').replace('px', ''));
        params.viz.svg_dim.height = Number(d3.select('#' + params.viz.svg_div_id).style('height').replace('px', ''));

        params.viz.parent_div_size_pos = parent_div_size_pos;

        // Variable Label Widths
        // based on the length of the row/col labels - longer labels mean more space given
        // get row col data
        var col_nodes = network_data.col_nodes;
        var row_nodes = network_data.row_nodes;


        // find the label with the most characters and use it to adjust the row and col margins
        var row_max_char = lodash.max(row_nodes, function(inst) {
          return inst.name.length;
        }).name.length;
        var col_max_char = lodash.max(col_nodes, function(inst) {
          return inst.name.length;
        }).name.length;

        params.labels.row_max_char = row_max_char;
        params.labels.col_max_char = col_max_char;

        // the maximum number of characters in a label
        params.labels.max_label_char = 35;

        // define label scale parameters: the more characters in the longest name, the larger the margin
        var min_num_char = 5;
        var max_num_char = params.labels.max_label_char;

        // number of characters to show
        params.labels.show_char = 15;

        // calc how much of the label to keep
        var keep_label_scale = d3.scale.linear()
          .domain([params.labels.show_char, max_num_char])
          .range([1, params.labels.show_char / max_num_char]).clamp('true');

        params.labels.row_keep = keep_label_scale(row_max_char);
        params.labels.col_keep = keep_label_scale(col_max_char);

        // define label scale
        ///////////////////////////
        var min_label_width = 85;
        var max_label_width = 140;
        var label_scale = d3.scale.linear()
          .domain([min_num_char, max_num_char])
          .range([min_label_width, max_label_width]).clamp('true');

        // rotated column labels - approx trig
        params.norm_label = {};
        params.norm_label.width = {};

        // screen_label_scale - small reduction
        var screen_label_scale = d3.scale.linear()
          .domain([500, 1000])
          .range([0.8, 1.0])
          .clamp(true);

        // Label Scale
        ///////////////////////
        // dependent on max char length or row/col labels, screensize,
        // and user-defined factor
        params.norm_label.width.row = 1.2 * label_scale(row_max_char) * screen_label_scale(params.viz.svg_dim.width) * params.row_label_scale;

        params.norm_label.width.col = label_scale(col_max_char) * screen_label_scale(params.viz.svg_dim.height) * params.col_label_scale;

        // normal label margins
        params.norm_label.margin = {};
        params.norm_label.margin.left = params.viz.grey_border_width + params.labels.super_label_width;
        params.norm_label.margin.top = params.viz.grey_border_width + params.labels.super_label_width;

        // row groups - only add if the rows have a group attribute
        // Define the space needed for the classification of rows - includes classification triangles and rects
        params.class_room = {};
        if (params.viz.show_dendrogram) {
          // make room for group rects
          params.class_room.row = 18;
          params.class_room.col = 9;
          // the width of the classification triangle or group rectangle
          params.class_room.symbol_width = 9;

          config.group_level = {
            row: 5,
            col: 5
          };

        } else {
          // do not make room for group rects
          params.class_room.row = 9;
          params.class_room.col = 0;
          // the width of the classification triangle or group rectangle
          params.class_room.symbol_width = 9;
        }

        // norm label background width, norm-label-width plus class-width plus margin
        params.norm_label.background = {};
        params.norm_label.background.row = params.norm_label.width.row + params.class_room.row + params.viz.uni_margin;
        params.norm_label.background.col = params.norm_label.width.col + params.class_room.col + params.viz.uni_margin;

        // clustergram dimensions
        params.viz.clust = {};
        params.viz.clust.margin = {};
        // clust margin is the margin of the norm_label plus the width of the entire norm_label group
        params.viz.clust.margin.left = params.norm_label.margin.left + params.norm_label.background.row;
        params.viz.clust.margin.top = params.norm_label.margin.top + params.norm_label.background.col;

        // svg size: less than svg size
        ///////////////////////////////////
        // 0.8 approximates the trigonometric distance required for hiding the spillover
        params.viz.spillover_x_offset = label_scale(col_max_char) * 0.7 * params.col_label_scale;


        // reduce width by row/col labels and by grey_border width (reduce width by less since this is less aparent with slanted col labels)
        var ini_clust_width = params.viz.svg_dim.width - (params.labels.super_label_width +
          params.norm_label.width.row + params.class_room.row) - params.viz.grey_border_width - params.viz.spillover_x_offset;

        // there is space between the clustergram and the border
        var ini_clust_height = params.viz.svg_dim.height - (params.labels.super_label_width +
          params.norm_label.width.col + params.class_room.col) - 5 * params.viz.grey_border_width;

        params.viz.num_col_nodes = col_nodes.length;
        params.viz.num_row_nodes = row_nodes.length;

        // clust_dim - clustergram dimensions (the clustergram is smaller than the svg)
        params.viz.clust.dim = {};

        // clustergram height
        ////////////////////////
        // ensure that rects are never taller than they are wide
        // force square tiles
        if (ini_clust_width / params.viz.num_col_nodes < ini_clust_height / params.viz.num_row_nodes) {

          // scale the height
          params.viz.clust.dim.height = ini_clust_width * (params.viz.num_row_nodes / params.viz.num_col_nodes);

          // keep track of whether or not a force square has occurred
          // so that I can adjust the font accordingly
          params.viz.force_square = 1;

          // make sure that force_square does not cause the entire visualization
          // to be taller than the svg, if it does, then undo
          if (params.viz.clust.dim.height > ini_clust_height) {
            // make the height equal to the width
            params.viz.clust.dim.height = ini_clust_height;
            // keep track of whether or not a force square has occurred
            params.viz.force_square = 0;
          }
        }
        // do not force square tiles
        else {
          // the height will be calculated normally - leading to wide tiles
          params.viz.clust.dim.height = ini_clust_height;
          // keep track of whether or not a force square has occurred
          params.viz.force_square = 0;
        }

        // manual force square
        if (config.force_square === 1) {
          params.viz.force_square = 1;
        }

        // Define Orderings
        ////////////////////////////

        // Define Orderings
        params.matrix.orders = {
          // ini
          ini_row: d3.range(params.viz.num_col_nodes).sort(function(a, b) {
            return col_nodes[b].ini - col_nodes[a].ini;
          }),
          ini_col: d3.range(params.viz.num_row_nodes).sort(function(a, b) {
            return row_nodes[b].ini - row_nodes[a].ini;
          }),
          // rank
          rank_row: d3.range(params.viz.num_col_nodes).sort(function(a, b) {
            return col_nodes[b].rank - col_nodes[a].rank;
          }),
          rank_col: d3.range(params.viz.num_row_nodes).sort(function(a, b) {
            return row_nodes[b].rank - row_nodes[a].rank;
          }),
          // clustered
          clust_row: d3.range(params.viz.num_col_nodes).sort(function(a, b) {
            return col_nodes[b].clust - col_nodes[a].clust;
          }),
          clust_col: d3.range(params.viz.num_row_nodes).sort(function(a, b) {
            return row_nodes[b].clust - row_nodes[a].clust;
          }),
          // class
          class_row: d3.range(params.viz.num_col_nodes).sort(function(a, b) {
            return col_nodes[b].cl - col_nodes[a].cl;
          }),
          class_col: d3.range(params.viz.num_row_nodes).sort(function(a, b) {
            return row_nodes[b].cl - row_nodes[a].cl;
          })
        };

        // // the visualization dimensions can be smaller than the svg
        // // columns need to be shrunk for wide screens
        // var min_col_shrink_scale = d3.scale.linear().domain([100,1500]).range([1,0.1]).clamp('true');
        // var min_col_shrink = min_col_shrink_scale(params.viz.svg_dim.width);

        // calculate clustergram width
        // reduce clustergram width if triangles are taller than the normal width
        // of the columns
        var tmp_x_scale = d3.scale.ordinal().rangeBands([0, ini_clust_width]);
        tmp_x_scale.domain(params.matrix.orders.ini_row);
        var triangle_height = tmp_x_scale.rangeBand() / 2;
        if (triangle_height > params.norm_label.width.col) {
          ini_clust_width = ini_clust_width * (params.norm_label.width.col / triangle_height);
        }
        params.viz.clust.dim.width = ini_clust_width;


        // scaling functions to position rows and tiles, define rangeBands
        params.matrix.x_scale = d3.scale.ordinal().rangeBands([0, params.viz.clust.dim.width]);
        params.matrix.y_scale = d3.scale.ordinal().rangeBands([0, params.viz.clust.dim.height]);

        // Assign initial ordering for x_scale and y_scale
        if (params.viz.inst_order === 'ini') {
          params.matrix.x_scale.domain(params.matrix.orders.ini_row);
          params.matrix.y_scale.domain(params.matrix.orders.ini_col);
        } else if (params.viz.inst_order === 'clust') {
          params.matrix.x_scale.domain(params.matrix.orders.clust_row);
          params.matrix.y_scale.domain(params.matrix.orders.clust_col);
        } else if (params.viz.inst_order === 'rank') {
          params.matrix.x_scale.domain(params.matrix.orders.rank_row);
          params.matrix.y_scale.domain(params.matrix.orders.rank_col);
        } else if (params.viz.inst_order === 'class') {
          params.matrix.x_scale.domain(params.matrix.orders.class_row);
          params.matrix.y_scale.domain(params.matrix.orders.class_col);
        }

        // visualization parameters
        //////////////////////////////

        // border_width - width of white borders around tiles
        params.viz.border_width = params.matrix.x_scale.rangeBand() / 40;

        // zoom_switch from 1 to 2d zoom
        params.viz.zoom_switch = (params.viz.clust.dim.width / params.viz.num_col_nodes) / (params.viz.clust.dim.height / params.viz.num_row_nodes);

        // zoom_switch can not be less than 1
        if (params.viz.zoom_switch < 1) {
          params.viz.zoom_switch = 1;
        }

        // font size controls
        ////////////////////////////
        // min and max number of expected nodes
        var min_node_num = 10;
        var max_node_num = 3000;

        // min and max expected screen widths
        var min_viz_width = 400;
        var max_viz_width = 2000;

        // scale font offset, when the font size is the height of the rects then it should be almost the full width of the rects
        // when the font size is small, then the offset should be almost equal to half the rect width
        params.scale_font_offset = d3.scale
          .linear().domain([1, 0])
          .range([0.8, 0.5]);

        // the default font sizes are set here
        params.labels.default_fs_row = params.matrix.y_scale.rangeBand() * 1.01;
        params.labels.default_fs_col = params.matrix.x_scale.rangeBand() * 0.87;

        // initialize font size zooming parameters
        params.viz.zoom_scale_font = {};
        params.viz.zoom_scale_font.row = 1;
        params.viz.zoom_scale_font.col = 1;

        // allow user to do 'real' 2D zoom until visual aid column triangle
        // is as tall as the normal label width
        params.viz.real_zoom = params.norm_label.width.col / (params.matrix.x_scale.rangeBand() / 2);

        // set opacity scale
        params.matrix.max_link = lodash.max(network_data.links, function(d) {
          return Math.abs(d.value);
        }).value;

        // set opacity_scale
        // input domain of 0 means set the domain automatically
        if (config.input_domain === 0) {
          // set the domain using the maximum absolute value
          if (params.matrix.opacity_function === 'linear') {
            params.matrix.opacity_scale = d3.scale.linear()
              .domain([0, Math.abs(params.matrix.max_link)]).clamp(true)
              .range([0.0, 1.0]);
          } else if (params.matrix.opacity_function === 'log') {
            params.matrix.opacity_scale = d3.scale.log()
              .domain([0.001, Math.abs(params.matrix.max_link)]).clamp(true)
              .range([0.0, 1.0]);
          }
        } else {
          // set the domain manually
          if (params.matrix.opacity_function === 'linear') {
            params.matrix.opacity_scale = d3.scale.linear()
              .domain([0, config.input_domain]).clamp(true)
              .range([0.0, 1.0]);
          } else if (params.matrix.opacity_function === 'log') {
            params.matrix.opacity_scale = d3.scale.log()
              .domain([0.001, config.input_domain]).clamp(true)
              .range([0.0, 1.0]);
          }
        }

        // is a transition running currently
        params.viz.run_trans = false;

        // tile type: simple or group
        // rect is the default faster and simpler option
        // group is the optional slower and more complex option that is activated with: highlighting or split tiles
        if (Utils.has(network_data.links[0], 'value_up') || Utils.has(network_data.links[0], 'highlight')) {
          params.matrix.tile_type = 'group';
        } else {
          params.matrix.tile_type = 'simple';
        }

        // check if rects should be highlighted
        if (Utils.has(network_data.links[0], 'highlight')) {
          params.matrix.highlight = 1;
        } else {
          params.matrix.highlight = 0;
        }

        return params;
      }

      // parent_div: size and position svg container - svg_div
      function parent_div_size_pos(params) {

        // get outer_margins
        if (params.viz.expand == false) {
          var outer_margins = params.viz.outer_margins;
        } else {
          var outer_margins = params.viz.outer_margins_expand;
        }

        if (params.viz.resize) {

          // get the size of the window
          var screen_width = window.innerWidth;
          var screen_height = window.innerHeight;

          // define width and height of clustergram container
          var cont_dim = {};
          cont_dim.width = screen_width - outer_margins.left - outer_margins.right;
          cont_dim.height = screen_height - outer_margins.top - outer_margins.bottom;

          // size the svg container div - svg_div
          d3.select('#' + params.viz.svg_div_id)
            .style('margin-left', outer_margins.left + 'px')
            .style('margin-top', outer_margins.top + 'px')
            .style('width', cont_dim.width + 'px')
            .style('height', cont_dim.height + 'px');

        } else {

          // size the svg container div - svg_div
          d3.select('#' + params.viz.svg_div_id)
            .style('margin-left', outer_margins.left + 'px')
            .style('margin-top', outer_margins.top + 'px');
        }
      }

      return params;

    }

    function Labels(args) {


      // make row labels
      function make_rows(params, row_nodes, reorder) {

        function normal_name(d) {
          var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
          if (inst_name.length > params.labels.max_label_char) {
            inst_name = inst_name.substring(0, params.labels.max_label_char) + '..';
          }
          return inst_name;
        }

        var row_container = d3.select('#main_svg')
          .append('g')
          .attr('id', 'row_container')
          .attr('transform', 'translate(' + params.norm_label.margin.left + ',' +
            params.viz.clust.margin.top + ')');

        // white background
        row_container
          .append('rect')
          .attr('fill', params.viz.background_color)
          .attr('width', params.norm_label.background.row)
          .attr('height', 30 * params.viz.clust.dim.height + 'px')
          .attr('class', 'white_bars');

        // container for row label groups
        row_container
          .append('g')
          .attr('class', 'label_container')
          .attr('transform', 'translate(' + params.norm_label.width.row + ',0)')
          .append('g')
          .attr('id', 'row_labels');




        var row_labels = d3.select('#row_labels')
          .selectAll('g')
          .data(row_nodes)
          .enter()
          .append('g')
          .attr('class', 'row_label_text')
          .attr('transform', function(d, index) {
            return 'translate(0,' + params.matrix.y_scale(index) + ')';
          })
          .on('dblclick', function(d) {
            reorder.row_reorder.call(this);
            if (params.tile_click_hlight) {
              add_row_click_hlight(this, d.ini);
            }
          })

        if (params.labels.show_tooltips) {
          // d3-tooltip
          var tip = d3.tip()
            .attr('class', 'd3-tip')
            .direction('e')
            .offset([0, 10])
            .html(function(d) {
              var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
              return "<span>" + inst_name + "</span>";
            })

          d3.select('#' + params.viz.svg_div_id)
            .select('svg')
            .select('#row_container')
            .call(tip);

          row_labels
            .on('mouseover', function(d) {
              d3.select(this)
                .select('text')
                .classed('active', true);
              tip.show(d);
            })
            .on('mouseout', function mouseout(d) {
              d3.select(this)
                .select('text')
                .classed('active', false);
              tip.hide(d);
            });
        } else {
          row_labels
            .on('mouseover', function(d) {
              d3.select(this)
                .select('text')
                .classed('active', true);
            })
            .on('mouseout', function mouseout(d) {
              d3.select(this)
                .select('text')
                .classed('active', false);
            });
        }


        // append rectangle behind text
        row_labels
          .insert('rect', 'text')
          .attr('x', -10)
          .attr('y', 0)
          .attr('width', 10)
          .attr('height', 10)
          .style('opacity', 0);

        // append row label text
        row_labels
          .append('text')
          .attr('y', params.matrix.y_scale.rangeBand() * 0.75)
          .attr('text-anchor', 'end')
          .style('font-size', params.labels.default_fs_row + 'px')
          .text(function(d) {
            return normal_name(d);
          });

        // change the size of the highlighting rects
        row_labels
          .each(function() {
            var bbox = d3.select(this)
              .select('text')[0][0]
              .getBBox();
            d3.select(this)
              .select('rect')
              .attr('x', bbox.x)
              .attr('y', 0)
              .attr('width', bbox.width)
              .attr('height', params.matrix.y_scale.rangeBand())
              .style('fill', function() {
                var inst_hl = 'yellow';
                return inst_hl;
              })
              .style('opacity', function(d) {
                var inst_opacity = 0;
                // highlight target genes
                if (d.target === 1) {
                  inst_opacity = 1;
                }
                return inst_opacity;
              });
          });

        // label the widest row and col labels
        params.bounding_width_max = {};
        params.bounding_width_max.row = 0;

        d3.selectAll('.row_label_text').each(function() {
          var tmp_width = d3.select(this).select('text').node().getBBox().width;
          if (tmp_width > params.bounding_width_max.row) {
            params.bounding_width_max.row = tmp_width;
          }
        });

        // row triangles
        ///////////////////////
        var row_label_viz = row_container
          .append('g')
          .attr('id', 'row_label_viz')
          .attr('transform', 'translate(' + params.norm_label.width.row + ',0)')
          .append('g')
          .attr('id', 'row_label_triangles');

        // white background for triangle
        row_label_viz
          .append('rect')
          .attr('class', 'white_bars')
          .attr('fill', params.viz.background_color)
          .attr('width', params.class_room.row + 'px')
          .attr('height', function() {
            var inst_height = params.viz.clust.dim.height;
            return inst_height;
          });

        // groups to hold label_viz
        var row_triangle_ini_group = row_label_viz
          .selectAll('g')
          .data(row_nodes)
          .enter()
          .append('g')
          .attr('class', 'row_triangle_group')
          .attr('transform', function(d, index) {
            return 'translate(0, ' + params.matrix.y_scale(index) + ')';
          });

        // add triangles
        row_triangle_ini_group
          .append('path')
          .attr('d', function() {
            var origin_x = params.class_room.symbol_width - 1;
            var origin_y = 0;
            var mid_x = 1;
            var mid_y = params.matrix.y_scale.rangeBand() / 2;
            var final_x = params.class_room.symbol_width - 1;
            var final_y = params.matrix.y_scale.rangeBand();
            var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' +
              mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';
            return output_string;
          })
          .attr('fill', function(d) {
            // initailize color
            var inst_color = '#eee';
            if (params.labels.show_categories) {
              inst_color = params.labels.class_colors.row[d.cl];
            }
            return inst_color;
          });


        if (Utils.has(params.network_data.row_nodes[0], 'value')) {

          // set bar scale
          var enr_max = Math.abs(lodash.max(row_nodes, function(d) {
            return Math.abs(d.value)
          }).value);
          params.labels.bar_scale_row = d3.scale
            .linear()
            .domain([0, enr_max])
            .range([0, params.norm_label.width.row]);

          row_labels
            .append('rect')
            .attr('class', 'row_bars')
            .attr('width', function(d) {
              var inst_value = 0;
              inst_value = params.labels.bar_scale_row(Math.abs(d.value));
              return inst_value;
            })
            .attr('x', function(d) {
              var inst_value = 0;
              inst_value = -params.labels.bar_scale_row(Math.abs(d.value));
              return inst_value;
            })
            .attr('height', params.matrix.y_scale.rangeBand())
            .attr('fill', function(d) {
              return d.value > 0 ? params.matrix.bar_colors[0] : params.matrix.bar_colors[1];
            })
            .attr('opacity', 0.4);

        }

        // add row callback function
        d3.selectAll('.row_label_text')
          .on('click', function(d) {
            if (typeof params.click_label == 'function') {
              params.click_label(d.name, 'row');
              add_row_click_hlight(this, d.ini);
            } else {
              if (params.tile_click_hlight) {
                add_row_click_hlight(this, d.ini);
              }
            }

          })


        function add_row_click_hlight(clicked_row, id_clicked_row) {

          if (id_clicked_row != params.click_hlight_row) {

            var rel_width_hlight = 6;
            var opacity_hlight = 0.85;
            var hlight_width = rel_width_hlight * params.viz.border_width;
            var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

            d3.selectAll('.click_hlight')
              .remove();

            // // highlight selected row
            // d3.selectAll('.row_label_text')
            //   .select('rect')
            // d3.select(this)
            //   .select('rect')
            //   .style('opacity', 1);

            d3.select(clicked_row)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'row_top_hlight')
              .attr('width', params.viz.svg_dim.width)
              .attr('height', hlight_height)
              .attr('fill', params.matrix.hlight_color)
              .attr('opacity', opacity_hlight);

            d3.select(clicked_row)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'row_bottom_hlight')
              .attr('width', params.viz.svg_dim.width)
              .attr('height', hlight_height)
              .attr('fill', params.matrix.hlight_color)
              .attr('opacity', opacity_hlight)
              .attr('transform', function() {
                var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;
                return 'translate(0,' + tmp_translate_y + ')';
              });
          } else {
            d3.selectAll('.click_hlight')
              .remove();
            params.click_hlight_row = -666;
          }

        }

        // row label text will not spillover initially since
        // the font-size is set up to not allow spillover
        // it can spillover during zooming and must be constrained

        // return row_triangle_ini_group so that the dendrogram can be made
        return row_triangle_ini_group;
      }

      // make col labels
      function make_cols(params, col_nodes, reorder) {

        function normal_name(d) {
          var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
          if (inst_name.length > params.labels.max_label_char) {
            inst_name = inst_name.substring(0, params.labels.max_label_char) + '..';
          }
          return inst_name;
        }

        // make container to pre-position zoomable elements
        var container_all_col = d3.select('#main_svg')
          .append('g')
          .attr('id', 'col_container')
          .attr('transform', 'translate(' + params.viz.clust.margin.left + ',' +
            params.norm_label.margin.top + ')');

        // white background rect for col labels
        container_all_col
          .append('rect')
          .attr('fill', params.viz.background_color) //!! prog_colors
          .attr('width', 30 * params.viz.clust.dim.width + 'px')
          .attr('height', params.norm_label.background.col)
          .attr('class', 'white_bars');

        // col labels
        container_all_col
          .append('g')
          .attr('class', 'label_container')
          // position the outer col label group
          .attr('transform', 'translate(0,' + params.norm_label.width.col + ')')
          .append('g')
          .attr('id', 'col_labels');

        // offset click group column label
        var x_offset_click = params.matrix.x_scale.rangeBand() / 2 + params.viz.border_width;
        // reduce width of rotated rects
        var reduce_rect_width = params.matrix.x_scale.rangeBand() * 0.36;


        // add main column label group
        var col_label_obj = d3.select('#col_labels')
          .selectAll('.col_label_text')
          .data(col_nodes)
          .enter()
          .append('g')
          .attr('class', 'col_label_text')
          .attr('transform', function(d, index) {
            return 'translate(' + params.matrix.x_scale(index) + ') rotate(-90)';
          })

        // append group for individual column label
        var col_label_click = col_label_obj
          // append new group for rect and label (not white lines)
          .append('g')
          .attr('class', 'col_label_click')
          // rotate column labels
          .attr('transform', 'translate(' + params.matrix.x_scale.rangeBand() / 2 + ',' + x_offset_click + ') rotate(45)')
          .on('mouseover', function(d) {
            d3.select(this).select('text')
              .classed('active', true);
            // tip.show(d)
          })
          .on('mouseout', function(d) {
            d3.select(this).select('text')
              .classed('active', false);
            // tip.hide(d)
          });

        // add column label
        col_label_click
          .append('text')
          .attr('x', 0)
          // manually tuned
          .attr('y', params.matrix.x_scale.rangeBand() * 0.64)
          .attr('dx', params.viz.border_width)
          .attr('text-anchor', 'start')
          .attr('full_name', function(d) {
            return d.name;
          })
          // original font size
          .style('font-size', params.labels.default_fs_col + 'px')
          .text(function(d) {
            return normal_name(d);
          });

        if (params.labels.show_tooltips) {

          // d3-tooltip
          var tip = d3.tip()
            .attr('class', 'd3-tip')
            .direction('s')
            .offset([20, 0])
            .html(function(d) {
              var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
              return "<span>" + inst_name + "</span>";
            });
          d3.select('#' + params.viz.svg_div_id)
            .select('svg')
            .select('#row_container')
            .call(tip);

          col_label_obj
            .select('text')
            .on('mouseover', tip.show)
            .on('mouseout', tip.hide);
        }

        params.bounding_width_max.col = 0;
        d3.selectAll('.col_label_click').each(function() {
          var tmp_width = d3.select(this).select('text').node().getBBox().width;
          if (tmp_width > params.bounding_width_max.col) {
            // increase the apparent width of the column label since its rotated
            // this will give more room for text
            params.bounding_width_max.col = tmp_width;
          }
        });

        // check if widest row or col are wider than the allowed label width
        ////////////////////////////////////////////////////////////////////////
        params.ini_scale_font = {};
        params.ini_scale_font.row = 1;
        params.ini_scale_font.col = 1;

        if (params.bounding_width_max.row > params.norm_label.width.row) {

          // calc reduction in font size
          params.ini_scale_font.row = params.norm_label.width.row / params.bounding_width_max.row;
          // redefine bounding_width_max.row
          params.bounding_width_max.row = params.ini_scale_font.row * params.bounding_width_max.row;

          // redefine default fs
          params.labels.default_fs_row = params.labels.default_fs_row * params.ini_scale_font.row;

          // reduce font size
          d3.selectAll('.row_label_text').each(function() {
            d3.select(this).select('text')
              .style('font-size', params.labels.default_fs_row + 'px');
          });
        }

        if (params.bounding_width_max.col > params.norm_label.width.col) {
          params.ini_scale_font.col = params.norm_label.width.col / params.bounding_width_max.col;
          // redefine bounding_width_max.col
          params.bounding_width_max.col = params.ini_scale_font.col * params.bounding_width_max.col;
          // redefine default fs
          params.labels.default_fs_col = params.labels.default_fs_col * params.ini_scale_font.col;
          // reduce font size
          d3.selectAll('.col_label_click').each(function() {
            d3.select(this).select('text')
              .style('font-size', params.labels.default_fs_col + 'px');
          });
        }

        // append rectangle behind text
        col_label_click
          .insert('rect', 'text')
          .attr('x', 10)
          .attr('y', 0)
          .attr('width', 10)
          .attr('height', 10)
          .style('opacity', 0);

        // change the size of the highlighting rects
        col_label_click
          .each(function() {
            var bbox = d3.select(this)
              .select('text')[0][0]
              .getBBox();
            d3.select(this)
              .select('rect')
              .attr('x', bbox.x * 1.25)
              .attr('y', 0)
              .attr('width', bbox.width * 1.25)
              .attr('height', params.matrix.x_scale.rangeBand() * 0.6)
              .style('fill', 'yellow')
              .style('opacity', 0);
          });

        // add triangle under rotated labels
        col_label_click
          .append('path')
          .style('stroke-width', 0)
          .attr('d', function() {
            // x and y are flipped since its rotated
            var origin_y = -params.viz.border_width;
            var start_x = 0;
            var final_x = params.matrix.x_scale.rangeBand() - reduce_rect_width;
            var start_y = -(params.matrix.x_scale.rangeBand() - reduce_rect_width +
              params.viz.border_width);
            var final_y = -params.viz.border_width;
            var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' +
              start_x + ', L ' + final_y + ',' + final_x + ' Z';
            return output_string;
          })
          .attr('fill', function(d) {
            var inst_color = '#eee';
            if (params.labels.show_categories) {
              inst_color = params.labels.class_colors.col[d.cl];
            }
            return inst_color;
          });


        // get max value
        var enr_max = Math.abs(lodash.max(col_nodes, function(d) {
          return Math.abs(d.value)
        }).value);
        var enr_min = Math.abs(lodash.min(col_nodes, function(d) {
          return Math.abs(d.value)
        }).value);

        // the enrichment bar should be 3/4ths of the height of the column labels
        params.labels.bar_scale_col = d3.scale
          .linear()
          .domain([enr_min * 0.75, enr_max])
          .range([0, params.norm_label.width.col]);

        // append column value bars
        if (Utils.has(params.network_data.col_nodes[0], 'value')) {
          col_label_click
            .append('rect')
            .attr('class', 'col_bars')
            .attr('width', function(d) {
              var inst_value = 0;
              if (d.value > 0) {
                inst_value = params.labels.bar_scale_col(d.value);
              }
              return inst_value;
            })
            // rotate labels - reduce width if rotating
            .attr('height', params.matrix.x_scale.rangeBand() * 0.66)
            .attr('fill', function(d) {
              return d.value > 0 ? params.matrix.bar_colors[0] : params.matrix.bar_colors[1];
            })
            .attr('opacity', 0.4);
        }


        // add col callback function
        d3.selectAll('.col_label_text')
          .on('click', function(d) {

            if (typeof params.click_label == 'function') {
              params.click_label(d.name, 'col');
              add_col_click_hlight(this, d.ini);
            } else {

              if (params.tile_click_hlight) {
                add_col_click_hlight(this, d.ini);
              }

            }

          })
          .on('dblclick', function(d) {
            reorder.col_reorder.call(this);
            if (params.tile_click_hlight) {
              add_col_click_hlight(this, d.ini);
            }
          });


        function add_col_click_hlight(clicked_col, id_clicked_col) {

          if (id_clicked_col != params.click_hlight_col) {

            params.click_hlight_col = id_clicked_col;

            var rel_width_hlight = 6;
            var opacity_hlight = 0.85;
            var hlight_width = rel_width_hlight * params.viz.border_width;
            var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

            d3.selectAll('.click_hlight')
              .remove();

            // // highlight selected column
            // ///////////////////////////////
            // // unhilight and unbold all columns (already unbolded earlier)
            // d3.selectAll('.col_label_text')
            //   .select('rect')
            //   .style('opacity', 0);
            // // highlight column name
            // d3.select(clicked_col)
            //   .select('rect')
            //   .style('opacity', 1);

            d3.select(clicked_col)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'col_top_hlight')
              .attr('width', params.viz.clust.dim.height)
              .attr('height', hlight_width)
              .attr('fill', params.matrix.hlight_color)
              .attr('opacity', opacity_hlight)
              .attr('transform', function() {
                var tmp_translate_y = 0;
                var tmp_translate_x = -(params.viz.clust.dim.height +
                  params.class_room.col + params.viz.uni_margin);
                return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
              });

            d3.select(clicked_col)
              .append('rect')
              .attr('class', 'click_hlight')
              .attr('id', 'col_bottom_hlight')
              .attr('width', params.viz.clust.dim.height)
              .attr('height', hlight_width)
              .attr('fill', params.matrix.hlight_color)
              .attr('opacity', opacity_hlight)
              .attr('transform', function() {
                // reverse x and y since rotated
                var tmp_translate_y = params.matrix.x_scale.rangeBand() - hlight_width;
                var tmp_translate_x = -(params.viz.clust.dim.height +
                  params.class_room.col + params.viz.uni_margin);
                return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
              });
          } else {
            d3.selectAll('.click_hlight')
              .remove();
            params.click_hlight_col = -666;
          }

        }

        return container_all_col;

      }

      return {
        make_rows: make_rows,
        make_cols: make_cols
      };

    }


    function SuperLabels() {

      function make(params) {

        // super col title
        /////////////////////////////////////
        // add super column title background
        d3.select('#main_svg')
          .append('rect')
          .attr('fill', params.viz.background_color)
          .attr('height', params.labels.super_label_width + 'px')
          .attr('width', '3000px')
          .attr('id', 'super_col_bkg')
          .attr('class', 'white_bars')
          .attr('transform', 'translate(0,' + params.viz.grey_border_width + ')');

        // super col title
        d3.select('#main_svg')
          .append('text')
          .attr('id', 'super_col')
          .text(params.labels.super.col)
          .attr('text-anchor', 'center')
          .attr('transform', function() {
            var inst_x = params.viz.clust.dim.width / 2 + params.norm_label.width
              .row;
            var inst_y = params.labels.super_label_width - params.viz.uni_margin;
            return 'translate(' + inst_x + ',' + inst_y + ')';
          })
          .style('font-size', '14px')
          .style('font-weight', 300);

        // super row title
        /////////////////////////////////////
        d3.select('#main_svg')
          .append('rect')
          .attr('fill', params.viz.background_color)
          .attr('width', params.labels.super_label_width + 'px')
          .attr('height', '3000px')
          .attr('id', 'super_row_bkg')
          .attr('class', 'white_bars')
          .attr('transform', 'translate(' + params.viz.grey_border_width + ',0)');

        // append super title row group
        // this is used to separate translation from rotation
        d3.select('#main_svg')
          .append('g')
          .attr('id', 'super_row')
          .attr('transform', function() {
            // position in the middle of the clustergram
            var inst_x = params.labels.super_label_width - params.viz.uni_margin;
            var inst_y = params.viz.clust.dim.height / 2 + params.norm_label.width
              .col;
            return 'translate(' + inst_x + ',' + inst_y + ')';
          });

        // super row label (rotate the already translated title )
        d3.select('#super_row')
          .append('text')
          .text(params.labels.super.row)
          .attr('text-anchor', 'center')
          .attr('transform', 'rotate(-90)')
          .style('font-size', '14px')
          .style('font-weight', 300);

      }

      return {
        make: make
      };
    }


    /* Spillover Module
     */
    function Spillover(params, container_all_col) {

      // make spillover protection divs
      make(params, container_all_col);

      function make(params, container_all_col) {

        // Spillover Protection
        //////////////////////////

        // hide spillover from slanted column labels on right side
        container_all_col
          .append('path')
          .style('stroke-width', '0')
          // mini-language for drawing path in d3, used to draw triangle
          .attr('d', 'M 0,0 L 500,-500, L 500,0 Z')
          .attr('fill', params.viz.background_color) //!! prog_colors
          .attr('id', 'right_slant_triangle')
          .attr('transform', 'translate(' + params.viz.clust.dim.width + ',' +
            params.norm_label.width.col + ')');

        // hide spillover from slanted column labels on left side
        container_all_col
          .append('path')
          .style('stroke-width', '0')
          // mini-language for drawing path in d3, used to draw triangle
          .attr('d', 'M 0,0 L 500,-500, L 0,-500 Z')
          .attr('fill', params.viz.background_color)
          .attr('id', 'left_slant_triangle')
          // shift left by 1 px to prevent cutting off labels
          .attr('transform', 'translate(-1,' + params.norm_label.width.col +
            ')');

        // top corner rect
        ///////////////////////////////
        // white rect to cover excess labels
        d3.select('#main_svg')
          .append('rect')
          .attr('fill', params.viz.background_color) //!! prog_colors
          .attr('width', params.viz.clust.margin.left)
          .attr('height', params.viz.clust.margin.top)
          .attr('id', 'top_left_white');

        // hide spillover from right
        d3.select('#main_svg')
          .append('rect')
          .attr('fill', params.viz.background_color) //!! prog_colors
          .attr('width', '300px')
          .attr('height', '3000px')
          .attr('transform', function() {
            var tmp_left = params.viz.clust.margin.left + params.viz.clust.dim.width;
            var tmp_top = params.norm_label.margin.top + params.norm_label.width
              .col;
            return 'translate(' + tmp_left + ',' + tmp_top + ')';
          })
          .attr('class', 'white_bars')
          .attr('id', 'right_spillover');

        // white border bottom - prevent clustergram from hitting border
        ///////////////////////////////////////////////////////////////////
        d3.select('#main_svg')
          .append('rect')
          .attr('id', 'bottom_spillover')
          .attr('fill', params.viz.background_color) //!! prog_colors
          .attr('width', params.viz.svg_dim.width)
          // make this border twice the width of the grey border
          .attr('height', 2 * params.viz.grey_border_width)
          .attr('transform', function() {
            // shift up enough to show the entire border width
            var inst_offset = params.viz.svg_dim.height - 3 * params.viz.grey_border_width;
            return 'translate(0,' + inst_offset + ')';
          });


      }


    }

    function reset_visualization_size(params) {

      // get outer_margins
      if (params.viz.expand == false) {
        var outer_margins = params.viz.outer_margins;
      } else {
        var outer_margins = params.viz.outer_margins_expand;
      }

      // get the size of the window
      var screen_width = window.innerWidth;
      var screen_height = window.innerHeight;

      // define width and height of clustergram container
      var cont_dim = {};
      cont_dim.width = screen_width - outer_margins.left - outer_margins.right;
      cont_dim.height = screen_height - outer_margins.top - outer_margins.bottom;

      run_reset_visualization_size(cont_dim.width, cont_dim.height, outer_margins.left, outer_margins.top, params);

    }


    function run_reset_visualization_size(set_clust_width, set_clust_height, set_margin_left, set_margin_top, parameters) {

      var params = parameters || this.params;

      // reset zoom
      // zoom.two_translate_zoom(0,0,1)
      var zoom_y = 1;
      var zoom_x = 1;
      var pan_dx = 0;
      var pan_dy = 0;


      var half_height = params.viz.clust.dim.height / 2;
      var center_y = -(zoom_y - 1) * half_height;

      // transform clust group
      ////////////////////////////
      // d3.select('#clust_group')
      viz.get_clust_group()
        // first apply the margin transformation
        // then zoom, then apply the final transformation
        .attr('transform', 'translate(' + [0, 0 + center_y] + ')' +
          ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [pan_dx,
            pan_dy
          ] + ')');

      // transform row labels
      d3.select('#row_labels')
        .attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' +
          zoom_y + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

      // transform row_label_triangles
      // use the offset saved in params, only zoom in the y direction
      d3.select('#row_label_triangles')
        .attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' +
          1 + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

      // transform col labels
      d3.select('#col_labels')
        .attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [
          pan_dx, 0
        ] + ')');

      // transform col_class
      d3.select('#col_class')
        .attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [
          pan_dx, 0
        ] + ')');

      // set y translate: center_y is positive, positive moves the visualization down
      // the translate vector has the initial margin, the first y centering, and pan_dy
      // times the scaling zoom_y
      var net_y_offset = params.viz.clust.margin.top + center_y + pan_dy * zoom_y;

      // reset the zoom translate and zoom
      params.zoom.scale(zoom_y);
      params.zoom.translate([pan_dx, net_y_offset]);



      // size the svg container div - svg_div
      d3.select('#' + params.viz.svg_div_id)
        .style('margin-left', set_margin_left + 'px')
        .style('margin-top', set_margin_top + 'px')
        .style('width', set_clust_width + 'px')
        .style('height', set_clust_height + 'px');

      // get height and width from parent div
      params.viz.svg_dim = {};
      params.viz.svg_dim.width = Number(d3.select('#' + params.viz.svg_div_id).style('width').replace('px', ''));
      params.viz.svg_dim.height = Number(d3.select('#' + params.viz.svg_div_id).style('height').replace('px', ''));


      ///////////////////////////////////////////////////////
      // resizing labels on screen resize will be done later
      ///////////////////////////////////////////////////////

      // // define label scale parameters: the more characters in the longest name, the larger the margin
      // var min_num_char = 5;
      // var max_num_char = params.labels.max_label_char;

      // // define label scale
      // ///////////////////////////
      // var min_label_width = 85;
      // var max_label_width = 140;
      // var label_scale = d3.scale.linear()
      //   .domain([min_num_char, max_num_char])
      //   .range([min_label_width, max_label_width]).clamp('true');

      // // screen_label_scale
      // var screen_label_scale = d3.scale.linear()
      //   .domain([500,1000])
      //   .range([0.5,1.0])
      //   .clamp(true);

      // // Label Scale
      // ///////////////////////
      // // dependent on max char length or row/col labels, screensize,
      // // and user-defined factor
      // params.norm_label.width.row = 1.2*label_scale(params.labels.row_max_char)
      //   * screen_label_scale(params.viz.svg_dim.width)
      //   * params.row_label_scale;

      // params.norm_label.width.col = label_scale(params.labels.col_max_char)
      //   * screen_label_scale(params.viz.svg_dim.height)
      //   * params.col_label_scale;

      /////////////////////////////////////////////

      // reduce width by row/col labels and by grey_border width (reduce width by less since this is less aparent with slanted col labels)
      var ini_clust_width = params.viz.svg_dim.width - (params.labels.super_label_width +
        params.norm_label.width.row + params.class_room.row) - params.viz.grey_border_width - params.viz.spillover_x_offset;

      // there is space between the clustergram and the border
      var ini_clust_height = params.viz.svg_dim.height - (params.labels.super_label_width +
        params.norm_label.width.col + params.class_room.col) - 5 * params.viz.grey_border_width;

      // // the visualization dimensions can be smaller than the svg
      // // columns need to be shrunk for wide screens
      // var min_col_shrink_scale = d3.scale.linear().domain([100,1500]).range([1,0.1]).clamp('true');
      // var min_col_shrink = min_col_shrink_scale(params.viz.svg_dim.width);

      // reduce clustergram width if triangles are taller than the normal width
      // of the columns
      var tmp_x_scale = d3.scale.ordinal().rangeBands([0, ini_clust_width]);
      tmp_x_scale.domain(params.matrix.orders.ini_row);
      var triangle_height = tmp_x_scale.rangeBand() / 2;
      if (triangle_height > params.norm_label.width.col) {
        ini_clust_width = ini_clust_width * (params.norm_label.width.col / triangle_height);
      }
      params.viz.clust.dim.width = ini_clust_width;


      // clustergram height
      ////////////////////////
      // ensure that rects are never taller than they are wide
      // force square tiles
      if (ini_clust_width / params.viz.num_col_nodes < ini_clust_height / params.viz.num_row_nodes) {

        // scale the height
        params.viz.clust.dim.height = ini_clust_width * (params.viz.num_row_nodes / params.viz.num_col_nodes);

        // keep track of whether or not a force square has occurred
        // so that I can adjust the font accordingly
        params.viz.force_square = 1;

        // make sure that force_square does not cause the entire visualization
        // to be taller than the svg, if it does, then undo
        if (params.viz.clust.dim.height > ini_clust_height) {
          // make the height equal to the width
          params.viz.clust.dim.height = ini_clust_height;
          // keep track of whether or not a force square has occurred
          params.viz.force_square = 0;
        }
      }
      // do not force square tiles
      else {
        // the height will be calculated normally - leading to wide tiles
        params.viz.clust.dim.height = ini_clust_height;
        // keep track of whether or not a force square has occurred
        params.viz.force_square = 0;
      }

      // zoom_switch from 1 to 2d zoom
      params.viz.zoom_switch = (params.viz.clust.dim.width / params.viz.num_col_nodes) / (params.viz.clust.dim.height / params.viz.num_row_nodes);

      // zoom_switch can not be less than 1
      if (params.viz.zoom_switch < 1) {
        params.viz.zoom_switch = 1;
      }


      // resize the svg
      ///////////////////////
      var svg_group = d3.select('#' + params.viz.svg_div_id)
        .select('svg')
        .attr('id', 'main_svg')
        .attr('width', params.viz.svg_dim.width)
        .attr('height', params.viz.svg_dim.height);

      // redefine x_scale and y_scale rangeBands
      params.matrix.x_scale.rangeBands([0, params.viz.clust.dim.width]);
      params.matrix.y_scale.rangeBands([0, params.viz.clust.dim.height]);

      // redefine zoom extent
      params.viz.real_zoom = params.norm_label.width.col / (params.matrix.x_scale.rangeBand() / 2);
      params.zoom
        .scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch]);

      // redefine border width
      params.viz.border_width = params.matrix.x_scale.rangeBand() / 40;

      // the default font sizes are set here
      params.labels.default_fs_row = params.matrix.y_scale.rangeBand() * 1.01;
      params.labels.default_fs_col = params.matrix.x_scale.rangeBand() * 0.85;

      svg_group.select('#grey_background')
        .attr('width', params.viz.clust.dim.width)
        .attr('height', params.viz.clust.dim.height);

      // resize tiles
      ///////////////////
      svg_group.selectAll('.tile')
        .attr('width', params.matrix.x_scale.rangeBand())
        .attr('height', params.matrix.y_scale.rangeBand())
        .attr('transform', function(d) {
          return 'translate(' + params.matrix.x_scale(d.pos_x) + ',0)';
        });

      svg_group.selectAll('.tile_group')
        .attr('width', params.matrix.x_scale.rangeBand())
        .attr('height', params.matrix.y_scale.rangeBand());

      svg_group.selectAll('.row')
        .attr('transform', function(d, index) {
          return 'translate(0,' + params.matrix.y_scale(index) + ')';
        });

      svg_group.selectAll('.highlighting_rect')
        .attr('width', params.matrix.x_scale.rangeBand() * 0.80)
        .attr('height', params.matrix.y_scale.rangeBand() * 0.80);

      svg_group.selectAll('.tile_split_up')
        .attr('d', function() {
          var start_x = 0;
          var final_x = params.matrix.x_scale.rangeBand();
          var start_y = 0;
          var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;
          var output_string = 'M' + start_x + ',' + start_y + ', L' +
            start_x + ', ' + final_y + ', L' + final_x + ',0 Z';
          return output_string;
        })

      svg_group.selectAll('.tile_split_dn')
        .attr('d', function() {
          var start_x = 0;
          var final_x = params.matrix.x_scale.rangeBand();
          var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;
          var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;
          var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' +
            final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';
          return output_string;
        })

      // resize click hlight
      var rel_width_hlight = 6;
      var opacity_hlight = 0.85;

      var hlight_width = rel_width_hlight * params.viz.border_width;
      var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

      // reposition tile highlight
      ////////////////////////////////

      // top highlight
      d3.select('#top_hlight')
        .attr('width', params.matrix.x_scale.rangeBand())
        .attr('height', hlight_height)
        .attr('transform', function() {
          return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',0)';
        });

      // left highlight
      d3.select('#left_hlight')
        .attr('width', hlight_width)
        .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
        .attr('transform', function() {
          return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',' +
            hlight_height * 0.99 + ')';
        });

      // right highlight
      d3.select('#right_hlight')
        .attr('width', hlight_width)
        .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
        .attr('transform', function() {
          var tmp_translate = params.matrix.x_scale(params.matrix.click_hlight_x) + params.matrix.x_scale.rangeBand() - hlight_width;
          return 'translate(' + tmp_translate + ',' +
            hlight_height * 0.99 + ')';
        });

      // bottom highlight
      d3.select('#bottom_hlight')
        .attr('width', function() {
          return params.matrix.x_scale.rangeBand() - 1.98 * hlight_width
        })
        .attr('height', hlight_height)
        .attr('transform', function() {
          var tmp_translate_x = params.matrix.x_scale(params.matrix.click_hlight_x) + hlight_width * 0.99;
          var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;
          return 'translate(' + tmp_translate_x + ',' +
            tmp_translate_y + ')';
        });

      // resize row highlight
      /////////////////////////
      d3.select('#row_top_hlight')
        .attr('width', params.viz.svg_dim.width)
        .attr('height', hlight_height);

      d3.select('#row_bottom_hlight')
        .attr('width', params.viz.svg_dim.width)
        .attr('height', hlight_height)
        .attr('transform', function() {
          var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;
          return 'translate(0,' + tmp_translate_y + ')';
        });

      // resize col highlight
      /////////////////////////
      d3.select('#col_top_hlight')
        .attr('width', params.viz.clust.dim.height)
        .attr('height', hlight_width)
        .attr('transform', function() {
          var tmp_translate_y = 0;
          var tmp_translate_x = -(params.viz.clust.dim.height +
            params.class_room.col + params.viz.uni_margin);
          return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
        });

      d3.select('#col_bottom_hlight')
        .attr('width', params.viz.clust.dim.height)
        .attr('height', hlight_width)
        .attr('transform', function() {
          var tmp_translate_y = params.matrix.x_scale.rangeBand() - hlight_width;
          var tmp_translate_x = -(params.viz.clust.dim.height +
            params.class_room.col + params.viz.uni_margin);
          return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
        });

      // add text to row/col during resize
      function normal_name(d) {
        var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
        if (inst_name.length > params.labels.max_label_char) {
          inst_name = inst_name.substring(0, params.labels.max_label_char) + '..';
        }
        return inst_name;
      }

      // resize row labels
      ///////////////////////////

      svg_group.select('#row_container')
        .attr('transform', 'translate(' + params.norm_label.margin.left + ',' +
          params.viz.clust.margin.top + ')');

      svg_group.select('#row_container')
        .select('.white_bars')
        .attr('width', params.norm_label.background.row)
        .attr('height', 30 * params.viz.clust.dim.height + 'px');

      svg_group.select('#row_container')
        .select('.label_container')
        .attr('transform', 'translate(' + params.norm_label.width.row + ',0)');

      svg_group.selectAll('.row_label_text')
        .attr('transform', function(d, index) {
          return 'translate(0,' + params.matrix.y_scale(index) + ')';
        });

      svg_group.selectAll('.row_label_text')
        .select('text')
        .attr('y', params.matrix.y_scale.rangeBand() * 0.75)

      svg_group.selectAll('.row_label_text')
        .select('text')
        .style('font-size', params.labels.default_fs_row + 'px')
        .text(function(d) {
          return normal_name(d);
        });

      // change the size of the highlighting rects
      svg_group.selectAll('.row_label_text')
        .each(function() {
          var bbox = d3.select(this)
            .select('text')[0][0]
            .getBBox();
          d3.select(this)
            .select('rect')
            .attr('x', bbox.x * 0.5)
            .attr('y', 0)
            .attr('width', bbox.width * 0.5)
            .attr('height', params.matrix.y_scale.rangeBand())
            .style('fill', function() {
              var inst_hl = 'yellow';
              return inst_hl;
            })
            .style('opacity', function(d) {
              var inst_opacity = 0;
              // highlight target genes
              if (d.target === 1) {
                inst_opacity = 1;
              }
              return inst_opacity;
            });
        });


      // label the widest row and col labels
      params.bounding_width_max = {};
      params.bounding_width_max.row = 0;
      d3.selectAll('.row_label_text').each(function() {
        var tmp_width = d3.select(this).select('text').node().getBBox().width;
        if (tmp_width > params.bounding_width_max.row) {
          params.bounding_width_max.row = tmp_width;
        }
      });

      svg_group.select('#row_label_viz')
        .attr('transform', 'translate(' + params.norm_label.width.row + ',0)');

      svg_group.select('#row_label_viz')
        .select('white_bars')
        .attr('width', params.class_room.row + 'px')
        .attr('height', function() {
          var inst_height = params.viz.clust.dim.height;
          return inst_height;
        });

      svg_group.selectAll('.row_triangle_group')
        .attr('transform', function(d, index) {
          return 'translate(0, ' + params.matrix.y_scale(index) + ')';
        });

      svg_group.selectAll('.row_triangle_group')
        .select('path')
        .attr('d', function() {
          var origin_x = params.class_room.symbol_width - 1;
          var origin_y = 0;
          var mid_x = 1;
          var mid_y = params.matrix.y_scale.rangeBand() / 2;
          var final_x = params.class_room.symbol_width - 1;
          var final_y = params.matrix.y_scale.rangeBand();
          var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' +
            mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';
          return output_string;
        });


      if (Utils.has(params.network_data.row_nodes[0], 'value')) {

        // set bar scale
        var enr_max = Math.abs(lodash.max(params.network_data.row_nodes, function(d) {
          return Math.abs(d.value)
        }).value);
        params.labels.bar_scale_row = d3.scale
          .linear()
          .domain([0, enr_max])
          .range([0, params.norm_label.width.row]);

        svg_group.selectAll('.row_bars')
          .attr('width', function(d) {
            var inst_value = 0;
            inst_value = params.labels.bar_scale_row(Math.abs(d.value));
            return inst_value;
          })
          .attr('x', function(d) {
            var inst_value = 0;
            inst_value = -params.labels.bar_scale_row(Math.abs(d.value));
            return inst_value;
          })
          .attr('height', params.matrix.y_scale.rangeBand());

      }

      // resize col labels
      ///////////////////////
      svg_group.select('#col_container')
        .attr('transform', 'translate(' + params.viz.clust.margin.left + ',' +
          params.norm_label.margin.top + ')');

      svg_group.select('#col_container')
        .select('.white_bars')
        .attr('width', 30 * params.viz.clust.dim.width + 'px')
        .attr('height', params.norm_label.background.col);

      svg_group.select('#col_container')
        .select('.label_container')
        .attr('transform', 'translate(0,' + params.norm_label.width.col + ')');

      // offset click group column label
      var x_offset_click = params.matrix.x_scale.rangeBand() / 2 + params.viz.border_width;
      // reduce width of rotated rects
      var reduce_rect_width = params.matrix.x_scale.rangeBand() * 0.36;

      svg_group.selectAll('.col_label_text')
        .attr('transform', function(d, index) {
          return 'translate(' + params.matrix.x_scale(index) + ') rotate(-90)';
        });

      svg_group.selectAll('.col_label_click')
        .attr('transform', 'translate(' + params.matrix.x_scale.rangeBand() / 2 + ',' + x_offset_click + ') rotate(45)');

      svg_group.selectAll('.col_label_click')
        .select('text')
        .attr('y', params.matrix.x_scale.rangeBand() * 0.60)
        .attr('dx', 2 * params.viz.border_width)
        .style('font-size', params.labels.default_fs_col + 'px')
        .text(function(d) {
          return normal_name(d);
        });


      params.bounding_width_max.col = 0;
      svg_group.selectAll('.col_label_click').each(function() {
        var tmp_width = d3.select(this).select('text').node().getBBox().width;
        if (tmp_width > params.bounding_width_max.col) {
          params.bounding_width_max.col = tmp_width * 1.2;
        }
      });


      // check if widest row or col are wider than the allowed label width
      ////////////////////////////////////////////////////////////////////////
      params.ini_scale_font = {};
      params.ini_scale_font.row = 1;
      params.ini_scale_font.col = 1;

      if (params.bounding_width_max.row > params.norm_label.width.row) {

        // calc reduction in font size
        params.ini_scale_font.row = params.norm_label.width.row / params.bounding_width_max.row;
        // redefine bounding_width_max.row
        params.bounding_width_max.row = params.ini_scale_font.row * params.bounding_width_max.row;

        // redefine default fs
        params.labels.default_fs_row = params.labels.default_fs_row * params.ini_scale_font.row;
        // reduce font size
        d3.selectAll('.row_label_text').each(function() {
          d3.select(this).select('text')
            .style('font-size', params.labels.default_fs_row + 'px');
        });
      }

      if (params.bounding_width_max.col > params.norm_label.width.col) {

        // calc reduction in font size
        params.ini_scale_font.col = params.norm_label.width.col / params.bounding_width_max.col;
        // redefine bounding_width_max.col
        params.bounding_width_max.col = params.ini_scale_font.col * params.bounding_width_max.col;
        // redefine default fs
        params.labels.default_fs_col = params.labels.default_fs_col * params.ini_scale_font.col;
        // reduce font size
        d3.selectAll('.col_label_click').each(function() {
          d3.select(this).select('text')
            .style('font-size', params.labels.default_fs_col + 'px');
        });
      }

      svg_group.selectAll('.col_label_click')
        .each(function() {
          var bbox = d3.select(this)
            .select('text')[0][0]
            .getBBox();
          d3.select(this)
            .select('rect')
            .attr('x', bbox.x * 1.25)
            .attr('y', 0)
            .attr('width', bbox.width * 1.25)
            .attr('height', params.matrix.x_scale.rangeBand() * 0.6)
            .style('fill', 'yellow')
            .style('opacity', 0);
        });

      svg_group.selectAll('.col_label_click')
        .select('path')
        .attr('d', function() {
          // x and y are flipped since its rotated
          var origin_y = -params.viz.border_width;
          var start_x = 0;
          var final_x = params.matrix.x_scale.rangeBand() - reduce_rect_width;
          var start_y = -(params.matrix.x_scale.rangeBand() - reduce_rect_width +
            params.viz.border_width);
          var final_y = -params.viz.border_width;
          var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' +
            start_x + ', L ' + final_y + ',' + final_x + ' Z';
          return output_string;
        })
        .attr('fill', function(d) {
          var inst_color = '#eee';
          if (params.labels.show_categories) {
            inst_color = params.labels.class_colors.col[d.cl];
          }
          return inst_color;
        });


      // get max value
      var enr_max = Math.abs(lodash.max(params.network_data.col_nodes, function(d) {
        return Math.abs(d.value)
      }).value);
      var enr_min = Math.abs(lodash.min(params.network_data.col_nodes, function(d) {
        return Math.abs(d.value)
      }).value);

      // the enrichment bar should be 3/4ths of the height of the column labels
      params.labels.bar_scale_col = d3.scale
        .linear()
        .domain([enr_min * 0.75, enr_max])
        .range([0, params.norm_label.width.col]);

      // append column value bars
      if (Utils.has(params.network_data.col_nodes[0], 'value')) {

        svg_group.selectAll('.col_bars')
          .attr('width', function(d) {
            var inst_value = 0;
            if (d.value > 0) {
              inst_value = params.labels.bar_scale_col(d.value);
            }
            return inst_value;
          })
          // rotate labels - reduce width if rotating
          .attr('height', params.matrix.x_scale.rangeBand() * 0.66);
      }

      // resize dendrogram
      ///////////////////
      svg_group.selectAll('.row_class_rect')
        .attr('width', function() {
          var inst_width = params.class_room.symbol_width - 1;
          return inst_width + 'px';
        })
        .attr('height', params.matrix.y_scale.rangeBand())
        .attr('x', function() {
          var inst_offset = params.class_room.symbol_width + 1;
          return inst_offset + 'px';
        });

      svg_group.selectAll('.col_class_rect')
        .attr('width', params.matrix.x_scale.rangeBand())
        .attr('height', function() {
          var inst_height = params.class_room.col - 1;
          return inst_height;
        });

      svg_group.selectAll('.col_class_group')
        .attr('transform', function(d, index) {
          return 'translate(' + params.matrix.x_scale(index) + ',0)';
        });

      // reposition grid lines
      ////////////////////////////
      svg_group.selectAll('.horz_lines')
        .attr('transform', function(d, index) {
          return 'translate(0,' + params.matrix.y_scale(index) + ') rotate(0)';
        })

      svg_group.selectAll('.horz_lines')
        .select('line')
        .attr('x2', params.viz.clust.dim.width)
        .style('stroke-width', params.viz.border_width / params.viz.zoom_switch + 'px')

      svg_group.selectAll('.vert_lines')
        .attr('transform', function(d, index) {
          return 'translate(' + params.matrix.x_scale(index) + ') rotate(-90)';
        });

      svg_group.selectAll('.vert_lines')
        .select('line')
        .attr('x2', -params.viz.clust.dim.height)
        .style('stroke-width', params.viz.border_width + 'px');

      // resize superlabels
      /////////////////////////////////////
      svg_group.select('#super_col_bkg')
        .attr('height', params.labels.super_label_width + 'px')
        .attr('transform', 'translate(0,' + params.viz.grey_border_width + ')');

      // super col title
      svg_group.select('#super_col')
        .attr('transform', function() {
          var inst_x = params.viz.clust.dim.width / 2 + params.norm_label.width
            .row;
          var inst_y = params.labels.super_label_width - params.viz.uni_margin;
          return 'translate(' + inst_x + ',' + inst_y + ')';
        });

      // super row title
      svg_group.select('#super_row_bkg')
        .attr('width', params.labels.super_label_width + 'px')
        .attr('transform', 'translate(' + params.viz.grey_border_width + ',0)');

      // append super title row group
      svg_group.select('#super_row')
        .attr('transform', function() {
          var inst_x = params.labels.super_label_width - params.viz.uni_margin;
          var inst_y = params.viz.clust.dim.height / 2 + params.norm_label.width
            .col;
          return 'translate(' + inst_x + ',' + inst_y + ')';
        });

      // // super row label (rotate the already translated title )
      // d3.select('#super_row_label')
      //   .append('text')
      //   .text(params.labels.super.row)
      //   .attr('text-anchor', 'center')
      //   .attr('transform', 'rotate(-90)')
      //   .style('font-size', '14px')
      //   .style('font-weight', 300);

      // resize spillover
      //////////////////////////

      // hide spillover from slanted column labels on right side
      svg_group.select('#right_slant_triangle')
        .attr('transform', 'translate(' + params.viz.clust.dim.width + ',' +
          params.norm_label.width.col + ')');

      svg_group.select('#left_slant_triangle')
        .attr('transform', 'translate(-1,' + params.norm_label.width.col + ')');

      svg_group.select('#top_left_white')
        .attr('width', params.viz.clust.margin.left)
        .attr('height', params.viz.clust.margin.top);

      svg_group.select('#right_spillover')
        .attr('transform', function() {
          var tmp_left = params.viz.clust.margin.left + params.viz.clust.dim.width;
          var tmp_top = params.norm_label.margin.top + params.norm_label.width
            .col;
          return 'translate(' + tmp_left + ',' + tmp_top + ')';
        });


      // white border bottom - prevent clustergram from hitting border
      svg_group.select('#bottom_spillover')
        .attr('width', params.viz.svg_dim.width)
        .attr('height', 2 * params.viz.grey_border_width)
        .attr('transform', function() {
          // shift up enough to show the entire border width
          var inst_offset = params.viz.svg_dim.height - 3 * params.viz.grey_border_width;
          return 'translate(0,' + inst_offset + ')';
        });


      // add border to svg in four separate lines - to not interfere with clicking anything
      ///////////////////////////////////////////////////////////////////////////////////////

      // left border
      svg_group.select('#left_border')
        .attr('width', params.viz.grey_border_width)
        .attr('height', params.viz.svg_dim.height)
        .attr('transform', 'translate(0,0)');

      // right border
      svg_group.select('#right_border')
        .attr('width', params.viz.grey_border_width)
        .attr('height', params.viz.svg_dim.height)
        .attr('transform', function() {
          var inst_offset = params.viz.svg_dim.width - params.viz.grey_border_width;
          return 'translate(' + inst_offset + ',0)';
        });

      // top border
      svg_group.select('#top_border')
        .attr('width', params.viz.svg_dim.width)
        .attr('height', params.viz.grey_border_width)
        .attr('transform', function() {
          var inst_offset = 0;
          return 'translate(' + inst_offset + ',0)';
        });

      // bottom border
      svg_group.select('#bottom_border')
        .attr('width', params.viz.svg_dim.width)
        .attr('height', params.viz.grey_border_width)
        .attr('transform', function() {
          var inst_offset = params.viz.svg_dim.height - params.viz.grey_border_width;
          return 'translate(0,' + inst_offset + ')';
        });



      // reset zoom and translate
      //////////////////////////////
      params.zoom.scale(1).translate(
        [params.viz.clust.margin.left, params.viz.clust.margin.top]
      );

      d3.select('#main_svg').style('opacity', 1);
    }

    /* Represents the entire visualization: labels, dendrogram (optional) and matrix.
     */
    function Viz(config) {

      // scope these variables to viz
      var matrix,
        row_dendrogram,
        col_dendrogram,
        zoom,
        params,
        reorder;

      // make viz
      params = make(config);

      /* The main function; makes clustergram based on user arguments.
       */
      function make(config) {

        // initialize clustergram variables
        params = VizParams(config);

        var network_data = params.network_data;

        // set local variables from network_data
        var col_nodes = network_data.col_nodes;
        var row_nodes = network_data.row_nodes;

        // Begin Making Visualization
        /////////////////////////////////

        // !! needs to be improved
        // remove any previous visualizations
        d3.select('#main_svg').remove();

        // instantiate zoom object
        zoom = Zoom(params);

        // define the variable zoom, a d3 method
        params.zoom = d3.behavior
          .zoom()
          .scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch])
          .on('zoom', zoom.zoomed);

        var svg_group = d3.select('#' + params.viz.svg_div_id)
          .append('svg')
          .attr('id', 'main_svg')
          .attr('width', params.viz.svg_dim.width)
          .attr('height', params.viz.svg_dim.height);

        if (params.viz.do_zoom) {
          svg_group.call(params.zoom);
        }

        // make the matrix
        /////////////////////////
        matrix = Matrix(network_data, svg_group, params);


        // define reordering object - scoped to viz
        reorder = Reorder(params);

        // define labels object
        var labels = Labels(params);

        // row labels
        /////////////////////////
        var row_triangle_ini_group = labels.make_rows(params, row_nodes, reorder);

        // Column Labels
        //////////////////////////////////
        var container_all_col = labels.make_cols(params, col_nodes, reorder);


        // add group labels if necessary
        //////////////////////////////////
        if (params.viz.show_dendrogram) {

          // make row dendrogram
          row_dendrogram = Dendrogram('row', params, row_triangle_ini_group);

          // add class label under column label
          var col_class = container_all_col
            .append('g')
            // .attr('transform','translate(0,'+params.norm_label.width.col+')')
            .attr('transform', function() {
              var inst_offset = params.norm_label.width.col + 2;
              return 'translate(0,' + inst_offset + ')';
            })
            .append('g')
            // shift down 1px
            // .attr('transform','translate(0,2)')
            .attr('id', 'col_class');

          // append groups - each will hold a classification rect
          var col_class_ini_group = col_class
            .selectAll('g')
            .data(col_nodes)
            .enter()
            .append('g')
            .attr('class', 'col_class_group')
            .attr('transform', function(d, index) {
              return 'translate(' + params.matrix.x_scale(index) + ',0)';
            });

          // make col dendrogram
          col_dendrogram = Dendrogram('col', params, col_class_ini_group);

          // optional column callback on click
          if (typeof params.click_group === 'function') {

            col_class_ini_group
              .on('click', function(d) {
                var inst_level = params.group_level.col;
                var inst_group = d.group[inst_level];
                // find all column names that are in the same group at the same group_level
                // get col_nodes
                col_nodes = params.network_data.col_nodes;
                var group_nodes = [];
                lodash.each(col_nodes, function(node) {
                  // check that the node is in the group
                  if (node.group[inst_level] === inst_group) {
                    // make a list of genes that are in inst_group at this group_level
                    group_nodes.push(node.name);
                  }
                });

                // return the following information to the user
                // row or col, distance cutoff level, nodes
                var group_info = {};
                group_info.type = 'col';
                group_info.nodes = group_nodes;
                group_info.info = {
                  'type': 'distance',
                  'cutoff': inst_level / 10
                };

                // pass information to group_click callback
                params.click_group(group_info);

              });
          }

        }


        // Spillover Divs
        var spillover = Spillover(params, container_all_col);

        // Super Labels
        if (params.labels.super_labels) {
          var super_labels = SuperLabels();
          super_labels.make(params);
        }

        // tmp add final svg border here
        // add border to svg in four separate lines - to not interfere with clicking anything
        ///////////////////////////////////////////////////////////////////////////////////////
        // left border
        // d3.select('#main_svg')
        //   .append('rect')
        //   .attr('id', 'left_border')
        //   .attr('fill', params.viz.super_border_color) //!! prog_colors
        //   .attr('width', params.viz.grey_border_width)
        //   .attr('height', params.viz.svg_dim.height)
        //   .attr('transform', 'translate(0,0)');

        // // right border
        // d3.select('#main_svg')
        //   .append('rect')
        //   .attr('id', 'right_border')
        //   .attr('fill', params.viz.super_border_color) //!! prog_colors
        //   .attr('width', params.viz.grey_border_width)
        //   .attr('height', params.viz.svg_dim.height)
        //   .attr('transform', function() {
        //     var inst_offset = params.viz.svg_dim.width - params.viz.grey_border_width;
        //     return 'translate(' + inst_offset + ',0)';
        //   });

        // // top border
        // d3.select('#main_svg')
        //   .append('rect')
        //   .attr('id', 'top_border')
        //   .attr('fill', params.viz.super_border_color) //!! prog_colors
        //   .attr('width', params.viz.svg_dim.width)
        //   .attr('height', params.viz.grey_border_width)
        //   .attr('transform', function() {
        //     var inst_offset = 0;
        //     return 'translate(' + inst_offset + ',0)';
        //   });

        // // bottom border
        // d3.select('#main_svg')
        //   .append('rect')
        //   .attr('id', 'bottom_border')
        //   .attr('fill', params.viz.super_border_color) //!! prog_colors
        //   .attr('width', params.viz.svg_dim.width)
        //   .attr('height', params.viz.grey_border_width)
        //   .attr('transform', function() {
        //     var inst_offset = params.viz.svg_dim.height - params.viz.grey_border_width;
        //     return 'translate(0,' + inst_offset + ')';
        //   });

        ///////////////////////////////////
        // initialize translate vector to compensate for label margins
        params.zoom.translate([params.viz.clust.margin.left, params.viz.clust.margin.top]);

        // resize window
        if (params.viz.resize) {
          d3.select(window).on('resize', function() {
            d3.select('#main_svg').style('opacity', 0.5);
            var wait_time = 500;
            if (params.viz.run_trans == true) {
              wait_time = 2500;
            }
            setTimeout(reset_visualization_size, wait_time, params);
          });
        }

        if (params.viz.expand_button) {

          var expand_opacity = 0.4;
          // add expand button
          d3.select('#main_svg').append('text')
            .attr('id', 'expand_button')
            .attr('text-anchor', 'middle')
            .attr('dominant-baseline', 'central')
            .attr('font-family', 'FontAwesome')
            .attr('font-size', '30px')
            .text(function(d) {
              if (params.viz.expand === false) {
                // expand button
                return '\uf0b2';
              } else {
                // menu button
                return '\uf0c9';
              }
            })
            .attr('y', '25px')
            .attr('x', '25px')
            .style('cursor', 'pointer')
            .style('opacity', expand_opacity)
            .on('mouseover', function() {
              d3.select(this).style('opacity', 0.75);
            })
            .on('mouseout', function() {
              d3.select(this).style('opacity', expand_opacity);
            })
            .on('click', function() {

              // expand view
              if (params.viz.expand === false) {

                d3.select('#clust_instruct_container')
                  .style('display', 'none');
                d3.select(this)
                  .text(function(d) {
                    // menu button
                    return '\uf0c9';
                  });
                params.viz.expand = true;

                // contract view
              } else {

                d3.select('#clust_instruct_container')
                  .style('display', 'block');
                d3.select(this)
                  .text(function(d) {
                    // expand button
                    return '\uf0b2';
                  });
                params.viz.expand = false;

              }

              // get updated size for visualization
              params.viz.parent_div_size_pos(params);

              d3.select('#main_svg').style('opacity', 0.5);
              var wait_time = 500;
              if (params.viz.run_trans == true) {
                wait_time = 2500;
              }
              setTimeout(reset_visualization_size, wait_time, params);
            });
        }

        // initialize double click zoom for matrix
        zoom.ini_doubleclick();

        return params;
      }



      // highlight resource types - set up type/color association
      var gene_search = Search(params, params.network_data.row_nodes, 'name');

      // change opacity
      var opacity_slider = function(inst_slider) {

        var max_link = params.matrix.max_link;
        var slider_scale = d3.scale
          .linear()
          .domain([0, 1])
          .range([1, 0.1]);

        var slider_factor = slider_scale(inst_slider);

        if (params.matrix.opacity_function === 'linear') {
          params.matrix.opacity_scale = d3.scale.linear()
            .domain([0, slider_factor * Math.abs(params.matrix.max_link)])
            .clamp(true)
            .range([0.0, 1.0]);
        } else if (params.matrix.opacity_function === 'log') {
          params.matrix.opacity_scale = d3.scale.log()
            .domain([0.0001, slider_factor * Math.abs(params.matrix.max_link)])
            .clamp(true)
            .range([0.0, 1.0]);
        }

        d3.selectAll('.tile')
          .style('fill-opacity', function(d) {
            return params.matrix.opacity_scale(Math.abs(d.value));
          });

      }

      var opacity_function = function(function_type) {



      }

      return {
        remake: function() {
          make(config);
        },
        change_group: function(inst_rc, inst_index) {
          if (inst_rc === 'row') {
            row_dendrogram.change_groups(inst_index);
          } else {
            col_dendrogram.change_groups(inst_index);
          }
        },
        get_clust_group: function() {
          return matrix.get_clust_group();
        },
        get_matrix: function() {
          return matrix.get_matrix();
        },
        get_nodes: function(type) {
          return matrix.get_nodes(type);
        },
        two_translate_zoom: zoom.two_translate_zoom,
        // expose all_reorder function
        reorder: reorder.all_reorder,
        search: gene_search,
        opacity_slider: opacity_slider,
        opacity_function: opacity_function,
        run_reset_visualization_size: run_reset_visualization_size,
        params: params
      }


    }

    /* Reordering Module
     */

    function Reorder(params) {

      /* Reorder the clustergram using the toggle switch
       */
      function all_reorder(inst_order) {

        params.viz.run_trans = true;

        // load orders
        if (inst_order === 'ini') {
          params.matrix.x_scale.domain(params.matrix.orders.ini_row);
          params.matrix.y_scale.domain(params.matrix.orders.ini_col);
        } else if (inst_order === 'clust') {
          params.matrix.x_scale.domain(params.matrix.orders.clust_row);
          params.matrix.y_scale.domain(params.matrix.orders.clust_col);
        } else if (inst_order === 'rank') {
          params.matrix.x_scale.domain(params.matrix.orders.rank_row);
          params.matrix.y_scale.domain(params.matrix.orders.rank_col);
        } else if (inst_order === 'class') {
          params.matrix.x_scale.domain(params.matrix.orders.class_row);
          params.matrix.y_scale.domain(params.matrix.orders.class_col);
        }

        // only animate transition if there are a small number of tiles
        if (d3.selectAll('.tile')[0].length < 10000) {

          // define the t variable as the transition function
          var t = viz.get_clust_group()
            .transition().duration(2500);

          // reorder matrix
          t.selectAll('.row')
            .attr('transform', function(d, i) {
              return 'translate(0,' + params.matrix.y_scale(i) + ')';
            })
            .selectAll('.tile')
            .attr('transform', function(d) {
              return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';
            });

          // Move Row Labels
          d3.select('#row_labels').selectAll('.row_label_text')
            .transition().duration(2500)
            .attr('transform', function(d, i) {
              return 'translate(0,' + params.matrix.y_scale(i) + ')';
            });

          // t.selectAll('.column')
          d3.select('#col_labels').selectAll('.col_label_text')
            .transition().duration(2500)
            .attr('transform', function(d, i) {
              return 'translate(' + params.matrix.x_scale(i) + ')rotate(-90)';
            });

          // reorder row_label_triangle groups
          d3.selectAll('.row_triangle_group')
            .transition().duration(2500)
            .attr('transform', function(d, i) {
              return 'translate(0,' + params.matrix.y_scale(i) + ')';
            });

          // reorder col_class groups
          d3.selectAll('.col_class_group')
            .transition().duration(2500)
            .attr('transform', function(d, i) {
              return 'translate(' + params.matrix.x_scale(i) + ',0)';
            });

        } else {

          // define the t variable as the transition function
          var t = viz.get_clust_group()

          // reorder matrix
          t.selectAll('.row')
            .attr('transform', function(d, i) {
              return 'translate(0,' + params.matrix.y_scale(i) + ')';
            })
            .selectAll('.tile')
            .attr('transform', function(d) {
              return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';
            });

          // Move Row Labels
          d3.select('#row_labels').selectAll('.row_label_text')
            .attr('transform', function(d, i) {
              return 'translate(0,' + params.matrix.y_scale(i) + ')';
            });

          // t.selectAll('.column')
          d3.select('#col_labels').selectAll('.col_label_text')
            .attr('transform', function(d, i) {
              return 'translate(' + params.matrix.x_scale(i) + ')rotate(-90)';
            });

          // reorder row_label_triangle groups
          d3.selectAll('.row_triangle_group')
            .attr('transform', function(d, i) {
              return 'translate(0,' + params.matrix.y_scale(i) + ')';
            });

          // reorder col_class groups
          d3.selectAll('.col_class_group')
            .attr('transform', function(d, i) {
              return 'translate(' + params.matrix.x_scale(i) + ',0)';
            });
        }

        // params.viz.run_trans = false;

        reposition_tile_highlight();

        // backup allow programmatic zoom
        setTimeout(end_reorder, 2500);

      }

      function row_reorder() {

        // get inst row (gene)
        var inst_row = d3.select(this).select('text').text();

        // get row and col nodes
        params.viz.run_trans = true;

        var mat = viz.get_matrix();
        var row_nodes = viz.get_nodes('row');
        var col_nodes = viz.get_nodes('col');

        // find the index of the row
        var tmp_arr = [];
        lodash.each(row_nodes, function(node) {
          tmp_arr.push(node.name);
        });

        // find index
        var inst_row = lodash.indexOf(tmp_arr, inst_row);

        // gather the values of the input genes
        tmp_arr = [];
        lodash.each(col_nodes, function(node, index) {
          tmp_arr.push(mat[inst_row][index].value);
        });

        // sort the rows
        var tmp_sort = d3.range(tmp_arr.length).sort(function(a, b) {
          return tmp_arr[b] - tmp_arr[a];
        });

        // // get parameters
        // var params = params;

        // resort the columns (resort x)
        params.matrix.x_scale.domain(tmp_sort);

        // reorder matrix
        ////////////////////

        // define the t variable as the transition function
        var t = viz.get_clust_group()
          .transition().duration(2500);

        // reorder matrix
        t.selectAll('.tile')
          .attr('transform', function(data) {
            return 'translate(' + params.matrix.x_scale(data.pos_x) + ',0)';
          });

        // Move Col Labels
        d3.select('#col_labels').selectAll('.col_label_text')
          .transition().duration(2500)
          .attr('transform', function(data, index) {
            return 'translate(' + params.matrix.x_scale(index) + ')rotate(-90)';
          });

        // reorder col_class groups
        d3.selectAll('.col_class_group')
          .transition().duration(2500)
          .attr('transform', function(data, index) {
            return 'translate(' + params.matrix.x_scale(index) + ',0)';
          })
          .each('end', function() {
            // set running transition to 0
            params.viz.run_trans = false;
          });

        // // highlight selected row
        // d3.selectAll('.row_label_text')
        //   .select('rect')
        //   .style('opacity', 0);
        // d3.select(this)
        //   .select('rect')
        //   .style('opacity', 1);

        reposition_tile_highlight();

        // backup allow programmatic zoom
        setTimeout(end_reorder, 2500);
      }

      function col_reorder() {
        // set running transition value
        params.viz.run_trans = true;

        var mat = viz.get_matrix();
        var row_nodes = viz.get_nodes('row');
        var col_nodes = viz.get_nodes('col');

        // get inst col (term)
        var inst_term = d3.select(this).select('text').attr('full_name');

        // find the column number of this term from col_nodes
        // gather column node names
        var tmp_arr = [];
        lodash.each(col_nodes, function(node) {
          tmp_arr.push(node.name);
        });

        // find index
        var inst_col = lodash.indexOf(tmp_arr, inst_term);

        // gather the values of the input genes
        tmp_arr = [];
        lodash.each(row_nodes, function(node, index) {
          tmp_arr.push(mat[index][inst_col].value);
        });

        // sort the rows
        var tmp_sort = d3.range(tmp_arr.length).sort(function(a, b) {
          return tmp_arr[b] - tmp_arr[a];
        });

        // resort rows - y axis
        ////////////////////////////
        params.matrix.y_scale.domain(tmp_sort);

        // reorder
        // define the t variable as the transition function
        var t = viz.get_clust_group()
          .transition().duration(2500);

        // reorder matrix
        t.selectAll('.row')
          .attr('transform', function(data, index) {
            return 'translate(0,' + params.matrix.y_scale(index) + ')';
          });

        // reorder row_label_triangle groups
        d3.selectAll('.row_triangle_group')
          .transition().duration(2500)
          .attr('transform', function(data, index) {
            return 'translate(0,' + params.matrix.y_scale(index) + ')';
          });

        // Move Row Labels
        d3.select('#row_labels').selectAll('.row_label_text')
          .transition().duration(2500)
          .attr('transform', function(data, index) {
            return 'translate(0,' + params.matrix.y_scale(index) + ')';
          });

        // t.selectAll('.column')
        d3.select('#col_labels').selectAll('.col_label_text')
          .transition().duration(2500)
          .attr('transform', function(data, index) {
            return 'translate(' + params.matrix.x_scale(index) + ')rotate(-90)';
          })
          .each('end', function() {
            // set running transition to 0
            params.viz.run_trans = false;
          });

        // // highlight selected column
        // ///////////////////////////////
        // // unhilight and unbold all columns (already unbolded earlier)
        // d3.selectAll('.col_label_text')
        //   .select('rect')
        //   .style('opacity', 0);
        // // highlight column name
        // d3.select(this)
        //   .select('rect')
        //   .style('opacity', 1);


        reposition_tile_highlight();

        // backup allow programmatic zoom
        setTimeout(end_reorder, 2500);
      }

      // allow programmatic zoom after reordering
      function end_reorder() {
        params.viz.run_trans = false;
      }

      // reposition tile highlight
      function reposition_tile_highlight() {
        // resize click hlight
        var rel_width_hlight = 6;
        var opacity_hlight = 0.85;

        var hlight_width = rel_width_hlight * params.viz.border_width;
        var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;
        // reposition tile highlight
        ////////////////////////////////

        // top highlight
        d3.select('#top_hlight')
          .attr('width', params.matrix.x_scale.rangeBand())
          .attr('height', hlight_height)
          .transition().duration(2500)
          .attr('transform', function() {
            return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',0)';
          });

        // left highlight
        d3.select('#left_hlight')
          .attr('width', hlight_width)
          .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
          .transition().duration(2500)
          .attr('transform', function() {
            return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',' +
              hlight_height * 0.99 + ')';
          });

        // right highlight
        d3.select('#right_hlight')
          .attr('width', hlight_width)
          .attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99)
          .transition().duration(2500)
          .attr('transform', function() {
            var tmp_translate = params.matrix.x_scale(params.matrix.click_hlight_x) + params.matrix.x_scale.rangeBand() - hlight_width;
            return 'translate(' + tmp_translate + ',' +
              hlight_height * 0.99 + ')';
          });

        // bottom highlight
        d3.select('#bottom_hlight')
          .attr('width', function() {
            return params.matrix.x_scale.rangeBand() - 1.98 * hlight_width
          })
          .attr('height', hlight_height)
          .transition().duration(2500)
          .attr('transform', function() {
            var tmp_translate_x = params.matrix.x_scale(params.matrix.click_hlight_x) + hlight_width * 0.99;
            var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;
            return 'translate(' + tmp_translate_x + ',' +
              tmp_translate_y + ')';
          });

      }

      return {
        row_reorder: row_reorder,
        col_reorder: col_reorder,
        all_reorder: all_reorder
      };

    }



    function Zoom(params) {

      /* Functions for zooming. Should be turned into a module.
       * ----------------------------------------------------------------------- */
      function zoomed() {

        var zoom_x = d3.event.scale,
          zoom_y = d3.event.scale,
          trans_x = d3.event.translate[0] - params.viz.clust.margin.left,
          trans_y = d3.event.translate[1] - params.viz.clust.margin.top;

        // apply transformation
        apply_transformation(trans_x, trans_y, zoom_x, zoom_y);
      }

      function apply_transformation(trans_x, trans_y, zoom_x, zoom_y) {

        var d3_scale = zoom_x;

        // y - rules
        ///////////////////////////////////////////////////
        // available panning room in the y direction
        // multiple extra room (zoom - 1) by the width
        // always defined in the same way
        var pan_room_y = (d3_scale - 1) * params.viz.clust.dim.height;

        // do not translate if translate in y direction is positive
        if (trans_y >= 0) {
          // restrict transformation parameters
          // no panning in either direction
          trans_y = 0;
        }
        // restrict y pan to pan_room_y if necessary
        else if (trans_y <= -pan_room_y) {
          trans_y = -pan_room_y;
        }

        // x - rules
        ///////////////////////////////////////////////////
        // zoom in y direction only - translate in y only
        if (d3_scale < params.viz.zoom_switch) {
          // no x translate or zoom
          trans_x = 0;
          zoom_x = 1;
        }
        // zoom in both directions
        // scale is greater than params.viz.zoom_switch
        else {
          // available panning room in the x direction
          // multiple extra room (zoom - 1) by the width
          var pan_room_x = (d3_scale / params.viz.zoom_switch - 1) * params.viz.clust.dim.width;

          // no panning in the positive direction
          if (trans_x > 0) {
            // restrict transformation parameters
            // no panning in the x direction
            trans_x = 0;
            // set zoom_x
            zoom_x = d3_scale / params.viz.zoom_switch;
          }
          // restrict panning to pan_room_x
          else if (trans_x <= -pan_room_x) {
            // restrict transformation parameters
            // no panning in the x direction
            trans_x = -pan_room_x;
            // set zoom_x
            zoom_x = d3_scale / params.viz.zoom_switch;
          }
          // allow two dimensional panning
          else {
            // restrict transformation parameters
            // set zoom_x
            zoom_x = d3_scale / params.viz.zoom_switch;
          }
        }

        // apply transformation and reset translate vector
        // the zoom vector (zoom.scale) never gets reset
        ///////////////////////////////////////////////////
        // translate clustergram
        // d3.select('#clust_group')
        viz.get_clust_group()
          .attr('transform', 'translate(' + [trans_x, trans_y] + ') scale(' +
            zoom_x + ',' + zoom_y + ')');

        // transform row labels
        d3.select('#row_labels')
          .attr('transform', 'translate(' + [0, trans_y] + ') scale(' + zoom_y +
            ')');

        // transform row_label_triangles
        // use the offset saved in params, only zoom in the y direction
        d3.select('#row_label_triangles')
          .attr('transform', 'translate(' + [0, trans_y] + ') scale( 1,' +
            zoom_y + ')');

        // transform col labels
        // move down col labels as zooming occurs, subtract trans_x - 20 almost works
        d3.select('#col_labels')
          .attr('transform', 'translate(' + [trans_x, 0] + ') scale(' + zoom_x +
            ')');

        // transform col_class
        d3.select('#col_class')
          .attr('transform', 'translate(' + [trans_x, 0] + ') scale(' + zoom_x +
            ',1)');

        // reset translate vector - add back margins to trans_x and trans_y
        params.zoom
          .translate([trans_x + params.viz.clust.margin.left, trans_y + params.viz.clust.margin.top]);

        var trans = false;
        constrain_font_size(trans);


        // resize label bars if necessary
        ////////////////////////////////////

        if (Utils.has(params.network_data.row_nodes[0], 'value')) {
          d3.selectAll('.row_bars')
            .attr('width', function(d) {
              var inst_value = 0;
              inst_value = params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;
              return inst_value;
            })
            .attr('x', function(d) {
              var inst_value = 0;
              inst_value = -params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;
              return inst_value;
            });
        }

        if (Utils.has(params.network_data.col_nodes[0], 'value')) {
          d3.selectAll('.col_bars')
            .attr('width', function(d) {
              var inst_value = 0;
              if (d.value > 0) {
                inst_value = params.labels.bar_scale_col(d.value) / zoom_x;
              }
              return inst_value;
            })
        }

      }

      function two_translate_zoom(pan_dx, pan_dy, fin_zoom) {

        // get parameters
        if (!params.viz.run_trans) {

          // define the commonly used variable half_height
          var half_height = params.viz.clust.dim.height / 2;

          // y pan room, the pan room has to be less than half_height since
          // zooming in on a gene that is near the top of the clustergram also causes
          // panning out of the visible region
          var y_pan_room = half_height / params.viz.zoom_switch;

          // prevent visualization from panning down too much
          // when zooming into genes near the top of the clustergram
          if (pan_dy >= half_height - y_pan_room) {

            // explanation of panning rules
            /////////////////////////////////
            // prevent the clustergram from panning down too much
            // if the amount of panning is equal to the half_height then it needs to be reduced
            // effectively, the the visualization needs to be moved up (negative) by some factor
            // of the half-width-of-the-visualization.
            //
            // If there was no zooming involved, then the
            // visualization would be centered first, then panned to center the top term
            // this would require a
            // correction to re-center it. However, because of the zooming the offset is
            // reduced by the zoom factor (this is because the panning is occurring on something
            // that will be zoomed into - this is why the pan_dy value is not scaled in the two
            // translate transformations, but it has to be scaled afterwards to set the translate
            // vector)
            // pan_dy = half_height - (half_height)/params.viz.zoom_switch

            // if pan_dy is greater than the pan room, then panning has to be restricted
            // start by shifting back up (negative) by half_height/params.viz.zoom_switch then shift back down
            // by the difference between half_height and pan_dy (so that the top of the clustergram is
            // visible)
            var shift_top_viz = half_height - pan_dy;
            var shift_up_viz = -half_height / params.viz.zoom_switch +
              shift_top_viz;

            // reduce pan_dy so that the visualization does not get panned to far down
            pan_dy = pan_dy + shift_up_viz;
          }

          // prevent visualization from panning up too much
          // when zooming into genes at the bottom of the clustergram
          if (pan_dy < -(half_height - y_pan_room)) {

            shift_top_viz = half_height + pan_dy;

            shift_up_viz = half_height / params.viz.zoom_switch - shift_top_viz; //- move_up_one_row;

            // reduce pan_dy so that the visualization does not get panned to far down
            pan_dy = pan_dy + shift_up_viz;

          }

          // will improve this !!
          var zoom_y = fin_zoom;
          var zoom_x = 1;

          // search duration - the duration of zooming and panning
          var search_duration = 700;

          // center_y
          var center_y = -(zoom_y - 1) * half_height;

          // transform clust group
          ////////////////////////////
          // d3.select('#clust_group')
          viz.get_clust_group()
            .transition().duration(search_duration)
            // first apply the margin transformation
            // then zoom, then apply the final transformation
            .attr('transform', 'translate(' + [0, 0 + center_y] + ')' +
              ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [pan_dx,
                pan_dy
              ] + ')');

          // transform row labels
          d3.select('#row_labels')
            .transition()
            .duration(search_duration)
            .attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' +
              zoom_y + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

          // transform row_label_triangles
          // use the offset saved in params, only zoom in the y direction
          d3.select('#row_label_triangles')
            .transition()
            .duration(search_duration)
            .attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' +
              1 + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

          // transform col labels
          d3.select('#col_labels')
            .transition()
            .duration(search_duration)
            .attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [
              pan_dx, 0
            ] + ')');

          // transform col_class
          d3.select('#col_class')
            .transition()
            .duration(search_duration)
            .attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [
              pan_dx, 0
            ] + ')');

          // set y translate: center_y is positive, positive moves the visualization down
          // the translate vector has the initial margin, the first y centering, and pan_dy
          // times the scaling zoom_y
          var net_y_offset = params.viz.clust.margin.top + center_y + pan_dy * zoom_y;

          // reset the zoom translate and zoom
          params.zoom.scale(zoom_y);
          params.zoom.translate([pan_dx, net_y_offset]);

          var trans = true;
          constrain_font_size(trans);

          // re-size of the highlighting rects
          /////////////////////////////////////////
          d3.select('#row_labels')
            .each(function() {
              // get the bounding box of the row label text
              var bbox = d3.select(this)
                .select('text')[0][0]
                .getBBox();

              // use the bounding box to set the size of the rect
              d3.select(this)
                .select('rect')
                .attr('x', bbox.x * 0.5)
                .attr('y', 0)
                .attr('width', bbox.width * 0.5)
                .attr('height', params.matrix.y_scale.rangeBand())
                .style('fill', 'yellow');
            });


          // column value bars
          ///////////////////////
          // reduce the height of the column value bars based on the zoom applied
          // recalculate the height and divide by the zooming scale
          // col_label_obj.select('rect')
          if (Utils.has(params.network_data.col_nodes[0], 'value')) {

            d3.selectAll('.col_bars')
              .transition()
              .duration(search_duration)
              .attr('width', function(d) {
                var inst_value = 0;
                if (d.value > 0) {
                  inst_value = params.labels.bar_scale_col(d.value) / zoom_x;
                }
                return inst_value;
              })
          }

          if (Utils.has(params.network_data.row_nodes[0], 'value')) {

            d3.selectAll('.row_bars')
              .transition()
              .duration(search_duration)
              .attr('width', function(d) {
                var inst_value = 0;
                inst_value = params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;
                return inst_value;
              })
              .attr('x', function(d) {
                var inst_value = 0;
                inst_value = -params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;
                return inst_value;
              });

          }
        }
      }

      function constrain_font_size(trans) {

        var search_duration = 700;

        var fraction_keep = {};

        var keep_width = {};
        keep_width.row = params.bounding_width_max.row * params.labels.row_keep * params.zoom.scale();
        keep_width.col = params.bounding_width_max.col * params.labels.col_keep * params.zoom.scale() / params.viz.zoom_switch;

        function normal_name(d) {
          var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
          if (inst_name.length > params.labels.max_label_char) {
            inst_name = inst_name.substring(0, params.labels.max_label_char) + '..';
          }
          return inst_name;
        }

        if (keep_width.row > params.norm_label.width.row) {

          params.viz.zoom_scale_font.row = params.norm_label.width.row / keep_width.row;

          d3.selectAll('.row_label_text').each(function() {
            if (trans) {
              d3.select(this).select('text')
                .transition().duration(search_duration)
                .style('font-size', params.labels.default_fs_row * params.viz.zoom_scale_font.row + 'px')
                .attr('y', params.matrix.y_scale.rangeBand() *
                  params.scale_font_offset(params.viz.zoom_scale_font.row));
            } else {
              d3.select(this).select('text')
                .style('font-size', params.labels.default_fs_row * params.viz.zoom_scale_font.row + 'px')
                .attr('y', params.matrix.y_scale.rangeBand() *
                  params.scale_font_offset(params.viz.zoom_scale_font.row))
            }
          });
        } else {
          d3.selectAll('.row_label_text').each(function() {
            if (trans) {
              d3.select(this).select('text')
                .transition().duration(search_duration)
                .style('font-size', params.labels.default_fs_row + 'px')
                .attr('y', params.matrix.y_scale.rangeBand() * 0.75);
              d3.select(this).select('text')
                .text(function(d) {
                  return normal_name(d);
                });

            } else {
              d3.select(this).select('text')
                .style('font-size', params.labels.default_fs_row + 'px')
                .attr('y', params.matrix.y_scale.rangeBand() * 0.75)
                .text(function(d) {
                  return normal_name(d);
                });
            }
          });
        }


        if (keep_width.col > params.norm_label.width.col) {

          params.viz.zoom_scale_font.col = params.norm_label.width.col / keep_width.col;

          d3.selectAll('.col_label_click').each(function() {
            if (trans) {
              d3.select(this).select('text')
                .transition().duration(search_duration)
                .style('font-size', params.labels.default_fs_col *
                  params.viz.zoom_scale_font.col + 'px');
            } else {
              d3.select(this).select('text')
                .style('font-size', params.labels.default_fs_col *
                  params.viz.zoom_scale_font.col + 'px')
            }
          });
        } else {
          d3.selectAll('.col_label_click').each(function() {
            if (trans) {
              d3.select(this).select('text')
                .transition().duration(search_duration)
                .style('font-size', params.labels.default_fs_col + 'px');
              d3.select(this).select('text')
                .text(function(d) {
                  return normal_name(d);
                });
            } else {
              d3.select(this).select('text')
                .style('font-size', params.labels.default_fs_col + 'px')
                .text(function(d) {
                  return normal_name(d);
                });
            }
          });
        }


        var max_row_width = params.norm_label.width.row;
        var max_col_width = params.norm_label.width.col;

        // constrain text after zooming
        if (params.labels.row_keep < 1) {
          d3.selectAll('.row_label_text').each(function() {
            trim_text(this, 'row');
          });
        }
        if (params.labels.col_keep < 1) {
          d3.selectAll('.col_label_click').each(function() {
            trim_text(this, 'col');
          });
        }

        function trim_text(inst_selection, inst_rc) {

          var max_width,
            inst_zoom;

          var safe_row_trim_text = 0.9;

          if (inst_rc === 'row') {
            max_width = params.norm_label.width.row * safe_row_trim_text;
            inst_zoom = params.zoom.scale();
          } else {
            // the column label has extra length since its rotated
            max_width = params.norm_label.width.col;
            inst_zoom = params.zoom.scale() / params.viz.zoom_switch;
          }

          var tmp_width = d3.select(inst_selection).select('text').node().getBBox().width;
          var inst_text = d3.select(inst_selection).select('text').text();
          var actual_width = tmp_width * inst_zoom;

          if (actual_width > max_width) {

            var trim_fraction = max_width / actual_width;
            var keep_num_char = Math.floor(inst_text.length * trim_fraction) - 3;
            var trimmed_text = inst_text.substring(0, keep_num_char) + '..';
            d3.select(inst_selection).select('text')
              .text(trimmed_text);

          }

        }

      }

      function ini_doubleclick() {

        // disable double-click zoom: double click should reset zoom level
        d3.selectAll('svg').on('dblclick.zoom', null);

        // double click to reset zoom - add transition
        d3.select('#main_svg')
          .on('dblclick', function() {
            // programmatic zoom reset
            two_translate_zoom(0, 0, 1);
          });
      }

      return {
        zoomed: zoomed,
        two_translate_zoom: two_translate_zoom,
        ini_doubleclick: ini_doubleclick
      }
    }

    /* Main program
     * ----------------------------------------------------------------------- */

    // consume and validate user input
    // build giant config object
    // visualize based on config object
    // handle user events

    // consume and validate user arguments, produce configuration object
    var config = Config(args);

    // make visualization using configuration object and network
    var viz = Viz(config);


    /* API
     * ----------------------------------------------------------------------- */

    return {
      find_gene: viz.search.find_entities,
      get_genes: viz.search.get_entities,
      change_groups: viz.change_group,
      reorder: viz.reorder,
      opacity_slider: viz.opacity_slider,
      opacity_function: viz.opacity_function,
      resize: viz.run_reset_visualization_size,
      params: viz.params
    };

  }
  return {
    clustergram: function(args) {
      return d3_clustergram(args);
    }
  };
}
;/*eslint camelcase: 0*/

/**
 * @author Michael McDermott
 * Created on 7/20/15.
 */

angular
  .module('clustergram')
  .factory('d3Data', d3Data);

/* @ngInject */
function d3Data() {
  return {
    'row_nodes': [{
      'clust': 4,
      'name': 'ATAC-Seq',
      'rank': 1,
      'ini': 11
    }, {
      'clust': 9,
      'name': 'GCP',
      'rank': 8,
      'ini': 10
    }, {
      'clust': 1,
      'name': 'Immunofluorescence',
      'rank': 3,
      'ini': 9
    }, {
      'clust': 6,
      'name': 'KINOMEscan',
      'rank': 2,
      'ini': 8
    }, {
      'clust': 8,
      'name': 'L1000',
      'rank': 10,
      'ini': 7
    }, {
      'clust': 7,
      'name': 'MEMA',
      'rank': 6,
      'ini': 6
    }, {
      'clust': 10,
      'name': 'P100',
      'rank': 7,
      'ini': 5
    }, {
      'clust': 0,
      'name': 'RNA-Seq',
      'rank': 9,
      'ini': 4
    }, {
      'clust': 2,
      'name': 'RPPA',
      'rank': 4,
      'ini': 3
    }, {
      'clust': 5,
      'name': 'SWATH-MS',
      'rank': 0,
      'ini': 2
    }, {
      'clust': 3,
      'name': 'Viability',
      'rank': 5,
      'ini': 1
    }],
    'col_nodes': [{
      'clust': 28,
      'name': 'A375',
      'rank': 28,
      'ini': 33
    }, {
      'clust': 29,
      'name': 'A549',
      'rank': 29,
      'ini': 32
    }, {
      'clust': 17,
      'name': 'C32',
      'rank': 12,
      'ini': 31
    }, {
      'clust': 11,
      'name': 'COLO858',
      'rank': 20,
      'ini': 30
    }, {
      'clust': 24,
      'name': 'Cell Free',
      'rank': 10,
      'ini': 29
    }, {
      'clust': 31,
      'name': 'HA1E',
      'rank': 25,
      'ini': 28
    }, {
      'clust': 19,
      'name': 'HME1',
      'rank': 13,
      'ini': 27
    }, {
      'clust': 32,
      'name': 'HPAC',
      'rank': 26,
      'ini': 26
    }, {
      'clust': 30,
      'name': 'HT29',
      'rank': 27,
      'ini': 25
    }, {
      'clust': 18,
      'name': 'K2',
      'rank': 14,
      'ini': 24
    }, {
      'clust': 12,
      'name': 'LOXIMVI',
      'rank': 21,
      'ini': 23
    }, {
      'clust': 27,
      'name': 'MCF7',
      'rank': 30,
      'ini': 22
    }, {
      'clust': 20,
      'name': 'MDAMB231',
      'rank': 15,
      'ini': 21
    }, {
      'clust': 16,
      'name': 'MMACSF',
      'rank': 16,
      'ini': 20
    }, {
      'clust': 15,
      'name': 'MZ7MEL',
      'rank': 17,
      'ini': 19
    }, {
      'clust': 25,
      'name': 'NPC',
      'rank': 24,
      'ini': 18
    }, {
      'clust': 26,
      'name': 'PC3',
      'rank': 31,
      'ini': 17
    }, {
      'clust': 7,
      'name': 'PromoCell Myocytes',
      'rank': 32,
      'ini': 16
    }, {
      'clust': 14,
      'name': 'RVH421',
      'rank': 18,
      'ini': 15
    }, {
      'clust': 13,
      'name': 'SKMEL28',
      'rank': 19,
      'ini': 14
    }, {
      'clust': 10,
      'name': 'WM115',
      'rank': 22,
      'ini': 13
    }, {
      'clust': 9,
      'name': 'WM1552C',
      'rank': 23,
      'ini': 12
    }, {
      'clust': 22,
      'name': 'iPSC 00CTR-n2',
      'rank': 8,
      'ini': 11
    }, {
      'clust': 0,
      'name': 'iPSC 14CTR-n6',
      'rank': 7,
      'ini': 10
    }, {
      'clust': 21,
      'name': 'iPSC 25CTR-18n2',
      'rank': 11,
      'ini': 9
    }, {
      'clust': 8,
      'name': 'iPSC 28ALS-n2A',
      'rank': 0,
      'ini': 8
    }, {
      'clust': 6,
      'name': 'iPSC 29ALS-n1N',
      'rank': 1,
      'ini': 7
    }, {
      'clust': 5,
      'name': 'iPSC 30ALS-n1A',
      'rank': 2,
      'ini': 6
    }, {
      'clust': 4,
      'name': 'iPSC 32SMA-n3',
      'rank': 3,
      'ini': 5
    }, {
      'clust': 3,
      'name': 'iPSC 52ALS-n6A',
      'rank': 4,
      'ini': 4
    }, {
      'clust': 2,
      'name': 'iPSC 77SMA-n5',
      'rank': 5,
      'ini': 3
    }, {
      'clust': 23,
      'name': 'iPSC 83CTR-33n1',
      'rank': 9,
      'ini': 2
    }, {
      'clust': 1,
      'name': 'iPSC 83SMA-n5',
      'rank': 6,
      'ini': 1
    }],
    'links': [{
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 0,
      'target': 22,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 0,
      'target': 24,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 0,
      'target': 31,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6a',
        'name': 'UNC0646'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 1,
      'target': 0,
      'value': 32.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6a',
        'name': 'UNC0646'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 1,
      'target': 1,
      'value': 32.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6a',
        'name': 'UNC0646'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 1,
      'target': 11,
      'value': 32.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6a',
        'name': 'UNC0646'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 1,
      'target': 15,
      'value': 32.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6a',
        'name': 'UNC0646'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 1,
      'target': 16,
      'value': 32.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca7',
        'name': 'JNK-IN-8'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca8',
        'name': 'Vemurafenib + JNK-IN-8'
      }],
      'highlight': 0,
      'source': 2,
      'target': 3,
      'value': 3.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca7',
        'name': 'JNK-IN-8'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca8',
        'name': 'Vemurafenib + JNK-IN-8'
      }],
      'highlight': 0,
      'source': 2,
      'target': 10,
      'value': 3.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca7',
        'name': 'JNK-IN-8'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca8',
        'name': 'Vemurafenib + JNK-IN-8'
      }],
      'highlight': 0,
      'source': 2,
      'target': 20,
      'value': 3.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca7',
        'name': 'JNK-IN-8'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfca8',
        'name': 'Vemurafenib + JNK-IN-8'
      }],
      'highlight': 0,
      'source': 2,
      'target': 21,
      'value': 3.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfcb2',
        'name': 'ZSTK474'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfcb5',
        'name': 'MPS-1-IN-1'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfcb7',
        'name': 'Ibrutinib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfcb9',
        'name': 'TGX221'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfcbb',
        'name': 'BGJ398'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfcbd',
        'name': 'CGP082996'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfcbf',
        'name': 'Baricitinib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfcc1',
        'name': 'MRT67307'
      }],
      'highlight': 0,
      'source': 3,
      'target': 4,
      'value': 8.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 4,
      'target': 0,
      'value': 86.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 4,
      'target': 1,
      'value': 86.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 4,
      'target': 5,
      'value': 86.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 4,
      'target': 7,
      'value': 86.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 4,
      'target': 8,
      'value': 86.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 4,
      'target': 11,
      'value': 86.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4f',
        'name': 'alpha-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc51',
        'name': 'beta-estradiol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc53',
        'name': 'BIX 01338'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc57',
        'name': 'entinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc58',
        'name': 'fluphezine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc59',
        'name': 'fulvestrant'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5b',
        'name': 'genistein'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc63',
        'name': 'Mitoxantrone'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc64',
        'name': 'monorden'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc69',
        'name': 'sirolimus'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6b',
        'name': 'tanespamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6c',
        'name': 'thioridazine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6d',
        'name': 'tretinoin (atra)'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6e',
        'name': 'trichostatin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc6f',
        'name': 'trifluoperazine'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc70',
        'name': 'troglitazone'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc71',
        'name': 'unc0321'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc72',
        'name': 'unc0646'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc73',
        'name': 'unc1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc74',
        'name': 'valproic acid'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc76',
        'name': 'withaferin a'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc77',
        'name': 'wortmannin'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 4,
      'target': 16,
      'value': 86.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff500bce706c3cdfdd8',
        'name': 'Collagen I'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdd9',
        'name': 'Collagen Type II'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdda',
        'name': 'Collagen Type III'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfddb',
        'name': 'Collagen Type IV'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfddc',
        'name': 'Collagen Type V'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfddd',
        'name': 'Collagen XXIII alpha1/COL23A1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdde',
        'name': 'Desmoglein 2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfddf',
        'name': 'E-cadherin Fc Chimera'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde0',
        'name': 'ECM1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde1',
        'name': 'Fibronectin 1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde2',
        'name': 'GAP43'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde3',
        'name': 'HyA-500K'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde4',
        'name': 'HyA-50K'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde5',
        'name': 'ICAM-1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde6',
        'name': 'Integrin alpha10Beta1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde7',
        'name': 'Integrin alpha11Beta1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde8',
        'name': 'Integrin alpha2Beta1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfde9',
        'name': 'Integrin alpha3Beta1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdea',
        'name': 'Integrin alpha4Beta1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdeb',
        'name': 'Integrin alpha6Beta4'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdec',
        'name': 'Integrin alpha9Beta1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfded',
        'name': 'Integrin alphaMBeta2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdee',
        'name': 'Integrin alphaVBeta6'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdef',
        'name': 'ITGAM-B2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf0',
        'name': 'laminin'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf1',
        'name': 'Laminin-1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf2',
        'name': 'Laminin-5'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf3',
        'name': 'Lumican'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf4',
        'name': 'M-Cadherin/Cadherin-15 Fc Chimera'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf5',
        'name': 'Osteoadherin'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf6',
        'name': 'Osteopontin'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf7',
        'name': 'P-Cadherin Fc Chimera'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf8',
        'name': 'PECAM1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdf9',
        'name': 'RGD-cyclic'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdfa',
        'name': 'rhNidogen-1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdfb',
        'name': 'Tescin C'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdfc',
        'name': 'VCAM1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdfd',
        'name': 'vitronectin'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdfe',
        'name': 'ALCAM'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfdff',
        'name': 'Cadherin-20 (CAD-20)'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe00',
        'name': 'Cadherin-6/KCAD Fc Chimera'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe01',
        'name': 'rhCadherin-8 (CAD-8)/FC Chimera'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe02',
        'name': 'CD44'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe03',
        'name': 'CEACAM6'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe04',
        'name': 'ANGPT1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe05',
        'name': 'ANGPT2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe06',
        'name': 'AREG (amphiregulin)'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe07',
        'name': 'CI-4AS-1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe08',
        'name': 'CTGF'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe09',
        'name': 'CXCL12/SDF1a'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe0a',
        'name': 'CXCL12/SDF1b aa 22-93'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe0b',
        'name': 'DLL1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe0c',
        'name': 'DLL4'
      }, {
        'release': true,
        '_id': '55a95ff100bce706c3cdfd11',
        'name': 'EGF'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe0e',
        'name': 'B-estradiol'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe0f',
        'name': 'Fas Ligand/TNFSF6'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe10',
        'name': 'Fetuin A/AHSG'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe11',
        'name': 'FGF basic 146 aa'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe12',
        'name': 'FGF2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe13',
        'name': 'FGF6'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe14',
        'name': 'FLT3'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe15',
        'name': 'GM-CSF'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe16',
        'name': 'Gro-a'
      }, {
        'release': true,
        '_id': '55a95ff100bce706c3cdfd10',
        'name': 'HGF'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe18',
        'name': 'IGF-1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe19',
        'name': 'IGFBP2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe1a',
        'name': 'IGFBP3'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe1b',
        'name': 'IL-7'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe1c',
        'name': 'CXCL8/IL-8'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe1d',
        'name': 'IL-13'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe1e',
        'name': 'IL-15'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe1f',
        'name': 'IL-6'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe20',
        'name': 'Interleukin-1 beta (IL-1Beta) [catabolin]'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe21',
        'name': 'Jagged 1 Fc Chimera'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe22',
        'name': 'Jagged 2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe23',
        'name': 'Kininogen High Molecular Weight'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe24',
        'name': 'LECT2'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe25',
        'name': 'Leptin/OB'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe26',
        'name': 'LYVE-1'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe27',
        'name': 'a-HRG'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe28',
        'name': 'NRG1-Beta1/HRG1-Beta1 EGF domain'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe29',
        'name': 'Osteoprotegerin/TNFRSF11B'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe2a',
        'name': 'Osteoactivin/GPNMB Fc Chimera'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe2b',
        'name': 'PDGF-AB'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe2c',
        'name': 'PDGF-BB'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe2d',
        'name': 'Podoplanin'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe2e',
        'name': 'Progesterone'
      }, {
        'release': true,
        '_id': '55a95ff500bce706c3cdfe2f',
        'name': 'PTN (pleiotropin)'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe30',
        'name': 'rhBMP-2'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe31',
        'name': 'rhBMP-3'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe32',
        'name': 'rhBMP-4'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe33',
        'name': 'rhBMP-5'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe34',
        'name': 'rhBMP-6'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe35',
        'name': 'rhBMP-7'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe36',
        'name': 'rhTRANCE'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe37',
        'name': 'SCF/c-kit ligand'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe38',
        'name': 'SHH'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe39',
        'name': 'SMDF-HRG'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe3a',
        'name': 'TGF-Beta Latency Associated Protein'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe3b',
        'name': 'TGF-B1'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe3c',
        'name': 'TGF-B2'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe3d',
        'name': 'TNFa'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe3e',
        'name': 'Thrombopoietin/Tpo'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe3f',
        'name': 'VEGF 165'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe40',
        'name': 'WNT3a'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe41',
        'name': 'WNT5a'
      }, {
        'release': true,
        '_id': '55a95ff600bce706c3cdfe42',
        'name': 'WNT10a'
      }],
      'highlight': 0,
      'source': 5,
      'target': 16,
      'value': 107.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 6,
      'target': 0,
      'value': 31.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 6,
      'target': 1,
      'value': 31.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 6,
      'target': 11,
      'value': 31.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 6,
      'target': 15,
      'value': 31.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4e',
        'name': 'tranche2'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd4f',
        'name': '1271738-62-5 (MI-2)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc4e',
        'name': 'acetyldiline (Ci-994)'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc50',
        'name': 'belinostat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc52',
        'name': 'BIX 01294'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc54',
        'name': 'CPI-169'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc55',
        'name': 'decitabine'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc56',
        'name': 'DMSO'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd56',
        'name': 'entinostat (MS275)'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd57',
        'name': 'EPZ-5676'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd58',
        'name': 'EPZ-5687'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd59',
        'name': 'EPZ004777'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd5a',
        'name': 'EX527'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5a',
        'name': 'geldamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5c',
        'name': 'GSK-J4'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5d',
        'name': 'GSK1210151A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5e',
        'name': 'gsk126'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc5f',
        'name': 'GSK525762A'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc60',
        'name': 'jq1'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc61',
        'name': 'LY-294002'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc62',
        'name': 'methylstat'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc65',
        'name': 'OSI-027'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc66',
        'name': 'rapamycin'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc67',
        'name': 'resveratrol'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc68',
        'name': 'salermide'
      }, {
        'release': true,
        '_id': '55a95fef00bce706c3cdfc6a',
        'name': 'staurosporine'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd68',
        'name': 'trichostatin-a'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd69',
        'name': 'UNC0321'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd6b',
        'name': 'UNC1215'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc75',
        'name': 'vorinostat'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc78',
        'name': 'zebularine'
      }],
      'highlight': 0,
      'source': 6,
      'target': 16,
      'value': 31.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe2',
        'name': 'Afatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe3',
        'name': 'Axitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe4',
        'name': 'Bosutinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe5',
        'name': 'Cabozantinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe6',
        'name': 'Ceritinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe7',
        'name': 'Crizotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe8',
        'name': 'Dabrafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe9',
        'name': 'Dasatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbea',
        'name': 'Erlotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbeb',
        'name': 'Gefitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbec',
        'name': 'Imatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbed',
        'name': 'Lapatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbee',
        'name': 'Nilotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbef',
        'name': 'Pazopanib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf0',
        'name': 'ponatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf1',
        'name': 'Regorafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf2',
        'name': 'Ruxolitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf3',
        'name': 'Sorafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf4',
        'name': 'Sunitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf5',
        'name': 'Tofacitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf6',
        'name': 'Trametinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf7',
        'name': 'Vandetanib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf9',
        'name': 'Trastuzumab'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfa',
        'name': 'Trastuzumab + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfb',
        'name': 'Trastuzumab + Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfc',
        'name': 'Trastuzumab + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfd',
        'name': 'Sunitinib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfe',
        'name': 'Sunitinib + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbff',
        'name': 'Sunitinib + Loparemide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc00',
        'name': 'Sunitinib + Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc01',
        'name': 'Sorafenib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc02',
        'name': 'Sorafenib + Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc03',
        'name': 'Sorafenib + Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc04',
        'name': 'Sorafenib + Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc05',
        'name': 'Sorefenib + Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc06',
        'name': 'Dasatinib + Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc07',
        'name': 'Erlotinib + Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc08',
        'name': 'Imatinib + Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc09',
        'name': 'Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0a',
        'name': 'Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0b',
        'name': 'Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0c',
        'name': 'Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0d',
        'name': 'Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0e',
        'name': 'Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0f',
        'name': 'Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc10',
        'name': 'Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc11',
        'name': 'Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc12',
        'name': 'Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc13',
        'name': 'Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe2',
        'name': 'Afatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe3',
        'name': 'Axitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe4',
        'name': 'Bosutinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe5',
        'name': 'Cabozantinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe6',
        'name': 'Ceritinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe7',
        'name': 'Crizotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe8',
        'name': 'Dabrafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe9',
        'name': 'Dasatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbea',
        'name': 'Erlotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbeb',
        'name': 'Gefitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbec',
        'name': 'Imatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbed',
        'name': 'Lapatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbee',
        'name': 'Nilotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbef',
        'name': 'Pazopanib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf0',
        'name': 'ponatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf1',
        'name': 'Regorafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf2',
        'name': 'Ruxolitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf3',
        'name': 'Sorafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf4',
        'name': 'Sunitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf5',
        'name': 'Tofacitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf6',
        'name': 'Trametinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf7',
        'name': 'Vandetanib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf9',
        'name': 'Trastuzumab'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfa',
        'name': 'Trastuzumab + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfb',
        'name': 'Trastuzumab + Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfc',
        'name': 'Trastuzumab + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfd',
        'name': 'Sunitinib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfe',
        'name': 'Sunitinib + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbff',
        'name': 'Sunitinib + Loparemide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc00',
        'name': 'Sunitinib + Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc01',
        'name': 'Sorafenib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc02',
        'name': 'Sorafenib + Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc03',
        'name': 'Sorafenib + Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc04',
        'name': 'Sorafenib + Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc05',
        'name': 'Sorefenib + Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc06',
        'name': 'Dasatinib + Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc07',
        'name': 'Erlotinib + Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc08',
        'name': 'Imatinib + Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc09',
        'name': 'Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0a',
        'name': 'Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0b',
        'name': 'Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0c',
        'name': 'Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0d',
        'name': 'Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0e',
        'name': 'Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0f',
        'name': 'Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc10',
        'name': 'Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc11',
        'name': 'Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc12',
        'name': 'Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc13',
        'name': 'Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe2',
        'name': 'Afatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe3',
        'name': 'Axitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe4',
        'name': 'Bosutinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe5',
        'name': 'Cabozantinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe6',
        'name': 'Ceritinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe7',
        'name': 'Crizotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe8',
        'name': 'Dabrafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe9',
        'name': 'Dasatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbea',
        'name': 'Erlotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbeb',
        'name': 'Gefitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbec',
        'name': 'Imatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbed',
        'name': 'Lapatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbee',
        'name': 'Nilotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbef',
        'name': 'Pazopanib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf0',
        'name': 'ponatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf1',
        'name': 'Regorafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf2',
        'name': 'Ruxolitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf3',
        'name': 'Sorafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf4',
        'name': 'Sunitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf5',
        'name': 'Tofacitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf6',
        'name': 'Trametinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf7',
        'name': 'Vandetanib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf9',
        'name': 'Trastuzumab'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfa',
        'name': 'Trastuzumab + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfb',
        'name': 'Trastuzumab + Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfc',
        'name': 'Trastuzumab + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfd',
        'name': 'Sunitinib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfe',
        'name': 'Sunitinib + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbff',
        'name': 'Sunitinib + Loparemide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc00',
        'name': 'Sunitinib + Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc01',
        'name': 'Sorafenib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc02',
        'name': 'Sorafenib + Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc03',
        'name': 'Sorafenib + Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc04',
        'name': 'Sorafenib + Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc05',
        'name': 'Sorefenib + Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc06',
        'name': 'Dasatinib + Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc07',
        'name': 'Erlotinib + Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc08',
        'name': 'Imatinib + Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc09',
        'name': 'Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0a',
        'name': 'Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0b',
        'name': 'Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0c',
        'name': 'Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0d',
        'name': 'Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0e',
        'name': 'Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0f',
        'name': 'Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc10',
        'name': 'Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc11',
        'name': 'Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc12',
        'name': 'Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc13',
        'name': 'Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe2',
        'name': 'Afatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe3',
        'name': 'Axitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe4',
        'name': 'Bosutinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe5',
        'name': 'Cabozantinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe6',
        'name': 'Ceritinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe7',
        'name': 'Crizotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe8',
        'name': 'Dabrafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe9',
        'name': 'Dasatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbea',
        'name': 'Erlotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbeb',
        'name': 'Gefitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbec',
        'name': 'Imatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbed',
        'name': 'Lapatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbee',
        'name': 'Nilotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbef',
        'name': 'Pazopanib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf0',
        'name': 'ponatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf1',
        'name': 'Regorafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf2',
        'name': 'Ruxolitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf3',
        'name': 'Sorafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf4',
        'name': 'Sunitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf5',
        'name': 'Tofacitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf6',
        'name': 'Trametinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf7',
        'name': 'Vandetanib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf9',
        'name': 'Trastuzumab'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfa',
        'name': 'Trastuzumab + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfb',
        'name': 'Trastuzumab + Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfc',
        'name': 'Trastuzumab + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfd',
        'name': 'Sunitinib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfe',
        'name': 'Sunitinib + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbff',
        'name': 'Sunitinib + Loparemide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc00',
        'name': 'Sunitinib + Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc01',
        'name': 'Sorafenib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc02',
        'name': 'Sorafenib + Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc03',
        'name': 'Sorafenib + Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc04',
        'name': 'Sorafenib + Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc05',
        'name': 'Sorefenib + Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc06',
        'name': 'Dasatinib + Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc07',
        'name': 'Erlotinib + Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc08',
        'name': 'Imatinib + Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc09',
        'name': 'Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0a',
        'name': 'Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0b',
        'name': 'Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0c',
        'name': 'Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0d',
        'name': 'Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0e',
        'name': 'Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0f',
        'name': 'Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc10',
        'name': 'Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc11',
        'name': 'Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc12',
        'name': 'Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc13',
        'name': 'Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe2',
        'name': 'Afatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe3',
        'name': 'Axitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe4',
        'name': 'Bosutinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe5',
        'name': 'Cabozantinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe6',
        'name': 'Ceritinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe7',
        'name': 'Crizotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe8',
        'name': 'Dabrafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe9',
        'name': 'Dasatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbea',
        'name': 'Erlotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbeb',
        'name': 'Gefitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbec',
        'name': 'Imatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbed',
        'name': 'Lapatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbee',
        'name': 'Nilotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbef',
        'name': 'Pazopanib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf0',
        'name': 'ponatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf1',
        'name': 'Regorafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf2',
        'name': 'Ruxolitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf3',
        'name': 'Sorafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf4',
        'name': 'Sunitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf5',
        'name': 'Tofacitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf6',
        'name': 'Trametinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf7',
        'name': 'Vandetanib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf9',
        'name': 'Trastuzumab'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfa',
        'name': 'Trastuzumab + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfb',
        'name': 'Trastuzumab + Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfc',
        'name': 'Trastuzumab + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfd',
        'name': 'Sunitinib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfe',
        'name': 'Sunitinib + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbff',
        'name': 'Sunitinib + Loparemide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc00',
        'name': 'Sunitinib + Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc01',
        'name': 'Sorafenib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc02',
        'name': 'Sorafenib + Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc03',
        'name': 'Sorafenib + Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc04',
        'name': 'Sorafenib + Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc05',
        'name': 'Sorefenib + Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc06',
        'name': 'Dasatinib + Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc07',
        'name': 'Erlotinib + Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc08',
        'name': 'Imatinib + Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc09',
        'name': 'Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0a',
        'name': 'Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0b',
        'name': 'Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0c',
        'name': 'Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0d',
        'name': 'Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0e',
        'name': 'Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0f',
        'name': 'Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc10',
        'name': 'Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc11',
        'name': 'Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc12',
        'name': 'Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc13',
        'name': 'Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe2',
        'name': 'Afatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe3',
        'name': 'Axitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe4',
        'name': 'Bosutinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe5',
        'name': 'Cabozantinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe6',
        'name': 'Ceritinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe7',
        'name': 'Crizotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe8',
        'name': 'Dabrafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe9',
        'name': 'Dasatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbea',
        'name': 'Erlotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbeb',
        'name': 'Gefitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbec',
        'name': 'Imatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbed',
        'name': 'Lapatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbee',
        'name': 'Nilotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbef',
        'name': 'Pazopanib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf0',
        'name': 'ponatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf1',
        'name': 'Regorafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf2',
        'name': 'Ruxolitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf3',
        'name': 'Sorafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf4',
        'name': 'Sunitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf5',
        'name': 'Tofacitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf6',
        'name': 'Trametinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf7',
        'name': 'Vandetanib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf9',
        'name': 'Trastuzumab'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfa',
        'name': 'Trastuzumab + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfb',
        'name': 'Trastuzumab + Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfc',
        'name': 'Trastuzumab + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfd',
        'name': 'Sunitinib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfe',
        'name': 'Sunitinib + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbff',
        'name': 'Sunitinib + Loparemide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc00',
        'name': 'Sunitinib + Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc01',
        'name': 'Sorafenib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc02',
        'name': 'Sorafenib + Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc03',
        'name': 'Sorafenib + Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc04',
        'name': 'Sorafenib + Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc05',
        'name': 'Sorefenib + Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc06',
        'name': 'Dasatinib + Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc07',
        'name': 'Erlotinib + Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc08',
        'name': 'Imatinib + Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc09',
        'name': 'Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0a',
        'name': 'Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0b',
        'name': 'Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0c',
        'name': 'Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0d',
        'name': 'Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0e',
        'name': 'Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0f',
        'name': 'Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc10',
        'name': 'Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc11',
        'name': 'Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc12',
        'name': 'Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc13',
        'name': 'Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe2',
        'name': 'Afatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe3',
        'name': 'Axitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe4',
        'name': 'Bosutinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe5',
        'name': 'Cabozantinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe6',
        'name': 'Ceritinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe7',
        'name': 'Crizotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe8',
        'name': 'Dabrafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbe9',
        'name': 'Dasatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbea',
        'name': 'Erlotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbeb',
        'name': 'Gefitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbec',
        'name': 'Imatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbed',
        'name': 'Lapatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbee',
        'name': 'Nilotinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbef',
        'name': 'Pazopanib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf0',
        'name': 'ponatinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf1',
        'name': 'Regorafenib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf2',
        'name': 'Ruxolitinib'
      }, {
        'release': true,
        '_id': '55a95fec00bce706c3cdfbf3',
        'name': 'Sorafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf4',
        'name': 'Sunitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf5',
        'name': 'Tofacitinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf6',
        'name': 'Trametinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf7',
        'name': 'Vandetanib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf9',
        'name': 'Trastuzumab'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfa',
        'name': 'Trastuzumab + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfb',
        'name': 'Trastuzumab + Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfc',
        'name': 'Trastuzumab + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfd',
        'name': 'Sunitinib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbfe',
        'name': 'Sunitinib + Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbff',
        'name': 'Sunitinib + Loparemide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc00',
        'name': 'Sunitinib + Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc01',
        'name': 'Sorafenib + Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc02',
        'name': 'Sorafenib + Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc03',
        'name': 'Sorafenib + Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc04',
        'name': 'Sorafenib + Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc05',
        'name': 'Sorefenib + Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc06',
        'name': 'Dasatinib + Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc07',
        'name': 'Erlotinib + Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc08',
        'name': 'Imatinib + Cyclosporine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc09',
        'name': 'Ursodeoxycholic acid'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0a',
        'name': 'Loperamide'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0b',
        'name': 'Domperidone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0c',
        'name': 'Prednisolone'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0d',
        'name': 'Entecavir'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0e',
        'name': 'Diethylpropion'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc0f',
        'name': 'Olmesartan'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc10',
        'name': 'Diclofenac'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc11',
        'name': 'Cytarabine'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc12',
        'name': 'Cefuroxime'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfc13',
        'name': 'Cyclosporine'
      }],
      'highlight': 0,
      'source': 7,
      'target': 17,
      'value': 350.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 22,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 23,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 24,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 25,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 26,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 27,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 28,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 29,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 30,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 31,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 7,
      'target': 32,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 2,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 3,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 9,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 10,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 13,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 14,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 18,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 19,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 20,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 8,
      'target': 21,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 9,
      'target': 23,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }],
      'highlight': 0,
      'source': 9,
      'target': 24,
      'value': 2.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 2,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 3,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd35',
        'name': 'GDC0941'
      }, {
        'release': true,
        '_id': '55a95ff100bce706c3cdfcee',
        'name': 'MK2206'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd36',
        'name': 'WYE125132'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd37',
        'name': 'Torin1'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd38',
        'name': 'PD0325901'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd35',
        'name': 'GDC0941'
      }, {
        'release': true,
        '_id': '55a95ff100bce706c3cdfcee',
        'name': 'MK2206'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd36',
        'name': 'WYE125132'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd37',
        'name': 'Torin1'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd38',
        'name': 'PD0325901'
      }],
      'highlight': 0,
      'source': 10,
      'target': 6,
      'value': 10.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 9,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 10,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff200bce706c3cdfd35',
        'name': 'GDC0941'
      }, {
        'release': true,
        '_id': '55a95ff100bce706c3cdfcee',
        'name': 'MK2206'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd36',
        'name': 'WYE125132'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd37',
        'name': 'Torin1'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd38',
        'name': 'PD0325901'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd35',
        'name': 'GDC0941'
      }, {
        'release': true,
        '_id': '55a95ff100bce706c3cdfcee',
        'name': 'MK2206'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd36',
        'name': 'WYE125132'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd37',
        'name': 'Torin1'
      }, {
        'release': true,
        '_id': '55a95ff200bce706c3cdfd38',
        'name': 'PD0325901'
      }],
      'highlight': 0,
      'source': 10,
      'target': 12,
      'value': 10.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 13,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 14,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 18,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 19,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 20,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff000bce706c3cdfc87',
        'name': 'AZ628'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc88',
        'name': 'Selumetinib'
      }, {
        'release': true,
        '_id': '55a95fed00bce706c3cdfbf8',
        'name': 'Vemurafenib'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8a',
        'name': 'PLX4720'
      }, {
        'release': true,
        '_id': '55a95ff000bce706c3cdfc8b',
        'name': 'SB590885'
      }],
      'highlight': 0,
      'source': 10,
      'target': 21,
      'value': 5.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd90',
        'name': 'tunicamycin'
      }],
      'highlight': 0,
      'source': 10,
      'target': 22,
      'value': 3.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd90',
        'name': 'tunicamycin'
      }],
      'highlight': 0,
      'source': 10,
      'target': 24,
      'value': 3.0
    }, {
      'info': [{
        'release': true,
        '_id': '55a95ff300bce706c3cdfd80',
        'name': 'spinal muscular atrophy'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd81',
        'name': 'amyotrophic lateral sclerosis'
      }, {
        'release': true,
        '_id': '55a95ff300bce706c3cdfd90',
        'name': 'tunicamycin'
      }],
      'highlight': 0,
      'source': 10,
      'target': 31,
      'value': 3.0
    }]
  };
}
;/*eslint camelcase: 0*/

angular
  .module('indexControllers', ['ngLodash', 'clustergram'])
  .controller('Docent3Controller', Docent3Controller)
  .controller('cellsModalCtrl',
  ['$scope', '$modalInstance', 'cells',
      function($scope, $modalInstance, cells) {
          $scope.cells = cells;
          $scope.cellCount = cells.length;
          $scope.cancel = function() {
              $modalInstance.dismiss('cancel');
          };
      }])
  .controller('perturbagensModalCtrl',
  ['$scope', '$modalInstance', 'perturbagens',
      function($scope, $modalInstance, perturbagens) {
          $scope.perturbagens = perturbagens;
          $scope.perturbagenCount = perturbagens.length;
          $scope.cancel = function() {
              $modalInstance.dismiss('cancel');
          };
      }]);

/* @ngInject */
function Docent3Controller($window, $scope, $http, $modal, d3, d3Data, lodash) {

  var vm = this;
  var idx = window.location.href.lastIndexOf('/');
  vm.baseUrl = $window.location.href.slice(0, idx + 1);
  vm.search = search;
  vm.releases = [];
  vm.resultsLoading = false;
  vm.resultIsSearch = false;
  vm.tileCb = tileCb;
  vm.searchQ = '';
  vm.searchQCopy = '';
  vm.keywords = [
    'Collagen I',
    'L1000',
    'MEMA',
    'MCF7',
  ];
  vm.query = {
    dataset: '',
    cellLine: '',
    perturbagens: []
  };
  vm.arguments = {
    network_data: d3Data,
    svg_div_id: 'svg-div',
    row_label: 'Assays',
    row_label_scale: 0.7,
    col_label: 'Cell Lines',
    outer_margins: {
      'top': 'inherit',
      'bottom': 'inherit',
      'left': 'inherit',
      'right': 'inherit'
    },
    opacity_scale: 'log',
    // input_domain: 0.1,
    do_zoom: false,
    // tile_colors: ['#083F50', '#ED9124'],
    tile_colors: ['#3593b1', '#ED9124'],
    tile_click_hlight: true,
    highlight_color: 'yellow',
    title_tile: true,
    click_tile: tileCb,
    click_label: clickLabel,
    // 'click_group': click_group_callback
    resize: false,
    order: 'rank',
    zoom: false,
    super_font_size: '24px'
  };
  vm.showCells = showCells;
  vm.showPerturbagens = showPerturbagens;

  function showCells(cells) {
      if (cells[0] == "TBD") {
          // normalize the input format for modal
          cells = [{ name: "TBD" }];
      }
      cells.forEach(function(cell) {
          delete cell["$$hashKey"];
      });
      $modal.open({
          templateUrl: vm.baseUrl + 'cells.html',
          controller: 'cellsModalCtrl',
          resolve: {
              cells: function() {
                  return cells;
              }/*,
              commonKeys: function() {
                  return getCommonKeys(cells);
              }*/
          }
      });
  };

  function showPerturbagens(perturbagens) {
      if (perturbagens[0] == "TBD") {
          // normalize the input format for modal
          perturbagens = [{ name: "TBD" }]
      }
      perturbagens.forEach(function(perturbagen) {
          delete perturbagen["$$hashKey"];
      });
      $modal.open({
          templateUrl: vm.baseUrl + 'perturbagens.html',
          controller: 'perturbagensModalCtrl',
          resolve: {
              perturbagens: function() {
                  return perturbagens;
              }/*,
              commonKeys: function() {
                  return getCommonKeys(perturbagens);
              }*/
          }
      });
  };

  function clickLabel(label, rowCol) {
    vm.resultIsSearch = false;
    d3.selectAll('.highlight').style('opacity', 0);
    vm.query = {
      cellLine: rowCol === 'col' ? label : null,
      dataset: rowCol === 'row' ? label : null
    };
    queryLDR();
  }

  function tileCb(tileInfo) {
    d3.selectAll('.tile').each(function(d, i) {
      if (!lodash.isEqual(d, tileInfo)) {
        d3.select(this).selectAll('.highlight').style('opacity', 0);
      }
    });
    vm.resultIsSearch = false;
    var pertIds = lodash.map(tileInfo.perts, function(pert) {
      return pert._id;
    });
    vm.query = {
      dataset: tileInfo.row,
      cellLine: tileInfo.col,
      perturbagens: pertIds.join(',')
    };
    queryLDR();
  }

  function getDatasetsWithPerts(input, callback) {
    $http({
      url: 'http://amp.pharm.mssm.edu/LDR/api/autocomplete/perturbagens',
      method: 'GET',
      params: {
        q: input
      }
    }).then(function(response) {
      var pertIds = [];
      lodash.each(response.data, function(obj) {
        if (obj._id) {
          pertIds.push(obj._id);
        }
      });
      $http({
        url: 'http://amp.pharm.mssm.edu/LDR/api/releases/filter',
        method: 'GET',
        params: {
          perturbagens: pertIds.join(',')
        }
      }).then(function(response) {
        var datasetsWithPerts = [];
        lodash.each(response.data, function(obj) {
          if (obj.released) {
            obj.releaseDates.upcoming = new Date(obj.releaseDates
              .upcoming);
            datasetsWithPerts.push(obj);
          }
        });
        callback(datasetsWithPerts);
      });
    });
  }

  function getDatasetsWithCLines(input, callback) {
    $http({
      url: 'http://amp.pharm.mssm.edu/LDR/api/releases/filter',
      method: 'GET',
      params: {
        cellLine: input
      }
    }).then(function(response) {
      var datasetsWithCLines = [];
      lodash.each(response.data, function(obj) {
        if (obj.released) {
          obj.releaseDates.upcoming = new Date(obj.releaseDates.upcoming);
          datasetsWithCLines.push(obj);
        }
      });
      callback(datasetsWithCLines);
    });
  }

  function getDatasets(input, callback) {
    $http({
      url: 'http://amp.pharm.mssm.edu/LDR/api/releases/search',
      method: 'GET',
      params: {
        q: input
      }
    }).then(function(response) {
      var datasets = [];
      lodash.each(response.data, function(obj) {
        if (obj.released) {
          obj.releaseDates.upcoming = new Date(obj.releaseDates.upcoming);
          datasets.push(obj);
        }
      });
      callback(datasets);
    });
  }

  function checkForIcons(release) {
    var dsName = release.datasetName;
    var assay = release.metadata.assay[0];
    // Assay RegExps
    var l1000RegEx = /L1000/i;
    var p100RegEx = /P100/i;
    var gcpAbbrRegEx = /GCP/i;
    var rnaSeqRegEx = /RNA[-]?Seq/i;
    var gcpRegEx = /Global Chromatin Profiling/i;

    var isL1000 = l1000RegEx.test(dsName) || l1000RegEx.test(assay);
    var isP100 = p100RegEx.test(dsName) || p100RegEx.test(assay);
    var isRNASeq = rnaSeqRegEx.test(dsName) || rnaSeqRegEx.test(assay);
    var isGCP = gcpAbbrRegEx.test(dsName) || gcpAbbrRegEx.test(assay) ||
      gcpRegEx.test(dsName) || gcpRegEx.test(dsName);

    release.useSlicer = isL1000;
    release.usePiLINCS = isP100 || isGCP;
    release.useMosaic = isP100 || isGCP;

    if (isRNASeq) {
      if (release.group.name === 'NeuroLINCS') {
        release.iLINCSLink = 'http://eh3.uc.edu/GenomicsPortals/DatasetLandingPage.do?data_set=LDS-1238';
      } else if (release.group.name === 'DTOXS') {
        var upDate = release.releaseDates.upcoming.setHours(0, 0, 0, 0);
        var juneDate = new Date('6/30/2015').setHours(0, 0, 0, 0);
        var augustDate = new Date('8/20/2015').setHours(0, 0, 0, 0);
        // Check if release date is 6/30/15
        if (upDate === juneDate) {
          release.iLINCSLink = 'http://eh3.uc.edu/GenomicsPortals/DatasetLandingPage.do?data_set=LDS-1237';
        } else if (upDate === augustDate) {
          release.iLINCSLink = 'http://eh3.uc.edu/GenomicsPortals/DatasetLandingPage.do?data_set=LDS-1239';
        }
      }
    }
  }

  function search(query) {
    if (!!query && query.length) {
      vm.searchQ = query;
    } else if (!vm.searchQ.length) {
      return;
    }

    vm.resultIsSearch = true;
    vm.searchQCopy = vm.searchQ;
    var labelSelected = false;

    d3.selectAll('.row_label_text').each(function(d, i) {
      var label = d3.select(this).text();
      if (vm.searchQ.toLowerCase() === label.toLowerCase() && !labelSelected) {
        d3.select(this).on('click').apply(this, [d, i]);
        labelSelected = true;
      }
    });

    d3.selectAll('.col_label_text').each(function(d, i) {
      var label = d3.select(this).text();
      if (vm.searchQ.toLowerCase() === label.toLowerCase() && !labelSelected) {
        d3.select(this).on('click').apply(this, [d, i]);
        labelSelected = true;
      }
    });

    if (labelSelected) {
      return;
    }

    vm.resultsLoading = true;

    getDatasetsWithPerts(vm.searchQ, function(dsWithPerts) {
      getDatasetsWithCLines(vm.searchQ, function(dsWithCLines) {
        getDatasets(vm.searchQ, function(datasets) {
          var concatArr = dsWithPerts.concat(dsWithCLines, datasets);
          vm.releases = lodash.uniq(concatArr, false, '_id');
          d3.selectAll('.click_hlight').style('opacity', 0);
          lodash.each(vm.releases, function(release) {
            checkForIcons(release);
            var perts = release.metadata.perturbagens;
            var pertIds = lodash.map(perts, function(obj) {
              return obj._id;
            });
            d3.selectAll('.tile').each(function(d, i) {
              var that = this;
              lodash.each(d.info, function(pertObj) {
                if (pertIds.indexOf(pertObj._id) > -1) {
                  d3.select(that).selectAll('.highlight')
                    .style('opacity', 1)
                    .style('fill', 'yellow');
                }
              });
            });
          });
          vm.resultsLoading = false;
        });
      });
    });
  }

  function queryLDR() {
    $http({
      url: 'http://amp.pharm.mssm.edu/LDR/api/releases/filter',
      method: 'GET',
      params: vm.query
    }).then(function(response) {
      vm.releases = [];
      lodash.each(response.data, function(release) {
        if (release.released) {
          release.releaseDates.upcoming = new Date(release.releaseDates.upcoming);
          checkForIcons(release)
          vm.releases.push(release);
        }
      });
    });
  }

  vm.summary = {
    center: 0,
    assays: 0,
    cellLines: 0,
    perturbagens: 0
  };

  function countUpTo(field, count, max, step, time) {
    setTimeout(function() {
      if (count === max) {
        return;
      } else if (count + step > max) {
        countUpTo(field, count, max, 1, 0);
      } else {
        count = count + step;
        vm.summary[field] = count;
        $scope.$apply();
        countUpTo(field, count, max, step, time);
      }
    }, time);
  }

  function generateCounts() {
    $http({
      url: 'http://amp.pharm.mssm.edu/LDR/api/counts/released',
      method: 'GET',
    }).then(function(response) {
      var counts = response.data;
      counts.center = 6;
      countUpTo('center', 0, counts.center, 1, 50);
      countUpTo('assays', 0, counts.assays, 1, 10);
      countUpTo('perturbagens', 0, counts.perturbagens, 50, 10);
      countUpTo('cellLines', 0, counts.cellLines, 5, 10);
    });
  }

  generateCounts();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsdXN0ZXJncmFtLmpzIiwiZDMuanMiLCJkM0NsdXN0U2VydmljZS5qcyIsImQzRGF0YVNlcnZpY2UuanMiLCJncmlkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBS0E7R0FDQSxPQUFBLGVBQUE7R0FDQSxVQUFBLGVBQUE7OzsyRUFFQSxTQUFBLGlCQUFBO0VBQ0EsT0FBQTtJQUNBLFVBQUE7SUFDQSxPQUFBO01BQ0EsV0FBQTs7SUFFQSxhQUFBO0lBQ0EsWUFBQTtJQUNBLGNBQUE7SUFDQSxrQkFBQTs7OztFQUlBLFNBQUEsc0JBQUEsVUFBQSxRQUFBLElBQUEsU0FBQTtJQUNBLElBQUEsS0FBQTtJQUNBLEdBQUEsV0FBQTtJQUNBLEdBQUEsU0FBQTtJQUNBLElBQUE7SUFDQSxJQUFBLGNBQUE7TUFDQSxzQkFBQTtNQUNBLGFBQUE7O0lBRUEsSUFBQSxjQUFBLENBQUEsU0FBQSxXQUFBO0lBQ0EsSUFBQSxjQUFBLENBQUEsT0FBQSxRQUFBLFFBQUE7SUFDQSxJQUFBLGlCQUFBLENBQUEsUUFBQSxhQUFBOztJQUVBLFNBQUEsU0FBQSxhQUFBO01BQ0EsR0FBQSxTQUFBO01BQ0EsSUFBQSxhQUFBO1FBQ0EsWUFBQSxRQUFBO2FBQ0E7UUFDQSxjQUFBLFFBQUEsWUFBQSxHQUFBO1FBQ0EsWUFBQSxRQUFBOzs7O0lBSUEsU0FBQSxjQUFBO01BQ0EsR0FBQSxVQUFBLFFBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxhQUFBO1FBQ0EsY0FBQSxRQUFBLFlBQUEsR0FBQTs7O01BR0EsR0FBQSxVQUFBLG1CQUFBLEtBQUEsU0FBQSxHQUFBLEdBQUE7UUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBLE1BQUE7UUFDQSxHQUFBLFVBQUEsdUJBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtVQUNBLElBQUEsT0FBQSxHQUFBLE9BQUEsTUFBQSxPQUFBO1VBQ0EsSUFBQSxNQUFBLEdBQUE7WUFDQTs7VUFFQSxJQUFBLFlBQUEsUUFBQSxTQUFBLENBQUEsR0FBQTtZQUNBLEtBQUEsTUFBQSxRQUFBO2lCQUNBLElBQUEsWUFBQSxRQUFBLFNBQUEsQ0FBQSxHQUFBO1lBQ0EsS0FBQSxNQUFBLFFBQUE7aUJBQ0EsSUFBQSxlQUFBLFFBQUEsU0FBQSxDQUFBLEdBQUE7WUFDQSxLQUFBLE1BQUEsUUFBQTtpQkFDQTtZQUNBLEtBQUEsTUFBQSxRQUFBOzs7OztNQUtBLEdBQUEsVUFBQSxtQkFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQTtRQUNBLElBQUEsUUFBQSxLQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUEsT0FBQTtRQUNBLElBQUEsT0FBQSxJQUFBLGFBQUEsUUFBQTtVQUNBLEtBQUEsTUFBQSxRQUFBLFlBQUE7ZUFDQSxJQUFBLE1BQUEsTUFBQSxLQUFBLE9BQUEsUUFBQTtVQUNBLEtBQUEsTUFBQSxRQUFBO2VBQ0E7VUFDQSxLQUFBLE1BQUEsUUFBQTs7Ozs7SUFLQSxTQUFBLGdCQUFBO01BQ0EsR0FBQSxPQUFBLFNBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLEdBQUEsT0FBQSxNQUFBLEdBQUEsU0FBQSxNQUFBLE1BQUEsQ0FBQSxHQUFBOzs7O0lBSUE7SUFDQTs7O0FBR0E7Ozs7O0FDekZBO0dBQ0EsT0FBQTtHQUNBLFFBQUEsTUFBQTs7QUFFQSxTQUFBLFlBQUE7O0VBRUEsSUFBQSxLQUFBO0lBQ0EsU0FBQTs7RUFFQSxJQUFBLENBQUEsS0FBQSxLQUFBLEtBQUEsTUFBQSxXQUFBO0lBQ0EsT0FBQSxDQUFBLElBQUE7O0VBRUEsSUFBQSxnQkFBQSxHQUFBO0lBQ0EsV0FBQSxTQUFBLE1BQUE7TUFDQSxPQUFBLGNBQUEsS0FBQTs7RUFFQSxJQUFBLGNBQUE7SUFDQSxxQkFBQSxZQUFBO0lBQ0EsWUFBQTtFQUNBLElBQUE7SUFDQSxTQUFBLG1CQUFBLFlBQUEsR0FBQTtJQUNBLE9BQUEsR0FBQTtJQUNBLFdBQUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxJQUFBLEtBQUE7UUFDQSxRQUFBLElBQUEsTUFBQTtNQUNBLE9BQUEsS0FBQSxNQUFBLEtBQUEsS0FBQTtNQUNBLE9BQUE7OztFQUdBLElBQUE7SUFDQSxZQUFBLGNBQUEsT0FBQSxNQUFBLFlBQUEsV0FBQSxHQUFBO0lBQ0EsT0FBQSxPQUFBO0lBQ0EsSUFBQSx1QkFBQSxVQUFBLFFBQUE7TUFDQSwwQkFBQSxxQkFBQTtNQUNBLDRCQUFBLHFCQUFBO01BQ0EscUJBQUEsVUFBQSxvQkFBQTtNQUNBLHVCQUFBLG1CQUFBO0lBQ0EscUJBQUEsZUFBQSxTQUFBLE1BQUEsT0FBQTtNQUNBLHdCQUFBLEtBQUEsTUFBQSxNQUFBLFFBQUE7O0lBRUEscUJBQUEsaUJBQUEsU0FBQSxPQUFBLE9BQUEsT0FBQTtNQUNBLDBCQUFBLEtBQUEsTUFBQSxPQUFBLE9BQUEsUUFBQTs7SUFFQSxtQkFBQSxjQUFBLFNBQUEsTUFBQSxPQUFBLFVBQUE7TUFDQSxxQkFBQSxLQUFBLE1BQUEsTUFBQSxRQUFBLElBQUE7OztFQUdBLEdBQUEsWUFBQTs7RUFFQSxTQUFBLGFBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxJQUFBOztFQUVBLEdBQUEsYUFBQSxTQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxJQUFBLENBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsSUFBQTs7RUFFQSxHQUFBLE1BQUEsU0FBQSxPQUFBLEdBQUE7SUFDQSxJQUFBLElBQUEsQ0FBQTtNQUNBLElBQUEsTUFBQTtNQUNBLEdBQUE7SUFDQSxJQUFBLFVBQUEsV0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxNQUFBLE9BQUEsUUFBQSxLQUFBLEdBQUE7VUFDQSxJQUFBO1VBQ0E7O01BRUEsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxNQUFBLE9BQUEsUUFBQSxJQUFBLEdBQUEsSUFBQTtXQUNBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsT0FBQSxNQUFBLElBQUEsT0FBQSxRQUFBLEtBQUEsR0FBQTtVQUNBLElBQUE7VUFDQTs7TUFFQSxPQUFBLEVBQUEsSUFBQTtRQUNBLElBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxPQUFBLE1BQUEsSUFBQSxPQUFBLFFBQUEsSUFBQSxHQUFBLElBQUE7O0lBRUEsT0FBQTs7RUFFQSxHQUFBLE1BQUEsU0FBQSxPQUFBLEdBQUE7SUFDQSxJQUFBLElBQUEsQ0FBQTtNQUNBLElBQUEsTUFBQTtNQUNBLEdBQUE7SUFDQSxJQUFBLFVBQUEsV0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxNQUFBLE9BQUEsUUFBQSxLQUFBLEdBQUE7VUFDQSxJQUFBO1VBQ0E7O01BRUEsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxNQUFBLE9BQUEsUUFBQSxJQUFBLEdBQUEsSUFBQTtXQUNBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsT0FBQSxNQUFBLElBQUEsT0FBQSxRQUFBLEtBQUEsR0FBQTtVQUNBLElBQUE7VUFDQTs7TUFFQSxPQUFBLEVBQUEsSUFBQTtRQUNBLElBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxPQUFBLE1BQUEsSUFBQSxPQUFBLFFBQUEsSUFBQSxHQUFBLElBQUE7O0lBRUEsT0FBQTs7RUFFQSxHQUFBLFNBQUEsU0FBQSxPQUFBLEdBQUE7SUFDQSxJQUFBLElBQUEsQ0FBQTtNQUNBLElBQUEsTUFBQTtNQUNBLEdBQUEsR0FBQTtJQUNBLElBQUEsVUFBQSxXQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUEsSUFBQTtRQUNBLElBQUEsQ0FBQSxJQUFBLE1BQUEsT0FBQSxRQUFBLEtBQUEsR0FBQTtVQUNBLElBQUEsSUFBQTtVQUNBOztNQUVBLE9BQUEsRUFBQSxJQUFBO1FBQ0EsSUFBQSxDQUFBLElBQUEsTUFBQSxPQUFBLE1BQUE7VUFDQSxJQUFBLElBQUEsR0FBQSxJQUFBO1VBQ0EsSUFBQSxJQUFBLEdBQUEsSUFBQTs7V0FFQTtNQUNBLE9BQUEsRUFBQSxJQUFBO1FBQ0EsSUFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLE9BQUEsTUFBQSxJQUFBLE9BQUEsUUFBQSxLQUFBLEdBQUE7VUFDQSxJQUFBLElBQUE7VUFDQTs7TUFFQSxPQUFBLEVBQUEsSUFBQTtRQUNBLElBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxPQUFBLE1BQUEsSUFBQSxPQUFBLE1BQUE7VUFDQSxJQUFBLElBQUEsR0FBQSxJQUFBO1VBQ0EsSUFBQSxJQUFBLEdBQUEsSUFBQTs7O0lBR0EsT0FBQSxDQUFBLEdBQUE7OztFQUdBLFNBQUEsVUFBQSxHQUFBO0lBQ0EsT0FBQSxNQUFBLE9BQUEsTUFBQSxDQUFBOzs7RUFHQSxTQUFBLFdBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxNQUFBOztFQUVBLEdBQUEsTUFBQSxTQUFBLE9BQUEsR0FBQTtJQUNBLElBQUEsSUFBQTtNQUNBLElBQUEsTUFBQTtNQUNBLEdBQUEsSUFBQSxDQUFBO0lBQ0EsSUFBQSxVQUFBLFdBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxJQUFBO1FBQ0EsSUFBQSxXQUFBLElBQUEsQ0FBQSxNQUFBLEtBQUEsS0FBQTtXQUNBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLFdBQUEsSUFBQSxDQUFBLEVBQUEsS0FBQSxPQUFBLE1BQUEsSUFBQSxLQUFBLEtBQUE7O0lBRUEsT0FBQTs7RUFFQSxHQUFBLE9BQUEsU0FBQSxPQUFBLEdBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLE1BQUE7TUFDQSxHQUFBLElBQUEsQ0FBQTtNQUNBLElBQUE7SUFDQSxJQUFBLFVBQUEsV0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLFdBQUEsSUFBQSxVQUFBLE1BQUEsTUFBQSxLQUFBO2FBQ0EsRUFBQTtXQUNBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLFdBQUEsSUFBQSxVQUFBLEVBQUEsS0FBQSxPQUFBLE1BQUEsSUFBQSxNQUFBLEtBQUE7YUFDQSxFQUFBOztJQUVBLElBQUEsR0FBQSxPQUFBLElBQUE7O0VBRUEsR0FBQSxXQUFBLFNBQUEsUUFBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBLENBQUEsT0FBQSxTQUFBLEtBQUEsSUFBQTtNQUNBLElBQUEsS0FBQSxNQUFBO01BQ0EsSUFBQSxDQUFBLE9BQUEsSUFBQTtNQUNBLElBQUEsSUFBQTtJQUNBLE9BQUEsSUFBQSxJQUFBLEtBQUEsT0FBQSxLQUFBLEtBQUE7O0VBRUEsR0FBQSxTQUFBLFNBQUEsT0FBQSxHQUFBO0lBQ0EsSUFBQSxVQUFBO01BQ0EsSUFBQSxNQUFBO01BQ0EsR0FBQSxJQUFBLENBQUE7SUFDQSxJQUFBLFVBQUEsV0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLElBQUE7UUFDQSxJQUFBLFdBQUEsSUFBQSxVQUFBLE1BQUEsTUFBQSxRQUFBLEtBQUE7V0FDQTtNQUNBLE9BQUEsRUFBQSxJQUFBO1FBQ0EsSUFBQSxXQUFBLElBQUEsVUFBQSxFQUFBLEtBQUEsT0FBQSxNQUFBLElBQUEsTUFBQTtXQUNBLEtBQUE7O0lBRUEsSUFBQSxRQUFBLFFBQUEsT0FBQSxHQUFBLFNBQUEsUUFBQSxLQUFBLGVBQUE7O0VBRUEsR0FBQSxXQUFBLFNBQUEsT0FBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBLE1BQUE7TUFDQSxJQUFBO01BQ0EsR0FBQSxHQUFBLElBQUE7TUFDQSxJQUFBLENBQUE7TUFDQSxJQUFBO0lBQ0EsSUFBQSxVQUFBLFdBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7UUFDQSxJQUFBLFdBQUEsSUFBQSxVQUFBLE1BQUEsTUFBQTtVQUNBLElBQUEsSUFBQTtVQUNBLEtBQUEsSUFBQSxFQUFBO1VBQ0EsS0FBQSxLQUFBLElBQUE7OztXQUdBO01BQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtRQUNBLElBQUEsV0FBQSxJQUFBLFVBQUEsRUFBQSxLQUFBLE9BQUEsTUFBQSxJQUFBLE1BQUE7VUFDQSxJQUFBLElBQUE7VUFDQSxLQUFBLElBQUEsRUFBQTtVQUNBLEtBQUEsS0FBQSxJQUFBOzs7O0lBSUEsSUFBQSxJQUFBLEdBQUEsT0FBQSxLQUFBLElBQUE7O0VBRUEsR0FBQSxZQUFBLFdBQUE7SUFDQSxJQUFBLElBQUEsR0FBQSxTQUFBLE1BQUEsTUFBQTtJQUNBLE9BQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTs7O0VBR0EsU0FBQSxZQUFBLFNBQUE7SUFDQSxPQUFBO01BQ0EsTUFBQSxTQUFBLEdBQUEsR0FBQSxJQUFBLElBQUE7UUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLEtBQUE7UUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLEtBQUEsRUFBQTtRQUNBLE9BQUEsS0FBQSxJQUFBO1VBQ0EsSUFBQSxNQUFBLEtBQUEsT0FBQTtVQUNBLElBQUEsUUFBQSxFQUFBLE1BQUEsS0FBQSxHQUFBLEtBQUEsTUFBQTtlQUNBLEtBQUE7O1FBRUEsT0FBQTs7TUFFQSxPQUFBLFNBQUEsR0FBQSxHQUFBLElBQUEsSUFBQTtRQUNBLElBQUEsVUFBQSxTQUFBLEdBQUEsS0FBQTtRQUNBLElBQUEsVUFBQSxTQUFBLEdBQUEsS0FBQSxFQUFBO1FBQ0EsT0FBQSxLQUFBLElBQUE7VUFDQSxJQUFBLE1BQUEsS0FBQSxPQUFBO1VBQ0EsSUFBQSxRQUFBLEVBQUEsTUFBQSxLQUFBLEdBQUEsS0FBQTtlQUNBLEtBQUEsTUFBQTs7UUFFQSxPQUFBOzs7O0VBSUEsSUFBQSxZQUFBLFlBQUE7RUFDQSxHQUFBLGFBQUEsVUFBQTtFQUNBLEdBQUEsU0FBQSxHQUFBLGNBQUEsVUFBQTtFQUNBLEdBQUEsV0FBQSxTQUFBLEdBQUE7SUFDQSxPQUFBLFlBQUEsRUFBQSxXQUFBLElBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLGFBQUEsRUFBQSxJQUFBO1FBQ0E7O0VBRUEsR0FBQSxVQUFBLFNBQUEsT0FBQSxJQUFBLElBQUE7SUFDQSxJQUFBLENBQUEsSUFBQSxVQUFBLFVBQUEsR0FBQTtNQUNBLEtBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxHQUFBLEtBQUE7O0lBRUEsSUFBQSxJQUFBLEtBQUE7TUFDQSxHQUFBO0lBQ0EsT0FBQSxHQUFBO01BQ0EsSUFBQSxLQUFBLFdBQUEsTUFBQTtNQUNBLElBQUEsTUFBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLE1BQUEsTUFBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLE1BQUE7O0lBRUEsT0FBQTs7RUFFQSxHQUFBLFVBQUEsU0FBQSxPQUFBLFNBQUE7SUFDQSxJQUFBLElBQUEsUUFBQTtNQUNBLFdBQUEsSUFBQSxNQUFBO0lBQ0EsT0FBQSxLQUFBLFNBQUEsS0FBQSxNQUFBLFFBQUE7SUFDQSxPQUFBOztFQUVBLEdBQUEsUUFBQSxTQUFBLE9BQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLE1BQUEsU0FBQTtNQUNBLElBQUEsS0FBQSxNQUFBO01BQ0EsUUFBQSxJQUFBLE1BQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxPQUFBLElBQUEsR0FBQSxNQUFBLEtBQUEsQ0FBQSxLQUFBLElBQUEsS0FBQSxNQUFBLEVBQUE7SUFDQSxPQUFBOztFQUVBLEdBQUEsTUFBQSxXQUFBO0lBQ0EsSUFBQSxFQUFBLElBQUEsVUFBQSxTQUFBLE9BQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsV0FBQSxlQUFBLE9BQUEsSUFBQTtRQUNBLElBQUEsRUFBQSxJQUFBLElBQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsR0FBQSxNQUFBLEtBQUEsS0FBQSxJQUFBLE1BQUEsSUFBQSxFQUFBLElBQUEsSUFBQTtRQUNBLElBQUEsS0FBQSxVQUFBLEdBQUE7OztJQUdBLE9BQUE7OztFQUdBLFNBQUEsYUFBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBOztFQUVBLEdBQUEsWUFBQSxTQUFBLFFBQUE7SUFDQSxPQUFBLEdBQUEsSUFBQSxNQUFBLElBQUE7O0VBRUEsR0FBQSxPQUFBLFNBQUEsS0FBQTtJQUNBLElBQUEsT0FBQTtJQUNBLEtBQUEsSUFBQSxPQUFBLEtBQUEsS0FBQSxLQUFBO0lBQ0EsT0FBQTs7RUFFQSxHQUFBLFNBQUEsU0FBQSxLQUFBO0lBQ0EsSUFBQSxTQUFBO0lBQ0EsS0FBQSxJQUFBLE9BQUEsS0FBQSxPQUFBLEtBQUEsSUFBQTtJQUNBLE9BQUE7O0VBRUEsR0FBQSxVQUFBLFNBQUEsS0FBQTtJQUNBLElBQUEsVUFBQTtJQUNBLEtBQUEsSUFBQSxPQUFBLEtBQUEsUUFBQSxLQUFBO01BQ0EsS0FBQTtNQUNBLE9BQUEsSUFBQTs7SUFFQSxPQUFBOztFQUVBLEdBQUEsUUFBQSxTQUFBLFFBQUE7SUFDQSxJQUFBLElBQUEsT0FBQTtNQUNBLEdBQUEsSUFBQSxDQUFBO01BQ0EsSUFBQTtNQUNBLFFBQUE7SUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLEtBQUEsT0FBQSxHQUFBO0lBQ0EsU0FBQSxJQUFBLE1BQUE7SUFDQSxPQUFBLEVBQUEsS0FBQSxHQUFBO01BQ0EsUUFBQSxPQUFBO01BQ0EsSUFBQSxNQUFBO01BQ0EsT0FBQSxFQUFBLEtBQUEsR0FBQTtRQUNBLE9BQUEsRUFBQSxLQUFBLE1BQUE7OztJQUdBLE9BQUE7O0VBRUEsSUFBQSxNQUFBLEtBQUE7RUFDQSxHQUFBLFFBQUEsU0FBQSxPQUFBLE1BQUEsTUFBQTtJQUNBLElBQUEsVUFBQSxTQUFBLEdBQUE7TUFDQSxPQUFBO01BQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOzs7SUFHQSxJQUFBLENBQUEsT0FBQSxTQUFBLFNBQUEsVUFBQSxNQUFBLElBQUE7TUFDQTtJQUNBLElBQUEsUUFBQTtNQUNBLElBQUEsc0JBQUEsSUFBQTtNQUNBLElBQUEsQ0FBQTtNQUNBO0lBQ0EsU0FBQSxHQUFBLFFBQUEsR0FBQSxRQUFBO0lBQ0EsSUFBQSxPQUFBO01BQ0EsT0FBQSxDQUFBLElBQUEsUUFBQSxPQUFBLEVBQUEsS0FBQSxNQUFBLE1BQUEsS0FBQSxJQUFBOztNQUVBLE9BQUEsQ0FBQSxJQUFBLFFBQUEsT0FBQSxFQUFBLEtBQUEsTUFBQSxNQUFBLEtBQUEsSUFBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsc0JBQUEsR0FBQTtJQUNBLElBQUEsSUFBQTtJQUNBLE9BQUEsSUFBQSxJQUFBLEdBQUEsS0FBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsU0FBQSxNQUFBLFlBQUE7SUFDQSxLQUFBLElBQUEsT0FBQSxZQUFBO01BQ0EsT0FBQSxlQUFBLEtBQUEsV0FBQSxLQUFBO1FBQ0EsT0FBQSxXQUFBO1FBQ0EsWUFBQTs7OztFQUlBLEdBQUEsTUFBQSxTQUFBLFFBQUEsR0FBQTtJQUNBLElBQUEsTUFBQSxJQUFBO0lBQ0EsSUFBQSxrQkFBQSxRQUFBO01BQ0EsT0FBQSxRQUFBLFNBQUEsS0FBQSxPQUFBO1FBQ0EsSUFBQSxJQUFBLEtBQUE7O1dBRUEsSUFBQSxNQUFBLFFBQUEsU0FBQTtNQUNBLElBQUEsSUFBQSxDQUFBO1FBQ0EsSUFBQSxPQUFBO1FBQ0E7TUFDQSxJQUFBLFVBQUEsV0FBQTtRQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxJQUFBLEdBQUEsT0FBQTs7UUFFQSxPQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsUUFBQSxJQUFBLE9BQUEsSUFBQSxJQUFBO1dBQ0E7TUFDQSxLQUFBLElBQUEsT0FBQSxRQUFBLElBQUEsSUFBQSxLQUFBLE9BQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSxTQUFBO0lBQ0EsS0FBQSxJQUFBLE9BQUEsT0FBQTs7RUFFQSxJQUFBLGVBQUE7SUFDQSxjQUFBO0VBQ0EsU0FBQSxRQUFBO0lBQ0EsS0FBQTtJQUNBLEtBQUEsU0FBQSxLQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUEsY0FBQTs7SUFFQSxLQUFBLFNBQUEsS0FBQSxPQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUEsY0FBQSxRQUFBOztJQUVBLFFBQUE7SUFDQSxNQUFBO0lBQ0EsUUFBQSxXQUFBO01BQ0EsSUFBQSxTQUFBO01BQ0EsS0FBQSxJQUFBLE9BQUEsS0FBQSxHQUFBLE9BQUEsS0FBQSxLQUFBLEVBQUE7TUFDQSxPQUFBOztJQUVBLFNBQUEsV0FBQTtNQUNBLElBQUEsVUFBQTtNQUNBLEtBQUEsSUFBQSxPQUFBLEtBQUEsR0FBQSxRQUFBLEtBQUE7UUFDQSxLQUFBLGdCQUFBO1FBQ0EsT0FBQSxLQUFBLEVBQUE7O01BRUEsT0FBQTs7SUFFQSxNQUFBO0lBQ0EsT0FBQTtJQUNBLFNBQUEsU0FBQSxHQUFBO01BQ0EsS0FBQSxJQUFBLE9BQUEsS0FBQSxHQUFBLEVBQUEsS0FBQSxNQUFBLGdCQUFBLE1BQUE7U0FDQSxFQUFBOzs7O0VBSUEsU0FBQSxjQUFBLEtBQUE7SUFDQSxPQUFBLENBQUEsT0FBQSxRQUFBLGdCQUFBLElBQUEsT0FBQTtNQUNBLGNBQUEsTUFBQTs7O0VBR0EsU0FBQSxnQkFBQSxLQUFBO0lBQ0EsT0FBQSxDQUFBLE9BQUEsSUFBQSxPQUFBLGNBQUEsSUFBQSxNQUFBLEtBQUE7OztFQUdBLFNBQUEsV0FBQSxLQUFBO0lBQ0EsT0FBQSxjQUFBLFFBQUEsS0FBQTs7O0VBR0EsU0FBQSxjQUFBLEtBQUE7SUFDQSxPQUFBLENBQUEsTUFBQSxjQUFBLFNBQUEsS0FBQSxLQUFBLE9BQUEsS0FBQSxFQUFBOzs7RUFHQSxTQUFBLGNBQUE7SUFDQSxJQUFBLE9BQUE7SUFDQSxLQUFBLElBQUEsT0FBQSxLQUFBLEdBQUEsS0FBQSxLQUFBLGdCQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSxjQUFBO0lBQ0EsSUFBQSxPQUFBO0lBQ0EsS0FBQSxJQUFBLE9BQUEsS0FBQSxHQUFBLEVBQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLGVBQUE7SUFDQSxLQUFBLElBQUEsT0FBQSxLQUFBLEdBQUEsT0FBQTtJQUNBLE9BQUE7O0VBRUEsR0FBQSxPQUFBLFdBQUE7SUFDQSxJQUFBLE9BQUE7TUFDQSxPQUFBO01BQ0EsV0FBQTtNQUNBLFlBQUE7O0lBRUEsU0FBQSxJQUFBLFNBQUEsT0FBQSxPQUFBO01BQ0EsSUFBQSxTQUFBLEtBQUEsUUFBQSxPQUFBLFNBQUEsT0FBQSxLQUFBLE1BQUE7UUFDQSxhQUFBLE1BQUEsS0FBQSxjQUFBO01BQ0EsSUFBQSxJQUFBLENBQUE7UUFDQSxJQUFBLE1BQUE7UUFDQSxNQUFBLEtBQUE7UUFDQSxVQUFBLFFBQUEsUUFBQSxjQUFBLElBQUE7UUFDQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7UUFDQSxJQUFBLFNBQUEsWUFBQSxJQUFBLFdBQUEsSUFBQSxTQUFBLE1BQUEsTUFBQTtVQUNBLE9BQUEsS0FBQTtlQUNBO1VBQ0EsWUFBQSxJQUFBLFVBQUEsQ0FBQTs7O01BR0EsSUFBQSxTQUFBO1FBQ0EsU0FBQTtRQUNBLFNBQUEsU0FBQSxVQUFBLFFBQUE7VUFDQSxPQUFBLElBQUEsVUFBQSxJQUFBLFNBQUEsUUFBQTs7YUFFQTtRQUNBLFNBQUE7UUFDQSxTQUFBLFNBQUEsVUFBQSxRQUFBO1VBQ0EsT0FBQSxZQUFBLElBQUEsU0FBQSxRQUFBOzs7TUFHQSxZQUFBLFFBQUE7TUFDQSxPQUFBOzs7SUFHQSxTQUFBLFFBQUEsS0FBQSxPQUFBO01BQ0EsSUFBQSxTQUFBLEtBQUEsUUFBQSxPQUFBO01BQ0EsSUFBQSxRQUFBO1FBQ0EsVUFBQSxTQUFBO01BQ0EsSUFBQSxRQUFBLFNBQUEsS0FBQSxRQUFBO1FBQ0EsTUFBQSxLQUFBO1VBQ0EsS0FBQTtVQUNBLFFBQUEsUUFBQSxRQUFBOzs7TUFHQSxPQUFBLFVBQUEsTUFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxRQUFBLEVBQUEsS0FBQSxFQUFBO1dBQ0E7O0lBRUEsS0FBQSxNQUFBLFNBQUEsT0FBQSxTQUFBO01BQ0EsT0FBQSxJQUFBLFNBQUEsT0FBQTs7SUFFQSxLQUFBLFVBQUEsU0FBQSxPQUFBO01BQ0EsT0FBQSxRQUFBLElBQUEsR0FBQSxLQUFBLE9BQUEsSUFBQTs7SUFFQSxLQUFBLE1BQUEsU0FBQSxHQUFBO01BQ0EsS0FBQSxLQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFdBQUEsU0FBQSxPQUFBO01BQ0EsU0FBQSxLQUFBLFNBQUEsS0FBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxhQUFBLFNBQUEsT0FBQTtNQUNBLGFBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxTQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBOztFQUVBLEdBQUEsTUFBQSxTQUFBLE9BQUE7SUFDQSxJQUFBLE1BQUEsSUFBQTtJQUNBLElBQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxRQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxJQUFBLE1BQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLFNBQUE7SUFDQSxLQUFBLElBQUEsT0FBQSxPQUFBOztFQUVBLFNBQUEsUUFBQTtJQUNBLEtBQUE7SUFDQSxLQUFBLFNBQUEsS0FBQTtNQUNBLEtBQUEsRUFBQSxjQUFBLE9BQUEsT0FBQTtNQUNBLE9BQUE7O0lBRUEsUUFBQTtJQUNBLFFBQUE7SUFDQSxNQUFBO0lBQ0EsT0FBQTtJQUNBLFNBQUEsU0FBQSxHQUFBO01BQ0EsS0FBQSxJQUFBLE9BQUEsS0FBQSxHQUFBLEVBQUEsS0FBQSxNQUFBLGdCQUFBOzs7RUFHQSxHQUFBLFdBQUE7RUFDQSxHQUFBLFNBQUEsU0FBQSxRQUFBLFFBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLFVBQUE7TUFDQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsT0FBQSxTQUFBLFVBQUEsTUFBQSxVQUFBO01BQ0EsUUFBQSxPQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSxVQUFBLFFBQUEsUUFBQSxRQUFBO0lBQ0EsT0FBQSxXQUFBO01BQ0EsSUFBQSxRQUFBLE9BQUEsTUFBQSxRQUFBO01BQ0EsT0FBQSxVQUFBLFNBQUEsU0FBQTs7OztFQUlBLFNBQUEsZ0JBQUEsUUFBQSxNQUFBO0lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtJQUNBLE9BQUEsS0FBQSxPQUFBLEdBQUEsZ0JBQUEsS0FBQSxNQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLGtCQUFBLFFBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtNQUNBLElBQUEsYUFBQSxrQkFBQSxLQUFBO01BQ0EsSUFBQSxjQUFBLFFBQUEsT0FBQTs7O0VBR0EsSUFBQSxvQkFBQSxDQUFBLFVBQUEsTUFBQSxPQUFBLE9BQUEsS0FBQTs7RUFFQSxTQUFBLFVBQUE7RUFDQSxHQUFBLFdBQUEsV0FBQTtJQUNBLElBQUEsV0FBQSxJQUFBO01BQ0EsSUFBQSxDQUFBO01BQ0EsSUFBQSxVQUFBO0lBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQSxTQUFBLFVBQUEsTUFBQSxrQkFBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsY0FBQTtFQUNBLFlBQUEsVUFBQSxLQUFBLFNBQUEsTUFBQSxVQUFBO0lBQ0EsSUFBQSxJQUFBLEtBQUEsUUFBQTtNQUNBLE9BQUE7SUFDQSxJQUFBLEtBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxNQUFBLElBQUE7TUFDQSxPQUFBLEtBQUEsTUFBQSxHQUFBOztJQUVBLElBQUEsTUFBQSxPQUFBLFVBQUEsU0FBQSxJQUFBLEtBQUEsTUFBQSxHQUFBLFFBQUE7TUFDQSxNQUFBLEdBQUEsTUFBQTtJQUNBLElBQUEsVUFBQSxXQUFBLEdBQUE7TUFDQSxJQUFBLFlBQUE7UUFDQSxLQUFBLFFBQUEsTUFBQTtVQUNBLElBQUEsS0FBQSxlQUFBLE9BQUEsS0FBQSxNQUFBLEdBQUEsTUFBQTs7TUFFQSxPQUFBOzs7O0VBSUEsU0FBQSxrQkFBQSxVQUFBO0lBQ0EsSUFBQSxZQUFBO01BQ0EsaUJBQUEsSUFBQTs7SUFFQSxTQUFBLFFBQUE7TUFDQSxJQUFBLElBQUE7UUFDQSxJQUFBLENBQUE7UUFDQSxJQUFBLEVBQUE7UUFDQTtNQUNBLE9BQUEsRUFBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLEVBQUEsR0FBQSxJQUFBLEVBQUEsTUFBQSxNQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLEtBQUEsU0FBQSxNQUFBLFVBQUE7TUFDQSxJQUFBLElBQUEsZUFBQSxJQUFBO1FBQ0E7TUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLE9BQUEsS0FBQSxFQUFBO01BQ0EsSUFBQSxHQUFBO1FBQ0EsRUFBQSxLQUFBO1FBQ0EsWUFBQSxVQUFBLE1BQUEsR0FBQSxJQUFBLFVBQUEsUUFBQSxJQUFBO1VBQ0EsVUFBQSxNQUFBLElBQUE7UUFDQSxlQUFBLE9BQUE7O01BRUEsSUFBQSxVQUFBLFVBQUEsS0FBQSxlQUFBLElBQUEsTUFBQTtRQUNBLElBQUE7O01BRUEsT0FBQTs7SUFFQSxPQUFBOztFQUVBLEdBQUEsUUFBQTs7RUFFQSxTQUFBLHlCQUFBO0lBQ0EsR0FBQSxNQUFBOzs7RUFHQSxTQUFBLGlCQUFBO0lBQ0EsSUFBQSxJQUFBLEdBQUE7TUFDQTtJQUNBLE9BQUEsSUFBQSxFQUFBLGFBQUEsSUFBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsaUJBQUEsUUFBQTtJQUNBLElBQUEsV0FBQSxJQUFBO01BQ0EsSUFBQTtNQUNBLElBQUEsVUFBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsU0FBQSxVQUFBLE1BQUEsa0JBQUE7SUFDQSxTQUFBLEtBQUEsU0FBQSxNQUFBLFdBQUE7TUFDQSxPQUFBLFNBQUEsSUFBQTtRQUNBLElBQUE7VUFDQSxJQUFBLEtBQUEsR0FBQSxjQUFBLEdBQUE7VUFDQSxHQUFBLFNBQUE7VUFDQSxHQUFBLFFBQUE7VUFDQSxTQUFBLEdBQUEsTUFBQSxNQUFBLE1BQUE7a0JBQ0E7VUFDQSxHQUFBLFFBQUE7Ozs7SUFJQSxPQUFBOztFQUVBLEdBQUEsVUFBQSxTQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUEsUUFBQSxlQUFBOztFQUVBLElBQUEsZ0JBQUE7RUFDQSxJQUFBLGNBQUEsR0FBQSxZQUFBLFNBQUEsUUFBQSxXQUFBO0lBQ0EsT0FBQSxZQUFBO01BQ0EsU0FBQSxRQUFBLFdBQUE7SUFDQSxLQUFBLElBQUEsWUFBQSxXQUFBLE9BQUEsWUFBQSxVQUFBOzs7RUFHQSxTQUFBLGFBQUEsUUFBQTtJQUNBLFlBQUEsUUFBQTtJQUNBLE9BQUE7O0VBRUEsSUFBQSxZQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLGNBQUE7O0lBRUEsZUFBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxpQkFBQTs7SUFFQSxtQkFBQSxtQkFBQSxXQUFBO01BQ0EsZ0JBQUEsb0JBQUE7SUFDQSxtQkFBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLE9BQUEsaUJBQUEsS0FBQSxHQUFBOztFQUVBLElBQUEsT0FBQSxXQUFBLFlBQUE7SUFDQSxZQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxPQUFBLEdBQUEsR0FBQSxNQUFBOztJQUVBLGVBQUE7SUFDQSxtQkFBQSxPQUFBOztFQUVBLEdBQUEsWUFBQSxXQUFBO0lBQ0EsT0FBQTs7RUFFQSxJQUFBLHdCQUFBLEdBQUEsVUFBQSxZQUFBO0VBQ0Esc0JBQUEsU0FBQSxTQUFBLFVBQUE7SUFDQSxJQUFBLFlBQUE7TUFDQSxVQUFBLFNBQUEsT0FBQTtJQUNBLFdBQUEsc0JBQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFFBQUEsRUFBQSxJQUFBLElBQUE7TUFDQSxVQUFBLEtBQUEsV0FBQTtNQUNBLFNBQUEsYUFBQSxDQUFBLFFBQUEsS0FBQSxJQUFBO01BQ0EsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxPQUFBLE1BQUEsSUFBQTtVQUNBLFNBQUEsS0FBQSxVQUFBLFNBQUEsS0FBQSxNQUFBLEtBQUEsVUFBQSxHQUFBO1VBQ0EsSUFBQSxXQUFBLGNBQUEsTUFBQSxRQUFBLFdBQUEsS0FBQTtlQUNBO1VBQ0EsU0FBQSxLQUFBOzs7O0lBSUEsT0FBQSxhQUFBOzs7RUFHQSxTQUFBLHNCQUFBLFVBQUE7SUFDQSxPQUFBLE9BQUEsYUFBQSxhQUFBLFdBQUEsV0FBQTtNQUNBLE9BQUEsVUFBQSxVQUFBOzs7RUFHQSxzQkFBQSxZQUFBLFNBQUEsVUFBQTtJQUNBLElBQUEsWUFBQTtNQUNBLFVBQUE7SUFDQSxXQUFBLHlCQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO01BQ0EsS0FBQSxJQUFBLFFBQUEsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxPQUFBLE1BQUEsSUFBQTtVQUNBLFVBQUEsS0FBQSxXQUFBLFNBQUEsU0FBQSxLQUFBLE1BQUEsS0FBQTtZQUNBLEdBQUE7VUFDQSxTQUFBLGFBQUE7Ozs7SUFJQSxPQUFBLGFBQUE7OztFQUdBLFNBQUEseUJBQUEsVUFBQTtJQUNBLE9BQUEsT0FBQSxhQUFBLGFBQUEsV0FBQSxXQUFBO01BQ0EsT0FBQSxhQUFBLFVBQUE7OztFQUdBLElBQUEsY0FBQTtJQUNBLEtBQUE7SUFDQSxPQUFBO0lBQ0EsT0FBQTtJQUNBLEtBQUE7SUFDQSxPQUFBOztFQUVBLEdBQUEsS0FBQTtJQUNBLFFBQUE7SUFDQSxTQUFBLFNBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBLFFBQUE7UUFDQSxTQUFBO01BQ0EsSUFBQSxLQUFBLEdBQUE7UUFDQSxTQUFBLEtBQUEsTUFBQSxHQUFBO1FBQ0EsT0FBQSxLQUFBLE1BQUEsSUFBQTs7TUFFQSxPQUFBLFlBQUEsZUFBQSxVQUFBO1FBQ0EsT0FBQSxZQUFBO1FBQ0EsT0FBQTtVQUNBOzs7RUFHQSxzQkFBQSxPQUFBLFNBQUEsTUFBQSxPQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxTQUFBLFVBQUE7UUFDQSxJQUFBLE9BQUEsS0FBQTtRQUNBLE9BQUEsR0FBQSxHQUFBLFFBQUE7UUFDQSxPQUFBLEtBQUEsUUFBQSxLQUFBLGVBQUEsS0FBQSxPQUFBLEtBQUE7VUFDQSxLQUFBLGFBQUE7O01BRUEsS0FBQSxTQUFBLE1BQUEsS0FBQSxLQUFBLGtCQUFBLE9BQUEsS0FBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQSxLQUFBLEtBQUEsa0JBQUEsTUFBQTs7O0VBR0EsU0FBQSxrQkFBQSxNQUFBLE9BQUE7SUFDQSxPQUFBLEdBQUEsR0FBQSxRQUFBOztJQUVBLFNBQUEsV0FBQTtNQUNBLEtBQUEsZ0JBQUE7OztJQUdBLFNBQUEsYUFBQTtNQUNBLEtBQUEsa0JBQUEsS0FBQSxPQUFBLEtBQUE7OztJQUdBLFNBQUEsZUFBQTtNQUNBLEtBQUEsYUFBQSxNQUFBOzs7SUFHQSxTQUFBLGlCQUFBO01BQ0EsS0FBQSxlQUFBLEtBQUEsT0FBQSxLQUFBLE9BQUE7OztJQUdBLFNBQUEsZUFBQTtNQUNBLElBQUEsSUFBQSxNQUFBLE1BQUEsTUFBQTtNQUNBLElBQUEsS0FBQSxNQUFBLEtBQUEsZ0JBQUE7V0FDQSxLQUFBLGFBQUEsTUFBQTs7O0lBR0EsU0FBQSxpQkFBQTtNQUNBLElBQUEsSUFBQSxNQUFBLE1BQUEsTUFBQTtNQUNBLElBQUEsS0FBQSxNQUFBLEtBQUEsa0JBQUEsS0FBQSxPQUFBLEtBQUE7V0FDQSxLQUFBLGVBQUEsS0FBQSxPQUFBLEtBQUEsT0FBQTs7SUFFQSxPQUFBLFNBQUEsT0FBQSxLQUFBLFFBQUEsYUFBQSxXQUFBLE9BQUE7TUFDQSxhQUFBLEtBQUEsUUFBQSxpQkFBQSxlQUFBLEtBQUE7TUFDQSxpQkFBQTs7O0VBR0EsU0FBQSxZQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUEsT0FBQSxRQUFBLFFBQUE7O0VBRUEsc0JBQUEsVUFBQSxTQUFBLE1BQUEsT0FBQTtJQUNBLElBQUEsVUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLE9BQUEsU0FBQSxVQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUE7VUFDQSxJQUFBLENBQUEsT0FBQSxxQkFBQSxPQUFBO1VBQ0EsSUFBQSxDQUFBO1FBQ0EsSUFBQSxRQUFBLEtBQUEsV0FBQTtVQUNBLE9BQUEsRUFBQSxJQUFBO1lBQ0EsSUFBQSxDQUFBLE1BQUEsU0FBQSxLQUFBLEtBQUEsT0FBQTtlQUNBO1VBQ0EsUUFBQSxLQUFBLGFBQUE7VUFDQSxPQUFBLEVBQUEsSUFBQTtZQUNBLElBQUEsQ0FBQSx1QkFBQSxLQUFBLElBQUEsS0FBQSxRQUFBLE9BQUE7O1FBRUEsT0FBQTs7TUFFQSxLQUFBLFNBQUEsTUFBQSxLQUFBLEtBQUEscUJBQUEsT0FBQTtRQUNBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLEtBQUEsS0FBQSxxQkFBQSxNQUFBOzs7RUFHQSxTQUFBLHVCQUFBLE1BQUE7SUFDQSxPQUFBLElBQUEsT0FBQSxlQUFBLEdBQUEsUUFBQSxRQUFBLGNBQUE7OztFQUdBLFNBQUEscUJBQUEsTUFBQTtJQUNBLE9BQUEsQ0FBQSxPQUFBLElBQUEsT0FBQSxNQUFBOzs7RUFHQSxTQUFBLHFCQUFBLE1BQUEsT0FBQTtJQUNBLE9BQUEscUJBQUEsTUFBQSxJQUFBO0lBQ0EsSUFBQSxJQUFBLEtBQUE7O0lBRUEsU0FBQSxrQkFBQTtNQUNBLElBQUEsSUFBQSxDQUFBO01BQ0EsT0FBQSxFQUFBLElBQUEsR0FBQSxLQUFBLEdBQUEsTUFBQTs7O0lBR0EsU0FBQSxrQkFBQTtNQUNBLElBQUEsSUFBQSxDQUFBO1FBQ0EsSUFBQSxNQUFBLE1BQUEsTUFBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsS0FBQSxHQUFBLE1BQUE7O0lBRUEsT0FBQSxPQUFBLFVBQUEsYUFBQSxrQkFBQTs7O0VBR0EsU0FBQSx5QkFBQSxNQUFBO0lBQ0EsSUFBQSxLQUFBLHVCQUFBO0lBQ0EsT0FBQSxTQUFBLE1BQUEsT0FBQTtNQUNBLElBQUEsSUFBQSxLQUFBLFdBQUEsT0FBQSxRQUFBLEVBQUEsSUFBQSxRQUFBLEVBQUEsT0FBQTtNQUNBLElBQUEsSUFBQSxLQUFBLGFBQUEsWUFBQTtNQUNBLElBQUEsT0FBQTtRQUNBLEdBQUEsWUFBQTtRQUNBLElBQUEsQ0FBQSxHQUFBLEtBQUEsSUFBQSxLQUFBLGFBQUEsU0FBQSxZQUFBLElBQUE7VUFDQTthQUNBO1FBQ0EsS0FBQSxhQUFBLFNBQUEsWUFBQSxFQUFBLFFBQUEsSUFBQTs7OztFQUlBLHNCQUFBLFFBQUEsU0FBQSxNQUFBLE9BQUEsVUFBQTtJQUNBLElBQUEsSUFBQSxVQUFBO0lBQ0EsSUFBQSxJQUFBLEdBQUE7TUFDQSxJQUFBLE9BQUEsU0FBQSxVQUFBO1FBQ0EsSUFBQSxJQUFBLEdBQUEsUUFBQTtRQUNBLEtBQUEsWUFBQSxNQUFBLEtBQUEsS0FBQSxtQkFBQTtVQUNBLEtBQUEsV0FBQTtRQUNBLE9BQUE7O01BRUEsSUFBQSxJQUFBLEdBQUEsT0FBQSxVQUFBLGlCQUFBLEtBQUEsUUFBQSxNQUFBO1FBQ0E7TUFDQSxXQUFBOztJQUVBLE9BQUEsS0FBQSxLQUFBLG1CQUFBLE1BQUEsT0FBQTs7O0VBR0EsU0FBQSxtQkFBQSxNQUFBLE9BQUEsVUFBQTtJQUNBLFNBQUEsWUFBQTtNQUNBLEtBQUEsTUFBQSxlQUFBOzs7SUFHQSxTQUFBLGdCQUFBO01BQ0EsS0FBQSxNQUFBLFlBQUEsTUFBQSxPQUFBOzs7SUFHQSxTQUFBLGdCQUFBO01BQ0EsSUFBQSxJQUFBLE1BQUEsTUFBQSxNQUFBO01BQ0EsSUFBQSxLQUFBLE1BQUEsS0FBQSxNQUFBLGVBQUE7V0FDQSxLQUFBLE1BQUEsWUFBQSxNQUFBLEdBQUE7O0lBRUEsT0FBQSxTQUFBLE9BQUEsWUFBQSxPQUFBLFVBQUE7TUFDQSxnQkFBQTs7RUFFQSxzQkFBQSxXQUFBLFNBQUEsTUFBQSxPQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxTQUFBLFVBQUEsT0FBQSxLQUFBLE9BQUE7TUFDQSxLQUFBLFNBQUEsTUFBQSxLQUFBLEtBQUEsc0JBQUEsT0FBQTtRQUNBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLEtBQUEsS0FBQSxzQkFBQSxNQUFBOzs7RUFHQSxTQUFBLHNCQUFBLE1BQUEsT0FBQTtJQUNBLFNBQUEsZUFBQTtNQUNBLE9BQUEsS0FBQTs7O0lBR0EsU0FBQSxtQkFBQTtNQUNBLEtBQUEsUUFBQTs7O0lBR0EsU0FBQSxtQkFBQTtNQUNBLElBQUEsSUFBQSxNQUFBLE1BQUEsTUFBQTtNQUNBLElBQUEsS0FBQSxNQUFBLE9BQUEsS0FBQTtXQUNBLEtBQUEsUUFBQTs7SUFFQSxPQUFBLFNBQUEsT0FBQSxlQUFBLE9BQUEsVUFBQTtNQUNBLG1CQUFBOztFQUVBLHNCQUFBLE9BQUEsU0FBQSxPQUFBO0lBQ0EsT0FBQSxVQUFBLFNBQUEsS0FBQSxLQUFBLE9BQUEsVUFBQTtNQUNBLFdBQUE7UUFDQSxJQUFBLElBQUEsTUFBQSxNQUFBLE1BQUE7UUFDQSxLQUFBLGNBQUEsS0FBQSxPQUFBLEtBQUE7VUFDQSxTQUFBLE9BQUEsV0FBQTtRQUNBLEtBQUEsY0FBQTtVQUNBLFdBQUE7UUFDQSxLQUFBLGNBQUE7V0FDQSxLQUFBLE9BQUE7O0VBRUEsc0JBQUEsT0FBQSxTQUFBLE9BQUE7SUFDQSxPQUFBLFVBQUEsU0FBQSxLQUFBLEtBQUEsT0FBQSxVQUFBO01BQ0EsV0FBQTtRQUNBLElBQUEsSUFBQSxNQUFBLE1BQUEsTUFBQTtRQUNBLEtBQUEsWUFBQSxLQUFBLE9BQUEsS0FBQTtVQUNBLFNBQUEsT0FBQSxXQUFBO1FBQ0EsS0FBQSxZQUFBO1VBQ0EsV0FBQTtRQUNBLEtBQUEsWUFBQTtXQUNBLEtBQUEsT0FBQTs7RUFFQSxzQkFBQSxTQUFBLFNBQUEsTUFBQTtJQUNBLE9BQUEscUJBQUE7SUFDQSxPQUFBLEtBQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLFlBQUEsS0FBQSxNQUFBLE1BQUE7Ozs7RUFJQSxTQUFBLHFCQUFBLE1BQUE7SUFDQSxPQUFBLE9BQUEsU0FBQSxhQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQSxRQUFBO09BQ0EsUUFBQSxXQUFBO1FBQ0EsT0FBQSxLQUFBLGNBQUEsZ0JBQUEsS0FBQSxPQUFBLEtBQUE7VUFDQSxXQUFBO1FBQ0EsT0FBQSxLQUFBLGNBQUEsZ0JBQUEsS0FBQSxjQUFBOzs7RUFHQSxzQkFBQSxTQUFBLFNBQUEsTUFBQSxRQUFBO0lBQ0EsT0FBQSxxQkFBQTtJQUNBLFNBQUEsc0JBQUE7SUFDQSxPQUFBLEtBQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLGFBQUEsS0FBQSxNQUFBLE1BQUEsWUFBQSxPQUFBO1FBQ0EsTUFBQSxjQUFBOzs7RUFHQSxzQkFBQSxTQUFBLFdBQUE7SUFDQSxPQUFBLEtBQUEsS0FBQTs7O0VBR0EsU0FBQSxxQkFBQTtJQUNBLElBQUEsU0FBQSxLQUFBO0lBQ0EsSUFBQSxRQUFBLE9BQUEsWUFBQTs7RUFFQSxzQkFBQSxPQUFBLFNBQUEsT0FBQSxLQUFBO0lBQ0EsSUFBQSxJQUFBLENBQUE7TUFDQSxJQUFBLEtBQUE7TUFDQSxPQUFBO0lBQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQTtNQUNBLFFBQUEsSUFBQSxNQUFBLElBQUEsQ0FBQSxRQUFBLEtBQUEsSUFBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7UUFDQSxJQUFBLE9BQUEsTUFBQSxJQUFBO1VBQ0EsTUFBQSxLQUFBLEtBQUE7OztNQUdBLE9BQUE7OztJQUdBLFNBQUEsS0FBQSxPQUFBLFdBQUE7TUFDQSxJQUFBLEdBQUEsSUFBQSxNQUFBO1FBQ0EsSUFBQSxVQUFBO1FBQ0EsS0FBQSxLQUFBLElBQUEsR0FBQTtRQUNBLGNBQUEsSUFBQSxNQUFBO1FBQ0EsYUFBQSxJQUFBLE1BQUE7UUFDQSxZQUFBLElBQUEsTUFBQTtRQUNBLE1BQUE7TUFDQSxJQUFBLEtBQUE7UUFDQSxJQUFBLGlCQUFBLElBQUE7VUFDQSxZQUFBLElBQUEsTUFBQTtVQUNBO1FBQ0EsS0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsSUFBQTtVQUNBLElBQUEsZUFBQSxJQUFBLFdBQUEsSUFBQSxLQUFBLE9BQUEsTUFBQTtjQUNBLEtBQUEsVUFBQSxLQUFBO1lBQ0EsVUFBQSxLQUFBO2lCQUNBO1lBQ0EsZUFBQSxJQUFBLFVBQUE7O1VBRUEsVUFBQSxLQUFBOztRQUVBLEtBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxJQUFBLElBQUE7VUFDQSxJQUFBLEVBQUEsT0FBQSxlQUFBLElBQUEsV0FBQSxJQUFBLEtBQUE7Y0FDQSxXQUFBLFVBQUEsSUFBQSxNQUFBO1lBQ0EsV0FBQSxLQUFBLHNCQUFBO2lCQUNBLElBQUEsU0FBQSxNQUFBO1lBQ0EsWUFBQSxLQUFBO1lBQ0EsS0FBQSxXQUFBOztVQUVBLGVBQUEsSUFBQSxVQUFBOztRQUVBLEtBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxJQUFBLElBQUE7VUFDQSxJQUFBLGVBQUEsSUFBQSxVQUFBLFFBQUEsTUFBQTtZQUNBLFVBQUEsS0FBQSxNQUFBOzs7YUFHQTtRQUNBLEtBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxJQUFBLEtBQUE7VUFDQSxPQUFBLE1BQUE7VUFDQSxXQUFBLFVBQUE7VUFDQSxJQUFBLE1BQUE7WUFDQSxLQUFBLFdBQUE7WUFDQSxZQUFBLEtBQUE7aUJBQ0E7WUFDQSxXQUFBLEtBQUEsc0JBQUE7OztRQUdBLE9BQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtVQUNBLFdBQUEsS0FBQSxzQkFBQSxVQUFBOztRQUVBLE9BQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtVQUNBLFVBQUEsS0FBQSxNQUFBOzs7TUFHQSxXQUFBLFNBQUE7TUFDQSxXQUFBLGFBQUEsWUFBQSxhQUFBLFVBQUE7UUFDQSxNQUFBO01BQ0EsTUFBQSxLQUFBO01BQ0EsT0FBQSxLQUFBO01BQ0EsS0FBQSxLQUFBOztJQUVBLElBQUEsUUFBQSxtQkFBQTtNQUNBLFNBQUEsYUFBQTtNQUNBLE9BQUEsYUFBQTtJQUNBLElBQUEsT0FBQSxVQUFBLFlBQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1FBQ0EsS0FBQSxRQUFBLEtBQUEsSUFBQSxNQUFBLEtBQUEsT0FBQSxNQUFBLFdBQUE7VUFDQTs7V0FFQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7UUFDQSxLQUFBLFFBQUEsS0FBQSxJQUFBOzs7SUFHQSxPQUFBLFFBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQSxPQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsc0JBQUEsTUFBQTtJQUNBLE9BQUE7TUFDQSxVQUFBOzs7RUFHQSxzQkFBQSxRQUFBLFNBQUEsT0FBQTtJQUNBLE9BQUEsVUFBQSxTQUFBLEtBQUEsU0FBQSxZQUFBLFNBQUEsS0FBQTtNQUNBOztFQUVBLHNCQUFBLFNBQUEsU0FBQSxRQUFBO0lBQ0EsSUFBQSxZQUFBO01BQ0EsVUFBQSxPQUFBO0lBQ0EsSUFBQSxPQUFBLFdBQUEsWUFBQSxTQUFBLG9CQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLEtBQUEsUUFBQSxJQUFBLEdBQUEsS0FBQTtNQUNBLFVBQUEsS0FBQSxXQUFBO01BQ0EsU0FBQSxhQUFBLENBQUEsUUFBQSxLQUFBLElBQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxRQUFBLElBQUEsR0FBQSxLQUFBO1FBQ0EsSUFBQSxDQUFBLE9BQUEsTUFBQSxPQUFBLE9BQUEsS0FBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLElBQUE7VUFDQSxTQUFBLEtBQUE7Ozs7SUFJQSxPQUFBLGFBQUE7OztFQUdBLFNBQUEsb0JBQUEsVUFBQTtJQUNBLE9BQUEsV0FBQTtNQUNBLE9BQUEsaUJBQUEsTUFBQTs7O0VBR0Esc0JBQUEsUUFBQSxXQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO01BQ0EsS0FBQSxJQUFBLFFBQUEsS0FBQSxJQUFBLElBQUEsTUFBQSxTQUFBLEdBQUEsT0FBQSxNQUFBO1VBQ0EsTUFBQSxFQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsT0FBQSxNQUFBLElBQUE7VUFDQSxJQUFBLFFBQUEsU0FBQSxLQUFBLGFBQUEsS0FBQSxXQUFBO1lBQ0EsTUFBQTtVQUNBLE9BQUE7Ozs7SUFJQSxPQUFBOztFQUVBLHNCQUFBLE9BQUEsU0FBQSxZQUFBO0lBQ0EsYUFBQSw0QkFBQSxNQUFBLE1BQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFFBQUEsRUFBQSxJQUFBLElBQUEsS0FBQSxHQUFBLEtBQUE7SUFDQSxPQUFBLEtBQUE7OztFQUdBLFNBQUEsNEJBQUEsWUFBQTtJQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsYUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLEtBQUEsSUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBLFlBQUEsQ0FBQSxJQUFBLENBQUE7OztFQUdBLHNCQUFBLE9BQUEsU0FBQSxVQUFBO0lBQ0EsT0FBQSxrQkFBQSxNQUFBLFNBQUEsTUFBQSxHQUFBLEdBQUE7TUFDQSxTQUFBLEtBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQTs7OztFQUlBLFNBQUEsa0JBQUEsUUFBQSxVQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLE9BQUEsUUFBQSxJQUFBLEdBQUEsS0FBQTtNQUNBLEtBQUEsSUFBQSxRQUFBLE9BQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLFFBQUEsTUFBQSxJQUFBLEdBQUEsS0FBQTtRQUNBLElBQUEsT0FBQSxNQUFBLElBQUEsU0FBQSxNQUFBLEdBQUE7OztJQUdBLE9BQUE7O0VBRUEsc0JBQUEsT0FBQSxTQUFBLFVBQUE7SUFDQSxJQUFBLE9BQUEsU0FBQTtJQUNBLFNBQUEsTUFBQSxLQUFBLEtBQUEsTUFBQTtJQUNBLE9BQUE7O0VBRUEsc0JBQUEsUUFBQSxXQUFBO0lBQ0EsT0FBQSxDQUFBLEtBQUE7O0VBRUEsc0JBQUEsT0FBQSxXQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLEtBQUEsUUFBQSxJQUFBLEdBQUEsS0FBQTtNQUNBLEtBQUEsSUFBQSxRQUFBLEtBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLFFBQUEsSUFBQSxHQUFBLEtBQUE7UUFDQSxJQUFBLE9BQUEsTUFBQTtRQUNBLElBQUEsTUFBQSxPQUFBOzs7SUFHQSxPQUFBOztFQUVBLHNCQUFBLE9BQUEsV0FBQTtJQUNBLElBQUEsSUFBQTtJQUNBLGtCQUFBLE1BQUEsV0FBQTtNQUNBLEVBQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSxtQkFBQSxXQUFBO0lBQ0EsWUFBQSxXQUFBO0lBQ0EsT0FBQTs7RUFFQSxJQUFBLDhCQUFBO0VBQ0EsR0FBQSxVQUFBLFFBQUE7RUFDQSxHQUFBLFVBQUEsTUFBQSxZQUFBO0VBQ0EsNEJBQUEsU0FBQSxzQkFBQTtFQUNBLDRCQUFBLFFBQUEsc0JBQUE7RUFDQSw0QkFBQSxPQUFBLHNCQUFBO0VBQ0EsNEJBQUEsT0FBQSxzQkFBQTtFQUNBLDRCQUFBLE9BQUEsc0JBQUE7RUFDQSw0QkFBQSxTQUFBLFNBQUEsVUFBQTtJQUNBLElBQUEsWUFBQTtNQUNBLFVBQUEsU0FBQSxTQUFBLE9BQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFFBQUEsRUFBQSxJQUFBLElBQUE7TUFDQSxVQUFBLENBQUEsUUFBQSxLQUFBLElBQUE7TUFDQSxVQUFBLEtBQUEsV0FBQTtNQUNBLFNBQUEsYUFBQSxNQUFBO01BQ0EsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxPQUFBLE1BQUEsSUFBQTtVQUNBLFNBQUEsS0FBQSxRQUFBLEtBQUEsVUFBQSxTQUFBLEtBQUEsTUFBQTtZQUNBLEtBQUEsVUFBQSxHQUFBO1VBQ0EsUUFBQSxXQUFBLEtBQUE7ZUFDQTtVQUNBLFNBQUEsS0FBQTs7OztJQUlBLE9BQUEsYUFBQTs7RUFFQSw0QkFBQSxTQUFBLFNBQUEsTUFBQSxRQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQSxTQUFBO01BQ0E7SUFDQSxPQUFBLHNCQUFBLE9BQUEsS0FBQSxNQUFBLE1BQUE7OztFQUdBLFNBQUEsK0JBQUEsT0FBQTtJQUNBLElBQUEsSUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsUUFBQSxNQUFBLEdBQUE7UUFDQSxJQUFBLE1BQUE7UUFDQTtNQUNBLElBQUEsS0FBQSxJQUFBLEtBQUEsR0FBQSxLQUFBO01BQ0EsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBO01BQ0EsT0FBQSxFQUFBLE9BQUEsTUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBO01BQ0EsT0FBQTs7O0VBR0EsR0FBQSxTQUFBLFNBQUEsTUFBQTtJQUNBLElBQUEsUUFBQSxDQUFBLE9BQUEsU0FBQSxXQUFBLFVBQUEsTUFBQTtNQUNBOztJQUVBLE1BQUEsYUFBQTtJQUNBLE9BQUEsYUFBQSxDQUFBOztFQUVBLEdBQUEsWUFBQSxTQUFBLE9BQUE7SUFDQSxJQUFBLFFBQUEsU0FBQSxPQUFBLFVBQUEsV0FBQSxhQUFBO01BQ0EsZUFBQTtJQUNBLE1BQUEsYUFBQTtJQUNBLE9BQUEsYUFBQSxDQUFBOztFQUVBLElBQUEsbUJBQUEsR0FBQSxPQUFBO0VBQ0Esc0JBQUEsS0FBQSxTQUFBLE1BQUEsVUFBQSxTQUFBO0lBQ0EsSUFBQSxJQUFBLFVBQUE7SUFDQSxJQUFBLElBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxTQUFBLFVBQUE7UUFDQSxJQUFBLElBQUEsR0FBQSxXQUFBO1FBQ0EsS0FBQSxXQUFBLE1BQUEsS0FBQSxLQUFBLGdCQUFBLFNBQUE7VUFDQSxVQUFBO1FBQ0EsT0FBQTs7TUFFQSxJQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsSUFBQSxLQUFBLE9BQUEsU0FBQSxVQUFBLEVBQUE7TUFDQSxVQUFBOztJQUVBLE9BQUEsS0FBQSxLQUFBLGdCQUFBLE1BQUEsVUFBQTs7O0VBR0EsU0FBQSxnQkFBQSxNQUFBLFVBQUEsU0FBQTtJQUNBLElBQUEsT0FBQSxTQUFBO01BQ0EsSUFBQSxLQUFBLFFBQUE7TUFDQSxPQUFBO0lBQ0EsSUFBQSxJQUFBLEdBQUEsT0FBQSxLQUFBLE1BQUEsR0FBQTtJQUNBLElBQUEsU0FBQSx1QkFBQSxJQUFBO0lBQ0EsSUFBQSxRQUFBLE9BQUEsUUFBQSxPQUFBOztJQUVBLFNBQUEsV0FBQTtNQUNBLElBQUEsSUFBQSxLQUFBO01BQ0EsSUFBQSxHQUFBO1FBQ0EsS0FBQSxvQkFBQSxNQUFBLEdBQUEsRUFBQTtRQUNBLE9BQUEsS0FBQTs7OztJQUlBLFNBQUEsUUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBLFVBQUEsU0FBQTtNQUNBLFNBQUEsS0FBQTtNQUNBLEtBQUEsaUJBQUEsTUFBQSxLQUFBLFFBQUEsR0FBQSxFQUFBLElBQUE7TUFDQSxFQUFBLElBQUE7OztJQUdBLFNBQUEsWUFBQTtNQUNBLElBQUEsS0FBQSxJQUFBLE9BQUEsaUJBQUEsR0FBQSxRQUFBLFFBQUE7UUFDQTtNQUNBLEtBQUEsSUFBQSxRQUFBLE1BQUE7UUFDQSxJQUFBLFFBQUEsS0FBQSxNQUFBLEtBQUE7VUFDQSxJQUFBLElBQUEsS0FBQTtVQUNBLEtBQUEsb0JBQUEsTUFBQSxJQUFBLEdBQUEsRUFBQTtVQUNBLE9BQUEsS0FBQTs7OztJQUlBLE9BQUEsSUFBQSxXQUFBLFFBQUEsV0FBQSxXQUFBLFVBQUE7O0VBRUEsSUFBQSx5QkFBQSxHQUFBLElBQUE7SUFDQSxZQUFBO0lBQ0EsWUFBQTs7RUFFQSx1QkFBQSxRQUFBLFNBQUEsR0FBQTtJQUNBLElBQUEsT0FBQSxLQUFBLGFBQUEsdUJBQUEsT0FBQTs7O0VBR0EsU0FBQSx3QkFBQSxVQUFBLFdBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxHQUFBO01BQ0EsR0FBQSxRQUFBO01BQ0EsVUFBQSxLQUFBLEtBQUE7TUFDQSxJQUFBO1FBQ0EsU0FBQSxNQUFBLE1BQUE7Z0JBQ0E7UUFDQSxHQUFBLFFBQUE7Ozs7O0VBS0EsU0FBQSxzQkFBQSxVQUFBLFdBQUE7SUFDQSxJQUFBLElBQUEsd0JBQUEsVUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxTQUFBO1FBQ0EsVUFBQSxFQUFBO01BQ0EsSUFBQSxDQUFBLFdBQUEsWUFBQSxVQUFBLEVBQUEsUUFBQTtVQUNBLFVBQUEsSUFBQTtRQUNBLEVBQUEsS0FBQSxRQUFBOzs7O0VBSUEsSUFBQSxzQkFBQSxtQkFBQSxjQUFBO0lBQ0EsZ0JBQUEsbUJBQUEsT0FBQTtJQUNBLGtCQUFBOztFQUVBLFNBQUEsd0JBQUE7SUFDQSxJQUFBLE9BQUEsbUJBQUEsRUFBQTtNQUNBLFFBQUEsVUFBQTtNQUNBLElBQUEsR0FBQSxPQUFBLFdBQUEsR0FBQSxjQUFBO1FBQ0Esd0JBQUEsR0FBQSxjQUFBO1FBQ0Esd0JBQUEsR0FBQSxnQkFBQTtRQUNBO0lBQ0EsSUFBQSxxQkFBQTtNQUNBLElBQUEsUUFBQSxtQkFBQTtRQUNBLFNBQUEsTUFBQTtNQUNBLE1BQUEsdUJBQUE7O0lBRUEsT0FBQSxTQUFBLGVBQUE7TUFDQSxFQUFBLEdBQUEsTUFBQTtNQUNBLElBQUEscUJBQUEsTUFBQSx1QkFBQTtNQUNBLElBQUEsZUFBQTtRQUNBLElBQUEsTUFBQSxXQUFBO1VBQ0EsRUFBQSxHQUFBLE9BQUE7O1FBRUEsRUFBQSxHQUFBLE9BQUEsV0FBQTtVQUNBO1VBQ0E7V0FDQTtRQUNBLFdBQUEsS0FBQTs7OztFQUlBLEdBQUEsUUFBQSxTQUFBLFdBQUE7SUFDQSxPQUFBLGNBQUEsV0FBQTs7RUFFQSxJQUFBLG9CQUFBLFNBQUEsS0FBQSxVQUFBLFVBQUEsYUFBQSxDQUFBO0lBQ0E7O0VBRUEsU0FBQSxjQUFBLFdBQUEsR0FBQTtJQUNBLElBQUEsRUFBQSxnQkFBQSxJQUFBLEVBQUEsZUFBQTtJQUNBLElBQUEsTUFBQSxVQUFBLG1CQUFBO0lBQ0EsSUFBQSxJQUFBLGdCQUFBO01BQ0EsSUFBQSxRQUFBLElBQUE7TUFDQSxJQUFBLG9CQUFBLE1BQUEsVUFBQSxXQUFBLFVBQUEsVUFBQTtRQUNBLE1BQUEsR0FBQSxPQUFBLFFBQUEsT0FBQSxPQUFBLE1BQUE7VUFDQSxVQUFBO1VBQ0EsS0FBQTtVQUNBLE1BQUE7VUFDQSxRQUFBO1VBQ0EsU0FBQTtVQUNBLFFBQUE7V0FDQTtRQUNBLElBQUEsTUFBQSxJQUFBLEdBQUEsR0FBQTtRQUNBLG9CQUFBLEVBQUEsSUFBQSxLQUFBLElBQUE7UUFDQSxJQUFBOztNQUVBLElBQUEsbUJBQUEsTUFBQSxJQUFBLEVBQUEsT0FBQSxNQUFBLElBQUEsRUFBQTtXQUNBLE1BQUEsSUFBQSxFQUFBO1FBQ0EsTUFBQSxJQUFBLEVBQUE7TUFDQSxRQUFBLE1BQUEsZ0JBQUEsVUFBQSxlQUFBO01BQ0EsT0FBQSxDQUFBLE1BQUEsR0FBQSxNQUFBOztJQUVBLElBQUEsT0FBQSxVQUFBO0lBQ0EsT0FBQSxDQUFBLEVBQUEsVUFBQSxLQUFBLE9BQUEsVUFBQSxZQUFBLEVBQUEsVUFBQSxLQUFBO01BQ0EsVUFBQTs7O0VBR0EsR0FBQSxRQUFBLFNBQUEsV0FBQSxTQUFBLFlBQUE7SUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLGFBQUEsU0FBQTtNQUNBLGlCQUFBO0lBQ0EsSUFBQTtNQUNBLEtBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxRQUFBLFFBQUEsT0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsSUFBQSxDQUFBLFFBQUEsUUFBQSxJQUFBLGVBQUEsWUFBQTtVQUNBLE9BQUEsY0FBQSxXQUFBOzs7O0VBSUEsR0FBQSxTQUFBLE9BQUEsV0FBQTtJQUNBLElBQUEsUUFBQSxpQkFBQSxNQUFBLFFBQUEsYUFBQTtNQUNBLFNBQUE7TUFDQSxZQUFBLFVBQUEsU0FBQSxHQUFBO1FBQ0EsOEJBQUEsYUFBQTtNQUNBLGFBQUEsVUFBQSx5QkFBQSxHQUFBO1FBQ0EsOEJBQUEsYUFBQTs7SUFFQSxTQUFBLE9BQUE7TUFDQSxLQUFBLEdBQUEsa0JBQUEsV0FBQSxHQUFBO1FBQ0E7OztJQUdBLFNBQUEsVUFBQSxJQUFBLFVBQUEsU0FBQSxNQUFBLEtBQUE7TUFDQSxPQUFBLFdBQUE7UUFDQSxJQUFBLE9BQUE7VUFDQSxTQUFBLEdBQUEsTUFBQTtVQUNBLFNBQUEsS0FBQTtVQUNBLFdBQUEsTUFBQSxHQUFBLE1BQUE7VUFDQSxVQUFBO1VBQ0EsU0FBQTtVQUNBLFdBQUEsV0FBQSxVQUFBLE9BQUEsS0FBQSxNQUFBO1VBQ0EsWUFBQSxjQUFBLEdBQUEsT0FBQSxXQUFBLEdBQUE7WUFDQSxVQUFBLE9BQUEsR0FBQSxNQUFBLFVBQUE7VUFDQSxjQUFBO1VBQ0EsWUFBQSxTQUFBLFFBQUE7UUFDQSxJQUFBLFFBQUE7VUFDQSxhQUFBLE9BQUEsTUFBQSxNQUFBO1VBQ0EsYUFBQSxDQUFBLFdBQUEsSUFBQSxVQUFBLElBQUEsV0FBQTtZQUNBLFVBQUE7O2VBRUE7VUFDQSxhQUFBLENBQUEsR0FBQTs7UUFFQSxTQUFBO1VBQ0EsTUFBQTs7O1FBR0EsU0FBQSxRQUFBO1VBQ0EsSUFBQSxZQUFBLFNBQUEsUUFBQTtZQUNBLElBQUE7VUFDQSxJQUFBLENBQUEsV0FBQTtVQUNBLEtBQUEsVUFBQSxLQUFBLFVBQUE7VUFDQSxLQUFBLFVBQUEsS0FBQSxVQUFBO1VBQ0EsV0FBQSxLQUFBO1VBQ0EsWUFBQTtVQUNBLFNBQUE7WUFDQSxNQUFBO1lBQ0EsR0FBQSxVQUFBLEtBQUEsV0FBQTtZQUNBLEdBQUEsVUFBQSxLQUFBLFdBQUE7WUFDQSxJQUFBO1lBQ0EsSUFBQTs7OztRQUlBLFNBQUEsUUFBQTtVQUNBLElBQUEsQ0FBQSxTQUFBLFFBQUEsU0FBQTtVQUNBLFlBQUEsR0FBQSxPQUFBLFVBQUEsTUFBQSxHQUFBLE1BQUEsVUFBQTtVQUNBLFlBQUEsV0FBQSxHQUFBLE1BQUEsV0FBQTtVQUNBLFNBQUE7WUFDQSxNQUFBOzs7OztJQUtBLEtBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUE7OztFQUdBLFNBQUEsMEJBQUE7SUFDQSxPQUFBLEdBQUEsTUFBQSxlQUFBLEdBQUE7OztFQUdBLFNBQUEsK0JBQUE7SUFDQSxPQUFBLEdBQUEsTUFBQTs7O0VBR0EsU0FBQSwrQkFBQTtJQUNBLE9BQUE7O0VBRUEsR0FBQSxVQUFBLFNBQUEsV0FBQSxTQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQSxVQUFBLGlCQUFBO0lBQ0EsT0FBQSxVQUFBLFNBQUEsU0FBQSxJQUFBLFNBQUEsT0FBQTtNQUNBLElBQUEsUUFBQSxjQUFBLFdBQUE7TUFDQSxNQUFBLGFBQUEsTUFBQTtNQUNBLE9BQUE7U0FDQTs7RUFFQSxJQUFBLElBQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxJQUFBLEtBQUE7SUFDQSxJQUFBLElBQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxRQUFBLElBQUE7SUFDQSxhQUFBLElBQUE7SUFDQSxhQUFBLE1BQUE7O0VBRUEsU0FBQSxPQUFBLEdBQUE7SUFDQSxPQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxDQUFBLElBQUE7OztFQUdBLFNBQUEsV0FBQSxHQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBOzs7RUFHQSxTQUFBLFFBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxDQUFBLElBQUEsSUFBQSxLQUFBLEtBQUE7OztFQUdBLFNBQUEsUUFBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLElBQUEsUUFBQSxJQUFBLENBQUEsSUFBQSxDQUFBLFFBQUEsS0FBQSxLQUFBOzs7RUFHQSxTQUFBLFFBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLE1BQUEsSUFBQSxLQUFBOzs7RUFHQSxTQUFBLFFBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLE1BQUEsSUFBQSxLQUFBOzs7RUFHQSxTQUFBLFFBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsTUFBQSxNQUFBLElBQUE7OztFQUdBLFNBQUEsWUFBQSxHQUFBO0lBQ0EsT0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsTUFBQTs7RUFFQSxJQUFBLElBQUEsS0FBQTtJQUNBLEtBQUE7SUFDQSxLQUFBO0VBQ0EsR0FBQSxrQkFBQSxTQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsTUFBQSxHQUFBO01BQ0EsTUFBQSxHQUFBO01BQ0EsS0FBQSxHQUFBO01BQ0EsTUFBQSxHQUFBO01BQ0EsTUFBQSxHQUFBO01BQ0EsS0FBQSxHQUFBO0lBQ0EsSUFBQSxLQUFBLE1BQUE7TUFDQSxLQUFBLE1BQUE7TUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EsS0FBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLENBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLE9BQUEsSUFBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLENBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLE9BQUEsSUFBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxJQUFBLENBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxPQUFBOztJQUVBLFNBQUEsWUFBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLElBQUE7TUFDQSxJQUFBLElBQUE7UUFDQSxJQUFBLFNBQUEsUUFBQTtVQUNBLElBQUEsTUFBQSxLQUFBLE9BQUEsU0FBQSxRQUFBLElBQUEsSUFBQSxNQUFBLFFBQUE7UUFDQSxPQUFBLENBQUEsTUFBQSxJQUFBLElBQUEsTUFBQSxJQUFBLElBQUEsS0FBQSxTQUFBLFFBQUEsSUFBQTtVQUNBOztNQUVBLE9BQUEsQ0FBQSxNQUFBLElBQUEsSUFBQSxNQUFBLElBQUEsSUFBQSxLQUFBLEtBQUEsSUFBQSxJQUFBOztJQUVBLFlBQUEsV0FBQSxJQUFBO0lBQ0EsT0FBQTs7RUFFQSxHQUFBLFNBQUEsT0FBQSxXQUFBO0lBQ0EsSUFBQSxPQUFBO1FBQ0EsR0FBQTtRQUNBLEdBQUE7UUFDQSxHQUFBOztNQUVBLFlBQUEsU0FBQSxRQUFBLE9BQUEsQ0FBQSxLQUFBO01BQ0EsY0FBQTtNQUNBLFdBQUE7TUFDQSxVQUFBO01BQ0EsWUFBQTtNQUNBLFlBQUE7TUFDQSxVQUFBO01BQ0EsaUJBQUEsYUFBQTtNQUNBLFdBQUEsUUFBQSxpQkFBQSxNQUFBLGFBQUE7UUFDQTtNQUNBLElBQUEsSUFBQSxJQUFBOztJQUVBLFNBQUEsS0FBQSxHQUFBO01BQ0EsRUFBQSxHQUFBLFdBQUEsYUFBQSxHQUFBLHdCQUFBO1FBQ0EsY0FBQSxHQUFBLGlCQUFBLFlBQUEsR0FBQTtRQUNBOztJQUVBLEtBQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxFQUFBLEtBQUEsV0FBQTtRQUNBLElBQUEsV0FBQSxNQUFBLEdBQUEsTUFBQTtVQUNBLFFBQUE7UUFDQSxJQUFBLHdCQUFBO1VBQ0EsR0FBQSxPQUFBLE1BQUEsYUFBQSxLQUFBLGNBQUEsV0FBQTtZQUNBLE9BQUEsS0FBQSxhQUFBO2NBQ0EsR0FBQTtjQUNBLEdBQUE7Y0FDQSxHQUFBOztZQUVBLFlBQUE7YUFDQSxNQUFBLGFBQUEsV0FBQTtZQUNBLElBQUEsS0FBQSxLQUFBO2NBQ0EsS0FBQSxLQUFBO2NBQ0EsS0FBQSxVQUFBLFFBQUEsS0FBQSxLQUFBO2NBQ0EsS0FBQSxVQUFBLFFBQUEsS0FBQSxLQUFBO2NBQ0EsSUFBQSxHQUFBLGdCQUFBLENBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEdBQUE7Z0JBQ0EsS0FBQSxLQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUEsS0FBQSxJQUFBLENBQUEsQ0FBQTtrQkFDQSxNQUFBLEtBQUEsTUFBQSxHQUFBLENBQUEsS0FBQSxNQUFBLEtBQUEsTUFBQTtnQkFDQSxLQUFBLE1BQUE7O1lBRUEsT0FBQSxTQUFBLEdBQUE7Y0FDQSxJQUFBLElBQUEsRUFBQTtnQkFDQSxJQUFBLEtBQUEsRUFBQTtjQUNBLEtBQUEsWUFBQSxPQUFBO2dCQUNBLEdBQUEsS0FBQSxFQUFBLEtBQUE7Z0JBQ0EsR0FBQSxLQUFBLEVBQUEsS0FBQTtnQkFDQSxHQUFBOztjQUVBLE9BQUE7O2FBRUEsS0FBQSxrQkFBQSxXQUFBO1lBQ0EsVUFBQTthQUNBLEtBQUEsWUFBQSxXQUFBO1lBQ0EsVUFBQTs7ZUFFQTtVQUNBLEtBQUEsWUFBQTtVQUNBLFlBQUE7VUFDQSxPQUFBO1VBQ0EsVUFBQTs7OztJQUlBLEtBQUEsWUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQTtNQUNBLE9BQUE7UUFDQSxHQUFBLENBQUEsRUFBQTtRQUNBLEdBQUEsQ0FBQSxFQUFBO1FBQ0EsR0FBQSxLQUFBOztNQUVBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLEtBQUE7TUFDQSxPQUFBO1FBQ0EsR0FBQSxLQUFBO1FBQ0EsR0FBQSxLQUFBO1FBQ0EsR0FBQSxDQUFBOztNQUVBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLGNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsY0FBQSxLQUFBLE9BQUEsMkJBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLEVBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBLEtBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLEVBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxPQUFBLEtBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLEVBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsV0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxXQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsSUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxLQUFBO01BQ0EsS0FBQSxFQUFBO01BQ0EsT0FBQTtRQUNBLEdBQUE7UUFDQSxHQUFBO1FBQ0EsR0FBQTs7TUFFQSxPQUFBOztJQUVBLEtBQUEsSUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxLQUFBO01BQ0EsS0FBQSxFQUFBO01BQ0EsT0FBQTtRQUNBLEdBQUE7UUFDQSxHQUFBO1FBQ0EsR0FBQTs7TUFFQSxPQUFBOzs7SUFHQSxTQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsQ0FBQSxDQUFBLEVBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBOzs7SUFHQSxTQUFBLE1BQUEsR0FBQTtNQUNBLE9BQUEsQ0FBQSxFQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUEsR0FBQSxFQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7OztJQUdBLFNBQUEsUUFBQSxHQUFBO01BQ0EsS0FBQSxJQUFBLEtBQUEsSUFBQSxZQUFBLElBQUEsS0FBQSxJQUFBLFlBQUEsSUFBQTs7O0lBR0EsU0FBQSxZQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsTUFBQTtNQUNBLEtBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQTtNQUNBLEtBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQTs7O0lBR0EsU0FBQSxPQUFBLE1BQUEsR0FBQSxHQUFBLEdBQUE7TUFDQSxLQUFBLFlBQUE7UUFDQSxHQUFBLEtBQUE7UUFDQSxHQUFBLEtBQUE7UUFDQSxHQUFBLEtBQUE7O01BRUEsUUFBQSxLQUFBLElBQUEsR0FBQTtNQUNBLFlBQUEsVUFBQSxHQUFBO01BQ0EsT0FBQSxHQUFBLE9BQUE7TUFDQSxJQUFBLFdBQUEsR0FBQSxPQUFBLEtBQUEsYUFBQSxTQUFBO01BQ0EsS0FBQSxLQUFBLEtBQUE7OztJQUdBLFNBQUEsVUFBQTtNQUNBLElBQUEsSUFBQSxHQUFBLE9BQUEsR0FBQSxRQUFBLElBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxDQUFBLElBQUEsS0FBQSxLQUFBLEtBQUE7U0FDQSxJQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsR0FBQSxPQUFBLEdBQUEsUUFBQSxJQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsQ0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBO1NBQ0EsSUFBQSxHQUFBOzs7SUFHQSxTQUFBLFlBQUEsVUFBQTtNQUNBLElBQUEsQ0FBQSxXQUFBLFNBQUE7UUFDQSxNQUFBOzs7O0lBSUEsU0FBQSxPQUFBLFVBQUE7TUFDQTtNQUNBLFNBQUE7UUFDQSxNQUFBO1FBQ0EsT0FBQSxLQUFBO1FBQ0EsV0FBQSxDQUFBLEtBQUEsR0FBQSxLQUFBOzs7O0lBSUEsU0FBQSxVQUFBLFVBQUE7TUFDQSxJQUFBLENBQUEsRUFBQSxTQUFBLFNBQUE7UUFDQSxNQUFBOztNQUVBLFVBQUE7OztJQUdBLFNBQUEsY0FBQTtNQUNBLElBQUEsT0FBQTtRQUNBLFNBQUEsR0FBQSxNQUFBO1FBQ0EsV0FBQSxNQUFBLEdBQUEsTUFBQTtRQUNBLFVBQUE7UUFDQSxVQUFBLEdBQUEsT0FBQSxXQUFBLEdBQUEsV0FBQSxPQUFBLEdBQUE7VUFDQTtRQUNBLFlBQUEsU0FBQSxHQUFBLE1BQUE7UUFDQSxjQUFBO01BQ0EsdUJBQUEsS0FBQTtNQUNBLFlBQUE7O01BRUEsU0FBQSxRQUFBO1FBQ0EsVUFBQTtRQUNBLFlBQUEsR0FBQSxNQUFBLE9BQUE7UUFDQSxPQUFBOzs7TUFHQSxTQUFBLFFBQUE7UUFDQSxRQUFBLEdBQUEsV0FBQSxNQUFBLEdBQUEsU0FBQTtRQUNBLFlBQUEsV0FBQSxHQUFBLE1BQUEsV0FBQTtRQUNBLFVBQUE7Ozs7SUFJQSxTQUFBLGVBQUE7TUFDQSxJQUFBLE9BQUE7UUFDQSxXQUFBLE1BQUEsR0FBQSxNQUFBO1FBQ0EsYUFBQTtRQUNBLFlBQUE7UUFDQSxRQUFBLFdBQUEsV0FBQSxHQUFBLE1BQUEsZUFBQSxHQUFBO1FBQ0EsWUFBQSxjQUFBO1FBQ0EsV0FBQSxhQUFBO1FBQ0EsVUFBQTtRQUNBLFVBQUEsR0FBQSxPQUFBO1FBQ0EsY0FBQTtNQUNBO01BQ0EsWUFBQTtNQUNBLFFBQUEsR0FBQSxXQUFBLE1BQUEsR0FBQSxZQUFBOztNQUVBLFNBQUEsV0FBQTtRQUNBLElBQUEsVUFBQSxHQUFBLFFBQUE7UUFDQSxTQUFBLEtBQUE7UUFDQSxRQUFBLFFBQUEsU0FBQSxHQUFBO1VBQ0EsSUFBQSxFQUFBLGNBQUEsWUFBQSxXQUFBLEVBQUE7WUFDQSxTQUFBOztRQUVBLE9BQUE7OztNQUdBLFNBQUEsVUFBQTtRQUNBLElBQUEsU0FBQSxHQUFBLE1BQUE7UUFDQSxHQUFBLE9BQUEsUUFBQSxHQUFBLFdBQUEsT0FBQSxHQUFBLFVBQUE7UUFDQSxRQUFBLEtBQUE7UUFDQSxJQUFBLFVBQUEsR0FBQSxNQUFBO1FBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLFFBQUEsUUFBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1VBQ0EsV0FBQSxRQUFBLEdBQUEsY0FBQTs7UUFFQSxJQUFBLFVBQUE7VUFDQSxNQUFBLEtBQUE7UUFDQSxJQUFBLFFBQUEsV0FBQSxHQUFBO1VBQ0EsSUFBQSxNQUFBLFlBQUEsS0FBQTtZQUNBLElBQUEsSUFBQSxRQUFBO1lBQ0EsT0FBQSxNQUFBLEdBQUEsV0FBQSxFQUFBLGFBQUEsS0FBQSxNQUFBLEtBQUE7Y0FDQSxLQUFBLEtBQUEsS0FBQSxPQUFBO1lBQ0E7O1VBRUEsWUFBQTtlQUNBLElBQUEsUUFBQSxTQUFBLEdBQUE7VUFDQSxJQUFBLElBQUEsUUFBQTtZQUNBLElBQUEsUUFBQTtZQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUE7WUFDQSxLQUFBLEVBQUEsS0FBQSxFQUFBO1VBQ0EsWUFBQSxLQUFBLEtBQUEsS0FBQTs7OztNQUlBLFNBQUEsUUFBQTtRQUNBLElBQUEsVUFBQSxHQUFBLFFBQUE7VUFDQSxJQUFBLElBQUEsSUFBQTtRQUNBLHVCQUFBLEtBQUE7UUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsUUFBQSxRQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsS0FBQSxNQUFBO1VBQ0EsS0FBQSxRQUFBO1VBQ0EsSUFBQSxLQUFBLFdBQUEsR0FBQSxhQUFBO1lBQ0EsSUFBQSxJQUFBO1lBQ0EsS0FBQSxJQUFBLEtBQUE7OztRQUdBLElBQUEsSUFBQTtVQUNBLElBQUEsWUFBQSxDQUFBLFlBQUEsR0FBQSxLQUFBLEdBQUEsTUFBQSxZQUFBO2NBQ0EsWUFBQSxHQUFBLEtBQUEsR0FBQSxNQUFBO1lBQ0EsU0FBQSxhQUFBLEtBQUEsS0FBQSxZQUFBO1VBQ0EsS0FBQSxDQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsTUFBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsTUFBQTtVQUNBLEtBQUEsQ0FBQSxDQUFBLEdBQUEsS0FBQSxHQUFBLE1BQUEsR0FBQSxDQUFBLEdBQUEsS0FBQSxHQUFBLE1BQUE7VUFDQSxRQUFBLFNBQUE7O1FBRUEsWUFBQTtRQUNBLFlBQUEsSUFBQTtRQUNBLE9BQUE7OztNQUdBLFNBQUEsUUFBQTtRQUNBLElBQUEsR0FBQSxNQUFBLFFBQUEsUUFBQTtVQUNBLElBQUEsVUFBQSxHQUFBLE1BQUE7VUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsUUFBQSxRQUFBLElBQUEsR0FBQSxFQUFBLEdBQUE7WUFDQSxPQUFBLFdBQUEsUUFBQSxHQUFBOztVQUVBLEtBQUEsSUFBQSxjQUFBLFlBQUE7WUFDQSxPQUFBLEtBQUE7OztRQUdBLEdBQUEsVUFBQSxTQUFBLEdBQUEsVUFBQTtRQUNBLFFBQUEsR0FBQSxXQUFBLGFBQUEsR0FBQSxZQUFBO1FBQ0E7UUFDQSxVQUFBOzs7O0lBSUEsU0FBQSxlQUFBO01BQ0EsSUFBQSxXQUFBLE1BQUEsR0FBQSxNQUFBO01BQ0EsSUFBQSxpQkFBQSxhQUFBO1dBQ0EsYUFBQSxTQUFBLFVBQUEsVUFBQSxHQUFBLE1BQUE7UUFDQSx1QkFBQSxLQUFBLE9BQUEsWUFBQTtNQUNBLGtCQUFBLFdBQUEsV0FBQTtRQUNBLGtCQUFBO1FBQ0EsVUFBQTtTQUNBO01BQ0E7TUFDQSxRQUFBLEtBQUEsSUFBQSxHQUFBLDBCQUFBLFFBQUEsS0FBQTtNQUNBLFlBQUEsU0FBQTtNQUNBLE9BQUE7OztJQUdBLFNBQUEsYUFBQTtNQUNBLElBQUEsSUFBQSxHQUFBLE1BQUE7UUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLE9BQUEsTUFBQSxHQUFBLFNBQUEsSUFBQSxHQUFBLE1BQUEsV0FBQSxLQUFBLEtBQUEsS0FBQTtRQUNBLEtBQUEsTUFBQSxLQUFBOztJQUVBLE9BQUEsR0FBQSxPQUFBLE1BQUEsT0FBQTs7RUFFQSxJQUFBLDJCQUFBLENBQUEsR0FBQTtFQUNBLElBQUEsdUJBQUEsd0JBQUE7SUFDQSxlQUFBLHdCQUFBLFdBQUE7TUFDQSxPQUFBLENBQUEsR0FBQSxNQUFBLFVBQUEsR0FBQSxNQUFBLFlBQUEsTUFBQTtPQUNBLFdBQUEsa0JBQUEsZUFBQTtNQUNBLFdBQUE7UUFDQSxPQUFBLEdBQUEsTUFBQTtTQUNBLGlCQUFBLHdCQUFBLFdBQUE7TUFDQSxPQUFBLENBQUEsR0FBQSxNQUFBO09BQ0E7RUFDQSxHQUFBLFFBQUE7O0VBRUEsU0FBQSxXQUFBO0VBQ0EsU0FBQSxVQUFBLFdBQUEsV0FBQTtJQUNBLE9BQUEsS0FBQSxRQUFBOztFQUVBLEdBQUEsTUFBQTs7RUFFQSxTQUFBLE9BQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLGdCQUFBLFNBQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxJQUFBO01BQ0EsS0FBQSxVQUFBLFNBQUEsSUFBQSxhQUFBLFNBQUEsSUFBQSxPQUFBLEVBQUEsR0FBQTtPQUNBLEdBQUEsRUFBQSxLQUFBLGFBQUEsS0FBQSxHQUFBLFlBQUEsVUFBQSxJQUFBLE9BQUE7TUFDQSxHQUFBOztFQUVBLElBQUEsa0JBQUEsT0FBQSxZQUFBLElBQUE7RUFDQSxnQkFBQSxXQUFBLFNBQUEsR0FBQTtJQUNBLElBQUEsS0FBQSxJQUFBLElBQUEsVUFBQSxTQUFBLElBQUE7SUFDQSxPQUFBLElBQUEsT0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBLEtBQUEsSUFBQTs7RUFFQSxnQkFBQSxTQUFBLFNBQUEsR0FBQTtJQUNBLElBQUEsS0FBQSxJQUFBLElBQUEsVUFBQSxTQUFBLElBQUE7SUFDQSxPQUFBLElBQUEsT0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBLElBQUEsS0FBQTs7RUFFQSxnQkFBQSxNQUFBLFdBQUE7SUFDQSxPQUFBLFdBQUEsS0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBOzs7RUFHQSxTQUFBLFdBQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLElBQUE7SUFDQSxJQUFBLE1BQUEsS0FBQSxJQUFBLENBQUEsS0FBQSxPQUFBLElBQUEsSUFBQSxNQUFBO0lBQ0EsSUFBQSxNQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQTtJQUNBLEtBQUEsSUFBQSxJQUFBOztJQUVBLFNBQUEsRUFBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLEtBQUEsS0FBQTtXQUNBLElBQUEsSUFBQSxHQUFBLEtBQUE7TUFDQSxJQUFBLElBQUEsSUFBQSxPQUFBLEtBQUEsQ0FBQSxLQUFBLE1BQUEsSUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBLE9BQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxPQUFBLEtBQUEsQ0FBQSxLQUFBLE9BQUEsTUFBQSxLQUFBO01BQ0EsT0FBQTs7O0lBR0EsU0FBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLEtBQUEsTUFBQSxFQUFBLEtBQUE7O0lBRUEsT0FBQSxJQUFBLE9BQUEsR0FBQSxJQUFBLE1BQUEsR0FBQSxJQUFBLEdBQUEsSUFBQTs7RUFFQSxHQUFBLE1BQUE7O0VBRUEsU0FBQSxPQUFBLEdBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxnQkFBQSxTQUFBLEtBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsSUFBQTtRQUNBLEtBQUEsVUFBQSxTQUFBLElBQUEsYUFBQSxTQUFBLElBQUEsT0FBQSxFQUFBLEdBQUE7U0FDQSxHQUFBLEVBQUEsS0FBQSxhQUFBLFNBQUEsV0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7TUFDQSxXQUFBLENBQUEsSUFBQSxXQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtNQUNBLElBQUEsT0FBQSxHQUFBLEdBQUE7O0VBRUEsSUFBQSxrQkFBQSxPQUFBLFlBQUEsSUFBQTtFQUNBLGdCQUFBLFdBQUEsU0FBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLE9BQUEsS0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBLElBQUEsS0FBQSxLQUFBLElBQUE7TUFDQSxVQUFBLFNBQUEsSUFBQTs7RUFFQSxnQkFBQSxTQUFBLFNBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxPQUFBLEtBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQSxJQUFBLEdBQUEsS0FBQSxJQUFBO01BQ0EsVUFBQSxTQUFBLElBQUE7O0VBRUEsZ0JBQUEsTUFBQSxXQUFBO0lBQ0EsT0FBQSxXQUFBLEtBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBOzs7RUFHQSxTQUFBLFdBQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLE1BQUEsSUFBQSxJQUFBO0lBQ0EsSUFBQSxNQUFBLElBQUEsSUFBQTtJQUNBLE9BQUEsSUFBQSxPQUFBLEdBQUEsS0FBQSxJQUFBLEtBQUEsY0FBQSxHQUFBLEtBQUEsSUFBQSxLQUFBOztFQUVBLEdBQUEsTUFBQTs7RUFFQSxTQUFBLE9BQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLGdCQUFBLFNBQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxJQUFBO1FBQ0EsS0FBQSxVQUFBLFNBQUEsSUFBQSxhQUFBLFNBQUEsSUFBQSxPQUFBLEVBQUEsR0FBQTtTQUNBLEdBQUEsRUFBQSxLQUFBLGFBQUEsU0FBQSxXQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtNQUNBLFdBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxPQUFBLEdBQUEsR0FBQTs7RUFFQSxJQUFBLFdBQUE7RUFDQSxJQUFBLFdBQUE7SUFDQSxXQUFBO0lBQ0EsV0FBQTtFQUNBLElBQUEsa0JBQUEsT0FBQSxZQUFBLElBQUE7RUFDQSxnQkFBQSxXQUFBLFNBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsSUFBQSxZQUFBLFVBQUE7TUFDQSxJQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUE7O0VBRUEsZ0JBQUEsU0FBQSxTQUFBLEdBQUE7SUFDQSxPQUFBLElBQUEsT0FBQSxLQUFBLElBQUEsR0FBQSxLQUFBLElBQUEsWUFBQSxVQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUEsR0FBQSxLQUFBOztFQUVBLGdCQUFBLE1BQUEsV0FBQTtJQUNBLE9BQUEsV0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBLEtBQUE7OztFQUdBLFNBQUEsV0FBQSxHQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxDQUFBLElBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxJQUFBO01BQ0EsSUFBQSxJQUFBLElBQUE7SUFDQSxJQUFBLFdBQUEsS0FBQTtJQUNBLElBQUEsV0FBQSxLQUFBO0lBQ0EsSUFBQSxXQUFBLEtBQUE7SUFDQSxPQUFBLElBQUEsT0FBQSxXQUFBLFlBQUEsSUFBQSxZQUFBLElBQUE7UUFDQSxJQUFBLFdBQUEsQ0FBQSxVQUFBLElBQUEsWUFBQSxJQUFBLFVBQUE7TUFDQSxXQUFBLFdBQUEsSUFBQSxXQUFBLElBQUEsWUFBQTs7O0VBR0EsU0FBQSxXQUFBLEdBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLElBQUEsSUFBQSxPQUFBLEtBQUEsTUFBQSxHQUFBLEtBQUEsWUFBQSxLQUFBLEtBQUE7TUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsT0FBQSxLQUFBLEtBQUE7OztFQUdBLFNBQUEsV0FBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLGFBQUEsSUFBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLElBQUEsTUFBQTs7O0VBR0EsU0FBQSxXQUFBLEdBQUE7SUFDQSxPQUFBLElBQUEsVUFBQSxLQUFBLElBQUEsR0FBQSxJQUFBLEtBQUEsV0FBQSxJQUFBLElBQUE7OztFQUdBLFNBQUEsV0FBQSxHQUFBO0lBQ0EsT0FBQSxLQUFBLE1BQUEsT0FBQSxLQUFBLFNBQUEsUUFBQSxJQUFBLFFBQUEsS0FBQSxJQUFBO01BQ0EsSUFBQSxPQUFBOztFQUVBLEdBQUEsTUFBQTs7RUFFQSxTQUFBLE9BQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLGdCQUFBLFNBQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsS0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLEtBQUEsSUFBQTtNQUNBLENBQUEsS0FBQSxVQUFBLFNBQUEsSUFBQSxhQUFBLFNBQUEsSUFBQSxPQUFBLEVBQUE7TUFDQSxFQUFBLEdBQUEsRUFBQSxLQUFBLGFBQUEsS0FBQSxHQUFBLFFBQUEsY0FBQSxJQUFBLE9BQUE7TUFDQSxHQUFBOzs7RUFHQSxTQUFBLGFBQUEsT0FBQTtJQUNBLE9BQUEsSUFBQSxPQUFBLFNBQUEsSUFBQSxTQUFBLElBQUEsS0FBQSxRQUFBOzs7RUFHQSxTQUFBLGFBQUEsT0FBQTtJQUNBLE9BQUEsYUFBQSxTQUFBOztFQUVBLElBQUEsa0JBQUEsT0FBQSxZQUFBLElBQUE7RUFDQSxnQkFBQSxXQUFBLFNBQUEsR0FBQTtJQUNBLElBQUEsS0FBQSxJQUFBLElBQUEsVUFBQSxTQUFBLElBQUE7SUFDQSxJQUFBLElBQUEsS0FBQTtNQUNBLElBQUEsS0FBQTtNQUNBLElBQUEsS0FBQTtNQUNBLElBQUE7SUFDQSxJQUFBLENBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLE9BQUEsSUFBQSxPQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsS0FBQSxJQUFBLEdBQUEsSUFBQTtJQUNBLElBQUEsS0FBQSxJQUFBLEdBQUEsSUFBQTtJQUNBLElBQUEsS0FBQSxJQUFBLEdBQUEsSUFBQTtJQUNBLE9BQUEsSUFBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsS0FBQTtNQUNBLEtBQUEsSUFBQTs7RUFFQSxnQkFBQSxTQUFBLFNBQUEsR0FBQTtJQUNBLElBQUEsS0FBQSxJQUFBLElBQUEsVUFBQSxTQUFBLElBQUE7SUFDQSxPQUFBLElBQUEsT0FBQSxJQUFBLEtBQUEsR0FBQSxJQUFBLEtBQUEsR0FBQSxJQUFBLEtBQUE7O0VBRUEsZ0JBQUEsTUFBQSxXQUFBO0lBQ0EsT0FBQSxXQUFBLEtBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQTs7RUFFQSxnQkFBQSxXQUFBLFdBQUE7SUFDQSxPQUFBLE1BQUEsV0FBQSxLQUFBLEtBQUEsV0FBQSxLQUFBLEtBQUE7TUFDQSxLQUFBOzs7RUFHQSxTQUFBLFdBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxTQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsR0FBQTtNQUNBOzs7RUFHQSxTQUFBLGFBQUEsUUFBQSxLQUFBLEtBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBO01BQ0EsSUFBQTtNQUNBLElBQUEsSUFBQTtJQUNBLEtBQUEsb0JBQUEsS0FBQTtJQUNBLElBQUEsSUFBQTtNQUNBLEtBQUEsR0FBQSxHQUFBLE1BQUE7TUFDQSxRQUFBLEdBQUE7UUFDQSxLQUFBO1VBQ0E7WUFDQSxPQUFBLElBQUEsV0FBQSxHQUFBLEtBQUEsV0FBQSxHQUFBLE1BQUE7Y0FDQSxXQUFBLEdBQUEsTUFBQTs7O1FBR0EsS0FBQTtVQUNBO1lBQ0EsT0FBQSxJQUFBLG1CQUFBLEdBQUEsS0FBQSxtQkFBQSxHQUFBO2NBQ0EsbUJBQUEsR0FBQTs7OztJQUlBLElBQUEsUUFBQSxhQUFBLElBQUEsU0FBQSxPQUFBLElBQUEsTUFBQSxHQUFBLE1BQUE7TUFDQSxNQUFBO0lBQ0EsSUFBQSxVQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQSxDQUFBLE1BQUE7UUFDQSxTQUFBLE9BQUEsTUFBQSxJQUFBLE1BQUE7TUFDQSxJQUFBLE9BQUEsV0FBQSxHQUFBO1FBQ0EsSUFBQSxDQUFBLFFBQUEsU0FBQTtRQUNBLElBQUEsS0FBQSxJQUFBO1FBQ0EsSUFBQSxRQUFBO1FBQ0EsSUFBQSxLQUFBLElBQUE7UUFDQSxJQUFBLFFBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQTthQUNBLElBQUEsT0FBQSxXQUFBLEdBQUE7UUFDQSxJQUFBLENBQUEsUUFBQSxhQUFBO1FBQ0EsSUFBQSxDQUFBLFFBQUEsVUFBQTtRQUNBLElBQUEsUUFBQTs7O0lBR0EsT0FBQSxJQUFBLEdBQUEsR0FBQTs7O0VBR0EsU0FBQSxXQUFBLEdBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxNQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLE1BQUE7TUFDQSxHQUFBLEdBQUEsSUFBQSxDQUFBLE1BQUEsT0FBQTtJQUNBLElBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxLQUFBLEtBQUEsTUFBQSxPQUFBLEtBQUEsSUFBQSxNQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLElBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxJQUFBO1dBQ0EsSUFBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLElBQUEsS0FBQSxJQUFBO1dBQ0EsSUFBQSxDQUFBLElBQUEsS0FBQSxJQUFBO01BQ0EsS0FBQTtXQUNBO01BQ0EsSUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxJQUFBOztJQUVBLE9BQUEsSUFBQSxPQUFBLEdBQUEsR0FBQTs7O0VBR0EsU0FBQSxXQUFBLEdBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxXQUFBO0lBQ0EsSUFBQSxXQUFBO0lBQ0EsSUFBQSxXQUFBO0lBQ0EsSUFBQSxJQUFBLFdBQUEsQ0FBQSxXQUFBLElBQUEsV0FBQSxJQUFBLFdBQUE7UUFDQTtNQUNBLElBQUEsV0FBQSxDQUFBLFdBQUEsSUFBQSxXQUFBLElBQUEsVUFBQSxLQUFBO01BQ0EsSUFBQSxXQUFBLENBQUEsV0FBQSxJQUFBLFVBQUEsSUFBQSxXQUFBLEtBQUE7SUFDQSxPQUFBLE9BQUEsTUFBQSxJQUFBLElBQUEsT0FBQSxJQUFBLElBQUEsT0FBQSxJQUFBOzs7RUFHQSxTQUFBLFdBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxLQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsS0FBQSxJQUFBLENBQUEsSUFBQSxRQUFBO01BQ0E7OztFQUdBLFNBQUEsbUJBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxXQUFBO0lBQ0EsT0FBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLE9BQUEsTUFBQSxLQUFBLE1BQUEsSUFBQSxRQUFBOztFQUVBLElBQUEsZUFBQSxHQUFBLElBQUE7SUFDQSxXQUFBO0lBQ0EsY0FBQTtJQUNBLE1BQUE7SUFDQSxZQUFBO0lBQ0EsT0FBQTtJQUNBLE9BQUE7SUFDQSxRQUFBO0lBQ0EsT0FBQTtJQUNBLGdCQUFBO0lBQ0EsTUFBQTtJQUNBLFlBQUE7SUFDQSxPQUFBO0lBQ0EsV0FBQTtJQUNBLFdBQUE7SUFDQSxZQUFBO0lBQ0EsV0FBQTtJQUNBLE9BQUE7SUFDQSxnQkFBQTtJQUNBLFVBQUE7SUFDQSxTQUFBO0lBQ0EsTUFBQTtJQUNBLFVBQUE7SUFDQSxVQUFBO0lBQ0EsZUFBQTtJQUNBLFVBQUE7SUFDQSxXQUFBO0lBQ0EsVUFBQTtJQUNBLFdBQUE7SUFDQSxhQUFBO0lBQ0EsZ0JBQUE7SUFDQSxZQUFBO0lBQ0EsWUFBQTtJQUNBLFNBQUE7SUFDQSxZQUFBO0lBQ0EsY0FBQTtJQUNBLGVBQUE7SUFDQSxlQUFBO0lBQ0EsZUFBQTtJQUNBLGVBQUE7SUFDQSxZQUFBO0lBQ0EsVUFBQTtJQUNBLGFBQUE7SUFDQSxTQUFBO0lBQ0EsU0FBQTtJQUNBLFlBQUE7SUFDQSxXQUFBO0lBQ0EsYUFBQTtJQUNBLGFBQUE7SUFDQSxTQUFBO0lBQ0EsV0FBQTtJQUNBLFlBQUE7SUFDQSxNQUFBO0lBQ0EsV0FBQTtJQUNBLE1BQUE7SUFDQSxPQUFBO0lBQ0EsYUFBQTtJQUNBLE1BQUE7SUFDQSxVQUFBO0lBQ0EsU0FBQTtJQUNBLFdBQUE7SUFDQSxRQUFBO0lBQ0EsT0FBQTtJQUNBLE9BQUE7SUFDQSxVQUFBO0lBQ0EsZUFBQTtJQUNBLFdBQUE7SUFDQSxjQUFBO0lBQ0EsV0FBQTtJQUNBLFlBQUE7SUFDQSxXQUFBO0lBQ0Esc0JBQUE7SUFDQSxXQUFBO0lBQ0EsWUFBQTtJQUNBLFdBQUE7SUFDQSxXQUFBO0lBQ0EsYUFBQTtJQUNBLGVBQUE7SUFDQSxjQUFBO0lBQ0EsZ0JBQUE7SUFDQSxnQkFBQTtJQUNBLGdCQUFBO0lBQ0EsYUFBQTtJQUNBLE1BQUE7SUFDQSxXQUFBO0lBQ0EsT0FBQTtJQUNBLFNBQUE7SUFDQSxRQUFBO0lBQ0Esa0JBQUE7SUFDQSxZQUFBO0lBQ0EsY0FBQTtJQUNBLGNBQUE7SUFDQSxnQkFBQTtJQUNBLGlCQUFBO0lBQ0EsbUJBQUE7SUFDQSxpQkFBQTtJQUNBLGlCQUFBO0lBQ0EsY0FBQTtJQUNBLFdBQUE7SUFDQSxXQUFBO0lBQ0EsVUFBQTtJQUNBLGFBQUE7SUFDQSxNQUFBO0lBQ0EsU0FBQTtJQUNBLE9BQUE7SUFDQSxXQUFBO0lBQ0EsUUFBQTtJQUNBLFdBQUE7SUFDQSxRQUFBO0lBQ0EsZUFBQTtJQUNBLFdBQUE7SUFDQSxlQUFBO0lBQ0EsZUFBQTtJQUNBLFlBQUE7SUFDQSxXQUFBO0lBQ0EsTUFBQTtJQUNBLE1BQUE7SUFDQSxNQUFBO0lBQ0EsWUFBQTtJQUNBLFFBQUE7SUFDQSxLQUFBO0lBQ0EsV0FBQTtJQUNBLFdBQUE7SUFDQSxhQUFBO0lBQ0EsUUFBQTtJQUNBLFlBQUE7SUFDQSxVQUFBO0lBQ0EsVUFBQTtJQUNBLFFBQUE7SUFDQSxRQUFBO0lBQ0EsU0FBQTtJQUNBLFdBQUE7SUFDQSxXQUFBO0lBQ0EsV0FBQTtJQUNBLE1BQUE7SUFDQSxhQUFBO0lBQ0EsV0FBQTtJQUNBLEtBQUE7SUFDQSxNQUFBO0lBQ0EsU0FBQTtJQUNBLFFBQUE7SUFDQSxXQUFBO0lBQ0EsUUFBQTtJQUNBLE9BQUE7SUFDQSxPQUFBO0lBQ0EsWUFBQTtJQUNBLFFBQUE7SUFDQSxhQUFBOztFQUVBLGFBQUEsUUFBQSxTQUFBLEtBQUEsT0FBQTtJQUNBLGFBQUEsSUFBQSxLQUFBLGFBQUE7OztFQUdBLFNBQUEsV0FBQSxHQUFBO0lBQ0EsT0FBQSxPQUFBLE1BQUEsYUFBQSxJQUFBLFdBQUE7TUFDQSxPQUFBOzs7RUFHQSxHQUFBLFVBQUE7O0VBRUEsU0FBQSxZQUFBLEdBQUE7SUFDQSxPQUFBOztFQUVBLEdBQUEsTUFBQSxXQUFBOztFQUVBLFNBQUEsV0FBQSxVQUFBO0lBQ0EsT0FBQSxTQUFBLEtBQUEsVUFBQSxVQUFBO01BQ0EsSUFBQSxVQUFBLFdBQUEsS0FBQSxPQUFBLGFBQUE7UUFDQSxXQUFBO1FBQ0EsV0FBQTtNQUNBLE9BQUEsT0FBQSxLQUFBLFVBQUEsVUFBQTs7OztFQUlBLFNBQUEsT0FBQSxLQUFBLFVBQUEsVUFBQSxVQUFBO0lBQ0EsSUFBQSxNQUFBO01BQ0EsV0FBQSxHQUFBLFNBQUEsY0FBQSxZQUFBLFFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQSxJQUFBO01BQ0EsZUFBQTtJQUNBLElBQUEsVUFBQSxrQkFBQSxFQUFBLHFCQUFBO01BQ0Esb0JBQUEsS0FBQSxNQUFBLFVBQUEsSUFBQTtJQUNBLFlBQUEsVUFBQSxRQUFBLFNBQUEsUUFBQSxVQUFBO01BQ0EsUUFBQSxxQkFBQSxXQUFBO1FBQ0EsUUFBQSxhQUFBLEtBQUE7OztJQUdBLFNBQUEsVUFBQTtNQUNBLElBQUEsU0FBQSxRQUFBO1FBQ0E7TUFDQSxJQUFBLENBQUEsVUFBQSxrQkFBQSxZQUFBLFVBQUEsT0FBQTtRQUNBLE9BQUEsV0FBQSxLQUFBO1FBQ0EsSUFBQTtVQUNBLFNBQUEsU0FBQSxLQUFBLEtBQUE7VUFDQSxPQUFBLEdBQUE7VUFDQSxTQUFBLE1BQUEsS0FBQSxLQUFBO1VBQ0E7O1FBRUEsU0FBQSxLQUFBLEtBQUEsS0FBQTthQUNBO1FBQ0EsU0FBQSxNQUFBLEtBQUEsS0FBQTs7O0lBR0EsUUFBQSxhQUFBLFNBQUEsT0FBQTtNQUNBLElBQUEsSUFBQSxHQUFBO01BQ0EsR0FBQSxRQUFBO01BQ0EsSUFBQTtRQUNBLFNBQUEsU0FBQSxLQUFBLEtBQUE7Z0JBQ0E7UUFDQSxHQUFBLFFBQUE7OztJQUdBLElBQUEsU0FBQSxTQUFBLE1BQUEsT0FBQTtNQUNBLE9BQUEsQ0FBQSxPQUFBLElBQUE7TUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLE9BQUEsUUFBQTtNQUNBLElBQUEsU0FBQSxNQUFBLE9BQUEsUUFBQTtXQUNBLFFBQUEsUUFBQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLFdBQUEsU0FBQSxPQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsV0FBQSxTQUFBLE9BQUEsT0FBQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLGVBQUEsU0FBQSxPQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsZUFBQTtNQUNBLE9BQUE7O0lBRUEsSUFBQSxXQUFBLFNBQUEsT0FBQTtNQUNBLFdBQUE7TUFDQSxPQUFBOztJQUVBLENBQUEsT0FBQSxRQUFBLFFBQUEsU0FBQSxRQUFBO01BQ0EsSUFBQSxVQUFBLFdBQUE7UUFDQSxPQUFBLElBQUEsS0FBQSxNQUFBLEtBQUEsQ0FBQSxRQUFBLE9BQUEsU0FBQTs7O0lBR0EsSUFBQSxPQUFBLFNBQUEsUUFBQSxNQUFBLFVBQUE7TUFDQSxJQUFBLFVBQUEsV0FBQSxLQUFBLE9BQUEsU0FBQSxZQUFBO1FBQ0EsTUFBQSxPQUFBO01BQ0EsUUFBQSxLQUFBLFFBQUEsS0FBQTtNQUNBLElBQUEsWUFBQSxRQUFBLEVBQUEsWUFBQSxVQUFBLFFBQUE7UUFDQSxXQUFBO01BQ0EsSUFBQSxRQUFBO1FBQ0EsS0FBQSxJQUFBLFFBQUEsU0FBQSxRQUFBLGlCQUFBLE1BQUE7VUFDQTtNQUNBLElBQUEsWUFBQSxRQUFBLFFBQUEsa0JBQUEsUUFBQTtRQUNBO01BQ0EsSUFBQSxnQkFBQSxNQUFBLFFBQUEsZUFBQTtNQUNBLElBQUEsWUFBQSxNQUFBLElBQUEsR0FBQSxTQUFBLFVBQUEsR0FBQSxRQUFBO1FBQ0EsU0FBQTtRQUNBLFNBQUEsTUFBQTs7TUFFQSxTQUFBLFdBQUEsS0FBQSxLQUFBO01BQ0EsUUFBQSxLQUFBLFFBQUEsT0FBQSxPQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLFFBQUEsV0FBQTtNQUNBLFFBQUE7TUFDQSxPQUFBOztJQUVBLEdBQUEsT0FBQSxLQUFBLFVBQUE7SUFDQSxPQUFBLFlBQUEsT0FBQSxNQUFBLElBQUEsSUFBQSxtQkFBQTs7O0VBR0EsU0FBQSxtQkFBQSxVQUFBO0lBQ0EsT0FBQSxTQUFBLFdBQUEsSUFBQSxTQUFBLE9BQUEsU0FBQTtNQUNBLFNBQUEsU0FBQSxPQUFBLFVBQUE7UUFDQTs7O0VBR0EsU0FBQSxrQkFBQSxTQUFBO0lBQ0EsSUFBQSxPQUFBLFFBQUE7SUFDQSxPQUFBLFFBQUEsU0FBQSxTQUFBLFFBQUEsV0FBQSxRQUFBOztFQUVBLEdBQUEsTUFBQSxTQUFBLFdBQUEsVUFBQTtJQUNBLElBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxZQUFBO01BQ0EsZ0JBQUEsVUFBQSxXQUFBOztJQUVBLFNBQUEsSUFBQSxLQUFBLEtBQUEsVUFBQTtNQUNBLElBQUEsVUFBQSxTQUFBLEdBQUEsV0FBQSxLQUFBLE1BQUE7TUFDQSxJQUFBLE1BQUEsT0FBQSxLQUFBLFVBQUEsT0FBQSxPQUFBO1FBQ0EsY0FBQSxNQUFBO01BQ0EsSUFBQSxNQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsVUFBQSxTQUFBLElBQUEsU0FBQSxDQUFBLE1BQUEsTUFBQTtVQUNBLFdBQUEsY0FBQSxNQUFBOztNQUVBLE9BQUE7OztJQUdBLFNBQUEsU0FBQSxTQUFBO01BQ0EsT0FBQSxJQUFBLE1BQUEsUUFBQTs7O0lBR0EsU0FBQSxjQUFBLEdBQUE7TUFDQSxPQUFBLFNBQUEsU0FBQTtRQUNBLE9BQUEsSUFBQSxNQUFBLFFBQUEsY0FBQTs7O0lBR0EsSUFBQSxRQUFBLFNBQUEsTUFBQSxHQUFBO01BQ0EsSUFBQTtNQUNBLE9BQUEsSUFBQSxVQUFBLE1BQUEsU0FBQSxLQUFBLEdBQUE7UUFDQSxJQUFBLEdBQUEsT0FBQSxFQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsSUFBQSxJQUFBLFNBQUEsS0FBQSxhQUFBLElBQUEsSUFBQTtVQUNBLE1BQUEsR0FBQTtVQUNBLE9BQUEsS0FBQSxVQUFBLFFBQUEsU0FBQSxJQUFBO1dBQ0EsS0FBQSxPQUFBO1FBQ0EsSUFBQSxJQUFBLFNBQUEsS0FBQSxHQUFBO1VBQ0EsT0FBQSxFQUFBLEVBQUEsTUFBQTtZQUNBOzs7SUFHQSxJQUFBLFlBQUEsU0FBQSxNQUFBLEdBQUE7TUFDQSxJQUFBLE1BQUE7UUFDQSxNQUFBO1FBQ0EsT0FBQTtRQUNBLElBQUEsS0FBQTtRQUNBLElBQUE7UUFDQSxJQUFBO1FBQ0EsR0FBQTs7TUFFQSxTQUFBLFFBQUE7UUFDQSxJQUFBLEtBQUEsR0FBQSxPQUFBO1FBQ0EsSUFBQSxLQUFBLE9BQUEsTUFBQSxPQUFBO1FBQ0EsSUFBQSxJQUFBO1FBQ0EsSUFBQSxLQUFBLFdBQUEsT0FBQSxJQUFBO1VBQ0EsSUFBQSxJQUFBO1VBQ0EsT0FBQSxNQUFBLEdBQUE7WUFDQSxJQUFBLEtBQUEsV0FBQSxPQUFBLElBQUE7Y0FDQSxJQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsSUFBQTtjQUNBLEVBQUE7OztVQUdBLElBQUEsSUFBQTtVQUNBLElBQUEsSUFBQSxLQUFBLFdBQUEsSUFBQTtVQUNBLElBQUEsTUFBQSxJQUFBO1lBQ0EsTUFBQTtZQUNBLElBQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxJQUFBLEVBQUE7aUJBQ0EsSUFBQSxNQUFBLElBQUE7WUFDQSxNQUFBOztVQUVBLE9BQUEsS0FBQSxNQUFBLElBQUEsR0FBQSxHQUFBLFFBQUEsT0FBQTs7UUFFQSxPQUFBLElBQUEsR0FBQTtVQUNBLElBQUEsSUFBQSxLQUFBLFdBQUE7WUFDQSxJQUFBO1VBQ0EsSUFBQSxNQUFBLElBQUEsTUFBQTtlQUNBLElBQUEsTUFBQSxJQUFBO1lBQ0EsTUFBQTtZQUNBLElBQUEsS0FBQSxXQUFBLE9BQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTtpQkFDQSxJQUFBLE1BQUEsZUFBQTtVQUNBLE9BQUEsS0FBQSxNQUFBLEdBQUEsSUFBQTs7UUFFQSxPQUFBLEtBQUEsTUFBQTs7TUFFQSxPQUFBLENBQUEsSUFBQSxhQUFBLEtBQUE7UUFDQSxJQUFBLElBQUE7UUFDQSxPQUFBLE1BQUEsT0FBQSxNQUFBLEtBQUE7VUFDQSxFQUFBLEtBQUE7VUFDQSxJQUFBOztRQUVBLElBQUEsS0FBQSxDQUFBLElBQUEsRUFBQSxHQUFBLFNBQUEsTUFBQTtRQUNBLEtBQUEsS0FBQTs7TUFFQSxPQUFBOztJQUVBLElBQUEsU0FBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLE1BQUEsUUFBQSxLQUFBLEtBQUEsT0FBQSxJQUFBLFdBQUE7TUFDQSxJQUFBLFdBQUEsSUFBQTtRQUNBLFNBQUE7TUFDQSxLQUFBLFFBQUEsU0FBQSxLQUFBO1FBQ0EsS0FBQSxJQUFBLFNBQUEsS0FBQTtVQUNBLElBQUEsQ0FBQSxTQUFBLElBQUEsUUFBQTtZQUNBLE9BQUEsS0FBQSxTQUFBLElBQUE7Ozs7TUFJQSxPQUFBLENBQUEsT0FBQSxJQUFBLGFBQUEsS0FBQSxZQUFBLE9BQUEsS0FBQTtRQUNBLFNBQUEsS0FBQTtVQUNBLE9BQUEsT0FBQSxJQUFBLFNBQUEsT0FBQTtZQUNBLE9BQUEsWUFBQSxJQUFBO2FBQ0EsS0FBQTtZQUNBLEtBQUE7O0lBRUEsSUFBQSxhQUFBLFNBQUEsTUFBQTtNQUNBLE9BQUEsS0FBQSxJQUFBLFdBQUEsS0FBQTs7O0lBR0EsU0FBQSxVQUFBLEtBQUE7TUFDQSxPQUFBLElBQUEsSUFBQSxhQUFBLEtBQUE7OztJQUdBLFNBQUEsWUFBQSxNQUFBO01BQ0EsT0FBQSxTQUFBLEtBQUEsUUFBQSxNQUFBLEtBQUEsUUFBQSxPQUFBLFFBQUE7UUFDQTs7SUFFQSxPQUFBOztFQUVBLEdBQUEsTUFBQSxHQUFBLElBQUEsS0FBQTtFQUNBLEdBQUEsTUFBQSxHQUFBLElBQUEsS0FBQTtFQUNBLElBQUEsb0JBQUEsb0JBQUE7SUFDQSxrQkFBQSxpQkFBQSxpQkFBQTtNQUNBLGdCQUFBLFdBQUEsNkJBQUE7TUFDQSxVQUFBO01BQ0EsV0FBQSxVQUFBOztFQUVBLEdBQUEsUUFBQSxTQUFBLFVBQUEsT0FBQSxNQUFBO0lBQ0EsSUFBQSxJQUFBLFVBQUE7SUFDQSxJQUFBLElBQUEsR0FBQSxRQUFBO0lBQ0EsSUFBQSxJQUFBLEdBQUEsT0FBQSxLQUFBO0lBQ0EsSUFBQSxPQUFBLE9BQUE7TUFDQSxRQUFBO1FBQ0EsR0FBQTtRQUNBLEdBQUE7UUFDQSxHQUFBO1FBQ0EsR0FBQTs7SUFFQSxJQUFBLG9CQUFBLG1CQUFBLElBQUE7U0FDQSxxQkFBQTtJQUNBLHFCQUFBO0lBQ0EsSUFBQSxDQUFBLG1CQUFBO01BQ0EsbUJBQUEsYUFBQTtNQUNBLG9CQUFBO01BQ0EsZUFBQTs7OztFQUlBLFNBQUEsZ0JBQUE7SUFDQSxJQUFBLE1BQUE7TUFDQSxRQUFBLG1CQUFBO0lBQ0EsSUFBQSxRQUFBLElBQUE7TUFDQSxJQUFBLFNBQUEsUUFBQTtRQUNBLGFBQUE7UUFDQSxtQkFBQSxXQUFBLGVBQUE7O01BRUEsb0JBQUE7V0FDQTtNQUNBLG9CQUFBO01BQ0EsZUFBQTs7O0VBR0EsR0FBQSxNQUFBLFFBQUEsV0FBQTtJQUNBO0lBQ0E7OztFQUdBLFNBQUEsZ0JBQUE7SUFDQSxJQUFBLE1BQUEsS0FBQTtJQUNBLGtCQUFBO0lBQ0EsT0FBQSxpQkFBQTtNQUNBLElBQUEsT0FBQSxnQkFBQSxHQUFBLGdCQUFBLElBQUEsZ0JBQUE7UUFDQSxNQUFBLGdCQUFBO01BQ0Esa0JBQUEsZ0JBQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSxpQkFBQTtJQUNBLElBQUEsSUFBQSxLQUFBO01BQ0EsT0FBQTtJQUNBLE9BQUEsSUFBQTtNQUNBLElBQUEsR0FBQSxHQUFBO1FBQ0EsS0FBQSxLQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEscUJBQUEsR0FBQTthQUNBO1FBQ0EsSUFBQSxHQUFBLElBQUEsTUFBQSxPQUFBLEdBQUE7UUFDQSxLQUFBLENBQUEsS0FBQSxJQUFBOzs7SUFHQSxxQkFBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsb0JBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxLQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsUUFBQTs7RUFFQSxHQUFBLFFBQUEsU0FBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLElBQUEsS0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxPQUFBLElBQUEsS0FBQSxNQUFBOztFQUVBLElBQUEsb0JBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQTtJQUNBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO0lBQ0EsSUFBQTtFQUNBLEdBQUEsZUFBQSxTQUFBLE9BQUEsV0FBQTtJQUNBLElBQUEsSUFBQTtJQUNBLElBQUEsT0FBQTtNQUNBLElBQUEsUUFBQSxHQUFBLFNBQUEsQ0FBQTtNQUNBLElBQUEsV0FBQSxRQUFBLEdBQUEsTUFBQSxPQUFBLG9CQUFBO1FBQ0E7TUFDQSxJQUFBLElBQUEsS0FBQSxNQUFBLFFBQUEsS0FBQSxJQUFBLFNBQUEsS0FBQTtNQUNBLElBQUEsS0FBQSxJQUFBLENBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxLQUFBLE1BQUEsQ0FBQSxJQUFBLEtBQUEsS0FBQTs7SUFFQSxPQUFBLGtCQUFBLElBQUEsSUFBQTs7O0VBR0EsU0FBQSxnQkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUE7SUFDQSxPQUFBO01BQ0EsT0FBQSxJQUFBLElBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxJQUFBO1VBQ0EsU0FBQSxHQUFBO1FBQ0EsT0FBQSxJQUFBOztNQUVBLFFBQUE7Ozs7RUFJQSxTQUFBLHVCQUFBLFFBQUE7SUFDQSxJQUFBLGlCQUFBLE9BQUE7TUFDQSxtQkFBQSxPQUFBO01BQ0Esa0JBQUEsT0FBQTtNQUNBLGtCQUFBLE9BQUE7TUFDQSxjQUFBLG1CQUFBLG1CQUFBLFNBQUE7UUFDQSxPQUFBO1FBQ0EsSUFBQSxJQUFBLE1BQUE7VUFDQSxJQUFBO1VBQ0EsSUFBQTtVQUNBLElBQUEsZ0JBQUE7VUFDQSxTQUFBO1FBQ0EsT0FBQSxJQUFBLEtBQUEsSUFBQSxHQUFBO1VBQ0EsSUFBQSxTQUFBLElBQUEsSUFBQSxPQUFBLElBQUEsS0FBQSxJQUFBLEdBQUEsUUFBQTtVQUNBLEVBQUEsS0FBQSxNQUFBLFVBQUEsS0FBQSxHQUFBLElBQUE7VUFDQSxJQUFBLENBQUEsVUFBQSxJQUFBLEtBQUEsT0FBQTtVQUNBLElBQUEsZ0JBQUEsSUFBQSxDQUFBLElBQUEsS0FBQSxnQkFBQTs7UUFFQSxPQUFBLEVBQUEsVUFBQSxLQUFBO1VBQ0E7SUFDQSxPQUFBLFNBQUEsV0FBQTtNQUNBLElBQUEsUUFBQSxhQUFBLEtBQUE7UUFDQSxPQUFBLE1BQUEsTUFBQTtRQUNBLFFBQUEsTUFBQSxNQUFBO1FBQ0EsT0FBQSxNQUFBLE1BQUE7UUFDQSxTQUFBLE1BQUEsTUFBQTtRQUNBLFFBQUEsTUFBQTtRQUNBLFFBQUEsQ0FBQSxNQUFBO1FBQ0EsUUFBQSxNQUFBO1FBQ0EsWUFBQSxNQUFBO1FBQ0EsT0FBQSxNQUFBO1FBQ0EsUUFBQTtRQUNBLFNBQUE7UUFDQSxTQUFBO1FBQ0EsVUFBQTtRQUNBLFdBQUE7TUFDQSxJQUFBLFdBQUEsWUFBQSxDQUFBLFVBQUEsVUFBQTtNQUNBLElBQUEsU0FBQSxTQUFBLE9BQUEsVUFBQSxLQUFBO1FBQ0EsUUFBQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxRQUFBO1FBQ0EsS0FBQTtVQUNBLFFBQUE7VUFDQSxPQUFBO1VBQ0E7O1FBRUEsS0FBQTtVQUNBLFFBQUE7VUFDQSxTQUFBO1VBQ0EsT0FBQTtVQUNBOztRQUVBLEtBQUE7VUFDQSxRQUFBO1VBQ0EsU0FBQTtVQUNBLE9BQUE7VUFDQTs7UUFFQSxLQUFBO1FBQ0EsS0FBQTtRQUNBLEtBQUE7UUFDQSxLQUFBO1VBQ0EsSUFBQSxXQUFBLEtBQUEsU0FBQSxNQUFBLEtBQUE7O1FBRUEsS0FBQTtVQUNBLFdBQUE7O1FBRUEsS0FBQTtVQUNBLFVBQUE7VUFDQSxZQUFBO1VBQ0E7O1FBRUEsS0FBQTtVQUNBLFFBQUEsQ0FBQTtVQUNBLE9BQUE7VUFDQTs7TUFFQSxJQUFBLFdBQUEsS0FBQSxTQUFBLGdCQUFBLElBQUE7UUFDQSxnQkFBQTtNQUNBLElBQUEsUUFBQSxPQUFBLENBQUEsV0FBQSxPQUFBO01BQ0EsSUFBQSxhQUFBLE1BQUE7UUFDQSxJQUFBLFFBQUEsS0FBQSxZQUFBLEtBQUEsSUFBQSxHQUFBLEtBQUEsSUFBQSxJQUFBO2FBQ0EsSUFBQSxRQUFBLE9BQUEsUUFBQSxLQUFBLFlBQUEsS0FBQSxJQUFBLEdBQUE7V0FDQSxJQUFBLElBQUE7O01BRUEsT0FBQSxnQkFBQSxJQUFBLFNBQUE7TUFDQSxJQUFBLFNBQUEsU0FBQTtNQUNBLE9BQUEsU0FBQSxPQUFBO1FBQ0EsSUFBQSxhQUFBO1FBQ0EsSUFBQSxXQUFBLFFBQUEsR0FBQSxPQUFBO1FBQ0EsSUFBQSxXQUFBLFFBQUEsS0FBQSxVQUFBLEtBQUEsSUFBQSxRQUFBO1VBQ0EsUUFBQSxDQUFBLE9BQUEsT0FBQSxTQUFBLE1BQUEsS0FBQTtRQUNBLElBQUEsUUFBQSxHQUFBO1VBQ0EsSUFBQSxPQUFBLEdBQUEsYUFBQSxPQUFBO1VBQ0EsUUFBQSxLQUFBLE1BQUE7VUFDQSxhQUFBLEtBQUEsU0FBQTtlQUNBO1VBQ0EsU0FBQTs7UUFFQSxRQUFBLEtBQUEsT0FBQTtRQUNBLElBQUEsSUFBQSxNQUFBLFlBQUE7VUFDQSxRQUFBO1FBQ0EsSUFBQSxJQUFBLEdBQUE7VUFDQSxJQUFBLElBQUEsV0FBQSxNQUFBLFlBQUEsT0FBQSxDQUFBO1VBQ0EsSUFBQSxJQUFBLEdBQUEsU0FBQSxPQUFBLFFBQUE7ZUFDQSxTQUFBLE1BQUEsVUFBQSxHQUFBLElBQUEsUUFBQSxNQUFBO1lBQ0E7ZUFDQTtVQUNBLFNBQUEsTUFBQSxVQUFBLEdBQUE7VUFDQSxRQUFBLGlCQUFBLE1BQUEsVUFBQSxJQUFBOztRQUVBLElBQUEsQ0FBQSxTQUFBLE9BQUEsU0FBQSxZQUFBLFFBQUE7UUFDQSxJQUFBLFNBQUEsT0FBQSxTQUFBLE9BQUEsU0FBQSxNQUFBO1lBQ0EsU0FBQSxJQUFBLFNBQUE7VUFDQSxVQUFBLFNBQUEsUUFBQSxJQUFBLE1BQUEsU0FBQSxRQUFBO1lBQ0EsR0FBQSxLQUFBLFFBQUE7UUFDQSxJQUFBLFFBQUEsU0FBQSxZQUFBLFVBQUEsUUFBQSxRQUFBO1VBQ0EsUUFBQSxNQUFBLFNBQUE7UUFDQSxZQUFBO1FBQ0EsUUFBQSxTQUFBO1FBQ0EsT0FBQSxDQUFBLFVBQUEsTUFBQSxXQUFBLFFBQUEsVUFBQTtZQUNBLE1BQUEsVUFBQSxXQUFBLFFBQUEsVUFBQSxNQUFBLFFBQUE7Y0FDQSxHQUFBLFdBQUEsS0FBQSxXQUFBLFFBQUEsUUFBQTtjQUNBLFVBQUEsWUFBQSxTQUFBLFFBQUEsVUFBQTtVQUNBOzs7O0VBSUEsSUFBQTtJQUNBO0VBQ0EsSUFBQSxrQkFBQSxHQUFBLElBQUE7SUFDQSxHQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxTQUFBOztJQUVBLEdBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxPQUFBLGFBQUE7O0lBRUEsR0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUEsU0FBQTs7SUFFQSxHQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxTQUFBOztJQUVBLEdBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLFNBQUEsSUFBQTs7SUFFQSxHQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLFlBQUE7O0lBRUEsR0FBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxjQUFBOztJQUVBLEdBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUEsUUFBQTs7SUFFQSxHQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxDQUFBLElBQUEsR0FBQSxNQUFBLEdBQUEsb0JBQUEsR0FBQSxLQUFBO1FBQ0EsS0FBQSxJQUFBLEdBQUEsS0FBQSxJQUFBLElBQUEsb0JBQUEsS0FBQSxJQUFBO1VBQ0E7Ozs7RUFJQSxTQUFBLHNCQUFBLEdBQUE7SUFDQSxPQUFBLElBQUE7O0VBRUEsSUFBQSxVQUFBLEdBQUEsT0FBQTtJQUNBLFVBQUE7O0VBRUEsU0FBQSxjQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsS0FBQSxVQUFBLFNBQUEsSUFBQSxLQUFBLElBQUEsTUFBQSxNQUFBO01BQ0EsVUFBQTs7RUFFQSxZQUFBLFlBQUE7SUFDQSxTQUFBLFdBQUE7TUFDQSxPQUFBLEtBQUEsRUFBQTs7SUFFQSxRQUFBLFdBQUE7TUFDQSxPQUFBLEtBQUEsRUFBQTs7SUFFQSxhQUFBLFdBQUE7TUFDQSxPQUFBLEtBQUEsRUFBQTs7SUFFQSxVQUFBLFdBQUE7TUFDQSxPQUFBLEtBQUEsRUFBQTs7SUFFQSxpQkFBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUE7O0lBRUEsWUFBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUE7O0lBRUEsVUFBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUE7O0lBRUEsWUFBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUE7O0lBRUEsU0FBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUE7O0lBRUEsbUJBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsU0FBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLEVBQUE7O0lBRUEsU0FBQSxXQUFBO01BQ0Esa0JBQUEsV0FBQSxNQUFBLEtBQUEsR0FBQTs7SUFFQSxRQUFBLFdBQUE7TUFDQSxrQkFBQSxVQUFBLE1BQUEsS0FBQSxHQUFBOztJQUVBLGFBQUEsV0FBQTtNQUNBLGtCQUFBLGVBQUEsTUFBQSxLQUFBLEdBQUE7O0lBRUEsVUFBQSxXQUFBO01BQ0Esa0JBQUEsWUFBQSxNQUFBLEtBQUEsR0FBQTs7SUFFQSxpQkFBQSxXQUFBO01BQ0Esa0JBQUEsbUJBQUEsTUFBQSxLQUFBLEdBQUE7O0lBRUEsWUFBQSxXQUFBO01BQ0Esa0JBQUEsY0FBQSxNQUFBLEtBQUEsR0FBQTs7SUFFQSxVQUFBLFdBQUE7TUFDQSxrQkFBQSxZQUFBLE1BQUEsS0FBQSxHQUFBOztJQUVBLFlBQUEsV0FBQTtNQUNBLGtCQUFBLGNBQUEsTUFBQSxLQUFBLEdBQUE7O0lBRUEsU0FBQSxXQUFBO01BQ0Esa0JBQUEsUUFBQSxNQUFBLEtBQUEsR0FBQTs7O0VBR0EsSUFBQSxvQkFBQSxLQUFBOztFQUVBLFNBQUEsaUJBQUEsT0FBQSxNQUFBLFFBQUE7SUFDQSxTQUFBLE1BQUEsTUFBQTtNQUNBLElBQUEsS0FBQSxNQUFBO1FBQ0EsS0FBQSxPQUFBLElBQUE7TUFDQSxPQUFBLE9BQUEsS0FBQSxLQUFBLE9BQUEsS0FBQTs7O0lBR0EsU0FBQSxLQUFBLE1BQUE7TUFDQSxLQUFBLE9BQUEsTUFBQSxJQUFBLFFBQUEsT0FBQSxLQUFBO01BQ0EsT0FBQTs7O0lBR0EsU0FBQSxPQUFBLE1BQUEsR0FBQTtNQUNBLEtBQUEsT0FBQSxJQUFBLFFBQUEsQ0FBQSxPQUFBO01BQ0EsT0FBQTs7O0lBR0EsU0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBO01BQ0EsSUFBQSxPQUFBLEtBQUE7UUFDQSxRQUFBO01BQ0EsSUFBQSxLQUFBLEdBQUE7UUFDQSxPQUFBLE9BQUEsSUFBQTtVQUNBLElBQUEsRUFBQSxPQUFBLFFBQUEsS0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUE7VUFDQSxLQUFBLE1BQUE7O2FBRUE7UUFDQSxPQUFBLE9BQUEsSUFBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsUUFBQSxLQUFBLE1BQUE7O01BRUEsT0FBQTs7O0lBR0EsU0FBQSxVQUFBLElBQUEsSUFBQSxJQUFBO01BQ0EsSUFBQTtRQUNBLFVBQUE7UUFDQSxJQUFBLE1BQUEsSUFBQTtRQUNBLElBQUEsSUFBQTtRQUNBLE9BQUEsTUFBQSxLQUFBLElBQUE7Z0JBQ0E7UUFDQSxVQUFBOzs7SUFHQSxNQUFBLFFBQUE7SUFDQSxNQUFBLFFBQUE7SUFDQSxNQUFBLE9BQUE7SUFDQSxNQUFBLFNBQUE7SUFDQSxNQUFBLFFBQUE7SUFDQSxJQUFBLE1BQUEsTUFBQSxNQUFBLHFCQUFBO0lBQ0EsSUFBQSxRQUFBO0lBQ0EsSUFBQSxRQUFBLHFCQUFBO0lBQ0EsSUFBQSxPQUFBLHFCQUFBO0lBQ0EsSUFBQSxTQUFBLHFCQUFBO0lBQ0EsSUFBQSxRQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSxxQkFBQSxRQUFBO0lBQ0EsT0FBQSxTQUFBLE1BQUEsR0FBQTtNQUNBLElBQUE7UUFDQSxVQUFBO1FBQ0EsSUFBQSxNQUFBLElBQUE7UUFDQSxJQUFBLElBQUE7UUFDQSxPQUFBLE9BQUEsS0FBQSxHQUFBO2dCQUNBO1FBQ0EsVUFBQTs7OztFQUlBLFFBQUEsT0FBQSxpQkFBQSxTQUFBLE1BQUE7SUFDQSxPQUFBLFFBQUEsSUFBQTtJQUNBLEtBQUEsU0FBQSxHQUFBO0lBQ0EsT0FBQTtLQUNBLFNBQUEsTUFBQSxRQUFBO0lBQ0EsS0FBQSxZQUFBLEtBQUEsZ0JBQUE7S0FDQSxTQUFBLE1BQUE7SUFDQSxPQUFBLEtBQUE7O0VBRUEsUUFBQSxRQUFBLFFBQUEsS0FBQTtFQUNBLFFBQUEsTUFBQSxNQUFBLFFBQUEsS0FBQSxJQUFBO0VBQ0EsUUFBQSxNQUFBLGlCQUFBLFNBQUEsTUFBQTtJQUNBLElBQUEsTUFBQSxJQUFBLFFBQUEsS0FBQTtJQUNBLElBQUEsWUFBQSxLQUFBLGVBQUEsS0FBQSxZQUFBLEtBQUE7SUFDQSxPQUFBO0tBQ0EsU0FBQSxNQUFBLFFBQUE7SUFDQSxLQUFBLFFBQUEsS0FBQSxZQUFBO0tBQ0EsU0FBQSxNQUFBO0lBQ0EsT0FBQSxLQUFBLFlBQUE7O0VBRUEsUUFBQSxPQUFBLFFBQUEsSUFBQTtFQUNBLFFBQUEsS0FBQSxNQUFBLFFBQUEsSUFBQSxJQUFBO0VBQ0EsUUFBQSxZQUFBLFNBQUEsTUFBQTtJQUNBLElBQUEsT0FBQSxRQUFBLEtBQUE7SUFDQSxPQUFBLEtBQUEsTUFBQSxDQUFBLE9BQUEsT0FBQSxDQUFBLEtBQUEsc0JBQUEsS0FBQTtNQUNBLE9BQUE7O0VBRUEsQ0FBQSxVQUFBLFVBQUEsV0FBQSxhQUFBLFlBQUE7SUFDQTtJQUNBLFFBQUEsU0FBQSxLQUFBLEdBQUE7SUFDQSxJQUFBLElBQUE7SUFDQSxJQUFBLFdBQUEsUUFBQSxPQUFBLGlCQUFBLFNBQUEsTUFBQTtNQUNBLENBQUEsT0FBQSxRQUFBLElBQUEsT0FBQSxRQUFBLEtBQUEsWUFBQSxDQUFBLEtBQUE7UUFDQSxLQUFBO01BQ0EsT0FBQTtPQUNBLFNBQUEsTUFBQSxRQUFBO01BQ0EsS0FBQSxRQUFBLEtBQUEsWUFBQSxLQUFBLE1BQUEsVUFBQTtPQUNBLFNBQUEsTUFBQTtNQUNBLElBQUEsTUFBQSxRQUFBLEtBQUEsTUFBQTtNQUNBLE9BQUEsS0FBQSxNQUFBLENBQUEsUUFBQSxVQUFBLFFBQUEsQ0FBQSxNQUFBLEtBQUE7UUFDQSxNQUFBLFFBQUE7O0lBRUEsUUFBQSxNQUFBLE9BQUEsU0FBQTtJQUNBLFFBQUEsTUFBQSxLQUFBLE1BQUEsU0FBQSxJQUFBO0lBQ0EsUUFBQSxNQUFBLFlBQUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxNQUFBLFFBQUEsS0FBQSxNQUFBO01BQ0EsT0FBQSxLQUFBLE1BQUEsQ0FBQSxRQUFBLFVBQUEsUUFBQSxDQUFBLE1BQUEsS0FBQSxLQUFBOzs7RUFHQSxRQUFBLE9BQUEsUUFBQTtFQUNBLFFBQUEsUUFBQSxRQUFBLE9BQUE7RUFDQSxRQUFBLE1BQUEsTUFBQSxRQUFBLE9BQUEsSUFBQTtFQUNBLFFBQUEsYUFBQSxRQUFBOztFQUVBLFNBQUEscUJBQUEsUUFBQTtJQUNBLElBQUEsa0JBQUEsT0FBQTtNQUNBLGNBQUEsT0FBQTtNQUNBLGNBQUEsT0FBQTtNQUNBLGlCQUFBLE9BQUE7TUFDQSxjQUFBLE9BQUE7TUFDQSxtQkFBQSxPQUFBO01BQ0EsZ0JBQUEsT0FBQTtNQUNBLHFCQUFBLE9BQUE7O0lBRUEsU0FBQSxlQUFBLFVBQUE7TUFDQSxJQUFBLElBQUEsU0FBQTs7TUFFQSxTQUFBLE9BQUEsTUFBQTtRQUNBLElBQUEsU0FBQTtVQUNBLElBQUEsQ0FBQTtVQUNBLElBQUE7VUFDQSxHQUFBLEdBQUE7UUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1VBQ0EsSUFBQSxTQUFBLFdBQUEsT0FBQSxJQUFBO1lBQ0EsT0FBQSxLQUFBLFNBQUEsTUFBQSxHQUFBO1lBQ0EsSUFBQSxDQUFBLElBQUEsbUJBQUEsSUFBQSxTQUFBLE9BQUEsRUFBQSxRQUFBO2NBQ0EsSUFBQSxTQUFBLE9BQUEsRUFBQTtZQUNBLElBQUEsSUFBQSxnQkFBQSxJQUFBLElBQUEsRUFBQSxNQUFBLEtBQUEsT0FBQSxNQUFBO2NBQ0EsTUFBQSxNQUFBO1lBQ0EsT0FBQSxLQUFBO1lBQ0EsSUFBQSxJQUFBOzs7UUFHQSxPQUFBLEtBQUEsU0FBQSxNQUFBLEdBQUE7UUFDQSxPQUFBLE9BQUEsS0FBQTs7TUFFQSxPQUFBLFFBQUEsU0FBQSxRQUFBO1FBQ0EsSUFBQSxJQUFBO1lBQ0EsR0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBO1lBQ0EsR0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBO1lBQ0EsR0FBQTtZQUNBLEdBQUE7O1VBRUEsSUFBQSxjQUFBLEdBQUEsVUFBQSxRQUFBO1FBQ0EsSUFBQSxLQUFBLE9BQUEsUUFBQSxPQUFBO1FBQ0EsSUFBQSxPQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxLQUFBLEVBQUEsSUFBQTtRQUNBLElBQUEsU0FBQSxFQUFBLEtBQUEsUUFBQSxZQUFBO1VBQ0EsT0FBQSxJQUFBLFNBQUEsY0FBQTtRQUNBLElBQUEsT0FBQSxHQUFBLEtBQUEsWUFBQSxFQUFBLEdBQUEsR0FBQSxFQUFBO2FBQ0EsSUFBQSxPQUFBLE1BQUEsT0FBQSxLQUFBLE9BQUEsSUFBQTtVQUNBLEtBQUEsWUFBQSxFQUFBLEdBQUEsR0FBQTtVQUNBLEtBQUEsWUFBQSxFQUFBLEdBQUEsR0FBQSxPQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsS0FBQSxJQUFBLEVBQUEsSUFBQSxJQUFBO1lBQ0EsS0FBQSxXQUFBLEtBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLElBQUEsQ0FBQSxLQUFBO1lBQ0EsS0FBQTtlQUNBLEtBQUEsWUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7UUFDQSxLQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxNQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBO1FBQ0EsT0FBQSxTQUFBLEtBQUEsSUFBQTs7TUFFQSxPQUFBLFdBQUEsV0FBQTtRQUNBLE9BQUE7O01BRUEsT0FBQTs7O0lBR0EsU0FBQSxjQUFBLE1BQUEsVUFBQSxRQUFBLEdBQUE7TUFDQSxJQUFBLEdBQUEsR0FBQSxHQUFBLElBQUE7UUFDQSxJQUFBLFNBQUE7UUFDQSxJQUFBLE9BQUE7TUFDQSxPQUFBLElBQUEsR0FBQTtRQUNBLElBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQTtRQUNBLElBQUEsU0FBQSxXQUFBO1FBQ0EsSUFBQSxNQUFBLElBQUE7VUFDQSxJQUFBLFNBQUEsT0FBQTtVQUNBLElBQUEsZ0JBQUEsS0FBQSxxQkFBQSxTQUFBLE9BQUE7WUFDQTtVQUNBLElBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxFQUFBLE1BQUEsUUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBO2VBQ0EsSUFBQSxLQUFBLE9BQUEsV0FBQSxNQUFBO1VBQ0EsT0FBQSxDQUFBOzs7TUFHQSxPQUFBOztJQUVBLGVBQUEsTUFBQSxTQUFBLFVBQUE7TUFDQSxJQUFBLFFBQUEsZUFBQTs7TUFFQSxTQUFBLE9BQUEsTUFBQTtRQUNBLElBQUE7VUFDQSxVQUFBO1VBQ0EsSUFBQSxNQUFBLElBQUE7VUFDQSxJQUFBLElBQUE7VUFDQSxPQUFBLE1BQUE7a0JBQ0E7VUFDQSxVQUFBOzs7TUFHQSxPQUFBLFFBQUEsU0FBQSxRQUFBO1FBQ0EsSUFBQTtVQUNBLFVBQUE7VUFDQSxJQUFBLE9BQUEsTUFBQSxNQUFBO1VBQ0EsT0FBQSxRQUFBLEtBQUE7a0JBQ0E7VUFDQSxVQUFBOzs7TUFHQSxPQUFBLFdBQUEsTUFBQTtNQUNBLE9BQUE7O0lBRUEsZUFBQSxRQUFBLGVBQUEsSUFBQSxRQUFBO0lBQ0EsSUFBQSx1QkFBQSxHQUFBO01BQ0EsZ0JBQUEsaUJBQUE7TUFDQSxvQkFBQSxxQkFBQTtNQUNBLHNCQUFBLGlCQUFBO01BQ0EsMEJBQUEscUJBQUE7TUFDQSxrQkFBQSxpQkFBQTtNQUNBLHNCQUFBLHFCQUFBO01BQ0Esd0JBQUEsaUJBQUE7TUFDQSw0QkFBQSxxQkFBQTtJQUNBLGVBQUEsUUFBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLHFCQUFBLElBQUEsRUFBQSxlQUFBOztJQUVBLElBQUEsa0JBQUE7TUFDQSxHQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsaUJBQUEsRUFBQTs7TUFFQSxHQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsWUFBQSxFQUFBOztNQUVBLEdBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxtQkFBQSxFQUFBOztNQUVBLEdBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxjQUFBLEVBQUE7O01BRUEsR0FBQSxlQUFBO01BQ0EsR0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsa0JBQUEsRUFBQSxXQUFBLEdBQUE7O01BRUEsR0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsa0JBQUEsRUFBQSxXQUFBLEdBQUE7O01BRUEsR0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsa0JBQUEsRUFBQSxZQUFBLEdBQUE7O01BRUEsR0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsa0JBQUEsRUFBQSxhQUFBLE1BQUEsSUFBQSxHQUFBOztNQUVBLEdBQUEsU0FBQSxHQUFBLEdBQUE7UUFDQSxPQUFBLGtCQUFBLElBQUEsUUFBQSxVQUFBLElBQUEsR0FBQTs7TUFFQSxHQUFBLFNBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxrQkFBQSxFQUFBLG1CQUFBLEdBQUE7O01BRUEsR0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsa0JBQUEsRUFBQSxhQUFBLEdBQUEsR0FBQTs7TUFFQSxHQUFBLFNBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxrQkFBQSxFQUFBLGNBQUEsR0FBQTs7TUFFQSxHQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsZUFBQSxFQUFBLEVBQUEsY0FBQTs7TUFFQSxHQUFBLFNBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxrQkFBQSxFQUFBLGNBQUEsR0FBQTs7TUFFQSxHQUFBLFNBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxrQkFBQSxRQUFBLGFBQUEsSUFBQSxHQUFBOztNQUVBLEdBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxFQUFBOztNQUVBLEdBQUEsU0FBQSxHQUFBLEdBQUE7UUFDQSxPQUFBLGtCQUFBLFFBQUEsYUFBQSxJQUFBLEdBQUE7O01BRUEsR0FBQSxlQUFBO01BQ0EsR0FBQSxlQUFBO01BQ0EsR0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsa0JBQUEsRUFBQSxnQkFBQSxLQUFBLEdBQUE7O01BRUEsR0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsa0JBQUEsRUFBQSxnQkFBQSxLQUFBLEdBQUE7O01BRUEsR0FBQTtNQUNBLEtBQUEsV0FBQTtRQUNBLE9BQUE7OztJQUdBLElBQUEsa0JBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEtBQUE7OztJQUdBLFNBQUEsMkJBQUEsTUFBQSxRQUFBLEdBQUE7TUFDQSxvQkFBQSxZQUFBO01BQ0EsSUFBQSxJQUFBLG9CQUFBLEtBQUEsT0FBQSxNQUFBO01BQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSx3QkFBQSxJQUFBLEVBQUEsR0FBQTtRQUNBLElBQUEsRUFBQSxHQUFBLFVBQUEsQ0FBQTs7O0lBR0EsU0FBQSxxQkFBQSxNQUFBLFFBQUEsR0FBQTtNQUNBLGNBQUEsWUFBQTtNQUNBLElBQUEsSUFBQSxjQUFBLEtBQUEsT0FBQSxNQUFBO01BQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSxrQkFBQSxJQUFBLEVBQUEsR0FBQSxnQkFBQSxJQUFBO1FBQ0EsR0FBQSxVQUFBLENBQUE7OztJQUdBLFNBQUEseUJBQUEsTUFBQSxRQUFBLEdBQUE7TUFDQSxzQkFBQSxZQUFBO01BQ0EsSUFBQSxJQUFBLHNCQUFBLEtBQUEsT0FBQSxNQUFBO01BQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSwwQkFBQSxJQUFBLEVBQUEsR0FBQTtRQUNBLElBQUEsRUFBQSxHQUFBLFVBQUEsQ0FBQTs7O0lBR0EsU0FBQSxtQkFBQSxNQUFBLFFBQUEsR0FBQTtNQUNBLGdCQUFBLFlBQUE7TUFDQSxJQUFBLElBQUEsZ0JBQUEsS0FBQSxPQUFBLE1BQUE7TUFDQSxPQUFBLEtBQUEsS0FBQSxJQUFBLG9CQUFBLElBQUEsRUFBQSxHQUFBLGdCQUFBO1FBQ0EsRUFBQSxHQUFBLFVBQUEsQ0FBQTs7O0lBR0EsU0FBQSx3QkFBQSxNQUFBLFFBQUEsR0FBQTtNQUNBLE9BQUEsY0FBQSxNQUFBLGdCQUFBLEVBQUEsWUFBQSxRQUFBOzs7SUFHQSxTQUFBLHdCQUFBLE1BQUEsUUFBQSxHQUFBO01BQ0EsT0FBQSxjQUFBLE1BQUEsZ0JBQUEsRUFBQSxZQUFBLFFBQUE7OztJQUdBLFNBQUEsd0JBQUEsTUFBQSxRQUFBLEdBQUE7TUFDQSxPQUFBLGNBQUEsTUFBQSxnQkFBQSxFQUFBLFlBQUEsUUFBQTs7O0lBR0EsU0FBQSxrQkFBQSxNQUFBLFFBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxxQkFBQSxJQUFBLE9BQUEsTUFBQSxHQUFBLEtBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxPQUFBLENBQUEsS0FBQSxLQUFBLElBQUEsR0FBQTs7SUFFQSxPQUFBOztFQUVBLElBQUEscUJBQUE7TUFDQSxLQUFBO01BQ0EsR0FBQTtNQUNBLEtBQUE7O0lBRUEsbUJBQUE7SUFDQSxvQkFBQTs7RUFFQSxTQUFBLGtCQUFBLE9BQUEsTUFBQSxPQUFBO0lBQ0EsSUFBQSxPQUFBLFFBQUEsSUFBQSxNQUFBO01BQ0EsU0FBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLFNBQUE7TUFDQSxTQUFBLE9BQUE7SUFDQSxPQUFBLFFBQUEsU0FBQSxRQUFBLElBQUEsTUFBQSxRQUFBLFNBQUEsR0FBQSxLQUFBO01BQ0EsU0FBQTs7O0VBR0EsU0FBQSxpQkFBQSxPQUFBO0lBQ0EsT0FBQSxJQUFBLE9BQUEsU0FBQSxNQUFBLElBQUEsR0FBQSxTQUFBLEtBQUEsT0FBQSxLQUFBOzs7RUFHQSxTQUFBLHFCQUFBLE9BQUE7SUFDQSxJQUFBLE1BQUEsSUFBQTtNQUNBLElBQUEsQ0FBQTtNQUNBLElBQUEsTUFBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxJQUFBLE1BQUEsR0FBQSxlQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSwyQkFBQSxNQUFBLFFBQUEsR0FBQTtJQUNBLGlCQUFBLFlBQUE7SUFDQSxJQUFBLElBQUEsaUJBQUEsS0FBQSxPQUFBLE1BQUEsR0FBQSxJQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxVQUFBLENBQUE7OztFQUdBLFNBQUEsOEJBQUEsTUFBQSxRQUFBLEdBQUE7SUFDQSxpQkFBQSxZQUFBO0lBQ0EsSUFBQSxJQUFBLGlCQUFBLEtBQUEsT0FBQSxNQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxVQUFBLENBQUE7OztFQUdBLFNBQUEsOEJBQUEsTUFBQSxRQUFBLEdBQUE7SUFDQSxpQkFBQSxZQUFBO0lBQ0EsSUFBQSxJQUFBLGlCQUFBLEtBQUEsT0FBQSxNQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxVQUFBLENBQUE7OztFQUdBLFNBQUEsc0JBQUEsTUFBQSxRQUFBLEdBQUE7SUFDQSxpQkFBQSxZQUFBO0lBQ0EsSUFBQSxJQUFBLGlCQUFBLEtBQUEsT0FBQSxNQUFBLEdBQUEsSUFBQTtJQUNBLE9BQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsSUFBQSxFQUFBLEdBQUEsVUFBQSxDQUFBOzs7RUFHQSxTQUFBLGtCQUFBLE1BQUEsUUFBQSxHQUFBO0lBQ0EsaUJBQUEsWUFBQTtJQUNBLElBQUEsSUFBQSxpQkFBQSxLQUFBLE9BQUEsTUFBQSxHQUFBLElBQUE7SUFDQSxPQUFBLEtBQUEsS0FBQSxJQUFBLG1CQUFBLENBQUEsRUFBQSxLQUFBLElBQUEsRUFBQSxHQUFBLFVBQUEsQ0FBQTs7O0VBR0EsU0FBQSxrQkFBQSxNQUFBLFFBQUEsR0FBQTtJQUNBLE9BQUEsY0FBQSxLQUFBLFNBQUEsT0FBQSxNQUFBLEdBQUEsSUFBQSxPQUFBLEtBQUEsSUFBQTtNQUNBO01BQ0EsSUFBQSxLQUFBLENBQUE7OztFQUdBLFNBQUEsbUJBQUEsR0FBQTtJQUNBLE9BQUEsS0FBQSxJQUFBLEtBQUEsT0FBQTs7O0VBR0EsU0FBQSx5QkFBQSxNQUFBLFFBQUEsR0FBQTtJQUNBLGlCQUFBLFlBQUE7SUFDQSxJQUFBLElBQUEsaUJBQUEsS0FBQSxPQUFBLE1BQUEsR0FBQSxJQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSxFQUFBLEtBQUEsR0FBQSxJQUFBLEVBQUEsR0FBQSxVQUFBLENBQUE7OztFQUdBLFNBQUEsaUJBQUEsTUFBQSxRQUFBLEdBQUE7SUFDQSxpQkFBQSxZQUFBO0lBQ0EsSUFBQSxJQUFBLGlCQUFBLEtBQUEsT0FBQSxNQUFBLEdBQUEsSUFBQTtJQUNBLE9BQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsSUFBQSxFQUFBLEdBQUEsVUFBQSxDQUFBOzs7RUFHQSxTQUFBLHVCQUFBLE1BQUEsUUFBQSxHQUFBO0lBQ0EsaUJBQUEsWUFBQTtJQUNBLElBQUEsSUFBQSxpQkFBQSxLQUFBLE9BQUEsTUFBQSxHQUFBLElBQUE7SUFDQSxPQUFBLEtBQUEsS0FBQSxJQUFBLENBQUEsRUFBQSxJQUFBLElBQUEsRUFBQSxHQUFBLFVBQUEsQ0FBQTs7O0VBR0EsU0FBQSxvQkFBQSxNQUFBLFFBQUEsR0FBQTtJQUNBLGlCQUFBLFlBQUE7SUFDQSxJQUFBLElBQUEsaUJBQUEsS0FBQSxPQUFBLE1BQUEsR0FBQSxJQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxVQUFBLENBQUE7OztFQUdBLFNBQUEscUJBQUEsTUFBQSxRQUFBLEdBQUE7SUFDQSxpQkFBQSxZQUFBO0lBQ0EsSUFBQSxJQUFBLGlCQUFBLEtBQUEsT0FBQSxNQUFBLEdBQUEsSUFBQTtJQUNBLE9BQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsSUFBQSxFQUFBLEdBQUEsVUFBQSxDQUFBOzs7RUFHQSxTQUFBLHFCQUFBLE1BQUEsUUFBQSxHQUFBO0lBQ0EsaUJBQUEsWUFBQTtJQUNBLElBQUEsSUFBQSxpQkFBQSxLQUFBLE9BQUEsTUFBQSxHQUFBLElBQUE7SUFDQSxPQUFBLEtBQUEsS0FBQSxJQUFBLENBQUEsRUFBQSxJQUFBLElBQUEsRUFBQSxHQUFBLFVBQUEsQ0FBQTs7O0VBR0EsU0FBQSwwQkFBQSxNQUFBLFFBQUEsR0FBQTtJQUNBLGlCQUFBLFlBQUE7SUFDQSxJQUFBLElBQUEsaUJBQUEsS0FBQSxPQUFBLE1BQUEsR0FBQSxJQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxVQUFBLENBQUE7OztFQUdBLFNBQUEsYUFBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBLEVBQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxNQUFBO01BQ0EsS0FBQSxJQUFBLEtBQUEsS0FBQTtNQUNBLEtBQUEsSUFBQSxLQUFBO0lBQ0EsT0FBQSxLQUFBLGtCQUFBLElBQUEsS0FBQSxLQUFBLGtCQUFBLElBQUE7TUFDQTs7O0VBR0EsU0FBQSw0QkFBQSxNQUFBLFFBQUEsR0FBQTtJQUNBLGtCQUFBLFlBQUE7SUFDQSxJQUFBLElBQUEsa0JBQUEsS0FBQSxPQUFBLE1BQUEsR0FBQSxJQUFBO0lBQ0EsT0FBQSxJQUFBLElBQUEsRUFBQSxHQUFBLFNBQUEsQ0FBQTs7O0VBR0EsU0FBQSxvQkFBQSxTQUFBO0lBQ0EsSUFBQSxJQUFBLFFBQUE7TUFDQSxJQUFBLENBQUE7SUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxLQUFBLEtBQUEsUUFBQSxHQUFBO0lBQ0EsT0FBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLElBQUE7UUFDQSxJQUFBLFFBQUE7TUFDQSxPQUFBLENBQUEsRUFBQSxHQUFBLE9BQUEsSUFBQSxRQUFBLEVBQUE7TUFDQSxPQUFBLEVBQUEsR0FBQTs7O0VBR0EsR0FBQSxTQUFBLFNBQUEsUUFBQTtJQUNBLE9BQUE7TUFDQSxjQUFBLHVCQUFBO01BQ0EsWUFBQSxxQkFBQTs7O0VBR0EsSUFBQSxpQkFBQSxHQUFBLE9BQUE7SUFDQSxTQUFBO0lBQ0EsV0FBQTtJQUNBLFVBQUEsQ0FBQTtJQUNBLFVBQUEsQ0FBQSxLQUFBO0lBQ0EsVUFBQTtJQUNBLE1BQUE7SUFDQSxNQUFBO0lBQ0EsU0FBQSxDQUFBLE1BQUE7SUFDQSxNQUFBLENBQUEsVUFBQSxVQUFBLFdBQUEsYUFBQTtNQUNBLFVBQUE7O0lBRUEsV0FBQSxDQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO0lBQ0EsUUFBQSxDQUFBLFdBQUEsWUFBQSxTQUFBLFNBQUEsT0FBQTtNQUNBLFFBQUEsVUFBQSxhQUFBLFdBQUE7TUFDQTs7SUFFQSxhQUFBLENBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUE7TUFDQSxPQUFBLE9BQUEsT0FBQSxPQUFBOzs7RUFHQSxHQUFBLFNBQUEsZUFBQTtFQUNBLEdBQUEsTUFBQTs7RUFFQSxTQUFBLFdBQUE7RUFDQSxTQUFBLFlBQUE7SUFDQSxHQUFBO0lBQ0EsR0FBQTtJQUNBLEtBQUEsU0FBQSxHQUFBO01BQ0EsWUFBQSxHQUFBLEtBQUEsR0FBQTtNQUNBLFlBQUEsYUFBQSxHQUFBLEtBQUEsR0FBQTtNQUNBLElBQUEsS0FBQSxHQUFBLEtBQUEsS0FBQSxhQUFBO1dBQ0EsS0FBQSxJQUFBLGFBQUE7O0lBRUEsT0FBQSxXQUFBO01BQ0EsS0FBQSxJQUFBLEtBQUEsSUFBQTs7SUFFQSxTQUFBLFdBQUE7TUFDQSxPQUFBLEtBQUE7OztFQUdBLElBQUEsZUFBQSxJQUFBOztFQUVBLFNBQUEsWUFBQSxHQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxFQUFBLElBQUEsSUFBQTtNQUNBLEtBQUEsSUFBQTtNQUNBLEtBQUEsSUFBQTtJQUNBLEVBQUEsSUFBQSxJQUFBLE1BQUEsSUFBQTs7RUFFQSxHQUFBLElBQUEsU0FBQSxTQUFBLFFBQUEsVUFBQTtJQUNBLElBQUEsVUFBQSx3QkFBQSxlQUFBLE9BQUEsT0FBQTtNQUNBLHdCQUFBLE9BQUEsTUFBQSxRQUFBO1dBQ0E7TUFDQSxzQkFBQSxRQUFBOzs7O0VBSUEsU0FBQSxzQkFBQSxVQUFBLFVBQUE7SUFDQSxJQUFBLFlBQUEsMEJBQUEsZUFBQSxTQUFBLE9BQUE7TUFDQSwwQkFBQSxTQUFBLE1BQUEsVUFBQTs7O0VBR0EsSUFBQSwwQkFBQTtJQUNBLFNBQUEsU0FBQSxTQUFBLFVBQUE7TUFDQSxzQkFBQSxRQUFBLFVBQUE7O0lBRUEsbUJBQUEsU0FBQSxRQUFBLFVBQUE7TUFDQSxJQUFBLFdBQUEsT0FBQTtRQUNBLElBQUEsQ0FBQTtRQUNBLElBQUEsU0FBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsc0JBQUEsU0FBQSxHQUFBO1FBQ0E7OztFQUdBLElBQUEsNEJBQUE7SUFDQSxRQUFBLFNBQUEsUUFBQSxVQUFBO01BQ0EsU0FBQTs7SUFFQSxPQUFBLFNBQUEsUUFBQSxVQUFBO01BQ0EsU0FBQSxPQUFBO01BQ0EsU0FBQSxNQUFBLE9BQUEsSUFBQSxPQUFBLElBQUEsT0FBQTs7SUFFQSxZQUFBLFNBQUEsUUFBQSxVQUFBO01BQ0EsSUFBQSxjQUFBLE9BQUE7UUFDQSxJQUFBLENBQUE7UUFDQSxJQUFBLFlBQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLFNBQUEsWUFBQSxJQUFBLFNBQUEsTUFBQSxPQUFBO1FBQ0EsT0FBQSxJQUFBLE9BQUE7O0lBRUEsWUFBQSxTQUFBLFFBQUEsVUFBQTtNQUNBLGtCQUFBLE9BQUEsYUFBQSxVQUFBOztJQUVBLGlCQUFBLFNBQUEsUUFBQSxVQUFBO01BQ0EsSUFBQSxjQUFBLE9BQUE7UUFDQSxJQUFBLENBQUE7UUFDQSxJQUFBLFlBQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLGtCQUFBLFlBQUEsSUFBQSxVQUFBOztJQUVBLFNBQUEsU0FBQSxRQUFBLFVBQUE7TUFDQSxxQkFBQSxPQUFBLGFBQUE7O0lBRUEsY0FBQSxTQUFBLFFBQUEsVUFBQTtNQUNBLElBQUEsY0FBQSxPQUFBO1FBQ0EsSUFBQSxDQUFBO1FBQ0EsSUFBQSxZQUFBO01BQ0EsT0FBQSxFQUFBLElBQUEsR0FBQSxxQkFBQSxZQUFBLElBQUE7O0lBRUEsb0JBQUEsU0FBQSxRQUFBLFVBQUE7TUFDQSxJQUFBLGFBQUEsT0FBQTtRQUNBLElBQUEsQ0FBQTtRQUNBLElBQUEsV0FBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsc0JBQUEsV0FBQSxJQUFBOzs7O0VBSUEsU0FBQSxrQkFBQSxhQUFBLFVBQUEsUUFBQTtJQUNBLElBQUEsSUFBQSxDQUFBO01BQ0EsSUFBQSxZQUFBLFNBQUE7TUFDQTtJQUNBLFNBQUE7SUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLGFBQUEsWUFBQSxJQUFBLFNBQUEsTUFBQTtNQUNBLElBQUEsV0FBQSxJQUFBLFdBQUE7SUFDQSxTQUFBOzs7RUFHQSxTQUFBLHFCQUFBLGFBQUEsVUFBQTtJQUNBLElBQUEsSUFBQSxDQUFBO01BQ0EsSUFBQSxZQUFBO0lBQ0EsU0FBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsa0JBQUEsWUFBQSxJQUFBLFVBQUE7SUFDQSxTQUFBOztFQUVBLEdBQUEsSUFBQSxPQUFBLFNBQUEsUUFBQTtJQUNBLGlCQUFBO0lBQ0EsR0FBQSxJQUFBLE9BQUEsUUFBQTtJQUNBLE9BQUE7O0VBRUEsSUFBQSxnQkFBQSxxQkFBQSxJQUFBO0VBQ0EsSUFBQSxjQUFBO0lBQ0EsUUFBQSxXQUFBO01BQ0Esa0JBQUEsSUFBQTs7SUFFQSxPQUFBO0lBQ0EsV0FBQTtJQUNBLFNBQUE7SUFDQSxjQUFBLFdBQUE7TUFDQSxtQkFBQTtNQUNBLFlBQUEsWUFBQTs7SUFFQSxZQUFBLFdBQUE7TUFDQSxJQUFBLE9BQUEsSUFBQTtNQUNBLGtCQUFBLE9BQUEsSUFBQSxJQUFBLElBQUEsT0FBQTtNQUNBLFlBQUEsWUFBQSxZQUFBLFVBQUEsWUFBQTtRQUNBOzs7O0VBSUEsU0FBQSx1QkFBQTtJQUNBLElBQUEsS0FBQSxLQUFBLElBQUEsT0FBQTtJQUNBLFlBQUEsUUFBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLFlBQUEsUUFBQTtNQUNBLEtBQUEsQ0FBQSxNQUFBLEtBQUEsWUFBQSxRQUFBLEtBQUEsSUFBQSxJQUFBLENBQUEsTUFBQTtVQUNBLGFBQUEsSUFBQSxJQUFBO1FBQ0EsUUFBQSxLQUFBLElBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBLEdBQUE7TUFDQSxLQUFBO01BQ0EsSUFBQSxJQUFBLGFBQUEsSUFBQSxJQUFBO01BQ0EsSUFBQSxLQUFBLElBQUE7UUFDQSxNQUFBLE1BQUEsSUFBQSxJQUFBLENBQUE7UUFDQSxNQUFBLE1BQUE7UUFDQSxPQUFBLEtBQUEsSUFBQTtRQUNBLE9BQUEsS0FBQSxJQUFBO1FBQ0EsSUFBQSxRQUFBO1FBQ0EsSUFBQSxRQUFBLE9BQUEsSUFBQSxLQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsTUFBQSxLQUFBLElBQUE7TUFDQSxtQkFBQSxJQUFBLEtBQUEsTUFBQSxHQUFBO01BQ0EsS0FBQSxHQUFBLFFBQUEsTUFBQSxRQUFBOztJQUVBLFlBQUEsVUFBQSxXQUFBO01BQ0EsVUFBQSxLQUFBOzs7O0VBSUEsU0FBQSxpQkFBQSxXQUFBO0lBQ0EsSUFBQSxJQUFBLFVBQUE7TUFDQSxJQUFBLFVBQUE7TUFDQSxPQUFBLEtBQUEsSUFBQTtJQUNBLE9BQUEsQ0FBQSxPQUFBLEtBQUEsSUFBQSxJQUFBLE9BQUEsS0FBQSxJQUFBLElBQUEsS0FBQSxJQUFBOzs7RUFHQSxTQUFBLG9CQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBOzs7RUFHQSxTQUFBLHNCQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQTtNQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUE7OztFQUdBLFNBQUEsb0JBQUEsR0FBQSxHQUFBO0lBQ0EsRUFBQSxNQUFBLEVBQUE7SUFDQSxFQUFBLE1BQUEsRUFBQTtJQUNBLEVBQUEsTUFBQSxFQUFBOzs7RUFHQSxTQUFBLHNCQUFBLFFBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxPQUFBLEtBQUEsR0FBQSxPQUFBLEtBQUEsR0FBQSxPQUFBLEtBQUE7OztFQUdBLFNBQUEsMEJBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxLQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBO0lBQ0EsRUFBQSxNQUFBO0lBQ0EsRUFBQSxNQUFBO0lBQ0EsRUFBQSxNQUFBOzs7RUFHQSxTQUFBLGlCQUFBLFdBQUE7SUFDQSxPQUFBLENBQUEsS0FBQSxNQUFBLFVBQUEsSUFBQSxVQUFBLEtBQUEsUUFBQSxVQUFBOzs7RUFHQSxTQUFBLHNCQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEtBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBOztFQUVBLEdBQUEsSUFBQSxTQUFBLFdBQUE7SUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxLQUFBLEtBQUEsSUFBQSxPQUFBLFFBQUE7SUFDQSxJQUFBLFFBQUE7TUFDQSxPQUFBO01BQ0EsV0FBQTtNQUNBLFNBQUE7TUFDQSxjQUFBLFdBQUE7UUFDQSxNQUFBLFFBQUE7UUFDQSxNQUFBLFlBQUE7UUFDQSxNQUFBLFVBQUE7UUFDQSxRQUFBO1FBQ0EsWUFBQTs7TUFFQSxZQUFBLFdBQUE7UUFDQSxZQUFBO1FBQ0EsTUFBQSxRQUFBO1FBQ0EsTUFBQSxZQUFBO1FBQ0EsTUFBQSxVQUFBO1FBQ0EsSUFBQSxxQkFBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLE1BQUEsS0FBQSxFQUFBLEtBQUE7YUFDQSxJQUFBLFFBQUEsR0FBQSxLQUFBO2FBQ0EsSUFBQSxRQUFBLENBQUEsR0FBQSxLQUFBLENBQUE7UUFDQSxNQUFBLEtBQUEsSUFBQSxNQUFBLEtBQUE7Ozs7SUFJQSxTQUFBLE1BQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxLQUFBLFFBQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQTtNQUNBLElBQUEsSUFBQSxJQUFBLEtBQUE7TUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBOzs7SUFHQSxTQUFBLFVBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLGlCQUFBLENBQUEsSUFBQSxZQUFBLElBQUE7TUFDQSxJQUFBLElBQUE7UUFDQSxJQUFBLFNBQUEsc0JBQUEsSUFBQTtVQUNBLGFBQUEsQ0FBQSxPQUFBLElBQUEsQ0FBQSxPQUFBLElBQUE7VUFDQSxhQUFBLHNCQUFBLFlBQUE7UUFDQSwwQkFBQTtRQUNBLGFBQUEsaUJBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQTtVQUNBLElBQUEsS0FBQSxJQUFBLElBQUEsQ0FBQTtVQUNBLEtBQUEsV0FBQSxLQUFBLGFBQUE7VUFDQSxlQUFBLElBQUEsTUFBQTtRQUNBLElBQUEsZ0JBQUEsSUFBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLElBQUE7VUFDQSxJQUFBLEtBQUEsV0FBQSxLQUFBO1VBQ0EsSUFBQSxLQUFBLElBQUEsS0FBQTtlQUNBLElBQUEsS0FBQSxDQUFBLEtBQUEsT0FBQSxNQUFBLEtBQUEsZ0JBQUEsSUFBQTtZQUNBLE1BQUEsS0FBQSxJQUFBLElBQUE7VUFDQSxJQUFBLEtBQUEsQ0FBQSxXQUFBLEtBQUE7VUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBO2VBQ0E7VUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBO1VBQ0EsSUFBQSxJQUFBLElBQUEsS0FBQTs7UUFFQSxJQUFBLGNBQUE7VUFDQSxJQUFBLElBQUEsSUFBQTtZQUNBLElBQUEsTUFBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLEtBQUEsS0FBQTtpQkFDQTtZQUNBLElBQUEsTUFBQSxHQUFBLE1BQUEsTUFBQSxJQUFBLEtBQUEsS0FBQTs7ZUFFQTtVQUNBLElBQUEsTUFBQSxJQUFBO1lBQ0EsSUFBQSxJQUFBLElBQUEsS0FBQTtZQUNBLElBQUEsSUFBQSxJQUFBLEtBQUE7aUJBQ0E7WUFDQSxJQUFBLElBQUEsSUFBQTtjQUNBLElBQUEsTUFBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLEtBQUEsS0FBQTttQkFDQTtjQUNBLElBQUEsTUFBQSxHQUFBLE1BQUEsTUFBQSxJQUFBLEtBQUEsS0FBQTs7OzthQUlBO1FBQ0EsTUFBQSxHQUFBOztNQUVBLEtBQUEsR0FBQSxLQUFBOzs7SUFHQSxTQUFBLFlBQUE7TUFDQSxNQUFBLFFBQUE7OztJQUdBLFNBQUEsVUFBQTtNQUNBLE1BQUEsS0FBQSxJQUFBLE1BQUEsS0FBQTtNQUNBLE1BQUEsUUFBQTtNQUNBLEtBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLElBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQTtRQUNBLFNBQUEsSUFBQSxNQUFBLE1BQUEsTUFBQSxLQUFBLElBQUEsTUFBQSxDQUFBLE9BQUE7YUFDQSxNQUFBLEdBQUEsTUFBQTtNQUNBLFlBQUEsTUFBQSxHQUFBO01BQ0EsVUFBQSxHQUFBOzs7SUFHQSxTQUFBLFlBQUE7TUFDQSxZQUFBOzs7SUFHQSxTQUFBLFVBQUE7TUFDQSxVQUFBLEtBQUE7TUFDQSxZQUFBO01BQ0EsSUFBQSxJQUFBLFNBQUEsR0FBQSxLQUFBLEVBQUEsS0FBQTtNQUNBLE1BQUEsS0FBQSxJQUFBLE1BQUEsS0FBQTtNQUNBLEtBQUE7OztJQUdBLFNBQUEsTUFBQSxJQUFBLElBQUE7TUFDQSxPQUFBLENBQUEsTUFBQSxNQUFBLElBQUEsS0FBQSxNQUFBOzs7SUFHQSxTQUFBLGNBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLEtBQUEsRUFBQTs7O0lBR0EsU0FBQSxZQUFBLEdBQUEsT0FBQTtNQUNBLE9BQUEsTUFBQSxNQUFBLE1BQUEsS0FBQSxNQUFBLE1BQUEsS0FBQSxLQUFBLE1BQUEsS0FBQTtRQUNBLE1BQUEsTUFBQSxNQUFBLEtBQUE7O0lBRUEsT0FBQSxTQUFBLFNBQUE7TUFDQSxLQUFBLEtBQUEsRUFBQSxLQUFBLEtBQUE7TUFDQSxTQUFBO01BQ0EsR0FBQSxJQUFBLE9BQUEsU0FBQTtNQUNBLElBQUEsSUFBQSxPQUFBO01BQ0EsSUFBQSxHQUFBO1FBQ0EsT0FBQSxLQUFBO1FBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLE9BQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxJQUFBLElBQUEsR0FBQSxFQUFBLEdBQUE7VUFDQSxJQUFBLE9BQUE7VUFDQSxJQUFBLFlBQUEsRUFBQSxJQUFBLE1BQUEsWUFBQSxFQUFBLElBQUEsSUFBQTtZQUNBLElBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQTtZQUNBLElBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQTtpQkFDQTtZQUNBLE9BQUEsS0FBQSxJQUFBOzs7UUFHQSxJQUFBLE9BQUEsQ0FBQTtVQUNBO1FBQ0EsS0FBQSxJQUFBLElBQUEsT0FBQSxTQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsT0FBQSxJQUFBLEdBQUEsS0FBQSxHQUFBO1VBQ0EsR0FBQSxFQUFBLEdBQUE7VUFDQSxJQUFBLE9BQUE7VUFDQSxJQUFBLENBQUEsS0FBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsTUFBQSxPQUFBLElBQUEsS0FBQSxFQUFBLElBQUE7WUFDQSxFQUFBOzs7TUFHQSxTQUFBLFFBQUE7TUFDQSxPQUFBLE9BQUEsWUFBQSxPQUFBLFdBQUE7UUFDQSxDQUFBLEtBQUE7UUFDQSxDQUFBLEtBQUE7VUFDQTtRQUNBLENBQUEsSUFBQTtRQUNBLENBQUEsSUFBQTs7OztFQUlBLEdBQUEsSUFBQSxXQUFBLFNBQUEsUUFBQTtJQUNBLG9CQUFBLG9CQUFBO01BQ0Esb0JBQUEsb0JBQUE7TUFDQSxvQkFBQSxvQkFBQTtNQUNBLG9CQUFBLG9CQUFBO0lBQ0EsR0FBQSxJQUFBLE9BQUEsUUFBQTtJQUNBLElBQUEsSUFBQTtNQUNBLElBQUE7TUFDQSxJQUFBO01BQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxJQUFBLElBQUEsSUFBQTtNQUNBLElBQUEsbUJBQUEsSUFBQSxtQkFBQSxJQUFBO01BQ0EsSUFBQSxvQkFBQSxHQUFBLElBQUEsbUJBQUE7UUFDQSxtQkFBQSxJQUFBO01BQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7TUFDQSxJQUFBLElBQUEsSUFBQSxPQUFBLENBQUEsS0FBQTs7SUFFQSxPQUFBLENBQUEsS0FBQSxNQUFBLEdBQUEsS0FBQSxZQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7TUFDQTs7O0VBR0EsSUFBQSxtQkFBQSxtQkFBQTtJQUNBLG1CQUFBLG1CQUFBO0lBQ0EsbUJBQUEsbUJBQUE7SUFDQSxtQkFBQTtFQUNBLElBQUEsa0JBQUE7SUFDQSxRQUFBO0lBQ0EsT0FBQTtJQUNBLFdBQUE7SUFDQSxTQUFBO0lBQ0EsY0FBQSxXQUFBO01BQ0EsZ0JBQUEsWUFBQTs7SUFFQSxZQUFBLFdBQUE7TUFDQSxnQkFBQSxZQUFBOzs7O0VBSUEsU0FBQSxxQkFBQSxHQUFBLEdBQUE7SUFDQSxLQUFBO0lBQ0EsSUFBQSxPQUFBLEtBQUEsSUFBQSxLQUFBO0lBQ0Esd0JBQUEsT0FBQSxLQUFBLElBQUEsSUFBQSxPQUFBLEtBQUEsSUFBQSxJQUFBLEtBQUE7TUFDQTs7O0VBR0EsU0FBQSx3QkFBQSxHQUFBLEdBQUEsR0FBQTtJQUNBLEVBQUE7SUFDQSxxQkFBQSxDQUFBLElBQUEscUJBQUE7SUFDQSxxQkFBQSxDQUFBLElBQUEscUJBQUE7SUFDQSxxQkFBQSxDQUFBLElBQUEscUJBQUE7OztFQUdBLFNBQUEsMkJBQUE7SUFDQSxJQUFBLElBQUEsSUFBQTtJQUNBLGdCQUFBLFFBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxLQUFBO01BQ0EsSUFBQSxPQUFBLEtBQUEsSUFBQSxLQUFBO01BQ0EsS0FBQSxPQUFBLEtBQUEsSUFBQTtNQUNBLEtBQUEsT0FBQSxLQUFBLElBQUE7TUFDQSxLQUFBLEtBQUEsSUFBQTtNQUNBLGdCQUFBLFFBQUE7TUFDQSx3QkFBQSxJQUFBLElBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBLEdBQUE7TUFDQSxLQUFBO01BQ0EsSUFBQSxPQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsT0FBQSxLQUFBLElBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsS0FBQSxNQUFBLEtBQUEsS0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQSxJQUFBLENBQUEsSUFBQSxLQUFBO1lBQ0EsS0FBQSxLQUFBLElBQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBO1VBQ0E7TUFDQSxxQkFBQTtNQUNBLHFCQUFBLEtBQUEsTUFBQSxLQUFBO01BQ0EscUJBQUEsS0FBQSxNQUFBLEtBQUE7TUFDQSxxQkFBQSxLQUFBLE1BQUEsS0FBQTtNQUNBLHdCQUFBLElBQUEsSUFBQTs7OztFQUlBLFNBQUEseUJBQUE7SUFDQSxnQkFBQSxRQUFBOzs7RUFHQSxTQUFBLDJCQUFBO0lBQ0EsSUFBQSxLQUFBLEtBQUEsSUFBQSxJQUFBO0lBQ0EsZ0JBQUEsUUFBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLE1BQUEsR0FBQSxNQUFBO01BQ0EsZ0JBQUEsUUFBQTtNQUNBLEtBQUE7TUFDQSxJQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxLQUFBLE9BQUEsS0FBQSxJQUFBO01BQ0EsS0FBQSxPQUFBLEtBQUEsSUFBQTtNQUNBLEtBQUEsS0FBQSxJQUFBO01BQ0Esd0JBQUEsSUFBQSxJQUFBOztJQUVBLGdCQUFBLFVBQUEsV0FBQTtNQUNBLFVBQUEsS0FBQTtNQUNBLGdCQUFBLFVBQUE7TUFDQSxnQkFBQSxRQUFBOzs7SUFHQSxTQUFBLFVBQUEsR0FBQSxHQUFBO01BQ0EsS0FBQTtNQUNBLElBQUEsT0FBQSxLQUFBLElBQUEsS0FBQTtRQUNBLElBQUEsT0FBQSxLQUFBLElBQUE7UUFDQSxJQUFBLE9BQUEsS0FBQSxJQUFBO1FBQ0EsSUFBQSxLQUFBLElBQUE7UUFDQSxLQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBLElBQUEsS0FBQTtRQUNBLEtBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxJQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQTtRQUNBLElBQUEsS0FBQSxDQUFBLFFBQUEsS0FBQTtRQUNBLElBQUEsS0FBQSxNQUFBLEdBQUE7TUFDQSxxQkFBQSxJQUFBO01BQ0EscUJBQUEsSUFBQTtNQUNBLHFCQUFBLElBQUE7TUFDQSxxQkFBQTtNQUNBLHFCQUFBLEtBQUEsTUFBQSxLQUFBO01BQ0EscUJBQUEsS0FBQSxNQUFBLEtBQUE7TUFDQSxxQkFBQSxLQUFBLE1BQUEsS0FBQTtNQUNBLHdCQUFBLElBQUEsSUFBQTs7OztFQUlBLFNBQUEsZUFBQSxHQUFBLEdBQUE7SUFDQSxTQUFBLFFBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxJQUFBLEVBQUEsR0FBQSxJQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUE7O0lBRUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLFFBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLE9BQUEsSUFBQSxFQUFBLE9BQUEsR0FBQSxJQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsVUFBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsbUJBQUEsVUFBQSxTQUFBO0lBQ0EsYUFBQSxVQUFBO0lBQ0EsSUFBQSxVQUFBO01BQ0EsT0FBQTtJQUNBLFNBQUEsUUFBQSxTQUFBLFNBQUE7TUFDQSxJQUFBLENBQUEsSUFBQSxRQUFBLFNBQUEsTUFBQSxHQUFBO01BQ0EsSUFBQSxHQUFBLEtBQUEsUUFBQTtRQUNBLEtBQUEsUUFBQTtNQUNBLElBQUEsc0JBQUEsSUFBQSxLQUFBO1FBQ0EsU0FBQTtRQUNBLEtBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxLQUFBLFFBQUEsSUFBQTtVQUNBLEdBQUE7UUFDQSxTQUFBO1FBQ0E7O01BRUEsSUFBQSxJQUFBLElBQUEsK0JBQUEsSUFBQSxTQUFBO1VBQ0E7UUFDQSxJQUFBLElBQUEsK0JBQUEsSUFBQSxNQUFBLEdBQUE7TUFDQSxFQUFBLElBQUE7TUFDQSxRQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxJQUFBLElBQUEsK0JBQUEsSUFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLElBQUEsK0JBQUEsSUFBQSxNQUFBLEdBQUE7TUFDQSxFQUFBLElBQUE7TUFDQSxRQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUE7O0lBRUEsS0FBQSxLQUFBO0lBQ0EsK0JBQUE7SUFDQSwrQkFBQTtJQUNBLElBQUEsQ0FBQSxRQUFBLFFBQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLFFBQUEsaUJBQUEsSUFBQSxLQUFBLFFBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtNQUNBLEtBQUEsR0FBQSxJQUFBLFFBQUEsQ0FBQTs7SUFFQSxJQUFBLFFBQUEsUUFBQTtNQUNBLFFBQUE7SUFDQSxPQUFBLEdBQUE7TUFDQSxJQUFBLFVBQUE7UUFDQSxZQUFBO01BQ0EsT0FBQSxRQUFBO1FBQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLE9BQUE7TUFDQSxTQUFBLFFBQUE7TUFDQSxTQUFBO01BQ0EsR0FBQTtRQUNBLFFBQUEsSUFBQSxRQUFBLEVBQUEsSUFBQTtRQUNBLElBQUEsUUFBQSxHQUFBO1VBQ0EsSUFBQSxXQUFBO1lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLE9BQUEsUUFBQSxJQUFBLEdBQUEsRUFBQSxHQUFBLFNBQUEsTUFBQTtjQUNBLFFBQUEsT0FBQSxJQUFBLElBQUEsTUFBQTtpQkFDQTtZQUNBLFlBQUEsUUFBQSxHQUFBLFFBQUEsRUFBQSxHQUFBLEdBQUE7O1VBRUEsVUFBQSxRQUFBO2VBQ0E7VUFDQSxJQUFBLFdBQUE7WUFDQSxTQUFBLFFBQUEsRUFBQTtZQUNBLEtBQUEsSUFBQSxJQUFBLE9BQUEsU0FBQSxHQUFBLEtBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxNQUFBO2NBQ0EsUUFBQSxPQUFBLElBQUEsSUFBQSxNQUFBO2lCQUNBO1lBQ0EsWUFBQSxRQUFBLEdBQUEsUUFBQSxFQUFBLEdBQUEsQ0FBQSxHQUFBOztVQUVBLFVBQUEsUUFBQTs7UUFFQSxVQUFBLFFBQUE7UUFDQSxTQUFBLFFBQUE7UUFDQSxZQUFBLENBQUE7ZUFDQSxDQUFBLFFBQUE7TUFDQSxTQUFBOzs7O0VBSUEsU0FBQSwrQkFBQSxPQUFBO0lBQ0EsSUFBQSxFQUFBLElBQUEsTUFBQSxTQUFBO0lBQ0EsSUFBQSxHQUFBLElBQUE7TUFDQSxJQUFBLE1BQUE7TUFDQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7TUFDQSxFQUFBLElBQUEsSUFBQSxNQUFBO01BQ0EsRUFBQSxJQUFBO01BQ0EsSUFBQTs7SUFFQSxFQUFBLElBQUEsSUFBQSxNQUFBO0lBQ0EsRUFBQSxJQUFBOzs7RUFHQSxTQUFBLCtCQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxLQUFBLElBQUEsS0FBQSxJQUFBOzs7RUFHQSxTQUFBLFlBQUEsY0FBQSxVQUFBLGFBQUEsV0FBQTtJQUNBLE9BQUEsU0FBQSxRQUFBLFVBQUE7TUFDQSxJQUFBLE9BQUEsU0FBQTtRQUNBLG1CQUFBLE9BQUEsT0FBQSxVQUFBLElBQUEsVUFBQTtNQUNBLElBQUEsT0FBQTtRQUNBLE9BQUE7UUFDQSxXQUFBO1FBQ0EsU0FBQTtRQUNBLGNBQUEsV0FBQTtVQUNBLEtBQUEsUUFBQTtVQUNBLEtBQUEsWUFBQTtVQUNBLEtBQUEsVUFBQTtVQUNBLFdBQUE7VUFDQSxVQUFBOztRQUVBLFlBQUEsV0FBQTtVQUNBLEtBQUEsUUFBQTtVQUNBLEtBQUEsWUFBQTtVQUNBLEtBQUEsVUFBQTtVQUNBLFdBQUEsR0FBQSxNQUFBO1VBQ0EsSUFBQSxrQkFBQTtZQUNBLGtCQUFBO1VBQ0EsSUFBQSxTQUFBLFFBQUE7WUFDQSxJQUFBLENBQUEsZ0JBQUEsU0FBQTtjQUNBLGlCQUFBO1lBQ0EsbUJBQUEsVUFBQTtjQUNBLGlCQUFBLGFBQUE7aUJBQ0EsSUFBQSxpQkFBQTtZQUNBLElBQUEsQ0FBQSxnQkFBQSxTQUFBO2NBQ0EsaUJBQUE7WUFDQSxTQUFBO1lBQ0EsWUFBQSxNQUFBLE1BQUEsR0FBQTtZQUNBLFNBQUE7O1VBRUEsSUFBQSxnQkFBQSxTQUFBLGNBQUE7WUFDQTtVQUNBLFdBQUEsVUFBQTs7UUFFQSxRQUFBLFdBQUE7VUFDQSxTQUFBO1VBQ0EsU0FBQTtVQUNBLFlBQUEsTUFBQSxNQUFBLEdBQUE7VUFDQSxTQUFBO1VBQ0EsU0FBQTs7OztNQUlBLFNBQUEsTUFBQSxHQUFBLEdBQUE7UUFDQSxJQUFBLFFBQUEsT0FBQSxHQUFBO1FBQ0EsSUFBQSxhQUFBLElBQUEsTUFBQSxJQUFBLElBQUEsTUFBQSxLQUFBLFNBQUEsTUFBQSxHQUFBOzs7TUFHQSxTQUFBLFVBQUEsR0FBQSxHQUFBO1FBQ0EsSUFBQSxRQUFBLE9BQUEsR0FBQTtRQUNBLEtBQUEsTUFBQSxNQUFBLElBQUEsTUFBQTs7O01BR0EsU0FBQSxZQUFBO1FBQ0EsS0FBQSxRQUFBO1FBQ0EsS0FBQTs7O01BR0EsU0FBQSxVQUFBO1FBQ0EsS0FBQSxRQUFBO1FBQ0EsS0FBQTs7TUFFQSxJQUFBO01BQ0EsSUFBQSxTQUFBO1FBQ0EsZUFBQSxTQUFBO1FBQ0EsaUJBQUE7UUFDQSxTQUFBOztNQUVBLFNBQUEsVUFBQSxHQUFBLEdBQUE7UUFDQSxLQUFBLEtBQUEsQ0FBQSxHQUFBO1FBQ0EsSUFBQSxRQUFBLE9BQUEsR0FBQTtRQUNBLGFBQUEsTUFBQSxNQUFBLElBQUEsTUFBQTs7O01BR0EsU0FBQSxZQUFBO1FBQ0EsYUFBQTtRQUNBLE9BQUE7OztNQUdBLFNBQUEsVUFBQTtRQUNBLFVBQUEsS0FBQSxHQUFBLElBQUEsS0FBQSxHQUFBO1FBQ0EsYUFBQTtRQUNBLElBQUEsUUFBQSxhQUFBO1VBQ0EsZUFBQSxPQUFBO1VBQ0EsU0FBQSxJQUFBLGFBQUE7UUFDQSxLQUFBO1FBQ0EsUUFBQSxLQUFBO1FBQ0EsT0FBQTtRQUNBLElBQUEsQ0FBQSxHQUFBO1FBQ0EsSUFBQSxRQUFBLEdBQUE7VUFDQSxVQUFBLGFBQUE7VUFDQSxJQUFBLElBQUEsUUFBQSxTQUFBO1lBQ0EsSUFBQSxDQUFBO1lBQ0E7VUFDQSxJQUFBLElBQUEsR0FBQTtZQUNBLElBQUEsQ0FBQSxnQkFBQSxTQUFBLGdCQUFBO2NBQ0E7WUFDQSxTQUFBO1lBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxRQUFBLFFBQUEsSUFBQSxJQUFBO2NBQ0E7WUFDQSxTQUFBOztVQUVBOztRQUVBLElBQUEsSUFBQSxLQUFBLFFBQUEsR0FBQSxhQUFBLEtBQUEsYUFBQSxNQUFBO1VBQ0EsYUFBQTtRQUNBLFNBQUEsS0FBQSxhQUFBLE9BQUE7O01BRUEsT0FBQTs7OztFQUlBLFNBQUEsMEJBQUEsU0FBQTtJQUNBLE9BQUEsUUFBQSxTQUFBOzs7RUFHQSxTQUFBLDRCQUFBO0lBQ0EsSUFBQSxRQUFBO01BQ0E7SUFDQSxPQUFBO01BQ0EsV0FBQSxXQUFBO1FBQ0EsTUFBQSxLQUFBLE9BQUE7O01BRUEsT0FBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLEtBQUEsS0FBQSxDQUFBLEdBQUE7O01BRUEsU0FBQTtNQUNBLFFBQUEsV0FBQTtRQUNBLElBQUEsU0FBQTtRQUNBLFFBQUE7UUFDQSxPQUFBO1FBQ0EsT0FBQTs7TUFFQSxRQUFBLFdBQUE7UUFDQSxJQUFBLE1BQUEsU0FBQSxHQUFBLE1BQUEsS0FBQSxNQUFBLE1BQUEsT0FBQSxNQUFBOzs7OztFQUtBLFNBQUEsZ0JBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxDQUFBLENBQUEsSUFBQSxFQUFBLEdBQUEsS0FBQSxJQUFBLEVBQUEsS0FBQSxRQUFBLElBQUEsUUFBQSxFQUFBLE9BQUEsQ0FBQSxJQUFBLEVBQUE7TUFDQSxLQUFBLElBQUEsRUFBQSxLQUFBLFFBQUEsSUFBQSxRQUFBLEVBQUE7O0VBRUEsSUFBQSwwQkFBQSxZQUFBO0lBQ0EsNkJBQUEsb0NBQUEsQ0FBQSxDQUFBLEdBQUE7TUFDQSxJQUFBOzs7RUFHQSxTQUFBLDRCQUFBLFVBQUE7SUFDQSxJQUFBLEtBQUE7TUFDQSxLQUFBO01BQ0EsTUFBQTtNQUNBO0lBQ0EsT0FBQTtNQUNBLFdBQUEsV0FBQTtRQUNBLFNBQUE7UUFDQSxRQUFBOztNQUVBLE9BQUEsU0FBQSxJQUFBLElBQUE7UUFDQSxJQUFBLE1BQUEsS0FBQSxJQUFBLElBQUEsQ0FBQTtVQUNBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxJQUFBLEtBQUEsS0FBQSxHQUFBO1VBQ0EsU0FBQSxNQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsTUFBQSxJQUFBLElBQUEsUUFBQSxDQUFBO1VBQ0EsU0FBQSxNQUFBLEtBQUE7VUFDQSxTQUFBO1VBQ0EsU0FBQTtVQUNBLFNBQUEsTUFBQSxLQUFBO1VBQ0EsU0FBQSxNQUFBLElBQUE7VUFDQSxRQUFBO2VBQ0EsSUFBQSxRQUFBLE9BQUEsTUFBQSxHQUFBO1VBQ0EsSUFBQSxJQUFBLEtBQUEsT0FBQSxHQUFBLE1BQUEsTUFBQTtVQUNBLElBQUEsSUFBQSxLQUFBLE9BQUEsR0FBQSxNQUFBLE1BQUE7VUFDQSxLQUFBLGlDQUFBLElBQUEsSUFBQSxJQUFBO1VBQ0EsU0FBQSxNQUFBLEtBQUE7VUFDQSxTQUFBO1VBQ0EsU0FBQTtVQUNBLFNBQUEsTUFBQSxLQUFBO1VBQ0EsUUFBQTs7UUFFQSxTQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxNQUFBOztNQUVBLFNBQUEsV0FBQTtRQUNBLFNBQUE7UUFDQSxLQUFBLEtBQUE7O01BRUEsT0FBQSxXQUFBO1FBQ0EsT0FBQSxJQUFBOzs7OztFQUtBLFNBQUEsaUNBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsT0FBQSxPQUFBLFdBQUEsS0FBQSxJQUFBLEtBQUE7SUFDQSxPQUFBLElBQUEsWUFBQSxJQUFBLEtBQUEsS0FBQSxDQUFBLEtBQUEsSUFBQSxPQUFBLFFBQUEsS0FBQTtRQUNBLE9BQUEsS0FBQSxJQUFBLE1BQUEsS0FBQSxJQUFBLE9BQUEsUUFBQSxLQUFBLElBQUE7TUFDQSxLQUFBLElBQUEsUUFBQSxRQUFBLFFBQUEsYUFBQSxDQUFBLEtBQUEsTUFBQTs7O0VBR0EsU0FBQSxtQ0FBQSxNQUFBLElBQUEsV0FBQSxVQUFBO0lBQ0EsSUFBQTtJQUNBLElBQUEsUUFBQSxNQUFBO01BQ0EsSUFBQSxZQUFBO01BQ0EsU0FBQSxNQUFBLENBQUEsR0FBQTtNQUNBLFNBQUEsTUFBQSxHQUFBO01BQ0EsU0FBQSxNQUFBLEdBQUE7TUFDQSxTQUFBLE1BQUEsR0FBQTtNQUNBLFNBQUEsTUFBQSxHQUFBLENBQUE7TUFDQSxTQUFBLE1BQUEsR0FBQSxDQUFBO01BQ0EsU0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBO01BQ0EsU0FBQSxNQUFBLENBQUEsR0FBQTtNQUNBLFNBQUEsTUFBQSxDQUFBLEdBQUE7V0FDQSxJQUFBLElBQUEsS0FBQSxLQUFBLEdBQUEsTUFBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUEsSUFBQSxDQUFBO01BQ0EsSUFBQSxZQUFBLElBQUE7TUFDQSxTQUFBLE1BQUEsQ0FBQSxHQUFBO01BQ0EsU0FBQSxNQUFBLEdBQUE7TUFDQSxTQUFBLE1BQUEsR0FBQTtXQUNBO01BQ0EsU0FBQSxNQUFBLEdBQUEsSUFBQSxHQUFBOzs7O0VBSUEsU0FBQSxzQkFBQSxPQUFBLFNBQUE7SUFDQSxJQUFBLFdBQUEsTUFBQTtNQUNBLFdBQUEsTUFBQTtNQUNBLGlCQUFBLENBQUEsS0FBQSxJQUFBLFdBQUEsQ0FBQSxLQUFBLElBQUEsV0FBQTtNQUNBLGFBQUE7TUFDQSxVQUFBO0lBQ0EsbUJBQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsUUFBQSxRQUFBLElBQUEsR0FBQSxFQUFBLEdBQUE7TUFDQSxJQUFBLE9BQUEsUUFBQTtRQUNBLElBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxHQUFBO01BQ0EsSUFBQSxTQUFBLEtBQUE7UUFDQSxLQUFBLE9BQUE7UUFDQSxLQUFBLE9BQUEsS0FBQSxJQUFBLElBQUE7UUFDQSxRQUFBLEtBQUEsSUFBQTtRQUNBLFFBQUEsS0FBQSxJQUFBO1FBQ0EsSUFBQTtNQUNBLE9BQUEsTUFBQTtRQUNBLElBQUEsTUFBQSxHQUFBLElBQUE7UUFDQSxRQUFBLEtBQUE7UUFDQSxJQUFBLElBQUEsTUFBQTtVQUNBLElBQUEsTUFBQSxLQUFBLElBQUEsSUFBQTtVQUNBLE9BQUEsS0FBQSxJQUFBO1VBQ0EsT0FBQSxLQUFBLElBQUE7VUFDQSxLQUFBLElBQUE7VUFDQSxNQUFBLE1BQUEsSUFBQSxJQUFBLENBQUE7VUFDQSxNQUFBLE1BQUE7VUFDQSxlQUFBLE1BQUE7VUFDQSxJQUFBLFFBQUE7UUFDQSxtQkFBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLE1BQUEsS0FBQSxJQUFBLE1BQUE7VUFDQSxPQUFBLElBQUEsS0FBQSxJQUFBO1FBQ0EsY0FBQSxlQUFBLEtBQUEsTUFBQSxJQUFBO1FBQ0EsSUFBQSxlQUFBLE1BQUEsV0FBQSxLQUFBLFVBQUE7VUFDQSxJQUFBLE1BQUEsc0JBQUEsaUJBQUE7WUFDQSxpQkFBQTtVQUNBLDBCQUFBO1VBQ0EsSUFBQSxlQUFBLHNCQUFBLGdCQUFBO1VBQ0EsMEJBQUE7VUFDQSxJQUFBLE9BQUEsQ0FBQSxlQUFBLE1BQUEsSUFBQSxDQUFBLElBQUEsS0FBQTtZQUNBLGFBQUE7VUFDQSxJQUFBLFdBQUEsUUFBQSxhQUFBLFNBQUEsSUFBQSxNQUFBLElBQUEsS0FBQTtZQUNBLFdBQUEsZUFBQSxNQUFBLElBQUEsSUFBQSxDQUFBOzs7UUFHQSxJQUFBLENBQUEsS0FBQTtRQUNBLEtBQUEsR0FBQSxRQUFBLE1BQUEsUUFBQSxNQUFBLFNBQUE7OztJQUdBLE9BQUEsQ0FBQSxhQUFBLENBQUEsS0FBQSxhQUFBLEtBQUEscUJBQUE7TUFDQSxVQUFBOzs7RUFHQSxTQUFBLGtCQUFBLFFBQUE7SUFDQSxJQUFBLEtBQUEsS0FBQSxJQUFBO01BQ0EsY0FBQSxLQUFBO01BQ0EsZ0JBQUEsSUFBQSxNQUFBO01BQ0EsY0FBQSx5QkFBQSxRQUFBLElBQUE7SUFDQSxPQUFBLFlBQUEsU0FBQSxVQUFBLGFBQUEsY0FBQSxDQUFBLEdBQUE7TUFDQTtRQUNBLENBQUEsQ0FBQSxHQUFBLFNBQUE7O0lBRUEsU0FBQSxRQUFBLEdBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxJQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7OztJQUdBLFNBQUEsU0FBQSxVQUFBO01BQ0EsSUFBQSxRQUFBLElBQUEsSUFBQSxLQUFBO01BQ0EsT0FBQTtRQUNBLFdBQUEsV0FBQTtVQUNBLE1BQUEsS0FBQTtVQUNBLFFBQUE7O1FBRUEsT0FBQSxTQUFBLEdBQUEsR0FBQTtVQUNBLElBQUEsU0FBQSxDQUFBLEdBQUE7WUFDQSxRQUFBLElBQUEsUUFBQSxHQUFBO1lBQ0EsSUFBQSxjQUFBLElBQUEsSUFBQSxLQUFBLEdBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQSxJQUFBO2NBQ0EsSUFBQSxDQUFBLElBQUEsS0FBQTtVQUNBLElBQUEsQ0FBQSxXQUFBLE1BQUEsS0FBQSxJQUFBLFNBQUE7VUFDQSxJQUFBLE1BQUEsSUFBQTtZQUNBLFNBQUEsVUFBQSxRQUFBO1lBQ0EsSUFBQSxzQkFBQSxRQUFBO2NBQ0Esc0JBQUEsUUFBQSxTQUFBO2NBQ0EsT0FBQSxNQUFBO2NBQ0EsT0FBQSxNQUFBO2NBQ0EsSUFBQSxRQUFBLE9BQUEsSUFBQSxPQUFBOzs7VUFHQSxJQUFBLE1BQUEsSUFBQTtZQUNBLFFBQUE7WUFDQSxJQUFBLEdBQUE7Y0FDQSxTQUFBO2NBQ0EsU0FBQSxVQUFBLFFBQUE7Y0FDQSxTQUFBLE1BQUEsT0FBQSxJQUFBLE9BQUE7bUJBQ0E7Y0FDQSxTQUFBLFVBQUEsUUFBQTtjQUNBLFNBQUEsTUFBQSxPQUFBLElBQUEsT0FBQTtjQUNBLFNBQUE7O1lBRUEsU0FBQTtpQkFDQSxJQUFBLGlCQUFBLFVBQUEsY0FBQSxHQUFBO1lBQ0EsSUFBQTtZQUNBLElBQUEsRUFBQSxJQUFBLFFBQUEsSUFBQSxVQUFBLFFBQUEsUUFBQSxRQUFBO2NBQ0EsUUFBQTtjQUNBLElBQUEsYUFBQTtnQkFDQSxTQUFBO2dCQUNBLFNBQUEsTUFBQSxFQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUE7Z0JBQ0EsU0FBQSxNQUFBLEVBQUEsR0FBQSxJQUFBLEVBQUEsR0FBQTtnQkFDQSxTQUFBO3FCQUNBO2dCQUNBLFNBQUEsTUFBQSxFQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUE7Z0JBQ0EsU0FBQTtnQkFDQSxTQUFBO2dCQUNBLFNBQUEsTUFBQSxFQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUE7Ozs7VUFJQSxJQUFBLE1BQUEsQ0FBQSxVQUFBLENBQUEsc0JBQUEsUUFBQSxVQUFBO1lBQ0EsU0FBQSxNQUFBLE9BQUEsSUFBQSxPQUFBOztVQUVBLFNBQUEsUUFBQSxLQUFBLEdBQUEsS0FBQTs7UUFFQSxTQUFBLFdBQUE7VUFDQSxJQUFBLElBQUEsU0FBQTtVQUNBLFNBQUE7O1FBRUEsT0FBQSxXQUFBO1VBQ0EsT0FBQSxRQUFBLENBQUEsT0FBQSxPQUFBOzs7OztJQUtBLFNBQUEsVUFBQSxHQUFBLEdBQUEsS0FBQTtNQUNBLElBQUEsS0FBQSxpQkFBQTtRQUNBLEtBQUEsaUJBQUE7TUFDQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLEdBQUE7UUFDQSxLQUFBLHNCQUFBLElBQUE7UUFDQSxPQUFBLG9CQUFBLElBQUE7UUFDQSxPQUFBLEdBQUE7UUFDQSxjQUFBLE9BQUEsT0FBQTtNQUNBLElBQUEsQ0FBQSxhQUFBLE9BQUEsQ0FBQSxPQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUEsT0FBQTtRQUNBLEtBQUEsQ0FBQSxLQUFBLE9BQUE7UUFDQSxRQUFBLHNCQUFBLElBQUE7UUFDQSxJQUFBLHNCQUFBLElBQUE7UUFDQSxJQUFBLHNCQUFBLElBQUE7TUFDQSxvQkFBQSxHQUFBO01BQ0EsSUFBQSxJQUFBO1FBQ0EsSUFBQSxvQkFBQSxHQUFBO1FBQ0EsS0FBQSxvQkFBQSxHQUFBO1FBQ0EsS0FBQSxJQUFBLElBQUEsTUFBQSxvQkFBQSxHQUFBLEtBQUE7TUFDQSxJQUFBLEtBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxLQUFBLEtBQUE7UUFDQSxJQUFBLHNCQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsS0FBQTtNQUNBLG9CQUFBLEdBQUE7TUFDQSxJQUFBLGlCQUFBO01BQ0EsSUFBQSxDQUFBLEtBQUEsT0FBQTtNQUNBLElBQUEsS0FBQSxFQUFBO1FBQ0EsS0FBQSxFQUFBO1FBQ0EsS0FBQSxFQUFBO1FBQ0EsS0FBQSxFQUFBO1FBQ0E7TUFDQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxJQUFBLEtBQUEsS0FBQTtRQUNBLFFBQUEsSUFBQSxLQUFBLEtBQUE7UUFDQSxXQUFBLFNBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxTQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxJQUFBLFdBQUEsUUFBQSxLQUFBLEtBQUEsSUFBQSxFQUFBLE1BQUEsSUFBQSxFQUFBLEtBQUEsTUFBQSxJQUFBO1VBQ0EsTUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsS0FBQSxLQUFBLEtBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQTtVQUNBLEtBQUE7UUFDQSxJQUFBLEtBQUEsc0JBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxLQUFBO1FBQ0Esb0JBQUEsSUFBQTtRQUNBLE9BQUEsQ0FBQSxHQUFBLGlCQUFBOzs7O0lBSUEsU0FBQSxLQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxjQUFBLFNBQUEsSUFBQTtRQUNBLE9BQUE7TUFDQSxJQUFBLElBQUEsQ0FBQSxHQUFBLFFBQUE7V0FDQSxJQUFBLElBQUEsR0FBQSxRQUFBO01BQ0EsSUFBQSxJQUFBLENBQUEsR0FBQSxRQUFBO1dBQ0EsSUFBQSxJQUFBLEdBQUEsUUFBQTtNQUNBLE9BQUE7Ozs7RUFJQSxTQUFBLGlCQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxPQUFBLFNBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBO1FBQ0EsS0FBQSxFQUFBO1FBQ0EsS0FBQSxFQUFBO1FBQ0EsS0FBQSxFQUFBO1FBQ0EsS0FBQSxFQUFBO1FBQ0EsS0FBQTtRQUNBLEtBQUE7UUFDQSxLQUFBLEtBQUE7UUFDQSxLQUFBLEtBQUE7UUFDQTtNQUNBLElBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxNQUFBLElBQUEsR0FBQTtNQUNBLEtBQUE7TUFDQSxJQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUEsS0FBQTthQUNBLElBQUEsS0FBQSxHQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBOztNQUVBLElBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxNQUFBLElBQUEsR0FBQTtNQUNBLEtBQUE7TUFDQSxJQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUEsS0FBQTthQUNBLElBQUEsS0FBQSxHQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBOztNQUVBLElBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxNQUFBLElBQUEsR0FBQTtNQUNBLEtBQUE7TUFDQSxJQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUEsS0FBQTthQUNBLElBQUEsS0FBQSxHQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBOztNQUVBLElBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxNQUFBLElBQUEsR0FBQTtNQUNBLEtBQUE7TUFDQSxJQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUEsS0FBQTthQUNBLElBQUEsS0FBQSxHQUFBO1FBQ0EsSUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBOztNQUVBLElBQUEsS0FBQSxHQUFBLEtBQUEsSUFBQTtRQUNBLEdBQUEsS0FBQSxLQUFBO1FBQ0EsR0FBQSxLQUFBLEtBQUE7O01BRUEsSUFBQSxLQUFBLEdBQUEsS0FBQSxJQUFBO1FBQ0EsR0FBQSxLQUFBLEtBQUE7UUFDQSxHQUFBLEtBQUEsS0FBQTs7TUFFQSxPQUFBOzs7RUFHQSxJQUFBLHVCQUFBO0VBQ0EsR0FBQSxJQUFBLGFBQUEsV0FBQTtJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxRQUFBLE1BQUEsYUFBQTtNQUNBLFFBQUEsU0FBQSxRQUFBO1FBQ0EsSUFBQSxRQUFBLE9BQUEsUUFBQTtRQUNBLFNBQUEsS0FBQTtRQUNBLE9BQUEsUUFBQTtRQUNBLE9BQUE7O01BRUEsUUFBQSxTQUFBLEdBQUE7UUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7VUFDQSxDQUFBLElBQUE7VUFDQSxDQUFBLElBQUE7O1FBRUEsT0FBQSxrQkFBQSxLQUFBLENBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxDQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUE7VUFDQSxFQUFBLEdBQUEsSUFBQSxLQUFBLENBQUEsRUFBQSxHQUFBO1FBQ0EsSUFBQSxRQUFBLE9BQUEsUUFBQSxPQUFBLFNBQUE7UUFDQSxPQUFBOzs7SUFHQSxPQUFBLFdBQUEsT0FBQTtNQUNBLENBQUEsR0FBQTtNQUNBLENBQUEsS0FBQTs7OztFQUlBLFNBQUEsa0JBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtJQUNBLE9BQUEsU0FBQSxVQUFBO01BQ0EsSUFBQSxZQUFBO1FBQ0EsaUJBQUE7UUFDQSxXQUFBLGlCQUFBLElBQUEsSUFBQSxJQUFBO1FBQ0EsVUFBQSxTQUFBO01BQ0EsSUFBQSxPQUFBO1FBQ0EsT0FBQTtRQUNBLFdBQUE7UUFDQSxTQUFBO1FBQ0EsY0FBQSxXQUFBO1VBQ0EsV0FBQTtVQUNBLFdBQUE7VUFDQSxVQUFBO1VBQ0EsUUFBQTs7UUFFQSxZQUFBLFdBQUE7VUFDQSxXQUFBO1VBQ0EsV0FBQSxHQUFBLE1BQUE7VUFDQSxJQUFBLGtCQUFBLGNBQUEsQ0FBQSxJQUFBO1lBQ0EsU0FBQSxTQUFBO1lBQ0EsVUFBQSxTQUFBO1VBQ0EsSUFBQSxVQUFBLFNBQUE7WUFDQSxTQUFBO1lBQ0EsSUFBQSxRQUFBO2NBQ0EsU0FBQTtjQUNBLFlBQUEsTUFBQSxNQUFBLEdBQUE7Y0FDQSxTQUFBOztZQUVBLElBQUEsU0FBQTtjQUNBLG1CQUFBLFVBQUEsU0FBQTtnQkFDQSxhQUFBOztZQUVBLFNBQUE7O1VBRUEsV0FBQSxVQUFBLE9BQUE7Ozs7TUFJQSxTQUFBLGNBQUEsR0FBQTtRQUNBLElBQUEsS0FBQTtVQUNBLElBQUEsUUFBQTtVQUNBLElBQUEsRUFBQTtRQUNBLEtBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtVQUNBLEtBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxRQUFBLElBQUEsSUFBQSxFQUFBLFFBQUEsSUFBQSxFQUFBLElBQUEsR0FBQTtZQUNBLEdBQUEsRUFBQSxHQUFBO1lBQ0EsSUFBQSxFQUFBO1lBQ0EsSUFBQSxFQUFBLE1BQUEsR0FBQTtjQUNBLElBQUEsRUFBQSxLQUFBLEtBQUEsV0FBQSxHQUFBLEdBQUEsS0FBQSxHQUFBLEVBQUE7bUJBQ0E7Y0FDQSxJQUFBLEVBQUEsTUFBQSxLQUFBLFdBQUEsR0FBQSxHQUFBLEtBQUEsR0FBQSxFQUFBOztZQUVBLElBQUE7OztRQUdBLE9BQUEsT0FBQTs7O01BR0EsU0FBQSxZQUFBLE1BQUEsSUFBQSxXQUFBLFVBQUE7UUFDQSxJQUFBLElBQUE7VUFDQSxLQUFBO1FBQ0EsSUFBQSxRQUFBLFFBQUEsQ0FBQSxJQUFBLE9BQUEsTUFBQSxpQkFBQTtZQUNBLE9BQUEsSUFBQSxlQUFBLGNBQUEsTUFBQSxNQUFBO1VBQ0EsWUFBQSxHQUFBO1VBQ0EsR0FBQTtZQUNBLFNBQUEsTUFBQSxNQUFBLEtBQUEsTUFBQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQTttQkFDQSxDQUFBLElBQUEsQ0FBQSxJQUFBLFlBQUEsS0FBQSxPQUFBO2VBQ0E7VUFDQSxTQUFBLE1BQUEsR0FBQSxJQUFBLEdBQUE7Ozs7TUFJQSxTQUFBLGFBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxNQUFBLEtBQUEsS0FBQSxNQUFBLE1BQUEsS0FBQSxLQUFBOzs7TUFHQSxTQUFBLE1BQUEsR0FBQSxHQUFBO1FBQ0EsSUFBQSxhQUFBLEdBQUEsSUFBQSxTQUFBLE1BQUEsR0FBQTs7TUFFQSxJQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxJQUFBLE9BQUE7O01BRUEsU0FBQSxZQUFBO1FBQ0EsS0FBQSxRQUFBO1FBQ0EsSUFBQSxTQUFBLFFBQUEsS0FBQSxPQUFBO1FBQ0EsUUFBQTtRQUNBLEtBQUE7UUFDQSxLQUFBLEtBQUE7OztNQUdBLFNBQUEsVUFBQTtRQUNBLElBQUEsVUFBQTtVQUNBLFVBQUEsS0FBQTtVQUNBLElBQUEsT0FBQSxJQUFBLGVBQUE7VUFDQSxTQUFBLEtBQUEsZUFBQTs7UUFFQSxLQUFBLFFBQUE7UUFDQSxJQUFBLElBQUEsU0FBQTs7O01BR0EsU0FBQSxVQUFBLEdBQUEsR0FBQTtRQUNBLElBQUEsS0FBQSxJQUFBLENBQUEsc0JBQUEsS0FBQSxJQUFBO1VBQ0E7UUFDQSxJQUFBLEtBQUEsSUFBQSxDQUFBLHNCQUFBLEtBQUEsSUFBQTtVQUNBO1FBQ0EsSUFBQSxJQUFBLGFBQUEsR0FBQTtRQUNBLElBQUEsU0FBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBO1FBQ0EsSUFBQSxPQUFBO1VBQ0EsTUFBQSxHQUFBLE1BQUEsR0FBQSxNQUFBO1VBQ0EsUUFBQTtVQUNBLElBQUEsR0FBQTtZQUNBLFNBQUE7WUFDQSxTQUFBLE1BQUEsR0FBQTs7ZUFFQTtVQUNBLElBQUEsS0FBQSxJQUFBLFNBQUEsTUFBQSxHQUFBO2VBQ0E7WUFDQSxJQUFBLElBQUE7Y0FDQSxHQUFBO2dCQUNBLEdBQUE7Z0JBQ0EsR0FBQTs7Y0FFQSxHQUFBO2dCQUNBLEdBQUE7Z0JBQ0EsR0FBQTs7O1lBR0EsSUFBQSxTQUFBLElBQUE7Y0FDQSxJQUFBLENBQUEsSUFBQTtnQkFDQSxTQUFBO2dCQUNBLFNBQUEsTUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUE7O2NBRUEsU0FBQSxNQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQTtjQUNBLElBQUEsQ0FBQSxHQUFBLFNBQUE7Y0FDQSxRQUFBO21CQUNBLElBQUEsR0FBQTtjQUNBLFNBQUE7Y0FDQSxTQUFBLE1BQUEsR0FBQTtjQUNBLFFBQUE7Ozs7UUFJQSxLQUFBLEdBQUEsS0FBQSxHQUFBLEtBQUE7O01BRUEsT0FBQTs7O0lBR0EsU0FBQSxPQUFBLEdBQUEsV0FBQTtNQUNBLE9BQUEsSUFBQSxFQUFBLEtBQUEsTUFBQSxJQUFBLFlBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxFQUFBLEtBQUE7UUFDQSxJQUFBLFlBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsTUFBQSxJQUFBLFlBQUEsSUFBQTtRQUNBLElBQUEsWUFBQSxJQUFBLElBQUE7OztJQUdBLFNBQUEsUUFBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLGNBQUEsRUFBQSxHQUFBLEVBQUE7OztJQUdBLFNBQUEsY0FBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLEtBQUEsT0FBQSxHQUFBO1FBQ0EsS0FBQSxPQUFBLEdBQUE7TUFDQSxPQUFBLE9BQUEsS0FBQSxLQUFBLEtBQUEsT0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsT0FBQSxJQUFBLEVBQUE7UUFDQSxFQUFBLEtBQUEsT0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUE7Ozs7RUFJQSxTQUFBLGFBQUEsV0FBQTtJQUNBLElBQUEsS0FBQTtNQUNBLEtBQUEsSUFBQTtNQUNBLElBQUEseUJBQUE7TUFDQSxJQUFBLEVBQUEsSUFBQTtJQUNBLEVBQUEsWUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsQ0FBQSxLQUFBLElBQUEsS0FBQSxLQUFBLElBQUE7TUFDQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsRUFBQSxLQUFBLElBQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSxzQkFBQSxJQUFBLElBQUE7SUFDQSxJQUFBLFFBQUEsS0FBQSxJQUFBO01BQ0EsSUFBQSxDQUFBLFFBQUEsS0FBQSxJQUFBLE9BQUE7TUFDQSxJQUFBLElBQUEsU0FBQSxJQUFBLElBQUE7TUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBOztJQUVBLFNBQUEsUUFBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxNQUFBO01BQ0EsT0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBOztJQUVBLFFBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxLQUFBO01BQ0EsT0FBQSxDQUFBLEtBQUEsTUFBQSxHQUFBLFFBQUEsR0FBQSxRQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsSUFBQSxPQUFBO1FBQ0EsSUFBQSxNQUFBLElBQUE7O0lBRUEsT0FBQTs7RUFFQSxDQUFBLEdBQUEsSUFBQSxpQkFBQSxXQUFBO0lBQ0EsT0FBQSxhQUFBO0tBQ0EsTUFBQTtFQUNBLEdBQUEsSUFBQSxTQUFBLFdBQUE7SUFDQSxPQUFBLEdBQUEsSUFBQSxpQkFBQSxPQUFBLENBQUEsSUFBQSxJQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsT0FBQTtNQUNBLENBQUEsTUFBQSxPQUFBLE1BQUE7O0VBRUEsR0FBQSxJQUFBLFlBQUEsV0FBQTtJQUNBLElBQUEsVUFBQSxHQUFBLElBQUE7SUFDQSxJQUFBLFNBQUEsR0FBQSxJQUFBLGlCQUFBLE9BQUEsQ0FBQSxLQUFBLElBQUEsT0FBQSxDQUFBLENBQUE7TUFDQTtPQUNBLFVBQUEsQ0FBQSxJQUFBO0lBQ0EsSUFBQSxTQUFBLEdBQUEsSUFBQSxpQkFBQSxPQUFBLENBQUEsS0FBQSxJQUFBLE9BQUEsQ0FBQSxDQUFBO01BQ0E7T0FDQSxVQUFBLENBQUEsR0FBQTtJQUNBLElBQUEsT0FBQSxjQUFBO1FBQ0EsT0FBQSxTQUFBLEdBQUEsR0FBQTtVQUNBLFFBQUEsQ0FBQSxHQUFBOzs7TUFHQSxjQUFBLGFBQUE7O0lBRUEsU0FBQSxVQUFBLGFBQUE7TUFDQSxJQUFBLElBQUEsWUFBQTtRQUNBLElBQUEsWUFBQTtNQUNBLFFBQUE7TUFDQSxDQUFBLGFBQUEsR0FBQSxJQUFBLFdBQUEsWUFBQSxHQUFBLElBQUE7TUFDQSxZQUFBLEdBQUE7TUFDQSxPQUFBOztJQUVBLFVBQUEsU0FBQSxTQUFBLGFBQUE7TUFDQSxJQUFBLElBQUEsUUFBQTtRQUNBLElBQUEsUUFBQTtRQUNBLElBQUEsQ0FBQSxZQUFBLEtBQUEsRUFBQSxNQUFBO1FBQ0EsSUFBQSxDQUFBLFlBQUEsS0FBQSxFQUFBLE1BQUE7TUFDQSxPQUFBLENBQUEsS0FBQSxPQUFBLElBQUEsUUFBQSxLQUFBLENBQUEsUUFBQSxJQUFBLENBQUEsT0FBQTtRQUNBLEtBQUEsUUFBQSxJQUFBLFFBQUEsS0FBQSxDQUFBLFFBQUEsSUFBQSxDQUFBLE9BQUE7UUFDQSxTQUFBLE9BQUE7O0lBRUEsVUFBQSxTQUFBLFNBQUEsUUFBQTtNQUNBLElBQUEsZ0JBQUEsUUFBQSxPQUFBO1FBQ0EsZUFBQSxPQUFBLE9BQUE7UUFDQSxlQUFBLE9BQUEsT0FBQTtNQUNBLE9BQUE7UUFDQSxPQUFBLFNBQUEsR0FBQSxHQUFBO1VBQ0EsY0FBQSxNQUFBLEdBQUE7VUFDQSxhQUFBLE1BQUEsR0FBQTtVQUNBLGFBQUEsTUFBQSxHQUFBOztRQUVBLFFBQUEsV0FBQTtVQUNBLGNBQUE7VUFDQSxhQUFBO1VBQ0EsYUFBQTs7UUFFQSxXQUFBLFdBQUE7VUFDQSxjQUFBO1VBQ0EsYUFBQTtVQUNBLGFBQUE7O1FBRUEsU0FBQSxXQUFBO1VBQ0EsY0FBQTtVQUNBLGFBQUE7VUFDQSxhQUFBOztRQUVBLGNBQUEsV0FBQTtVQUNBLGNBQUE7VUFDQSxhQUFBO1VBQ0EsYUFBQTs7UUFFQSxZQUFBLFdBQUE7VUFDQSxjQUFBO1VBQ0EsYUFBQTtVQUNBLGFBQUE7Ozs7SUFJQSxVQUFBLFlBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLFFBQUE7TUFDQSxRQUFBLFVBQUE7TUFDQSxPQUFBLFVBQUE7TUFDQSxPQUFBLFVBQUE7TUFDQSxPQUFBOztJQUVBLFVBQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsUUFBQTtNQUNBLFFBQUEsTUFBQTtNQUNBLE9BQUEsTUFBQSxJQUFBO01BQ0EsT0FBQSxNQUFBO01BQ0EsT0FBQSxVQUFBLFVBQUEsUUFBQTs7SUFFQSxVQUFBLFlBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLFFBQUE7TUFDQSxJQUFBLElBQUEsUUFBQTtRQUNBLElBQUEsQ0FBQSxFQUFBO1FBQ0EsSUFBQSxDQUFBLEVBQUE7TUFDQSxlQUFBLFFBQUEsVUFBQSxHQUFBLFdBQUE7UUFDQSxDQUFBLElBQUEsT0FBQSxHQUFBLElBQUEsT0FBQTtRQUNBLENBQUEsSUFBQSxPQUFBLEdBQUEsSUFBQSxPQUFBO1NBQ0EsT0FBQSxhQUFBO01BQ0EsY0FBQSxPQUFBLFVBQUEsQ0FBQSxJQUFBLE9BQUEsR0FBQSxJQUFBLE9BQUEsSUFBQTtRQUNBO1VBQ0EsQ0FBQSxJQUFBLE9BQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxJQUFBO1VBQ0EsQ0FBQSxJQUFBLE9BQUEsSUFBQSxHQUFBLElBQUEsT0FBQSxJQUFBO1dBQ0EsT0FBQSxhQUFBO01BQ0EsY0FBQSxPQUFBLFVBQUEsQ0FBQSxJQUFBLE9BQUEsR0FBQSxJQUFBLE9BQUEsSUFBQTtRQUNBO1VBQ0EsQ0FBQSxJQUFBLE9BQUEsSUFBQSxHQUFBLElBQUEsT0FBQSxJQUFBO1VBQ0EsQ0FBQSxJQUFBLE9BQUEsSUFBQSxHQUFBLElBQUEsT0FBQSxJQUFBO1dBQ0EsT0FBQSxhQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLFVBQUEsTUFBQTs7RUFFQSxJQUFBLG9CQUFBLHdCQUFBLGtCQUFBO0lBQ0EsT0FBQTtJQUNBLFdBQUE7SUFDQSxTQUFBO0lBQ0EsY0FBQSxXQUFBO01BQ0EseUJBQUE7TUFDQSxnQkFBQSxZQUFBOztJQUVBLFlBQUEsV0FBQTtNQUNBLGdCQUFBLFlBQUEsZ0JBQUE7UUFDQSxnQkFBQSxRQUFBO01BQ0Esc0JBQUEsSUFBQSx5QkFBQTs7OztFQUlBLFNBQUEsMkJBQUE7SUFDQSxJQUFBLEtBQUEsS0FBQSxJQUFBO0lBQ0EsZ0JBQUEsUUFBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLGdCQUFBLFFBQUE7TUFDQSxNQUFBLEtBQUEsR0FBQSxNQUFBLEtBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBLEdBQUE7TUFDQSwwQkFBQSxLQUFBLElBQUEsS0FBQTtNQUNBLEtBQUEsR0FBQSxLQUFBOztJQUVBLGdCQUFBLFVBQUEsV0FBQTtNQUNBLFVBQUEsS0FBQTs7O0VBR0EsSUFBQSxxQkFBQSxxQkFBQTtJQUNBO0VBQ0EsSUFBQSxvQkFBQTtJQUNBLE9BQUE7SUFDQSxXQUFBO0lBQ0EsU0FBQTtJQUNBLGNBQUE7SUFDQSxZQUFBOzs7RUFHQSxTQUFBLHVCQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxxQkFBQSxzQkFBQTtJQUNBLElBQUEsSUFBQSxxQkFBQSxzQkFBQTtJQUNBLElBQUEsSUFBQSxxQkFBQSxzQkFBQTtJQUNBLElBQUEsSUFBQSxxQkFBQSxzQkFBQTs7O0VBR0EsU0FBQSxvQkFBQTtJQUNBLElBQUEsY0FBQSx3QkFBQTtNQUNBLFNBQUE7SUFDQSxJQUFBLFNBQUE7TUFDQSxPQUFBO01BQ0EsV0FBQSxXQUFBO1FBQ0EsT0FBQSxRQUFBOztNQUVBLFNBQUE7TUFDQSxjQUFBLFdBQUE7UUFDQSxPQUFBLFVBQUE7O01BRUEsWUFBQSxXQUFBO1FBQ0EsT0FBQSxVQUFBO1FBQ0EsT0FBQSxRQUFBOztNQUVBLGFBQUEsU0FBQSxHQUFBO1FBQ0EsY0FBQSx3QkFBQTtRQUNBLE9BQUE7O01BRUEsUUFBQSxXQUFBO1FBQ0EsSUFBQSxPQUFBLFFBQUE7VUFDQSxJQUFBLFNBQUEsT0FBQSxLQUFBO1VBQ0EsU0FBQTtVQUNBLE9BQUE7Ozs7O0lBS0EsU0FBQSxNQUFBLEdBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBOzs7SUFHQSxTQUFBLGVBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxLQUFBLEtBQUEsR0FBQSxLQUFBO01BQ0EsT0FBQSxRQUFBOzs7SUFHQSxTQUFBLFVBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxLQUFBLEtBQUEsR0FBQSxLQUFBOzs7SUFHQSxTQUFBLFVBQUE7TUFDQSxPQUFBLFFBQUE7OztJQUdBLFNBQUEsaUJBQUE7TUFDQSxPQUFBLEtBQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSx3QkFBQSxRQUFBO0lBQ0EsT0FBQSxRQUFBLFNBQUEsTUFBQSxTQUFBLE1BQUEsU0FBQSxjQUFBLENBQUE7TUFDQSxTQUFBLE1BQUEsU0FBQSxNQUFBLFNBQUEsY0FBQSxJQUFBLFNBQUE7O0VBRUEsSUFBQSxzQkFBQTtJQUNBLE9BQUE7SUFDQSxXQUFBO0lBQ0EsU0FBQTtJQUNBLGNBQUEsV0FBQTtNQUNBLG9CQUFBLFlBQUE7O0lBRUEsWUFBQSxXQUFBO01BQ0Esb0JBQUEsUUFBQTtNQUNBLG9CQUFBLFlBQUE7TUFDQSxvQkFBQSxVQUFBOzs7O0VBSUEsU0FBQSx5QkFBQSxHQUFBLEdBQUE7SUFDQSxxQkFBQTtJQUNBLHFCQUFBO0lBQ0EsRUFBQTs7O0VBR0EsU0FBQSwrQkFBQTtJQUNBLElBQUEsSUFBQTtJQUNBLG9CQUFBLFFBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxvQkFBQSxRQUFBO01BQ0EseUJBQUEsS0FBQSxHQUFBLEtBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLEtBQUEsSUFBQTtRQUNBLEtBQUEsSUFBQTtRQUNBLElBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EscUJBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxxQkFBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLHFCQUFBO01BQ0EseUJBQUEsS0FBQSxHQUFBLEtBQUE7Ozs7RUFJQSxTQUFBLDZCQUFBO0lBQ0Esb0JBQUEsUUFBQTs7O0VBR0EsU0FBQSwrQkFBQTtJQUNBLElBQUEsS0FBQSxLQUFBLElBQUE7SUFDQSxvQkFBQSxRQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0Esb0JBQUEsUUFBQTtNQUNBLHlCQUFBLE1BQUEsS0FBQSxHQUFBLE1BQUEsS0FBQTs7O0lBR0EsU0FBQSxVQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsS0FBQSxJQUFBO1FBQ0EsS0FBQSxJQUFBO1FBQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxxQkFBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLHFCQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EscUJBQUE7TUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBO01BQ0EscUJBQUEsS0FBQSxLQUFBO01BQ0EscUJBQUEsS0FBQSxLQUFBO01BQ0EscUJBQUEsSUFBQTtNQUNBLHlCQUFBLEtBQUEsR0FBQSxLQUFBOztJQUVBLG9CQUFBLFVBQUEsV0FBQTtNQUNBLFVBQUEsS0FBQTs7OztFQUlBLFNBQUEsbUJBQUEsU0FBQTtJQUNBLElBQUEsY0FBQTtJQUNBLElBQUEsU0FBQTtNQUNBLE9BQUE7TUFDQSxXQUFBLFdBQUE7UUFDQSxPQUFBLFFBQUE7O01BRUEsU0FBQTtNQUNBLGNBQUEsV0FBQTtRQUNBLE9BQUEsVUFBQTs7TUFFQSxZQUFBLFdBQUE7UUFDQSxPQUFBLFVBQUE7UUFDQSxPQUFBLFFBQUE7O01BRUEsYUFBQSxTQUFBLEdBQUE7UUFDQSxjQUFBO1FBQ0EsT0FBQTs7TUFFQSxRQUFBOzs7SUFHQSxTQUFBLE1BQUEsR0FBQSxHQUFBO01BQ0EsUUFBQSxPQUFBLElBQUEsYUFBQTtNQUNBLFFBQUEsSUFBQSxHQUFBLEdBQUEsYUFBQSxHQUFBOzs7SUFHQSxTQUFBLGVBQUEsR0FBQSxHQUFBO01BQ0EsUUFBQSxPQUFBLEdBQUE7TUFDQSxPQUFBLFFBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBLEdBQUE7TUFDQSxRQUFBLE9BQUEsR0FBQTs7O0lBR0EsU0FBQSxVQUFBO01BQ0EsT0FBQSxRQUFBOzs7SUFHQSxTQUFBLGlCQUFBO01BQ0EsUUFBQTs7SUFFQSxPQUFBOzs7RUFHQSxTQUFBLGdCQUFBLFNBQUE7SUFDQSxJQUFBLEtBQUE7TUFDQSxpQkFBQSxLQUFBLElBQUEsS0FBQTtNQUNBLFdBQUE7O0lBRUEsU0FBQSxTQUFBLFFBQUE7TUFDQSxPQUFBLENBQUEsV0FBQSxvQkFBQSxjQUFBOzs7SUFHQSxTQUFBLGFBQUEsUUFBQTtNQUNBLE9BQUEsc0JBQUEsUUFBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLElBQUEsUUFBQSxHQUFBO1FBQ0EsT0FBQSxNQUFBLEVBQUEsSUFBQSxFQUFBOzs7O0lBSUEsU0FBQSxrQkFBQSxRQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtNQUNBLElBQUEsV0FBQTtRQUNBLE9BQUE7UUFDQSxXQUFBO1FBQ0EsU0FBQTtRQUNBLGNBQUEsV0FBQTtVQUNBLE9BQUE7VUFDQSxTQUFBLFlBQUE7O1FBRUEsWUFBQSxXQUFBO1VBQ0EsT0FBQTtVQUNBLFNBQUEsWUFBQTs7OztNQUlBLFNBQUEsTUFBQSxHQUFBLEdBQUE7UUFDQSxJQUFBLFFBQUEsR0FBQTtRQUNBLE9BQUEsTUFBQSxFQUFBLElBQUEsRUFBQTs7O01BR0EsU0FBQSxZQUFBO1FBQ0EsS0FBQTtRQUNBLFNBQUEsUUFBQTtRQUNBLE9BQUE7OztNQUdBLFNBQUEsVUFBQSxHQUFBLEdBQUE7UUFDQSxJQUFBLElBQUEsaUJBQUEsQ0FBQSxHQUFBO1VBQ0EsSUFBQSxRQUFBLEdBQUE7UUFDQSxlQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsRUFBQSxJQUFBLEtBQUEsRUFBQSxJQUFBLEtBQUE7VUFDQSxLQUFBLEVBQUEsSUFBQSxLQUFBLEVBQUEsSUFBQSxLQUFBLEVBQUEsSUFBQSxVQUFBO1FBQ0EsT0FBQSxNQUFBLElBQUE7OztNQUdBLFNBQUEsVUFBQTtRQUNBLFNBQUEsUUFBQTtRQUNBLE9BQUE7OztNQUdBLFNBQUEsWUFBQTtRQUNBO1FBQ0EsU0FBQSxRQUFBO1FBQ0EsU0FBQSxVQUFBOzs7TUFHQSxTQUFBLFVBQUEsR0FBQSxHQUFBO1FBQ0EsVUFBQSxNQUFBLEdBQUEsTUFBQSxJQUFBLE1BQUEsSUFBQSxNQUFBLElBQUEsTUFBQSxJQUFBLE1BQUE7VUFDQSxNQUFBO1FBQ0EsU0FBQSxRQUFBOzs7TUFHQSxTQUFBLFVBQUE7UUFDQSxlQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQTtVQUNBLFVBQUE7UUFDQSxTQUFBLFVBQUE7UUFDQTs7TUFFQSxPQUFBOzs7SUFHQSxTQUFBLGVBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBO01BQ0EsT0FBQSxRQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUE7UUFDQSxLQUFBLEtBQUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EsSUFBQSxLQUFBLElBQUEsTUFBQSxTQUFBO1FBQ0EsSUFBQSxJQUFBLEtBQUE7VUFDQSxJQUFBLEtBQUE7VUFDQSxJQUFBLEtBQUE7VUFDQSxJQUFBLEtBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7VUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBO1VBQ0EsS0FBQSxJQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLE1BQUEsSUFBQSxDQUFBLEtBQUEsTUFBQTtVQUNBLEtBQUEsTUFBQSxHQUFBO1VBQ0EsSUFBQSxRQUFBLElBQUE7VUFDQSxLQUFBLEVBQUE7VUFDQSxLQUFBLEVBQUE7VUFDQSxNQUFBLEtBQUE7VUFDQSxNQUFBLEtBQUE7VUFDQSxLQUFBLEtBQUEsTUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxNQUFBLElBQUEsQ0FBQSxLQUFBLE1BQUEsS0FBQSxPQUFBLEtBQUEsTUFBQTtVQUNBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLGdCQUFBO1VBQ0EsZUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxLQUFBLEdBQUEsS0FBQTtZQUNBLEdBQUEsT0FBQTtVQUNBLE9BQUEsTUFBQSxJQUFBO1VBQ0EsZUFBQSxJQUFBLElBQUEsSUFBQSxHQUFBLEdBQUEsR0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtZQUNBOzs7O0lBSUEsU0FBQSxZQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQSxLQUFBLEtBQUE7TUFDQSxXQUFBLENBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQTs7RUFFQSxHQUFBLElBQUEsT0FBQSxXQUFBO0lBQ0EsSUFBQSxjQUFBO01BQ0EsWUFBQSxTQUFBLGVBQUEsZUFBQTs7SUFFQSxTQUFBLEtBQUEsUUFBQTtNQUNBLElBQUEsUUFBQTtRQUNBLElBQUEsT0FBQSxnQkFBQSxZQUFBLGNBQUEsWUFBQTtVQUNBLFlBQUEsTUFBQSxNQUFBO1FBQ0EsSUFBQSxDQUFBLGVBQUEsQ0FBQSxZQUFBLE9BQUE7VUFDQSxjQUFBO1FBQ0EsR0FBQSxJQUFBLE9BQUEsUUFBQTs7TUFFQSxPQUFBLGNBQUE7O0lBRUEsS0FBQSxPQUFBLFNBQUEsUUFBQTtNQUNBLHFCQUFBO01BQ0EsR0FBQSxJQUFBLE9BQUEsUUFBQSxjQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFdBQUEsU0FBQSxRQUFBO01BQ0Esb0JBQUEsb0JBQUE7UUFDQSxvQkFBQSxvQkFBQTtRQUNBLG9CQUFBLG9CQUFBLG9CQUFBO01BQ0EsR0FBQSxJQUFBLE9BQUEsUUFBQSxjQUFBO01BQ0EsT0FBQSxvQkFBQSxDQUFBLG9CQUFBO1FBQ0Esb0JBQUE7VUFDQSxvQkFBQSxDQUFBLG9CQUFBO1FBQ0Esb0JBQUE7VUFDQSxvQkFBQSxDQUFBLG9CQUFBO1FBQ0Esb0JBQUE7VUFDQSxDQUFBLEtBQUE7O0lBRUEsS0FBQSxTQUFBLFNBQUEsUUFBQTtNQUNBLHNCQUFBLHNCQUFBLEVBQUE7UUFDQSxzQkFBQTtNQUNBLEdBQUEsSUFBQSxPQUFBLFFBQUEsY0FBQTtNQUNBLE9BQUE7UUFDQSxDQUFBLHFCQUFBO1FBQ0EsQ0FBQSxxQkFBQTs7O0lBR0EsS0FBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGdCQUFBLENBQUEsYUFBQSxLQUFBLEVBQUE7UUFDQSx5QkFBQSxLQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFVBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsZ0JBQUEsQ0FBQSxVQUFBLE1BQUEsT0FBQSxJQUFBO1FBQ0EsSUFBQSxtQkFBQTtNQUNBLElBQUEsT0FBQSxnQkFBQSxZQUFBLGNBQUE7UUFDQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxjQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGNBQUEsT0FBQSxNQUFBLGFBQUEsS0FBQSxjQUFBLFlBQUE7UUFDQSxJQUFBLENBQUE7TUFDQSxPQUFBOzs7SUFHQSxTQUFBLFFBQUE7TUFDQSxjQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLEtBQUEsV0FBQSxHQUFBLElBQUEsYUFBQSxRQUFBOzs7RUFHQSxTQUFBLHlCQUFBLFNBQUE7SUFDQSxJQUFBLFdBQUEsZ0JBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLFFBQUEsQ0FBQSxJQUFBLFlBQUEsSUFBQTs7SUFFQSxPQUFBLFNBQUEsUUFBQTtNQUNBLE9BQUEseUJBQUEsU0FBQTs7O0VBR0EsR0FBQSxJQUFBLFlBQUEsU0FBQSxTQUFBO0lBQ0EsT0FBQTtNQUNBLFFBQUEsU0FBQSxRQUFBO1FBQ0EsSUFBQSxZQUFBLElBQUEsaUJBQUE7UUFDQSxLQUFBLElBQUEsS0FBQSxTQUFBLFVBQUEsS0FBQSxRQUFBO1FBQ0EsT0FBQTs7Ozs7RUFLQSxTQUFBLGlCQUFBLFFBQUE7SUFDQSxLQUFBLFNBQUE7O0VBRUEsaUJBQUEsWUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxLQUFBLE9BQUEsTUFBQSxHQUFBOztJQUVBLFFBQUEsV0FBQTtNQUNBLEtBQUEsT0FBQTs7SUFFQSxXQUFBLFdBQUE7TUFDQSxLQUFBLE9BQUE7O0lBRUEsU0FBQSxXQUFBO01BQ0EsS0FBQSxPQUFBOztJQUVBLGNBQUEsV0FBQTtNQUNBLEtBQUEsT0FBQTs7SUFFQSxZQUFBLFdBQUE7TUFDQSxLQUFBLE9BQUE7Ozs7RUFJQSxTQUFBLHNCQUFBLFFBQUEsT0FBQTtJQUNBLE9BQUE7TUFDQSxPQUFBO01BQ0EsUUFBQSxXQUFBO1FBQ0EsT0FBQTs7TUFFQSxXQUFBLFdBQUE7UUFDQSxPQUFBOztNQUVBLFNBQUEsV0FBQTtRQUNBLE9BQUE7O01BRUEsY0FBQSxXQUFBO1FBQ0EsT0FBQTs7TUFFQSxZQUFBLFdBQUE7UUFDQSxPQUFBOzs7O0VBSUEsR0FBQSxJQUFBLGFBQUE7RUFDQSxHQUFBLElBQUEsb0JBQUE7O0VBRUEsU0FBQSxrQkFBQSxTQUFBO0lBQ0EsT0FBQSx5QkFBQSxXQUFBO01BQ0EsT0FBQTs7OztFQUlBLFNBQUEseUJBQUEsV0FBQTtJQUNBLElBQUEsU0FBQSxRQUFBLGVBQUEsa0JBQUE7UUFDQSxTQUFBLEdBQUEsR0FBQTtVQUNBLElBQUEsUUFBQSxHQUFBO1VBQ0EsT0FBQSxDQUFBLEVBQUEsS0FBQSxJQUFBLElBQUEsS0FBQSxFQUFBLEtBQUE7O01BRUEsSUFBQTtNQUNBLElBQUE7TUFDQSxJQUFBO01BQ0EsSUFBQTtNQUNBLElBQUE7TUFDQSxLQUFBO01BQ0EsS0FBQTtNQUNBLEtBQUE7TUFDQSxJQUFBLElBQUEsVUFBQTtNQUNBLFdBQUE7TUFDQSxZQUFBO01BQ0EsYUFBQTtNQUNBOztJQUVBLFNBQUEsV0FBQSxPQUFBO01BQ0EsUUFBQSxjQUFBLE1BQUEsS0FBQSxZQUFBLE1BQUEsS0FBQTtNQUNBLE9BQUEsQ0FBQSxNQUFBLEtBQUEsSUFBQSxJQUFBLEtBQUEsTUFBQSxLQUFBOzs7SUFHQSxTQUFBLE9BQUEsT0FBQTtNQUNBLFFBQUEsY0FBQSxPQUFBLENBQUEsTUFBQSxLQUFBLE1BQUEsR0FBQSxDQUFBLEtBQUEsTUFBQSxNQUFBO01BQ0EsT0FBQSxTQUFBLENBQUEsTUFBQSxLQUFBLFlBQUEsTUFBQSxLQUFBOztJQUVBLFdBQUEsU0FBQSxTQUFBLFFBQUE7TUFDQSxJQUFBLFFBQUEsT0FBQSxRQUFBO01BQ0EsU0FBQSx5QkFBQSxRQUFBLFFBQUE7UUFDQSxTQUFBO01BQ0EsT0FBQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxXQUFBLFlBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsVUFBQSxLQUFBLFFBQUEsWUFBQSxHQUFBO1FBQ0Esa0JBQUEsQ0FBQSxZQUFBLENBQUEsS0FBQTtNQUNBLE9BQUE7O0lBRUEsV0FBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGFBQUE7TUFDQSxXQUFBLElBQUEsa0JBQUEsRUFBQSxHQUFBLElBQUEsRUFBQSxHQUFBLElBQUEsRUFBQSxHQUFBLElBQUEsRUFBQSxHQUFBO1FBQ0E7TUFDQSxPQUFBOztJQUVBLFdBQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxJQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLFdBQUEsWUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsQ0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLEVBQUE7TUFDQSxJQUFBLENBQUEsRUFBQTtNQUNBLE9BQUE7O0lBRUEsV0FBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQSxDQUFBLElBQUEsWUFBQSxJQUFBO01BQ0EsSUFBQSxFQUFBLEtBQUEsTUFBQTtNQUNBLElBQUEsRUFBQSxLQUFBLE1BQUE7TUFDQSxPQUFBOztJQUVBLFdBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsQ0FBQSxLQUFBLFlBQUEsS0FBQSxZQUFBO1FBQ0E7O01BRUEsS0FBQSxFQUFBLEtBQUEsTUFBQTtNQUNBLEtBQUEsRUFBQSxLQUFBLE1BQUE7TUFDQSxLQUFBLEVBQUEsU0FBQSxJQUFBLEVBQUEsS0FBQSxNQUFBLGFBQUE7TUFDQSxPQUFBOztJQUVBLEdBQUEsT0FBQSxZQUFBLGlCQUFBOztJQUVBLFNBQUEsUUFBQTtNQUNBLGdCQUFBLGVBQUEsU0FBQSxnQkFBQSxJQUFBLElBQUE7UUFDQTtNQUNBLElBQUEsU0FBQSxRQUFBLEdBQUE7TUFDQSxLQUFBLElBQUEsT0FBQSxLQUFBO01BQ0EsS0FBQSxJQUFBLE9BQUEsS0FBQTtNQUNBLE9BQUE7OztJQUdBLFNBQUEsYUFBQTtNQUNBLElBQUEsUUFBQSxPQUFBLFFBQUEsT0FBQSxTQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLFdBQUE7TUFDQSxVQUFBLFVBQUEsTUFBQSxNQUFBO01BQ0EsV0FBQSxTQUFBLFFBQUEsVUFBQTtNQUNBLE9BQUE7Ozs7RUFJQSxTQUFBLHlCQUFBLFFBQUE7SUFDQSxPQUFBLHNCQUFBLFFBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLE1BQUEsSUFBQSxZQUFBLElBQUE7Ozs7RUFJQSxTQUFBLHVCQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxHQUFBOztFQUVBLENBQUEsR0FBQSxJQUFBLGtCQUFBLFdBQUE7SUFDQSxPQUFBLGtCQUFBO0tBQ0EsTUFBQSx1QkFBQSxTQUFBO0VBQ0EsR0FBQSxJQUFBLFdBQUEsU0FBQSxRQUFBO0lBQ0EsU0FBQSxnQkFBQSxPQUFBLEtBQUEsTUFBQSxZQUFBLE9BQUE7TUFDQSxZQUFBLE9BQUEsU0FBQSxJQUFBLE9BQUEsS0FBQSxhQUFBOztJQUVBLFNBQUEsUUFBQSxhQUFBO01BQ0EsY0FBQSxPQUFBLFlBQUEsS0FBQSxZQUFBLFlBQUE7UUFDQTtNQUNBLE9BQUEsWUFBQSxNQUFBLFlBQUEsWUFBQSxNQUFBO1FBQ0E7O0lBRUEsUUFBQSxTQUFBLFNBQUEsYUFBQTtNQUNBLGNBQUEsT0FBQSxPQUFBLFlBQUEsS0FBQTtRQUNBLFlBQUEsS0FBQTtNQUNBLE9BQUEsWUFBQSxNQUFBLFlBQUEsWUFBQSxNQUFBO1FBQ0E7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSx3QkFBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLENBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLENBQUEsSUFBQSxJQUFBLElBQUEsR0FBQTs7RUFFQSx3QkFBQSxTQUFBOztFQUVBLFNBQUEsZ0JBQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxPQUFBLEtBQUEsTUFBQSxLQUFBLGVBQUEsaUJBQUE7UUFDQSxrQkFBQSxJQUFBLE9BQUEsaUJBQUEsTUFBQSxNQUFBO01BQ0Esa0JBQUEsSUFBQSxNQUFBOzs7RUFHQSxTQUFBLHdCQUFBLElBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxLQUFBLElBQUEsQ0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLElBQUEsSUFBQSxHQUFBOzs7O0VBSUEsU0FBQSxpQkFBQSxJQUFBO0lBQ0EsSUFBQSxXQUFBLHdCQUFBO0lBQ0EsU0FBQSxTQUFBLHdCQUFBLENBQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLGtCQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsUUFBQSxLQUFBLElBQUE7TUFDQSxRQUFBLEtBQUEsSUFBQTtNQUNBLFFBQUEsS0FBQSxJQUFBO01BQ0EsUUFBQSxLQUFBLElBQUE7O0lBRUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxLQUFBLElBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBLElBQUEsS0FBQTtRQUNBLElBQUEsS0FBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLFFBQUEsSUFBQTtNQUNBLE9BQUEsQ0FBQSxLQUFBLE1BQUEsSUFBQSxRQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsSUFBQTtRQUNBLFFBQUEsSUFBQSxRQUFBLElBQUE7OztJQUdBLFNBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxLQUFBLElBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBLElBQUEsS0FBQTtRQUNBLElBQUEsS0FBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLFFBQUEsSUFBQTtNQUNBLE9BQUEsQ0FBQSxLQUFBLE1BQUEsSUFBQSxRQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsSUFBQTtRQUNBLFFBQUEsSUFBQSxRQUFBLElBQUE7OztJQUdBLE9BQUE7O0VBRUEsR0FBQSxJQUFBLFNBQUEsV0FBQTtJQUNBLElBQUEsU0FBQSxDQUFBLEdBQUE7TUFDQSxPQUFBLFlBQUE7TUFDQTs7SUFFQSxTQUFBLFNBQUE7TUFDQSxJQUFBLFNBQUEsT0FBQSxXQUFBLGFBQUEsT0FBQSxNQUFBO1VBQ0EsYUFBQTtRQUNBLFNBQUEsZ0JBQUEsQ0FBQSxPQUFBLEtBQUEsWUFBQSxDQUFBLE9BQUE7VUFDQSxZQUFBLEdBQUE7UUFDQSxPQUFBO01BQ0EsWUFBQSxNQUFBLE1BQUEsR0FBQTtRQUNBLE9BQUEsU0FBQSxHQUFBLEdBQUE7VUFDQSxLQUFBLEtBQUEsSUFBQSxPQUFBLEdBQUE7VUFDQSxFQUFBLE1BQUEsWUFBQSxFQUFBLE1BQUE7OztNQUdBLE9BQUE7UUFDQSxNQUFBO1FBQ0EsYUFBQSxDQUFBOzs7SUFHQSxPQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGNBQUEseUJBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQTtRQUNBLFlBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUEsWUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxjQUFBLHlCQUFBLFFBQUEsWUFBQTtRQUNBLFlBQUEsQ0FBQSxLQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLE9BQUEsTUFBQTs7O0VBR0EsU0FBQSx5QkFBQSxRQUFBLFdBQUE7SUFDQSxJQUFBLEtBQUEsS0FBQSxJQUFBO01BQ0EsS0FBQSxLQUFBLElBQUE7SUFDQSxPQUFBLFNBQUEsTUFBQSxJQUFBLFdBQUEsVUFBQTtNQUNBLElBQUEsT0FBQSxZQUFBO01BQ0EsSUFBQSxRQUFBLE1BQUE7UUFDQSxPQUFBLG1CQUFBLElBQUE7UUFDQSxLQUFBLG1CQUFBLElBQUE7UUFDQSxJQUFBLFlBQUEsSUFBQSxPQUFBLEtBQUEsT0FBQSxJQUFBLFFBQUEsWUFBQTthQUNBO1FBQ0EsT0FBQSxTQUFBLFlBQUE7UUFDQSxLQUFBLFNBQUEsS0FBQTs7TUFFQSxLQUFBLElBQUEsT0FBQSxJQUFBLE1BQUEsWUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQUE7UUFDQSxNQUFBO1FBQ0EsU0FBQSxNQUFBLENBQUEsUUFBQSxpQkFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLEtBQUEsSUFBQSxJQUFBO1VBQ0EsS0FBQSxLQUFBLElBQUE7WUFDQSxJQUFBLE1BQUE7Ozs7O0VBS0EsU0FBQSxtQkFBQSxJQUFBLE9BQUE7SUFDQSxJQUFBLElBQUEsaUJBQUE7SUFDQSxFQUFBLE1BQUE7SUFDQSwwQkFBQTtJQUNBLElBQUEsUUFBQSxRQUFBLENBQUEsRUFBQTtJQUNBLE9BQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxLQUFBLElBQUEsQ0FBQSxRQUFBLFNBQUEsSUFBQSxLQUFBLEtBQUEsTUFBQSxJQUFBLEtBQUE7O0VBRUEsR0FBQSxJQUFBLFdBQUEsU0FBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBO01BQ0EsS0FBQSxFQUFBLEtBQUE7TUFDQSxLQUFBLEVBQUEsS0FBQTtNQUNBLFFBQUEsS0FBQSxJQUFBO01BQ0EsUUFBQSxLQUFBLElBQUE7TUFDQSxRQUFBLEtBQUEsSUFBQTtNQUNBLFFBQUEsS0FBQSxJQUFBO01BQ0EsUUFBQSxLQUFBLElBQUE7TUFDQSxRQUFBLEtBQUEsSUFBQTtNQUNBO0lBQ0EsT0FBQSxLQUFBLE1BQUEsS0FBQSxLQUFBLENBQUEsSUFBQSxRQUFBLFNBQUEsSUFBQSxDQUFBLElBQUE7UUFDQSxRQUFBLFFBQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxRQUFBO01BQ0EsUUFBQTs7RUFFQSxHQUFBLElBQUEsWUFBQSxXQUFBO0lBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsS0FBQTtNQUNBLEtBQUE7TUFDQSxLQUFBO01BQ0EsS0FBQTtNQUNBLEdBQUEsR0FBQSxHQUFBLEdBQUEsWUFBQTs7SUFFQSxTQUFBLFlBQUE7TUFDQSxPQUFBO1FBQ0EsTUFBQTtRQUNBLGFBQUE7Ozs7SUFJQSxTQUFBLFFBQUE7TUFDQSxPQUFBLEdBQUEsTUFBQSxLQUFBLEtBQUEsS0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsR0FBQSxPQUFBLEdBQUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxPQUFBLEdBQUEsTUFBQSxLQUFBO1FBQ0EsS0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBLE9BQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxJQUFBLElBQUEsTUFBQTtTQUNBLElBQUEsSUFBQSxPQUFBLEdBQUEsTUFBQSxLQUFBLEtBQUEsS0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBO1FBQ0EsU0FBQSxHQUFBO1VBQ0EsT0FBQSxJQUFBLElBQUEsTUFBQTtXQUNBLElBQUE7O0lBRUEsVUFBQSxRQUFBLFdBQUE7TUFDQSxPQUFBLFFBQUEsSUFBQSxTQUFBLGFBQUE7UUFDQSxPQUFBO1VBQ0EsTUFBQTtVQUNBLGFBQUE7Ozs7SUFJQSxVQUFBLFVBQUEsV0FBQTtNQUNBLE9BQUE7UUFDQSxNQUFBO1FBQ0EsYUFBQSxDQUFBLEVBQUEsSUFBQSxPQUFBLEVBQUEsSUFBQSxNQUFBLElBQUEsRUFBQSxJQUFBLFVBQUE7VUFDQSxJQUFBLEVBQUEsSUFBQSxVQUFBLE1BQUE7OztJQUdBLFVBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsVUFBQTtNQUNBLE9BQUEsVUFBQSxZQUFBLEdBQUEsWUFBQTs7SUFFQSxVQUFBLGNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO1FBQ0EsQ0FBQSxJQUFBO1FBQ0EsQ0FBQSxJQUFBOztNQUVBLEtBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLENBQUEsRUFBQSxHQUFBO01BQ0EsS0FBQSxDQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsQ0FBQSxFQUFBLEdBQUE7TUFDQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxPQUFBLFVBQUEsVUFBQTs7SUFFQSxVQUFBLGNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO1FBQ0EsQ0FBQSxJQUFBO1FBQ0EsQ0FBQSxJQUFBOztNQUVBLEtBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLENBQUEsRUFBQSxHQUFBO01BQ0EsS0FBQSxDQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsQ0FBQSxFQUFBLEdBQUE7TUFDQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxPQUFBLFVBQUEsVUFBQTs7SUFFQSxVQUFBLE9BQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLFVBQUE7TUFDQSxPQUFBLFVBQUEsVUFBQSxHQUFBLFVBQUE7O0lBRUEsVUFBQSxZQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQSxDQUFBLElBQUE7TUFDQSxLQUFBLENBQUEsRUFBQSxJQUFBLEtBQUEsQ0FBQSxFQUFBO01BQ0EsT0FBQTs7SUFFQSxVQUFBLFlBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLENBQUEsSUFBQTtNQUNBLEtBQUEsQ0FBQSxFQUFBLElBQUEsS0FBQSxDQUFBLEVBQUE7TUFDQSxPQUFBOztJQUVBLFVBQUEsWUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxZQUFBLENBQUE7TUFDQSxJQUFBLGtCQUFBLElBQUEsSUFBQTtNQUNBLElBQUEsa0JBQUEsSUFBQSxJQUFBO01BQ0EsSUFBQSxrQkFBQSxJQUFBLElBQUE7TUFDQSxJQUFBLGtCQUFBLElBQUEsSUFBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQSxVQUFBLFlBQUE7TUFDQSxDQUFBLENBQUEsS0FBQSxDQUFBLEtBQUE7TUFDQSxDQUFBLEtBQUEsS0FBQTtPQUNBLFlBQUE7TUFDQSxDQUFBLENBQUEsS0FBQSxDQUFBLEtBQUE7TUFDQSxDQUFBLEtBQUEsS0FBQTs7OztFQUlBLFNBQUEsa0JBQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxJQUFBLElBQUEsR0FBQSxNQUFBLElBQUEsS0FBQSxHQUFBLElBQUEsT0FBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLElBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxDQUFBLEdBQUE7Ozs7O0VBS0EsU0FBQSxrQkFBQSxJQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsSUFBQSxHQUFBLE1BQUEsSUFBQSxLQUFBLEdBQUEsSUFBQSxPQUFBO0lBQ0EsT0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxTQUFBLEdBQUE7UUFDQSxPQUFBLENBQUEsR0FBQTs7Ozs7RUFLQSxTQUFBLFVBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQTs7O0VBR0EsU0FBQSxVQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUE7O0VBRUEsR0FBQSxJQUFBLFdBQUEsV0FBQTtJQUNBLElBQUEsU0FBQTtNQUNBLFNBQUEsU0FBQTtNQUNBOztJQUVBLFNBQUEsV0FBQTtNQUNBLE9BQUE7UUFDQSxNQUFBO1FBQ0EsYUFBQSxDQUFBLFdBQUEsT0FBQSxNQUFBLE1BQUEsWUFBQTtVQUNBLE9BQUEsTUFBQSxNQUFBOzs7O0lBSUEsU0FBQSxXQUFBLFdBQUE7TUFDQSxPQUFBLEdBQUEsSUFBQSxTQUFBLFdBQUEsT0FBQSxNQUFBLE1BQUE7UUFDQSxXQUFBLE9BQUEsTUFBQSxNQUFBOztJQUVBLFNBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBLEdBQUEsVUFBQSxPQUFBLE1BQUEsYUFBQSxPQUFBO01BQ0EsT0FBQTs7SUFFQSxTQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQSxHQUFBLFVBQUEsT0FBQSxNQUFBLGFBQUEsT0FBQTtNQUNBLE9BQUE7O0lBRUEsU0FBQSxZQUFBLFdBQUE7TUFDQSxPQUFBLFVBQUEsU0FBQSxXQUFBOztJQUVBLE9BQUE7O0VBRUEsR0FBQSxJQUFBLGNBQUEsU0FBQSxRQUFBLFFBQUE7SUFDQSxPQUFBLG1CQUFBLE9BQUEsS0FBQSxZQUFBLE9BQUE7TUFDQSxZQUFBLE9BQUEsS0FBQSxZQUFBLE9BQUEsS0FBQTs7O0VBR0EsU0FBQSxtQkFBQSxJQUFBLElBQUEsSUFBQSxJQUFBO0lBQ0EsSUFBQSxNQUFBLEtBQUEsSUFBQTtNQUNBLE1BQUEsS0FBQSxJQUFBO01BQ0EsTUFBQSxLQUFBLElBQUE7TUFDQSxNQUFBLEtBQUEsSUFBQTtNQUNBLE1BQUEsTUFBQSxLQUFBLElBQUE7TUFDQSxNQUFBLE1BQUEsS0FBQSxJQUFBO01BQ0EsTUFBQSxNQUFBLEtBQUEsSUFBQTtNQUNBLE1BQUEsTUFBQSxLQUFBLElBQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxZQUFBLEtBQUEsTUFBQSxNQUFBO1FBQ0EsWUFBQSxLQUFBO01BQ0EsSUFBQSxJQUFBLEtBQUEsSUFBQTtJQUNBLElBQUEsY0FBQSxJQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBLElBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxJQUFBLE1BQUEsSUFBQTtRQUNBLElBQUEsSUFBQSxNQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsTUFBQSxJQUFBO01BQ0EsT0FBQSxDQUFBLEtBQUEsTUFBQSxHQUFBLEtBQUEsWUFBQSxLQUFBLE1BQUEsR0FBQSxLQUFBLEtBQUE7UUFDQSxJQUFBLElBQUEsTUFBQTtRQUNBLFdBQUE7TUFDQSxPQUFBLENBQUEsS0FBQSxZQUFBLEtBQUE7O0lBRUEsWUFBQSxXQUFBO0lBQ0EsT0FBQTs7RUFFQSxHQUFBLElBQUEsU0FBQSxTQUFBLFFBQUE7SUFDQSxtQkFBQTtJQUNBLEdBQUEsSUFBQSxPQUFBLFFBQUE7SUFDQSxPQUFBOztFQUVBLElBQUE7RUFDQSxJQUFBLGdCQUFBO0lBQ0EsUUFBQTtJQUNBLE9BQUE7SUFDQSxXQUFBO0lBQ0EsU0FBQTtJQUNBLGNBQUE7SUFDQSxZQUFBOzs7RUFHQSxTQUFBLHlCQUFBO0lBQ0EsSUFBQSxJQUFBLE9BQUE7SUFDQSxjQUFBLFFBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxLQUFBLElBQUEsWUFBQSxRQUFBLEtBQUEsSUFBQSxLQUFBLGFBQUE7UUFDQSxLQUFBLElBQUE7TUFDQSxjQUFBLFFBQUE7O0lBRUEsY0FBQSxVQUFBLFdBQUE7TUFDQSxjQUFBLFFBQUEsY0FBQSxVQUFBOzs7SUFHQSxTQUFBLFVBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxPQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsT0FBQSxLQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsQ0FBQSxLQUFBLGNBQUE7UUFDQSxRQUFBLEtBQUEsSUFBQTtNQUNBLG9CQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsQ0FBQSxJQUFBLE9BQUEsS0FBQSxJQUFBLE1BQUE7VUFDQSxDQUFBLElBQUEsUUFBQSxPQUFBLFFBQUEsT0FBQSxTQUFBLElBQUEsUUFBQTtRQUNBLFFBQUEsT0FBQTtNQUNBLEtBQUEsR0FBQSxRQUFBLE1BQUEsUUFBQTs7OztFQUlBLFNBQUEsaUJBQUEsT0FBQSxPQUFBO0lBQ0EsU0FBQSxVQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxLQUFBLElBQUE7UUFDQSxPQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsTUFBQSxPQUFBO01BQ0EsT0FBQSxDQUFBLElBQUEsT0FBQSxLQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQTs7SUFFQSxVQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxNQUFBO1FBQ0EsT0FBQSxLQUFBLElBQUE7UUFDQSxPQUFBLEtBQUEsSUFBQTtNQUNBLE9BQUEsQ0FBQSxLQUFBLE1BQUEsSUFBQSxNQUFBLElBQUEsT0FBQSxLQUFBLEtBQUEsS0FBQSxJQUFBLE9BQUE7O0lBRUEsT0FBQTs7RUFFQSxJQUFBLDRCQUFBLGlCQUFBLFNBQUEsVUFBQTtJQUNBLE9BQUEsS0FBQSxLQUFBLEtBQUEsSUFBQTtLQUNBLFNBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxLQUFBLEtBQUEsSUFBQTs7RUFFQSxDQUFBLEdBQUEsSUFBQSxxQkFBQSxXQUFBO0lBQ0EsT0FBQSxrQkFBQTtLQUNBLE1BQUE7RUFDQSxJQUFBLDhCQUFBLGlCQUFBLFNBQUEsVUFBQTtJQUNBLElBQUEsSUFBQSxLQUFBLEtBQUE7SUFDQSxPQUFBLEtBQUEsSUFBQSxLQUFBLElBQUE7S0FDQTtFQUNBLENBQUEsR0FBQSxJQUFBLHVCQUFBLFdBQUE7SUFDQSxPQUFBLGtCQUFBO0tBQ0EsTUFBQTs7RUFFQSxTQUFBLHNCQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsUUFBQSxLQUFBLElBQUE7TUFDQSxJQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBOztNQUVBLElBQUEsT0FBQSxLQUFBLEtBQUEsSUFBQSxNQUFBLEtBQUEsSUFBQSxRQUFBLEtBQUEsSUFBQSxPQUFBLEtBQUE7UUFDQSxFQUFBLE1BQUEsRUFBQTtNQUNBLElBQUEsUUFBQSxLQUFBLElBQUEsRUFBQSxLQUFBLEtBQUE7SUFDQSxJQUFBLENBQUEsR0FBQSxPQUFBOztJQUVBLFNBQUEsUUFBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxDQUFBLFFBQUEsR0FBQSxJQUFBLENBQUEsUUFBQTthQUNBO1FBQ0EsSUFBQSxJQUFBLFFBQUEsR0FBQSxJQUFBLFFBQUE7O01BRUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEVBQUEsSUFBQTtNQUNBLE9BQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxJQUFBOztJQUVBLFFBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxJQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxPQUFBO01BQ0EsT0FBQSxDQUFBLEtBQUEsTUFBQSxHQUFBLFFBQUEsR0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxHQUFBO1FBQ0EsTUFBQTs7SUFFQSxPQUFBOztFQUVBLENBQUEsR0FBQSxJQUFBLGlCQUFBLFdBQUE7SUFDQSxPQUFBLGFBQUE7S0FDQSxNQUFBOztFQUVBLFNBQUEsd0JBQUEsSUFBQSxJQUFBO0lBQ0EsSUFBQSxRQUFBLEtBQUEsSUFBQTtNQUNBLElBQUEsT0FBQSxLQUFBLEtBQUEsSUFBQSxNQUFBLENBQUEsUUFBQSxLQUFBLElBQUEsUUFBQSxLQUFBO01BQ0EsSUFBQSxRQUFBLElBQUE7SUFDQSxJQUFBLElBQUEsS0FBQSxHQUFBLE9BQUE7O0lBRUEsU0FBQSxRQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxJQUFBO01BQ0EsT0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQUE7O0lBRUEsUUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxPQUFBLElBQUE7TUFDQSxPQUFBLENBQUEsS0FBQSxNQUFBLEdBQUEsUUFBQSxHQUFBLElBQUEsT0FBQSxLQUFBLEtBQUEsS0FBQSxJQUFBO1FBQ0EsT0FBQTs7SUFFQSxPQUFBOztFQUVBLENBQUEsR0FBQSxJQUFBLG1CQUFBLFdBQUE7SUFDQSxPQUFBLGFBQUE7S0FDQSxNQUFBO0VBQ0EsSUFBQSxrQkFBQSxpQkFBQSxTQUFBLFVBQUE7SUFDQSxPQUFBLElBQUE7S0FDQSxLQUFBO0VBQ0EsQ0FBQSxHQUFBLElBQUEsV0FBQSxXQUFBO0lBQ0EsT0FBQSxrQkFBQTtLQUNBLE1BQUE7O0VBRUEsU0FBQSxnQkFBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLENBQUEsR0FBQSxLQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBOztFQUVBLGdCQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLENBQUEsR0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsTUFBQTs7O0VBR0EsU0FBQSwwQkFBQSxTQUFBO0lBQ0EsSUFBQSxJQUFBLGtCQUFBO01BQ0EsUUFBQSxFQUFBO01BQ0EsWUFBQSxFQUFBO01BQ0EsYUFBQSxFQUFBO01BQ0E7SUFDQSxFQUFBLFFBQUEsV0FBQTtNQUNBLElBQUEsSUFBQSxNQUFBLE1BQUEsR0FBQTtNQUNBLE9BQUEsTUFBQSxJQUFBLFdBQUEsRUFBQSxXQUFBLFFBQUEsSUFBQTs7SUFFQSxFQUFBLFlBQUEsV0FBQTtNQUNBLElBQUEsSUFBQSxVQUFBLE1BQUEsR0FBQTtNQUNBLE9BQUEsTUFBQSxJQUFBLFdBQUEsRUFBQSxXQUFBLFFBQUEsSUFBQTs7SUFFQSxFQUFBLGFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLFdBQUEsTUFBQSxHQUFBO01BQ0EsSUFBQSxNQUFBLEdBQUE7UUFDQSxJQUFBLFdBQUEsS0FBQSxNQUFBO1VBQ0EsSUFBQSxJQUFBLElBQUE7WUFDQSxJQUFBO1VBQ0EsV0FBQTtZQUNBLENBQUEsRUFBQSxLQUFBLEdBQUEsRUFBQSxLQUFBO1lBQ0EsQ0FBQSxFQUFBLEtBQUEsR0FBQSxFQUFBLEtBQUE7OzthQUdBLElBQUEsVUFBQTtRQUNBLElBQUE7O01BRUEsT0FBQTs7SUFFQSxPQUFBLEVBQUEsV0FBQTs7RUFFQSxDQUFBLEdBQUEsSUFBQSxXQUFBLFdBQUE7SUFDQSxPQUFBLDBCQUFBO0tBQ0EsTUFBQTtFQUNBLElBQUEsc0JBQUEsaUJBQUEsV0FBQTtJQUNBLE9BQUE7S0FDQSxLQUFBO0VBQ0EsQ0FBQSxHQUFBLElBQUEsZUFBQSxXQUFBO0lBQ0EsT0FBQSxrQkFBQTtLQUNBLE1BQUE7RUFDQSxJQUFBLHVCQUFBLGlCQUFBLFNBQUEsVUFBQTtJQUNBLE9BQUEsS0FBQSxJQUFBO0tBQ0EsU0FBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLEtBQUEsS0FBQTs7RUFFQSxDQUFBLEdBQUEsSUFBQSxnQkFBQSxXQUFBO0lBQ0EsT0FBQSxrQkFBQTtLQUNBLE1BQUE7O0VBRUEsU0FBQSwwQkFBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLENBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxLQUFBLENBQUE7O0VBRUEsMEJBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQSxJQUFBLE1BQUE7O0VBRUEsQ0FBQSxHQUFBLElBQUEscUJBQUEsV0FBQTtJQUNBLElBQUEsYUFBQSwwQkFBQTtNQUNBLFNBQUEsV0FBQTtNQUNBLFNBQUEsV0FBQTtJQUNBLFdBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLElBQUEsT0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxJQUFBLFVBQUEsQ0FBQSxFQUFBLElBQUEsQ0FBQSxFQUFBOztJQUVBLFdBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLElBQUEsT0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxTQUFBLElBQUEsRUFBQSxLQUFBLEtBQUE7U0FDQSxJQUFBLFVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQTs7SUFFQSxPQUFBLE9BQUEsQ0FBQSxHQUFBLEdBQUE7S0FDQSxNQUFBO0VBQ0EsR0FBQSxPQUFBOztFQUVBLFNBQUEsZUFBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBOzs7RUFHQSxTQUFBLGVBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQTs7RUFFQSxHQUFBLEtBQUEsT0FBQSxTQUFBLFVBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBO0lBQ0EsSUFBQSxVQUFBLFFBQUEsT0FBQSxLQUFBOztJQUVBLFNBQUEsS0FBQSxNQUFBO01BQ0EsSUFBQSxLQUFBLFNBQUEsR0FBQSxPQUFBO01BQ0EsSUFBQSxLQUFBLFdBQUE7UUFDQSxLQUFBLFdBQUE7UUFDQSxHQUFBLElBQUEsS0FBQTtRQUNBLFNBQUE7UUFDQSxnQkFBQTtNQUNBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxLQUFBO1FBQ0EsT0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxLQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLEtBQUE7VUFDQSxJQUFBOztNQUVBLE9BQUEsS0FBQTtNQUNBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxLQUFBLGNBQUEsS0FBQSxDQUFBLE9BQUEsR0FBQSxJQUFBLENBQUEsT0FBQTtTQUNBOztNQUVBLElBQUEsUUFBQSxrQkFBQTtRQUNBLFFBQUEsa0JBQUE7TUFDQSxJQUFBLFdBQUEsTUFBQSxPQUFBLE1BQUE7UUFDQSxZQUFBLE1BQUEsTUFBQSxTQUFBLE9BQUEsTUFBQSxNQUFBLFNBQUE7UUFDQSxVQUFBO01BQ0EsS0FBQSxJQUFBLE1BQUEsU0FBQSxHQUFBLEtBQUEsR0FBQSxFQUFBLEdBQUEsUUFBQSxLQUFBLEtBQUE7UUFDQSxNQUFBLElBQUE7TUFDQSxLQUFBLElBQUEsQ0FBQSxVQUFBLElBQUEsTUFBQSxTQUFBLFdBQUEsRUFBQSxHQUFBLFFBQUE7UUFDQSxLQUFBLE9BQUEsTUFBQSxJQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLElBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxVQUFBLFVBQUEsSUFBQSxHQUFBLFFBQUE7O0lBRUEsS0FBQSxJQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsVUFBQSxVQUFBLElBQUEsR0FBQSxRQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsa0JBQUEsUUFBQTtJQUNBLElBQUEsSUFBQSxPQUFBO01BQ0EsT0FBQSxDQUFBLEdBQUE7TUFDQSxLQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQTtNQUNBLE9BQUEsS0FBQSxLQUFBLFdBQUEsT0FBQSxLQUFBLEtBQUEsS0FBQSxPQUFBLEtBQUEsS0FBQTtVQUNBLE9BQUEsT0FBQSxHQUFBLEVBQUE7TUFDQSxLQUFBLFFBQUE7O0lBRUEsT0FBQSxLQUFBLE1BQUEsR0FBQTs7O0VBR0EsU0FBQSxrQkFBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUE7O0VBRUEsR0FBQSxLQUFBLFVBQUEsU0FBQSxhQUFBO0lBQ0EsWUFBQSxhQUFBO0lBQ0EsT0FBQTs7RUFFQSxJQUFBLDJCQUFBLEdBQUEsS0FBQSxRQUFBLFlBQUE7RUFDQSx5QkFBQSxPQUFBLFdBQUE7SUFDQSxJQUFBLElBQUEsQ0FBQTtNQUNBLElBQUEsS0FBQTtNQUNBLEdBQUEsSUFBQSxLQUFBLElBQUE7TUFDQSxPQUFBO0lBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtNQUNBLElBQUE7TUFDQSxJQUFBLEtBQUE7TUFDQSxRQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUE7O0lBRUEsT0FBQSxPQUFBOztFQUVBLHlCQUFBLFdBQUEsU0FBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBLENBQUE7TUFDQSxJQUFBLEtBQUE7TUFDQSxJQUFBO01BQ0EsSUFBQTtNQUNBLEdBQUEsSUFBQSxLQUFBLElBQUE7TUFDQTtJQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsSUFBQSxDQUFBLEtBQUEsSUFBQSxLQUFBO0lBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtNQUNBLElBQUE7TUFDQSxJQUFBLEtBQUE7TUFDQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUE7TUFDQSxLQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQTtNQUNBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBOztJQUVBLE9BQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQTs7RUFFQSx5QkFBQSxPQUFBLFNBQUEsU0FBQTtJQUNBLElBQUEsT0FBQSxTQUFBLHNCQUFBO01BQ0EsSUFBQSxDQUFBO01BQ0EsSUFBQSxLQUFBLFNBQUEsc0JBQUE7TUFDQSxHQUFBLEdBQUEsSUFBQSxLQUFBLElBQUE7TUFDQSxHQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO01BQ0EsUUFBQSxRQUFBO01BQ0EsUUFBQSxTQUFBO01BQ0EsSUFBQSxLQUFBO01BQ0EsSUFBQSxNQUFBLENBQUEsSUFBQSxNQUFBLFNBQUEsVUFBQTtNQUNBLElBQUEsQ0FBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7UUFDQSxJQUFBLE1BQUE7UUFDQSxJQUFBLHNCQUFBLEdBQUEsR0FBQSxJQUFBO1VBQ0EsSUFBQSxDQUFBLHNCQUFBLEdBQUEsR0FBQSxJQUFBO1lBQ0EsUUFBQSxLQUFBLHlCQUFBLEdBQUEsR0FBQSxHQUFBOztVQUVBLFFBQUEsS0FBQTtlQUNBLElBQUEsc0JBQUEsR0FBQSxHQUFBLElBQUE7VUFDQSxRQUFBLEtBQUEseUJBQUEsR0FBQSxHQUFBLEdBQUE7O1FBRUEsSUFBQTs7TUFFQSxJQUFBLFFBQUEsUUFBQSxLQUFBLFFBQUE7TUFDQSxJQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsc0JBQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQTs7O0VBR0EsU0FBQSx5QkFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUE7TUFDQSxNQUFBLEVBQUEsS0FBQTtNQUNBLE1BQUEsRUFBQSxLQUFBO01BQ0EsS0FBQSxFQUFBO01BQ0EsS0FBQSxFQUFBO01BQ0EsTUFBQSxFQUFBLEtBQUE7TUFDQSxNQUFBLEVBQUEsS0FBQTtNQUNBLEtBQUEsQ0FBQSxPQUFBLEtBQUEsTUFBQSxPQUFBLEtBQUEsUUFBQSxNQUFBLE1BQUEsTUFBQTtJQUNBLE9BQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7OztFQUdBLFNBQUEsc0JBQUEsYUFBQTtJQUNBLElBQUEsSUFBQSxZQUFBO01BQ0EsSUFBQSxZQUFBLFlBQUEsU0FBQTtJQUNBLE9BQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBOztFQUVBLElBQUEsc0JBQUEsc0JBQUE7SUFDQSwyQkFBQTtJQUNBLDRCQUFBO0lBQ0EsNEJBQUE7O0VBRUEsU0FBQSx1QkFBQTtJQUNBLDRCQUFBO0lBQ0EsS0FBQSxPQUFBLEtBQUEsT0FBQSxLQUFBLFNBQUE7OztFQUdBLFNBQUEsMkJBQUEsTUFBQTtJQUNBLElBQUEsUUFBQSx5QkFBQSxTQUFBLElBQUE7SUFDQSxNQUFBLE9BQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLDJCQUFBLE9BQUE7SUFDQSw0QkFBQTtJQUNBLHVCQUFBLE9BQUE7SUFDQSx5QkFBQSxLQUFBO0lBQ0EsNEJBQUE7OztFQUdBLFNBQUEsMkJBQUEsT0FBQTtJQUNBLElBQUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxPQUFBO01BQ0EsSUFBQSxPQUFBO01BQ0EsU0FBQTtRQUNBLEdBQUE7UUFDQSxHQUFBOztNQUVBLFdBQUEsTUFBQTtNQUNBLE9BQUEsTUFBQTtNQUNBLGVBQUEsQ0FBQTtJQUNBLDJCQUFBO0lBQ0EsSUFBQSxPQUFBO0lBQ0EsT0FBQSxLQUFBLFVBQUEsSUFBQSxJQUFBLEtBQUEsT0FBQSxLQUFBLEtBQUEsSUFBQSxJQUFBLEtBQUE7U0FDQSxNQUFBLEdBQUE7TUFDQSxXQUFBLEtBQUE7TUFDQSxhQUFBLFFBQUE7TUFDQSwyQkFBQTtNQUNBLE9BQUE7O0lBRUEsYUFBQSxRQUFBO0lBQ0EsNEJBQUE7SUFDQSxJQUFBLE9BQUE7SUFDQSxPQUFBLEtBQUEsVUFBQSxJQUFBLElBQUEsS0FBQSxPQUFBLEtBQUEsS0FBQSxJQUFBLElBQUEsS0FBQTtTQUNBLE1BQUEsR0FBQTtNQUNBLE9BQUEsS0FBQTtNQUNBLGFBQUEsS0FBQTtNQUNBLDJCQUFBO01BQ0EsT0FBQTs7SUFFQSxhQUFBLEtBQUE7SUFDQSw0QkFBQTtJQUNBLElBQUEsUUFBQSxhQUFBO01BQ0E7SUFDQSxLQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsRUFBQSxNQUFBO01BQ0EsT0FBQSxhQUFBO01BQ0EsT0FBQSxhQUFBLE9BQUE7TUFDQSwwQkFBQSxLQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUEsTUFBQTs7SUFFQSxPQUFBLGFBQUE7SUFDQSxPQUFBLGFBQUEsUUFBQTtJQUNBLEtBQUEsT0FBQSwwQkFBQSxLQUFBLE1BQUEsS0FBQSxNQUFBO01BQ0E7SUFDQSw0QkFBQTtJQUNBLDRCQUFBOzs7RUFHQSxTQUFBLHdCQUFBLE1BQUE7SUFDQSxJQUFBLElBQUEsS0FBQTtNQUNBLFlBQUEsS0FBQTtNQUNBLE1BQUEsTUFBQSxLQUFBLEtBQUEsT0FBQSx1QkFBQTtJQUNBLE9BQUEsTUFBQTtNQUNBLE1BQUEsOEJBQUEsTUFBQSxhQUFBO01BQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxLQUFBO1dBQ0E7UUFDQSxNQUFBLElBQUEsK0JBQUEsTUFBQTtRQUNBLElBQUEsTUFBQSxHQUFBO1VBQ0EsSUFBQSxDQUFBLEtBQUEsR0FBQTtZQUNBLE9BQUE7WUFDQTs7VUFFQSxPQUFBLEtBQUE7ZUFDQTtVQUNBLElBQUEsTUFBQSxDQUFBLEdBQUE7WUFDQSxPQUFBLEtBQUE7WUFDQSxPQUFBO2lCQUNBLElBQUEsTUFBQSxDQUFBLEdBQUE7WUFDQSxPQUFBO1lBQ0EsT0FBQSxLQUFBO2lCQUNBO1lBQ0EsT0FBQSxPQUFBOztVQUVBOzs7O0lBSUEsSUFBQSxTQUFBLDJCQUFBO0lBQ0EsdUJBQUEsT0FBQSxNQUFBO0lBQ0EsSUFBQSxDQUFBLFFBQUEsQ0FBQSxNQUFBO0lBQ0EsSUFBQSxTQUFBLE1BQUE7TUFDQSw0QkFBQTtNQUNBLE9BQUEsMkJBQUEsS0FBQTtNQUNBLHVCQUFBLE9BQUEsUUFBQTtNQUNBLE9BQUEsT0FBQSxLQUFBLE9BQUEsMEJBQUEsS0FBQSxNQUFBO1NBQ0E7TUFDQSw0QkFBQTtNQUNBLDRCQUFBO01BQ0E7O0lBRUEsSUFBQSxDQUFBLE1BQUE7TUFDQSxPQUFBLE9BQUEsMEJBQUEsS0FBQSxNQUFBLE9BQUE7TUFDQTs7SUFFQSw0QkFBQTtJQUNBLDRCQUFBO0lBQ0EsSUFBQSxRQUFBLEtBQUE7TUFDQSxLQUFBLE1BQUE7TUFDQSxLQUFBLE1BQUE7TUFDQSxLQUFBLEtBQUEsSUFBQTtNQUNBLEtBQUEsS0FBQSxJQUFBO01BQ0EsUUFBQSxLQUFBO01BQ0EsS0FBQSxNQUFBLElBQUE7TUFDQSxLQUFBLE1BQUEsSUFBQTtNQUNBLElBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLEtBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EsU0FBQTtRQUNBLEdBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxNQUFBLElBQUE7UUFDQSxHQUFBLENBQUEsS0FBQSxLQUFBLEtBQUEsTUFBQSxJQUFBOztJQUVBLDBCQUFBLEtBQUEsTUFBQSxPQUFBLE9BQUE7SUFDQSxPQUFBLE9BQUEsMEJBQUEsT0FBQSxNQUFBLE1BQUE7SUFDQSxLQUFBLE9BQUEsMEJBQUEsTUFBQSxPQUFBLE1BQUE7SUFDQSw0QkFBQTtJQUNBLDRCQUFBOzs7RUFHQSxTQUFBLDhCQUFBLEtBQUEsV0FBQTtJQUNBLElBQUEsT0FBQSxJQUFBO01BQ0EsUUFBQSxLQUFBO01BQ0EsUUFBQSxLQUFBO01BQ0EsT0FBQSxRQUFBO0lBQ0EsSUFBQSxDQUFBLE1BQUEsT0FBQTtJQUNBLElBQUEsT0FBQSxJQUFBO0lBQ0EsSUFBQSxDQUFBLE1BQUEsT0FBQSxDQUFBO0lBQ0EsT0FBQSxLQUFBO0lBQ0EsSUFBQSxRQUFBLEtBQUE7TUFDQSxRQUFBLEtBQUE7TUFDQSxRQUFBLFFBQUE7SUFDQSxJQUFBLENBQUEsT0FBQSxPQUFBO0lBQ0EsSUFBQSxLQUFBLFFBQUE7TUFDQSxPQUFBLElBQUEsT0FBQSxJQUFBO01BQ0EsSUFBQSxLQUFBO0lBQ0EsSUFBQSxNQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxJQUFBLFFBQUEsS0FBQSxNQUFBLENBQUE7TUFDQSxTQUFBLFFBQUEsUUFBQSxJQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUE7SUFDQSxPQUFBLENBQUEsUUFBQSxTQUFBOzs7RUFHQSxTQUFBLCtCQUFBLEtBQUEsV0FBQTtJQUNBLElBQUEsT0FBQSxJQUFBO0lBQ0EsSUFBQSxNQUFBLE9BQUEsOEJBQUEsTUFBQTtJQUNBLElBQUEsT0FBQSxJQUFBO0lBQ0EsT0FBQSxLQUFBLE1BQUEsWUFBQSxLQUFBLElBQUE7OztFQUdBLFNBQUEsb0JBQUEsTUFBQTtJQUNBLEtBQUEsT0FBQTtJQUNBLEtBQUEsUUFBQTs7RUFFQSxvQkFBQSxVQUFBLFVBQUEsV0FBQTtJQUNBLElBQUEsWUFBQSxLQUFBO01BQ0EsWUFBQSxVQUFBO01BQ0E7SUFDQSxPQUFBLGFBQUE7TUFDQSxPQUFBLFVBQUEsV0FBQTtNQUNBLElBQUEsQ0FBQSxLQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsVUFBQSxPQUFBLFdBQUE7O0lBRUEsVUFBQSxLQUFBO0lBQ0EsT0FBQSxVQUFBOzs7RUFHQSxTQUFBLDBCQUFBLFFBQUE7SUFDQSxJQUFBLEtBQUEsT0FBQSxHQUFBO01BQ0EsS0FBQSxPQUFBLEdBQUE7TUFDQSxLQUFBLE9BQUEsR0FBQTtNQUNBLEtBQUEsT0FBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxRQUFBO01BQ0EsUUFBQSxNQUFBO01BQ0EsTUFBQSxXQUFBLFdBQUEsWUFBQSxPQUFBO0lBQ0EsT0FBQSxTQUFBO01BQ0EsT0FBQSxNQUFBO01BQ0EsSUFBQSxDQUFBLFFBQUEsQ0FBQSxLQUFBLFdBQUE7TUFDQSxZQUFBLEtBQUE7TUFDQSxhQUFBLFVBQUE7TUFDQSxZQUFBO01BQ0EsT0FBQSxZQUFBLFlBQUE7UUFDQSxNQUFBLFVBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxHQUFBLEtBQUEsSUFBQTtRQUNBLFFBQUEsVUFBQSxFQUFBLFlBQUEsWUFBQSxTQUFBLEtBQUEsTUFBQTtVQUNBLEtBQUEsTUFBQTtRQUNBLElBQUEsSUFBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsTUFBQSxHQUFBO1VBQ0EsVUFBQSxPQUFBLFdBQUEsR0FBQSxJQUFBO1lBQ0EsZ0NBQUEsS0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBO2NBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQTtnQkFDQSxHQUFBO2dCQUNBLEdBQUEsSUFBQSxLQUFBLE1BQUEsSUFBQSxLQUFBO2tCQUNBLElBQUEsS0FBQSxNQUFBLEtBQUEsS0FBQSxLQUFBLElBQUE7Z0JBQ0EsR0FBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLEtBQUE7Z0JBQ0EsR0FBQTtrQkFDQSxJQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsS0FBQSxJQUFBO2dCQUNBLEdBQUE7Z0JBQ0EsR0FBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLEtBQUE7a0JBQ0EsSUFBQSxLQUFBLE1BQUEsS0FBQSxLQUFBLEtBQUEsSUFBQTtnQkFDQSxHQUFBLElBQUEsS0FBQSxNQUFBLElBQUEsS0FBQTtnQkFDQSxHQUFBO2tCQUNBLE9BQUEsS0FBQSxNQUFBO1VBQ0EsRUFBQTs7Ozs7O0VBTUEsU0FBQSw2QkFBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUEsUUFBQSxFQUFBOzs7RUFHQSxTQUFBLHdCQUFBO0lBQ0EsNEJBQUE7SUFDQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsTUFBQSxLQUFBLE9BQUEsS0FBQSxLQUFBOzs7RUFHQSxTQUFBLDRCQUFBLEtBQUE7SUFDQSxJQUFBLE9BQUEsSUFBQTtNQUNBLE9BQUEsSUFBQTtJQUNBLElBQUEsQ0FBQSxRQUFBLENBQUEsTUFBQTtJQUNBLElBQUEsUUFBQSxLQUFBO01BQ0EsUUFBQSxJQUFBO01BQ0EsUUFBQSxLQUFBO0lBQ0EsSUFBQSxVQUFBLE9BQUE7SUFDQSxJQUFBLEtBQUEsTUFBQTtNQUNBLEtBQUEsTUFBQTtNQUNBLEtBQUEsTUFBQSxJQUFBO01BQ0EsS0FBQSxNQUFBLElBQUE7TUFDQSxLQUFBLE1BQUEsSUFBQTtNQUNBLEtBQUEsTUFBQSxJQUFBO0lBQ0EsSUFBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7SUFDQSxJQUFBLEtBQUEsQ0FBQSxJQUFBO0lBQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EsS0FBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxNQUFBO01BQ0EsSUFBQSxDQUFBLEtBQUEsS0FBQSxLQUFBLE1BQUE7TUFDQSxLQUFBLElBQUE7SUFDQSxJQUFBLFNBQUEsMEJBQUEsU0FBQSxJQUFBO0lBQ0EsT0FBQSxNQUFBO0lBQ0EsT0FBQSxPQUFBO0lBQ0EsT0FBQSxJQUFBLElBQUE7SUFDQSxPQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxPQUFBLEtBQUE7SUFDQSxJQUFBLFNBQUE7SUFDQSxJQUFBLFNBQUE7TUFDQSxPQUFBLHVCQUFBO0lBQ0EsT0FBQSxNQUFBO01BQ0EsSUFBQSxPQUFBLElBQUEsS0FBQSxLQUFBLE9BQUEsTUFBQSxLQUFBLEtBQUEsT0FBQSxLQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsS0FBQSxHQUFBLE9BQUEsS0FBQTthQUNBO1VBQ0EsU0FBQSxLQUFBO1VBQ0E7O2FBRUE7UUFDQSxJQUFBLEtBQUEsR0FBQSxPQUFBLEtBQUE7YUFDQTtVQUNBLFNBQUE7VUFDQTs7OztJQUlBLHVCQUFBLE9BQUEsUUFBQTtJQUNBLElBQUEsQ0FBQSxRQUFBLDZCQUFBOzs7RUFHQSxTQUFBLDRCQUFBLEtBQUE7SUFDQSxJQUFBLFNBQUEsSUFBQTtJQUNBLElBQUEsUUFBQTtNQUNBLElBQUEsQ0FBQSxPQUFBLEdBQUEsNkJBQUEsT0FBQTtNQUNBLHVCQUFBLE9BQUE7TUFDQSwwQkFBQSxLQUFBO01BQ0EsNEJBQUE7TUFDQSxJQUFBLFNBQUE7Ozs7RUFJQSxTQUFBLHlCQUFBLFFBQUE7SUFDQSxJQUFBLFFBQUE7TUFDQSxPQUFBLGlCQUFBLE9BQUEsR0FBQSxJQUFBLE9BQUEsR0FBQSxJQUFBLE9BQUEsR0FBQTtRQUNBLE9BQUEsR0FBQTtNQUNBLElBQUEsTUFBQTtNQUNBO0lBQ0EsT0FBQSxLQUFBO01BQ0EsSUFBQSxNQUFBO01BQ0EsSUFBQSxDQUFBLDJCQUFBLEdBQUEsV0FBQSxDQUFBLEtBQUEsTUFBQSxJQUFBLEVBQUEsRUFBQTtVQUNBLEVBQUEsRUFBQSxLQUFBLEtBQUEsSUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsS0FBQSxHQUFBO1FBQ0EsRUFBQSxJQUFBLEVBQUEsSUFBQTtRQUNBLE1BQUEsT0FBQSxHQUFBOzs7OztFQUtBLFNBQUEsMkJBQUEsTUFBQSxRQUFBO0lBQ0EsSUFBQSxLQUFBLEtBQUE7SUFDQSxJQUFBLElBQUEsT0FBQTtJQUNBLElBQUEsS0FBQSxLQUFBO01BQ0EsS0FBQSxPQUFBLEdBQUE7TUFDQSxLQUFBLE9BQUEsR0FBQTtNQUNBLEtBQUEsT0FBQSxHQUFBO01BQ0EsS0FBQSxPQUFBLEdBQUE7TUFDQSxRQUFBLEtBQUE7TUFDQSxRQUFBLEtBQUE7TUFDQSxLQUFBLE1BQUE7TUFDQSxLQUFBLE1BQUE7TUFDQSxLQUFBLE1BQUE7TUFDQSxLQUFBLE1BQUE7TUFDQSxLQUFBLENBQUEsS0FBQSxNQUFBO01BQ0EsS0FBQSxDQUFBLEtBQUEsTUFBQTtNQUNBLElBQUE7SUFDQSxJQUFBLE9BQUEsSUFBQTtNQUNBLElBQUEsS0FBQSxNQUFBLE1BQUEsSUFBQTtNQUNBLElBQUEsS0FBQSxJQUFBO1FBQ0EsSUFBQSxDQUFBLElBQUEsS0FBQTtVQUNBLEdBQUE7VUFDQSxHQUFBOzthQUVBLElBQUEsR0FBQSxLQUFBLElBQUE7UUFDQSxLQUFBO1VBQ0EsR0FBQTtVQUNBLEdBQUE7O2FBRUE7UUFDQSxJQUFBLENBQUEsSUFBQSxLQUFBO1VBQ0EsR0FBQTtVQUNBLEdBQUE7O2FBRUEsSUFBQSxHQUFBLElBQUEsSUFBQTtRQUNBLEtBQUE7VUFDQSxHQUFBO1VBQ0EsR0FBQTs7O1dBR0E7TUFDQSxLQUFBLENBQUEsS0FBQSxPQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUEsS0FBQTtNQUNBLElBQUEsS0FBQSxDQUFBLEtBQUEsS0FBQSxHQUFBO1FBQ0EsSUFBQSxLQUFBLElBQUE7VUFDQSxJQUFBLENBQUEsSUFBQSxLQUFBO1lBQ0EsR0FBQSxDQUFBLEtBQUEsTUFBQTtZQUNBLEdBQUE7O2VBRUEsSUFBQSxHQUFBLEtBQUEsSUFBQTtVQUNBLEtBQUE7WUFDQSxHQUFBLENBQUEsS0FBQSxNQUFBO1lBQ0EsR0FBQTs7ZUFFQTtVQUNBLElBQUEsQ0FBQSxJQUFBLEtBQUE7WUFDQSxHQUFBLENBQUEsS0FBQSxNQUFBO1lBQ0EsR0FBQTs7ZUFFQSxJQUFBLEdBQUEsSUFBQSxJQUFBO1VBQ0EsS0FBQTtZQUNBLEdBQUEsQ0FBQSxLQUFBLE1BQUE7WUFDQSxHQUFBOzs7YUFHQTtRQUNBLElBQUEsS0FBQSxJQUFBO1VBQ0EsSUFBQSxDQUFBLElBQUEsS0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBLEtBQUEsS0FBQTs7ZUFFQSxJQUFBLEdBQUEsS0FBQSxJQUFBO1VBQ0EsS0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBLEtBQUEsS0FBQTs7ZUFFQTtVQUNBLElBQUEsQ0FBQSxJQUFBLEtBQUE7WUFDQSxHQUFBO1lBQ0EsR0FBQSxLQUFBLEtBQUE7O2VBRUEsSUFBQSxHQUFBLElBQUEsSUFBQTtVQUNBLEtBQUE7WUFDQSxHQUFBO1lBQ0EsR0FBQSxLQUFBLEtBQUE7Ozs7O0lBS0EsS0FBQSxJQUFBO0lBQ0EsS0FBQSxJQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSxvQkFBQSxPQUFBLE9BQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxLQUFBLElBQUE7SUFDQSxLQUFBLElBQUEsS0FBQSxJQUFBOzs7RUFHQSxTQUFBLDBCQUFBLE9BQUEsT0FBQSxJQUFBLElBQUE7SUFDQSxJQUFBLE9BQUEsSUFBQSxvQkFBQSxPQUFBO0lBQ0EscUJBQUEsS0FBQTtJQUNBLElBQUEsSUFBQSwwQkFBQSxNQUFBLE9BQUEsT0FBQTtJQUNBLElBQUEsSUFBQSwwQkFBQSxNQUFBLE9BQUEsT0FBQTtJQUNBLHFCQUFBLE1BQUEsR0FBQSxNQUFBLEtBQUEsSUFBQTtNQUNBLE1BQUEsT0FBQTtJQUNBLHFCQUFBLE1BQUEsR0FBQSxNQUFBLEtBQUEsSUFBQTtNQUNBLE1BQUEsT0FBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsZ0NBQUEsT0FBQSxJQUFBLElBQUE7SUFDQSxJQUFBLE9BQUEsSUFBQSxvQkFBQSxPQUFBO0lBQ0EsS0FBQSxJQUFBO0lBQ0EsS0FBQSxJQUFBO0lBQ0EscUJBQUEsS0FBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsMEJBQUEsTUFBQSxPQUFBLE9BQUEsUUFBQTtJQUNBLElBQUEsQ0FBQSxLQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUE7TUFDQSxLQUFBLElBQUE7TUFDQSxLQUFBLElBQUE7TUFDQSxLQUFBLElBQUE7V0FDQSxJQUFBLEtBQUEsTUFBQSxPQUFBO01BQ0EsS0FBQSxJQUFBO1dBQ0E7TUFDQSxLQUFBLElBQUE7Ozs7RUFJQSxTQUFBLHdCQUFBLE1BQUEsT0FBQSxPQUFBO0lBQ0EsSUFBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUE7SUFDQSxLQUFBLE9BQUE7SUFDQSxLQUFBLE9BQUE7SUFDQSxLQUFBLFFBQUEsUUFBQSxLQUFBLE1BQUEsTUFBQSxJQUFBLE1BQUEsR0FBQSxNQUFBLElBQUEsTUFBQTtNQUNBLEtBQUEsTUFBQSxRQUFBLEtBQUEsTUFBQSxHQUFBLElBQUEsR0FBQSxHQUFBLEdBQUEsSUFBQSxHQUFBLEtBQUEsS0FBQTtRQUNBLEdBQUEsSUFBQSxHQUFBLEdBQUEsR0FBQSxJQUFBLEdBQUE7O0VBRUEsd0JBQUEsWUFBQTtJQUNBLE9BQUEsV0FBQTtNQUNBLE9BQUEsS0FBQSxLQUFBLE1BQUEsS0FBQSxPQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQTs7SUFFQSxLQUFBLFdBQUE7TUFDQSxPQUFBLEtBQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUE7Ozs7RUFJQSxTQUFBLDhCQUFBO0lBQ0EsS0FBQSxJQUFBOzs7RUFHQSxTQUFBLDRCQUFBLE1BQUE7SUFDQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQTs7RUFFQSw0QkFBQSxZQUFBO0lBQ0EsUUFBQSxTQUFBLE9BQUEsTUFBQTtNQUNBLElBQUEsUUFBQSxTQUFBO01BQ0EsSUFBQSxPQUFBO1FBQ0EsS0FBQSxJQUFBO1FBQ0EsS0FBQSxJQUFBLE1BQUE7UUFDQSxJQUFBLE1BQUEsR0FBQSxNQUFBLEVBQUEsSUFBQTtRQUNBLE1BQUEsSUFBQTtRQUNBLElBQUEsTUFBQSxHQUFBO1VBQ0EsUUFBQSxNQUFBO1VBQ0EsT0FBQSxNQUFBLEdBQUEsUUFBQSxNQUFBO1VBQ0EsTUFBQSxJQUFBO2VBQ0E7VUFDQSxNQUFBLElBQUE7O1FBRUEsU0FBQTthQUNBLElBQUEsS0FBQSxHQUFBO1FBQ0EsUUFBQSw2QkFBQSxLQUFBO1FBQ0EsS0FBQSxJQUFBO1FBQ0EsS0FBQSxJQUFBO1FBQ0EsTUFBQSxJQUFBLE1BQUEsSUFBQTtRQUNBLFNBQUE7YUFDQTtRQUNBLEtBQUEsSUFBQSxLQUFBLElBQUE7UUFDQSxLQUFBLElBQUE7UUFDQSxTQUFBOztNQUVBLEtBQUEsSUFBQSxLQUFBLElBQUE7TUFDQSxLQUFBLElBQUE7TUFDQSxLQUFBLElBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQSxVQUFBLE9BQUEsR0FBQTtRQUNBLFVBQUEsT0FBQTtRQUNBLElBQUEsV0FBQSxRQUFBLEdBQUE7VUFDQSxRQUFBLFFBQUE7VUFDQSxJQUFBLFNBQUEsTUFBQSxHQUFBO1lBQ0EsT0FBQSxJQUFBLE1BQUEsSUFBQTtZQUNBLFFBQUEsSUFBQTtZQUNBLFFBQUE7aUJBQ0E7WUFDQSxJQUFBLFVBQUEsT0FBQSxHQUFBO2NBQ0Esa0NBQUEsTUFBQTtjQUNBLFFBQUE7Y0FDQSxTQUFBLE1BQUE7O1lBRUEsT0FBQSxJQUFBO1lBQ0EsUUFBQSxJQUFBO1lBQ0EsbUNBQUEsTUFBQTs7ZUFFQTtVQUNBLFFBQUEsUUFBQTtVQUNBLElBQUEsU0FBQSxNQUFBLEdBQUE7WUFDQSxPQUFBLElBQUEsTUFBQSxJQUFBO1lBQ0EsUUFBQSxJQUFBO1lBQ0EsUUFBQTtpQkFDQTtZQUNBLElBQUEsVUFBQSxPQUFBLEdBQUE7Y0FDQSxtQ0FBQSxNQUFBO2NBQ0EsUUFBQTtjQUNBLFNBQUEsTUFBQTs7WUFFQSxPQUFBLElBQUE7WUFDQSxRQUFBLElBQUE7WUFDQSxrQ0FBQSxNQUFBOzs7UUFHQSxTQUFBLE1BQUE7O01BRUEsS0FBQSxFQUFBLElBQUE7O0lBRUEsUUFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLEtBQUEsR0FBQSxLQUFBLEVBQUEsSUFBQSxLQUFBO01BQ0EsSUFBQSxLQUFBLEdBQUEsS0FBQSxFQUFBLElBQUEsS0FBQTtNQUNBLEtBQUEsSUFBQSxLQUFBLElBQUE7TUFDQSxJQUFBLFNBQUEsS0FBQTtRQUNBLFNBQUEsT0FBQSxLQUFBO1FBQ0EsUUFBQSxLQUFBO1FBQ0EsTUFBQTtNQUNBLElBQUEsQ0FBQSxNQUFBLE9BQUE7V0FDQSxJQUFBLENBQUEsT0FBQSxPQUFBO1dBQ0EsT0FBQSw2QkFBQTtNQUNBLElBQUEsUUFBQTtRQUNBLElBQUEsT0FBQSxNQUFBLE1BQUEsT0FBQSxJQUFBO2FBQ0EsT0FBQSxJQUFBO2FBQ0E7UUFDQSxLQUFBLElBQUE7O01BRUEsSUFBQSxRQUFBLE9BQUE7UUFDQSxNQUFBLEtBQUE7UUFDQSxLQUFBLElBQUEsS0FBQTtRQUNBLEtBQUEsSUFBQTtRQUNBLEtBQUEsSUFBQTtRQUNBLElBQUEsU0FBQSxPQUFBO1VBQ0EsU0FBQSxLQUFBO1VBQ0EsS0FBQSxJQUFBLEtBQUE7VUFDQSxPQUFBLEtBQUE7VUFDQSxPQUFBLElBQUE7VUFDQSxLQUFBLElBQUE7VUFDQSxNQUFBLElBQUE7ZUFDQTtVQUNBLEtBQUEsSUFBQTtVQUNBLFNBQUE7VUFDQSxPQUFBLEtBQUE7O2FBRUE7UUFDQSxNQUFBLEtBQUE7UUFDQSxPQUFBOztNQUVBLElBQUEsTUFBQSxLQUFBLElBQUE7TUFDQSxJQUFBLEtBQUE7TUFDQSxJQUFBLFFBQUEsS0FBQSxHQUFBO1FBQ0EsS0FBQSxJQUFBO1FBQ0E7O01BRUEsR0FBQTtRQUNBLElBQUEsU0FBQSxLQUFBLEdBQUE7UUFDQSxJQUFBLFNBQUEsT0FBQSxHQUFBO1VBQ0EsVUFBQSxPQUFBO1VBQ0EsSUFBQSxRQUFBLEdBQUE7WUFDQSxRQUFBLElBQUE7WUFDQSxPQUFBLElBQUE7WUFDQSxrQ0FBQSxNQUFBO1lBQ0EsVUFBQSxPQUFBOztVQUVBLElBQUEsUUFBQSxLQUFBLFFBQUEsRUFBQSxLQUFBLFFBQUEsS0FBQSxRQUFBLEVBQUEsR0FBQTtZQUNBLElBQUEsQ0FBQSxRQUFBLEtBQUEsQ0FBQSxRQUFBLEVBQUEsR0FBQTtjQUNBLFFBQUEsRUFBQSxJQUFBO2NBQ0EsUUFBQSxJQUFBO2NBQ0EsbUNBQUEsTUFBQTtjQUNBLFVBQUEsT0FBQTs7WUFFQSxRQUFBLElBQUEsT0FBQTtZQUNBLE9BQUEsSUFBQSxRQUFBLEVBQUEsSUFBQTtZQUNBLGtDQUFBLE1BQUE7WUFDQSxPQUFBLEtBQUE7WUFDQTs7ZUFFQTtVQUNBLFVBQUEsT0FBQTtVQUNBLElBQUEsUUFBQSxHQUFBO1lBQ0EsUUFBQSxJQUFBO1lBQ0EsT0FBQSxJQUFBO1lBQ0EsbUNBQUEsTUFBQTtZQUNBLFVBQUEsT0FBQTs7VUFFQSxJQUFBLFFBQUEsS0FBQSxRQUFBLEVBQUEsS0FBQSxRQUFBLEtBQUEsUUFBQSxFQUFBLEdBQUE7WUFDQSxJQUFBLENBQUEsUUFBQSxLQUFBLENBQUEsUUFBQSxFQUFBLEdBQUE7Y0FDQSxRQUFBLEVBQUEsSUFBQTtjQUNBLFFBQUEsSUFBQTtjQUNBLGtDQUFBLE1BQUE7Y0FDQSxVQUFBLE9BQUE7O1lBRUEsUUFBQSxJQUFBLE9BQUE7WUFDQSxPQUFBLElBQUEsUUFBQSxFQUFBLElBQUE7WUFDQSxtQ0FBQSxNQUFBO1lBQ0EsT0FBQSxLQUFBO1lBQ0E7OztRQUdBLFFBQUEsSUFBQTtRQUNBLE9BQUE7UUFDQSxTQUFBLE9BQUE7ZUFDQSxDQUFBLEtBQUE7TUFDQSxJQUFBLE1BQUEsS0FBQSxJQUFBOzs7O0VBSUEsU0FBQSxrQ0FBQSxNQUFBLE1BQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLEtBQUE7TUFDQSxTQUFBLEVBQUE7SUFDQSxJQUFBLFFBQUE7TUFDQSxJQUFBLE9BQUEsTUFBQSxHQUFBLE9BQUEsSUFBQTtXQUNBLE9BQUEsSUFBQTtXQUNBO01BQ0EsS0FBQSxJQUFBOztJQUVBLEVBQUEsSUFBQTtJQUNBLEVBQUEsSUFBQTtJQUNBLEVBQUEsSUFBQSxFQUFBO0lBQ0EsSUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLElBQUE7SUFDQSxFQUFBLElBQUE7OztFQUdBLFNBQUEsbUNBQUEsTUFBQSxNQUFBO0lBQ0EsSUFBQSxJQUFBO01BQ0EsSUFBQSxLQUFBO01BQ0EsU0FBQSxFQUFBO0lBQ0EsSUFBQSxRQUFBO01BQ0EsSUFBQSxPQUFBLE1BQUEsR0FBQSxPQUFBLElBQUE7V0FDQSxPQUFBLElBQUE7V0FDQTtNQUNBLEtBQUEsSUFBQTs7SUFFQSxFQUFBLElBQUE7SUFDQSxFQUFBLElBQUE7SUFDQSxFQUFBLElBQUEsRUFBQTtJQUNBLElBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxJQUFBO0lBQ0EsRUFBQSxJQUFBOzs7RUFHQSxTQUFBLDZCQUFBLE1BQUE7SUFDQSxPQUFBLEtBQUEsR0FBQSxPQUFBLEtBQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLGdCQUFBLE9BQUEsTUFBQTtJQUNBLElBQUEsT0FBQSxNQUFBLEtBQUEsNEJBQUE7TUFDQSxJQUFBLElBQUE7SUFDQSx1QkFBQTtJQUNBLHVCQUFBLElBQUEsTUFBQSxNQUFBO0lBQ0EseUJBQUEsSUFBQTtJQUNBLHlCQUFBLElBQUE7SUFDQSxPQUFBLE1BQUE7TUFDQSxTQUFBO01BQ0EsSUFBQSxTQUFBLENBQUEsVUFBQSxLQUFBLElBQUEsT0FBQSxLQUFBLEtBQUEsTUFBQSxPQUFBO1VBQ0EsS0FBQSxJQUFBLE9BQUEsSUFBQTtRQUNBLElBQUEsS0FBQSxNQUFBLE1BQUEsS0FBQSxNQUFBLElBQUE7VUFDQSxxQkFBQSxLQUFBLEtBQUEsSUFBQSxvQkFBQTtVQUNBLHdCQUFBO1VBQ0EsS0FBQSxLQUFBLEdBQUEsS0FBQSxLQUFBOztRQUVBLE9BQUEsTUFBQTthQUNBLElBQUEsUUFBQTtRQUNBLDJCQUFBLE9BQUE7YUFDQTtRQUNBOzs7SUFHQSxJQUFBLE1BQUEseUJBQUEsT0FBQTtNQUNBO0lBQ0EsSUFBQSxVQUFBO01BQ0EsT0FBQTtNQUNBLE9BQUE7O0lBRUEseUJBQUEseUJBQUE7TUFDQSx1QkFBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsMkJBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBOztFQUVBLEdBQUEsS0FBQSxVQUFBLFNBQUEsUUFBQTtJQUNBLElBQUEsSUFBQTtNQUNBLElBQUE7TUFDQSxLQUFBO01BQ0EsS0FBQTtNQUNBLGFBQUE7SUFDQSxJQUFBLFFBQUEsT0FBQSxRQUFBOztJQUVBLFNBQUEsUUFBQSxNQUFBO01BQ0EsSUFBQSxXQUFBLElBQUEsTUFBQSxLQUFBO1FBQ0EsS0FBQSxXQUFBLEdBQUE7UUFDQSxLQUFBLFdBQUEsR0FBQTtRQUNBLEtBQUEsV0FBQSxHQUFBO1FBQ0EsS0FBQSxXQUFBLEdBQUE7TUFDQSxnQkFBQSxNQUFBLE9BQUEsWUFBQSxNQUFBLFFBQUE7UUFDQSxNQUFBLEdBQUE7UUFDQSxJQUFBLFFBQUEsS0FBQTtVQUNBLE9BQUEsS0FBQTtVQUNBLFVBQUEsU0FBQSxLQUFBLE1BQUEsU0FBQSxNQUFBLElBQUEsU0FBQSxHQUFBO1lBQ0EsSUFBQSxJQUFBLEVBQUE7WUFDQSxPQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7ZUFDQSxLQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsTUFBQSxLQUFBO1VBQ0EsS0FBQTtZQUNBLENBQUEsSUFBQTtZQUNBLENBQUEsSUFBQTtZQUNBLENBQUEsSUFBQTtZQUNBLENBQUEsSUFBQTtjQUNBO1FBQ0EsUUFBQSxRQUFBLEtBQUE7O01BRUEsT0FBQTs7O0lBR0EsU0FBQSxNQUFBLE1BQUE7TUFDQSxPQUFBLEtBQUEsSUFBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUE7VUFDQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsS0FBQSxLQUFBO1VBQ0EsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLEtBQUEsS0FBQTtVQUNBLEdBQUE7Ozs7SUFJQSxRQUFBLFFBQUEsU0FBQSxNQUFBO01BQ0EsT0FBQSxnQkFBQSxNQUFBLE9BQUEsTUFBQSxPQUFBLFNBQUEsTUFBQTtRQUNBLE9BQUEsS0FBQSxLQUFBLEtBQUE7U0FDQSxJQUFBLFNBQUEsTUFBQTtRQUNBLE9BQUE7VUFDQSxRQUFBLEtBQUEsS0FBQSxFQUFBO1VBQ0EsUUFBQSxLQUFBLEtBQUEsRUFBQTs7OztJQUlBLFFBQUEsWUFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLFlBQUE7TUFDQSxnQkFBQSxNQUFBLE9BQUEsTUFBQSxRQUFBLFNBQUEsTUFBQSxHQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUE7VUFDQSxRQUFBLEtBQUEsTUFBQSxLQUFBO1VBQ0EsSUFBQSxDQUFBO1VBQ0EsSUFBQSxNQUFBO1VBQ0EsSUFBQSxJQUFBLEtBQUEsTUFBQSxJQUFBLEdBQUE7VUFDQSxLQUFBLEdBQUEsTUFBQSxPQUFBLEdBQUEsSUFBQSxHQUFBO1FBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtVQUNBLEtBQUE7VUFDQSxLQUFBO1VBQ0EsS0FBQSxNQUFBLEdBQUE7VUFDQSxLQUFBLEdBQUEsTUFBQSxPQUFBLEdBQUEsSUFBQSxHQUFBO1VBQ0EsSUFBQSxJQUFBLEdBQUEsS0FBQSxJQUFBLEdBQUEsS0FBQTtjQUNBLE1BQUEsSUFBQSxNQUFBLEdBQUE7WUFDQSxVQUFBLEtBQUEsQ0FBQSxLQUFBLElBQUEsS0FBQSxHQUFBLElBQUEsS0FBQSxHQUFBOzs7O01BSUEsT0FBQTs7SUFFQSxRQUFBLElBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxVQUFBLFVBQUEsS0FBQSxXQUFBLElBQUEsSUFBQSxXQUFBOztJQUVBLFFBQUEsSUFBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLFVBQUEsVUFBQSxLQUFBLFdBQUEsSUFBQSxJQUFBLFdBQUE7O0lBRUEsUUFBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtRQUNBLDRCQUFBLE9BQUE7TUFDQSxhQUFBLEtBQUEsT0FBQSw0QkFBQTtNQUNBLE9BQUE7O0lBRUEsUUFBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtRQUNBLDRCQUFBLE9BQUEsY0FBQSxXQUFBO01BQ0EsT0FBQSxRQUFBLFdBQUEsS0FBQTtRQUNBLENBQUEsR0FBQSxJQUFBOzs7SUFHQSxPQUFBOztFQUVBLElBQUEsNEJBQUE7SUFDQSxDQUFBLENBQUEsS0FBQSxDQUFBO0lBQ0EsQ0FBQSxLQUFBOzs7RUFHQSxTQUFBLDRCQUFBLEdBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUE7O0VBRUEsR0FBQSxLQUFBLFdBQUEsU0FBQSxVQUFBO0lBQ0EsT0FBQSxHQUFBLEtBQUEsVUFBQSxVQUFBOztFQUVBLEdBQUEsS0FBQSxXQUFBLFNBQUEsUUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBO0lBQ0EsSUFBQSxJQUFBO01BQ0EsSUFBQTtNQUNBO0lBQ0EsSUFBQSxTQUFBLFVBQUEsUUFBQTtNQUNBLElBQUE7TUFDQSxJQUFBO01BQ0EsSUFBQSxXQUFBLEdBQUE7UUFDQSxLQUFBO1FBQ0EsS0FBQTtRQUNBLEtBQUEsS0FBQTs7TUFFQSxPQUFBLFNBQUE7OztJQUdBLFNBQUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxHQUFBLEtBQUEsV0FBQTtRQUNBLEtBQUEsV0FBQTtRQUNBLElBQUEsSUFBQSxHQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxJQUFBLE1BQUEsTUFBQTtRQUNBLE1BQUEsSUFBQSxNQUFBLElBQUEsTUFBQSxJQUFBLE1BQUE7YUFDQTtRQUNBLE1BQUEsTUFBQSxFQUFBLE1BQUEsTUFBQTtRQUNBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBO1FBQ0EsSUFBQTtVQUNBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUE7WUFDQSxJQUFBLEtBQUE7WUFDQSxJQUFBLEVBQUEsSUFBQSxLQUFBLE1BQUEsRUFBQTtZQUNBLElBQUEsRUFBQSxJQUFBLEtBQUEsTUFBQSxFQUFBO1lBQ0EsSUFBQSxFQUFBLElBQUEsS0FBQSxNQUFBLEVBQUE7WUFDQSxJQUFBLEVBQUEsSUFBQSxLQUFBLE1BQUEsRUFBQTtZQUNBLEdBQUEsS0FBQSxFQUFBO1lBQ0EsR0FBQSxLQUFBLEVBQUE7O1lBRUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtjQUNBLElBQUEsS0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLElBQUE7Z0JBQ0EsS0FBQSxDQUFBLEdBQUEsR0FBQTtjQUNBLElBQUEsS0FBQSxLQUFBLE1BQUE7Y0FDQSxJQUFBLEtBQUEsS0FBQSxNQUFBO2NBQ0EsSUFBQSxLQUFBLEtBQUEsTUFBQTtjQUNBLElBQUEsS0FBQSxLQUFBLE1BQUE7Y0FDQSxHQUFBLEtBQUE7Y0FDQSxHQUFBLEtBQUE7OztNQUdBLElBQUEsS0FBQSxNQUFBO1FBQ0EsS0FBQSxNQUFBO01BQ0EsSUFBQSxLQUFBLElBQUEsTUFBQSxNQUFBO1dBQ0EsTUFBQSxNQUFBOztNQUVBLFNBQUEsT0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLE1BQUEsTUFBQSxNQUFBLElBQUE7UUFDQSxJQUFBLEVBQUEsTUFBQTtVQUNBLElBQUEsS0FBQSxFQUFBO1lBQ0EsS0FBQSxFQUFBO1VBQ0EsSUFBQSxNQUFBLE1BQUE7WUFDQSxJQUFBLElBQUEsS0FBQSxLQUFBLElBQUEsS0FBQSxLQUFBLEtBQUE7Y0FDQSxZQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsSUFBQSxJQUFBLElBQUE7bUJBQ0E7Y0FDQSxJQUFBLFNBQUEsRUFBQTtjQUNBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBO2NBQ0EsWUFBQSxHQUFBLFFBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBO2NBQ0EsWUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLElBQUEsSUFBQSxJQUFBOztpQkFFQTtZQUNBLEVBQUEsSUFBQSxHQUFBLEVBQUEsSUFBQSxHQUFBLEVBQUEsUUFBQTs7ZUFFQTtVQUNBLFlBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxJQUFBLElBQUEsSUFBQTs7OztNQUlBLFNBQUEsWUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLE1BQUE7VUFDQSxLQUFBLENBQUEsS0FBQSxNQUFBO1VBQ0EsUUFBQSxLQUFBO1VBQ0EsUUFBQSxLQUFBO1VBQ0EsSUFBQSxTQUFBLElBQUE7UUFDQSxFQUFBLE9BQUE7UUFDQSxJQUFBLEVBQUEsTUFBQSxPQUFBLEVBQUEsTUFBQSxLQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUE7YUFDQSxLQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUE7YUFDQSxLQUFBO1FBQ0EsT0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLElBQUEsSUFBQSxJQUFBOztNQUVBLElBQUEsT0FBQTtNQUNBLEtBQUEsTUFBQSxTQUFBLEdBQUE7UUFDQSxPQUFBLE1BQUEsR0FBQSxDQUFBLEdBQUEsR0FBQSxFQUFBLElBQUEsQ0FBQSxHQUFBLEdBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTs7TUFFQSxLQUFBLFFBQUEsU0FBQSxHQUFBO1FBQ0Esc0JBQUEsR0FBQSxNQUFBLEtBQUEsS0FBQSxLQUFBOztNQUVBLEtBQUEsT0FBQSxTQUFBLE9BQUE7UUFDQSxPQUFBLHFCQUFBLE1BQUEsTUFBQSxJQUFBLE1BQUEsSUFBQSxLQUFBO1VBQ0EsS0FBQTs7TUFFQSxJQUFBLENBQUE7TUFDQSxJQUFBLE1BQUEsTUFBQTtRQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7VUFDQSxPQUFBLE1BQUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsS0FBQSxLQUFBLEtBQUE7O1FBRUEsRUFBQTthQUNBLEtBQUEsUUFBQSxLQUFBO01BQ0EsS0FBQSxLQUFBLE9BQUEsSUFBQTtNQUNBLE9BQUE7O0lBRUEsU0FBQSxJQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsVUFBQSxVQUFBLElBQUEsR0FBQSxZQUFBOztJQUVBLFNBQUEsSUFBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLFVBQUEsVUFBQSxJQUFBLEdBQUEsWUFBQTs7SUFFQSxTQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLE1BQUEsT0FBQSxPQUFBO1FBQ0EsQ0FBQSxJQUFBO1FBQ0EsQ0FBQSxJQUFBOztNQUVBLElBQUEsS0FBQSxNQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7V0FDQSxLQUFBLENBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxDQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsQ0FBQSxFQUFBLEdBQUE7UUFDQSxLQUFBLENBQUEsRUFBQSxHQUFBO01BQ0EsT0FBQTs7SUFFQSxTQUFBLE9BQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLE1BQUEsT0FBQSxPQUFBLENBQUEsS0FBQSxJQUFBO1FBQ0E7O01BRUEsSUFBQSxLQUFBLE1BQUEsS0FBQSxLQUFBLEtBQUEsS0FBQTtXQUNBLEtBQUEsS0FBQSxHQUFBLEtBQUEsQ0FBQSxFQUFBLElBQUEsS0FBQSxDQUFBLEVBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsd0JBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQTs7O0VBR0EsU0FBQSx3QkFBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBOzs7RUFHQSxTQUFBLHVCQUFBO0lBQ0EsT0FBQTtNQUNBLE1BQUE7TUFDQSxPQUFBO01BQ0EsT0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBOzs7O0VBSUEsU0FBQSxzQkFBQSxHQUFBLE1BQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsQ0FBQSxFQUFBLE1BQUEsSUFBQSxJQUFBLElBQUEsS0FBQTtNQUNBLElBQUEsS0FBQSxDQUFBLEtBQUEsTUFBQTtRQUNBLEtBQUEsQ0FBQSxLQUFBLE1BQUE7UUFDQSxXQUFBLEtBQUE7TUFDQSxJQUFBLFNBQUEsSUFBQSxzQkFBQSxHQUFBLFNBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtNQUNBLElBQUEsU0FBQSxJQUFBLHNCQUFBLEdBQUEsU0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBO01BQ0EsSUFBQSxTQUFBLElBQUEsc0JBQUEsR0FBQSxTQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7TUFDQSxJQUFBLFNBQUEsSUFBQSxzQkFBQSxHQUFBLFNBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTs7OztFQUlBLFNBQUEscUJBQUEsTUFBQSxHQUFBLEdBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsZUFBQTtNQUNBO0lBQ0EsQ0FBQSxTQUFBLEtBQUEsTUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBO01BQ0EsSUFBQSxLQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUEsTUFBQSxLQUFBLElBQUE7TUFDQSxJQUFBLFFBQUEsS0FBQSxPQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUEsSUFBQSxNQUFBO1VBQ0EsS0FBQSxJQUFBLE1BQUE7VUFDQSxZQUFBLEtBQUEsS0FBQSxLQUFBO1FBQ0EsSUFBQSxZQUFBLGNBQUE7VUFDQSxJQUFBLFdBQUEsS0FBQSxLQUFBLGVBQUE7VUFDQSxLQUFBLElBQUEsVUFBQSxLQUFBLElBQUE7VUFDQSxLQUFBLElBQUEsVUFBQSxLQUFBLElBQUE7VUFDQSxlQUFBOzs7TUFHQSxJQUFBLFdBQUEsS0FBQTtRQUNBLEtBQUEsQ0FBQSxLQUFBLE1BQUE7UUFDQSxLQUFBLENBQUEsS0FBQSxNQUFBO1FBQ0EsUUFBQSxLQUFBO1FBQ0EsUUFBQSxLQUFBO01BQ0EsS0FBQSxJQUFBLElBQUEsU0FBQSxJQUFBLE9BQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtRQUNBLElBQUEsT0FBQSxTQUFBLElBQUEsSUFBQSxRQUFBLElBQUE7VUFDQSxLQUFBO1lBQ0EsS0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBO1lBQ0E7O1VBRUEsS0FBQTtZQUNBLEtBQUEsTUFBQSxJQUFBLElBQUEsSUFBQTtZQUNBOztVQUVBLEtBQUE7WUFDQSxLQUFBLE1BQUEsSUFBQSxJQUFBLElBQUE7WUFDQTs7VUFFQSxLQUFBO1lBQ0EsS0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBO1lBQ0E7OztPQUdBLE1BQUEsSUFBQSxJQUFBLElBQUE7SUFDQSxPQUFBOztFQUVBLEdBQUEsaUJBQUE7O0VBRUEsU0FBQSxrQkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLEdBQUEsSUFBQTtJQUNBLElBQUEsR0FBQSxJQUFBO0lBQ0EsSUFBQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUEsSUFBQTtNQUNBLEtBQUEsRUFBQSxJQUFBO01BQ0EsS0FBQSxFQUFBLElBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsTUFBQSxXQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsTUFBQSxXQUFBLEtBQUE7UUFDQSxLQUFBLEtBQUEsTUFBQSxXQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUE7OztFQUdBLEdBQUEsb0JBQUE7O0VBRUEsU0FBQSxxQkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBO01BQ0E7SUFDQSxLQUFBLEtBQUEsR0FBQTtNQUNBLElBQUEsS0FBQSxHQUFBO1FBQ0EsRUFBQSxLQUFBLGVBQUEsRUFBQSxJQUFBLEVBQUE7YUFDQTtRQUNBLEVBQUEsS0FBQSxFQUFBOzs7SUFHQSxLQUFBLEtBQUEsR0FBQTtNQUNBLElBQUEsRUFBQSxLQUFBLElBQUE7UUFDQSxFQUFBLEtBQUEsRUFBQTs7O0lBR0EsT0FBQSxTQUFBLEdBQUE7TUFDQSxLQUFBLEtBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBO01BQ0EsT0FBQTs7O0VBR0EsR0FBQSxvQkFBQTs7RUFFQSxTQUFBLHFCQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxLQUFBLElBQUEsS0FBQSxJQUFBOzs7RUFHQSxHQUFBLG9CQUFBOztFQUVBLFNBQUEscUJBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxLQUFBLHVCQUFBLFlBQUEsdUJBQUE7TUFDQTtNQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsQ0FBQTtNQUNBLElBQUE7TUFDQSxJQUFBO0lBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBO0lBQ0EsT0FBQSxDQUFBLEtBQUEsdUJBQUEsS0FBQSxRQUFBO1FBQ0EsdUJBQUEsS0FBQSxLQUFBO01BQ0EsSUFBQSxDQUFBLEtBQUEsR0FBQSxTQUFBLElBQUE7UUFDQSxLQUFBLEVBQUEsTUFBQSxJQUFBO1FBQ0EsSUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBO2FBQ0EsRUFBQSxFQUFBLEtBQUE7O01BRUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxTQUFBLEtBQUEsR0FBQSxLQUFBO1FBQ0EsSUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBO2FBQ0EsRUFBQSxFQUFBLEtBQUE7YUFDQTtRQUNBLEVBQUEsRUFBQSxLQUFBO1FBQ0EsRUFBQSxLQUFBO1VBQ0EsR0FBQTtVQUNBLEdBQUEscUJBQUEsSUFBQTs7O01BR0EsS0FBQSx1QkFBQTs7SUFFQSxJQUFBLEtBQUEsRUFBQSxRQUFBO01BQ0EsS0FBQSxFQUFBLE1BQUE7TUFDQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUE7V0FDQSxFQUFBLEVBQUEsS0FBQTs7SUFFQSxPQUFBLEVBQUEsU0FBQSxJQUFBLEVBQUEsTUFBQSxJQUFBLEVBQUEsR0FBQSxHQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxLQUFBO1NBQ0EsV0FBQTtNQUNBLE9BQUE7U0FDQSxJQUFBLEVBQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsSUFBQSxFQUFBLElBQUEsS0FBQSxFQUFBLEVBQUE7TUFDQSxPQUFBLEVBQUEsS0FBQTs7O0VBR0EsSUFBQTtJQUNBO0lBQ0EseUJBQUEsSUFBQSxPQUFBLHVCQUFBLFFBQUE7RUFDQSxHQUFBLGNBQUE7O0VBRUEsU0FBQSxlQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxHQUFBLGNBQUE7TUFDQTtJQUNBLE9BQUEsRUFBQSxLQUFBLEtBQUEsRUFBQSxJQUFBLEdBQUEsY0FBQSxHQUFBLEdBQUEsSUFBQTtJQUNBLE9BQUE7O0VBRUEsR0FBQSxnQkFBQSxDQUFBLFNBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBLE9BQUE7SUFDQSxPQUFBLENBQUEsTUFBQSxXQUFBLGFBQUEsSUFBQSxNQUFBLG1CQUFBO1FBQ0EsS0FBQSxvQkFBQSx1QkFBQSxhQUFBO01BQ0Esb0JBQUEsTUFBQSxRQUFBLEtBQUEsc0JBQUE7TUFDQSxZQUFBLE1BQUEsS0FBQTtNQUNBLHNCQUFBLEdBQUE7O0VBRUEsR0FBQSxtQkFBQTs7RUFFQSxTQUFBLG9CQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsSUFBQTtNQUNBLElBQUE7TUFDQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEtBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQTtNQUNBO0lBQ0EsS0FBQSxJQUFBLEdBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsZUFBQSxFQUFBLElBQUEsRUFBQTtJQUNBLE9BQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsS0FBQSxJQUFBLEdBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBO01BQ0EsT0FBQTs7O0VBR0EsSUFBQSxrQkFBQSxXQUFBO0lBQ0EsT0FBQTs7RUFFQSxJQUFBLFVBQUEsR0FBQSxJQUFBO0lBQ0EsUUFBQTtJQUNBLE1BQUE7SUFDQSxNQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLFFBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsU0FBQTtJQUNBLE1BQUE7SUFDQSxRQUFBLFdBQUE7TUFDQSxPQUFBOzs7RUFHQSxJQUFBLGVBQUEsR0FBQSxJQUFBO0lBQ0EsTUFBQTtJQUNBLEtBQUE7SUFDQSxVQUFBO0lBQ0EsVUFBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLGdCQUFBLGdCQUFBOzs7RUFHQSxHQUFBLE9BQUEsU0FBQSxNQUFBO0lBQ0EsSUFBQSxJQUFBLEtBQUEsUUFBQTtNQUNBLElBQUEsS0FBQSxJQUFBLEtBQUEsTUFBQSxHQUFBLEtBQUE7TUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBLE1BQUEsSUFBQSxLQUFBO0lBQ0EsSUFBQSxRQUFBLElBQUEsTUFBQTtJQUNBLElBQUEsYUFBQSxJQUFBLE1BQUE7SUFDQSxPQUFBLGNBQUEsRUFBQSxFQUFBLE1BQUEsTUFBQSxjQUFBLEtBQUEsV0FBQTs7O0VBR0EsU0FBQSxjQUFBLEdBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsRUFBQTs7OztFQUlBLFNBQUEsZ0JBQUEsR0FBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxJQUFBLEVBQUEsSUFBQTs7OztFQUlBLFNBQUEsZ0JBQUEsR0FBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxNQUFBLElBQUEsS0FBQSxFQUFBLElBQUEsS0FBQSxJQUFBLEVBQUEsSUFBQSxJQUFBOzs7O0VBSUEsU0FBQSxhQUFBLEdBQUE7SUFDQSxPQUFBLElBQUE7OztFQUdBLFNBQUEsY0FBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLElBQUE7OztFQUdBLFNBQUEsbUJBQUEsR0FBQTtJQUNBLElBQUEsS0FBQSxHQUFBLE9BQUE7SUFDQSxJQUFBLEtBQUEsR0FBQSxPQUFBO0lBQ0EsSUFBQSxLQUFBLElBQUE7TUFDQSxLQUFBLEtBQUE7SUFDQSxPQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQSxJQUFBLE1BQUEsS0FBQTs7O0VBR0EsU0FBQSxhQUFBLEdBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxJQUFBLEdBQUE7Ozs7RUFJQSxTQUFBLFlBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxLQUFBLElBQUEsSUFBQTs7O0VBR0EsU0FBQSxZQUFBLEdBQUE7SUFDQSxPQUFBLEtBQUEsSUFBQSxHQUFBLE1BQUEsSUFBQTs7O0VBR0EsU0FBQSxlQUFBLEdBQUE7SUFDQSxPQUFBLElBQUEsS0FBQSxLQUFBLElBQUEsSUFBQTs7O0VBR0EsU0FBQSxnQkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQSxJQUFBO0lBQ0EsSUFBQSxVQUFBLFFBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxLQUFBLElBQUE7U0FDQSxJQUFBLEdBQUEsSUFBQSxJQUFBO0lBQ0EsT0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsR0FBQSxDQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQTs7OztFQUlBLFNBQUEsYUFBQSxHQUFBO0lBQ0EsSUFBQSxDQUFBLEdBQUEsSUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQTs7OztFQUlBLFNBQUEsZUFBQSxHQUFBO0lBQ0EsT0FBQSxJQUFBLElBQUEsT0FBQSxTQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsT0FBQSxVQUFBO1FBQ0EsTUFBQSxRQUFBLElBQUEsTUFBQSxJQUFBLE1BQUEsT0FBQSxVQUFBLEtBQUEsT0FBQTtNQUNBLElBQUEsUUFBQSxVQUFBLEtBQUEsUUFBQSxRQUFBLElBQUE7O0VBRUEsR0FBQSxpQkFBQTs7RUFFQSxTQUFBLGtCQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsR0FBQSxJQUFBO0lBQ0EsSUFBQSxHQUFBLElBQUE7SUFDQSxJQUFBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQSxJQUFBO01BQ0EsS0FBQSxFQUFBLElBQUE7TUFDQSxLQUFBLEVBQUEsSUFBQTtJQUNBLElBQUEsTUFBQSxLQUFBLEtBQUEsR0FBQSxLQUFBLE1BQUEsTUFBQSxFQUFBLElBQUE7SUFDQSxJQUFBLE1BQUEsS0FBQSxLQUFBLEdBQUEsS0FBQSxNQUFBLE1BQUEsRUFBQSxJQUFBO1NBQ0EsSUFBQSxLQUFBLEtBQUEsTUFBQTtTQUNBLElBQUEsS0FBQSxDQUFBLEtBQUEsTUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxXQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUEsS0FBQSxLQUFBOzs7RUFHQSxHQUFBLGlCQUFBOztFQUVBLFNBQUEsa0JBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxHQUFBLElBQUE7SUFDQSxJQUFBLEdBQUEsSUFBQTtJQUNBLElBQUEsS0FBQSxFQUFBO01BQ0EsS0FBQSxFQUFBO01BQ0EsS0FBQSxFQUFBO01BQ0EsS0FBQSxFQUFBLElBQUE7TUFDQSxLQUFBLEVBQUEsSUFBQTtNQUNBLEtBQUEsRUFBQSxJQUFBO0lBQ0EsSUFBQSxNQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUEsTUFBQSxNQUFBLEVBQUEsSUFBQTtJQUNBLElBQUEsTUFBQSxLQUFBLEtBQUEsR0FBQSxLQUFBLE1BQUEsTUFBQSxFQUFBLElBQUE7U0FDQSxJQUFBLEtBQUEsS0FBQSxNQUFBO1NBQ0EsSUFBQSxLQUFBLENBQUEsS0FBQSxNQUFBO0lBQ0EsT0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLFdBQUEsS0FBQSxLQUFBLEdBQUEsS0FBQSxLQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUE7OztFQUdBLEdBQUEsaUJBQUE7O0VBRUEsU0FBQSxrQkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLEdBQUEsSUFBQTtJQUNBLElBQUEsR0FBQSxJQUFBO0lBQ0EsSUFBQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUEsSUFBQTtNQUNBLEtBQUEsRUFBQSxJQUFBO01BQ0EsS0FBQSxFQUFBLElBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsV0FBQSxLQUFBLEtBQUEsR0FBQSxLQUFBLEtBQUEsR0FBQSxLQUFBLEtBQUEsS0FBQTs7O0VBR0EsR0FBQSxtQkFBQTs7RUFFQSxTQUFBLG9CQUFBLEdBQUEsR0FBQTtJQUNBLEtBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxNQUFBLElBQUEsSUFBQTs7O0VBR0EsR0FBQSxZQUFBLFNBQUEsUUFBQTtJQUNBLElBQUEsSUFBQSxZQUFBLGdCQUFBLEdBQUEsR0FBQSxPQUFBLEtBQUE7SUFDQSxPQUFBLENBQUEsR0FBQSxZQUFBLFNBQUEsUUFBQTtNQUNBLElBQUEsVUFBQSxNQUFBO1FBQ0EsRUFBQSxhQUFBLGFBQUE7UUFDQSxJQUFBLElBQUEsRUFBQSxVQUFBLFFBQUE7O01BRUEsT0FBQSxJQUFBLGFBQUEsSUFBQSxFQUFBLFNBQUE7T0FDQTs7O0VBR0EsU0FBQSxhQUFBLEdBQUE7SUFDQSxJQUFBLEtBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtNQUNBLEtBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtNQUNBLEtBQUEsc0JBQUE7TUFDQSxLQUFBLGdCQUFBLElBQUE7TUFDQSxLQUFBLHNCQUFBLG9CQUFBLElBQUEsSUFBQSxDQUFBLFFBQUE7SUFDQSxJQUFBLEdBQUEsS0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBLEdBQUEsSUFBQTtNQUNBLEdBQUEsTUFBQSxDQUFBO01BQ0EsR0FBQSxNQUFBLENBQUE7TUFDQSxNQUFBLENBQUE7TUFDQSxNQUFBLENBQUE7O0lBRUEsS0FBQSxTQUFBLENBQUEsS0FBQSxLQUFBLE1BQUEsR0FBQSxJQUFBLEdBQUEsTUFBQSxLQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQTtNQUNBO0lBQ0EsS0FBQSxZQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7SUFDQSxLQUFBLFFBQUEsQ0FBQSxJQUFBO0lBQ0EsS0FBQSxPQUFBLEtBQUEsS0FBQSxNQUFBLElBQUEsTUFBQSxhQUFBOztFQUVBLGFBQUEsVUFBQSxXQUFBLFdBQUE7SUFDQSxPQUFBLGVBQUEsS0FBQSxZQUFBLGFBQUEsS0FBQTtNQUNBLFlBQUEsS0FBQSxPQUFBLFlBQUEsS0FBQSxRQUFBOzs7RUFHQSxTQUFBLGdCQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQTs7O0VBR0EsU0FBQSxzQkFBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBLEtBQUEsS0FBQSxnQkFBQSxHQUFBO0lBQ0EsSUFBQSxHQUFBO01BQ0EsRUFBQSxNQUFBO01BQ0EsRUFBQSxNQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsb0JBQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxFQUFBLE1BQUEsSUFBQSxFQUFBO0lBQ0EsRUFBQSxNQUFBLElBQUEsRUFBQTtJQUNBLE9BQUE7O0VBRUEsSUFBQSx1QkFBQTtJQUNBLEdBQUE7SUFDQSxHQUFBO0lBQ0EsR0FBQTtJQUNBLEdBQUE7SUFDQSxHQUFBO0lBQ0EsR0FBQTs7RUFFQSxHQUFBLHVCQUFBOztFQUVBLFNBQUEsd0JBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBO01BQ0EsSUFBQTtNQUNBLEdBQUEsSUFBQSxHQUFBLFVBQUE7TUFDQSxJQUFBLEdBQUEsVUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtNQUNBLEtBQUEsRUFBQTtJQUNBLElBQUEsR0FBQSxNQUFBLEdBQUEsTUFBQSxHQUFBLE1BQUEsR0FBQSxJQUFBO01BQ0EsRUFBQSxLQUFBLGNBQUEsTUFBQSxLQUFBLE1BQUE7TUFDQSxFQUFBLEtBQUE7UUFDQSxHQUFBO1FBQ0EsR0FBQSxxQkFBQSxHQUFBLElBQUEsR0FBQTtTQUNBO1FBQ0EsR0FBQTtRQUNBLEdBQUEscUJBQUEsR0FBQSxJQUFBLEdBQUE7O1dBRUEsSUFBQSxHQUFBLE1BQUEsR0FBQSxJQUFBO01BQ0EsRUFBQSxLQUFBLGVBQUEsS0FBQTtXQUNBO01BQ0EsRUFBQSxLQUFBOztJQUVBLElBQUEsTUFBQSxJQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxNQUFBO1dBQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxNQUFBO01BQ0EsRUFBQSxLQUFBO1FBQ0EsR0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLFdBQUEsTUFBQSxPQUFBO1FBQ0EsR0FBQSxxQkFBQSxJQUFBOztXQUVBLElBQUEsSUFBQTtNQUNBLEVBQUEsS0FBQSxFQUFBLFFBQUEsWUFBQSxLQUFBOztJQUVBLElBQUEsTUFBQSxJQUFBO01BQ0EsRUFBQSxLQUFBO1FBQ0EsR0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLFVBQUEsTUFBQSxPQUFBO1FBQ0EsR0FBQSxxQkFBQSxJQUFBOztXQUVBLElBQUEsSUFBQTtNQUNBLEVBQUEsS0FBQSxFQUFBLFFBQUEsV0FBQSxLQUFBOztJQUVBLElBQUEsR0FBQSxNQUFBLEdBQUEsTUFBQSxHQUFBLE1BQUEsR0FBQSxJQUFBO01BQ0EsSUFBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLFVBQUEsTUFBQSxLQUFBLE1BQUE7TUFDQSxFQUFBLEtBQUE7UUFDQSxHQUFBLElBQUE7UUFDQSxHQUFBLHFCQUFBLEdBQUEsSUFBQSxHQUFBO1NBQ0E7UUFDQSxHQUFBLElBQUE7UUFDQSxHQUFBLHFCQUFBLEdBQUEsSUFBQSxHQUFBOztXQUVBLElBQUEsR0FBQSxNQUFBLEtBQUEsR0FBQSxNQUFBLEdBQUE7TUFDQSxFQUFBLEtBQUEsRUFBQSxRQUFBLFdBQUEsS0FBQTs7SUFFQSxJQUFBLEVBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxDQUFBO1FBQ0E7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLEVBQUEsQ0FBQSxJQUFBLEVBQUEsSUFBQSxLQUFBLEVBQUEsRUFBQTtNQUNBLE9BQUEsRUFBQSxLQUFBOzs7O0VBSUEsU0FBQSx1QkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLENBQUEsS0FBQSxJQUFBLENBQUEsTUFBQSxJQUFBO0lBQ0EsT0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLENBQUEsSUFBQSxLQUFBOzs7O0VBSUEsU0FBQSxzQkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLENBQUEsS0FBQSxJQUFBLENBQUEsTUFBQSxJQUFBO0lBQ0EsT0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEtBQUEsSUFBQSxHQUFBLEtBQUEsSUFBQSxHQUFBLENBQUEsSUFBQSxLQUFBOzs7RUFHQSxHQUFBLFNBQUE7RUFDQSxHQUFBLE9BQUEsU0FBQSxXQUFBO0lBQ0EsT0FBQSxTQUFBLE9BQUE7TUFDQSxJQUFBLFFBQUE7UUFDQSxJQUFBLENBQUE7UUFDQSxJQUFBLE1BQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLE1BQUEsS0FBQSxxQkFBQSxNQUFBO01BQ0EsT0FBQTs7OztFQUlBLFNBQUEscUJBQUEsTUFBQTtJQUNBLElBQUEsUUFBQSxLQUFBO01BQ0EsTUFBQSxLQUFBO01BQ0EsTUFBQSxvQ0FBQSxPQUFBO01BQ0EsU0FBQSxDQUFBO0lBQ0EsT0FBQSxVQUFBLEtBQUE7TUFDQSxRQUFBLE1BQUE7TUFDQSxPQUFBLEtBQUE7O0lBRUEsSUFBQSxJQUFBLE9BQUE7SUFDQSxPQUFBLFFBQUEsS0FBQTtNQUNBLE9BQUEsT0FBQSxHQUFBLEdBQUE7TUFDQSxNQUFBLElBQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSwwQkFBQSxNQUFBO0lBQ0EsSUFBQSxZQUFBO01BQ0EsU0FBQSxLQUFBO0lBQ0EsT0FBQSxVQUFBLE1BQUE7TUFDQSxVQUFBLEtBQUE7TUFDQSxPQUFBO01BQ0EsU0FBQSxPQUFBOztJQUVBLFVBQUEsS0FBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsb0NBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQTtJQUNBLElBQUEsU0FBQSwwQkFBQTtNQUNBLFNBQUEsMEJBQUE7TUFDQSxRQUFBLE9BQUE7TUFDQSxRQUFBLE9BQUE7TUFDQSxhQUFBO0lBQ0EsT0FBQSxVQUFBLE9BQUE7TUFDQSxhQUFBO01BQ0EsUUFBQSxPQUFBO01BQ0EsUUFBQSxPQUFBOztJQUVBLE9BQUE7O0VBRUEsR0FBQSxPQUFBLFFBQUEsV0FBQTtJQUNBLElBQUEsUUFBQTtNQUNBLFFBQUEsUUFBQSxRQUFBLEdBQUEsVUFBQTtNQUNBLFlBQUEsZUFBQTs7SUFFQSxTQUFBLFdBQUE7TUFDQSxJQUFBLFlBQUE7UUFDQSxZQUFBO1FBQ0EsYUFBQSxHQUFBLE1BQUE7UUFDQSxnQkFBQTtRQUNBLEdBQUEsR0FBQSxJQUFBLEdBQUE7TUFDQSxTQUFBO01BQ0EsU0FBQTtNQUNBLElBQUEsR0FBQSxJQUFBLENBQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1FBQ0EsSUFBQSxHQUFBLElBQUEsQ0FBQTtRQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7VUFDQSxLQUFBLE9BQUEsR0FBQTs7UUFFQSxVQUFBLEtBQUE7UUFDQSxjQUFBLEtBQUEsR0FBQSxNQUFBO1FBQ0EsS0FBQTs7TUFFQSxJQUFBLFlBQUE7UUFDQSxXQUFBLEtBQUEsU0FBQSxHQUFBLEdBQUE7VUFDQSxPQUFBLFdBQUEsVUFBQSxJQUFBLFVBQUE7OztNQUdBLElBQUEsZUFBQTtRQUNBLGNBQUEsUUFBQSxTQUFBLEdBQUEsR0FBQTtVQUNBLEVBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtZQUNBLE9BQUEsY0FBQSxPQUFBLEdBQUEsSUFBQSxPQUFBLEdBQUE7Ozs7TUFJQSxJQUFBLENBQUEsSUFBQSxVQUFBLEtBQUE7TUFDQSxJQUFBLEdBQUEsSUFBQSxDQUFBO01BQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtRQUNBLEtBQUEsR0FBQSxJQUFBLENBQUE7UUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1VBQ0EsSUFBQSxLQUFBLFdBQUE7WUFDQSxLQUFBLGNBQUEsSUFBQTtZQUNBLElBQUEsT0FBQSxJQUFBO1lBQ0EsS0FBQTtZQUNBLEtBQUEsS0FBQSxJQUFBO1VBQ0EsVUFBQSxLQUFBLE1BQUEsTUFBQTtZQUNBLE9BQUE7WUFDQSxVQUFBO1lBQ0EsWUFBQTtZQUNBLFVBQUE7WUFDQSxPQUFBOzs7UUFHQSxPQUFBLE1BQUE7VUFDQSxPQUFBO1VBQ0EsWUFBQTtVQUNBLFVBQUE7VUFDQSxPQUFBLENBQUEsSUFBQSxNQUFBOztRQUVBLEtBQUE7O01BRUEsSUFBQSxDQUFBO01BQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtRQUNBLElBQUEsSUFBQTtRQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7VUFDQSxJQUFBLFNBQUEsVUFBQSxJQUFBLE1BQUE7WUFDQSxTQUFBLFVBQUEsSUFBQSxNQUFBO1VBQ0EsSUFBQSxPQUFBLFNBQUEsT0FBQSxPQUFBO1lBQ0EsT0FBQSxLQUFBLE9BQUEsUUFBQSxPQUFBLFFBQUE7Y0FDQSxRQUFBO2NBQ0EsUUFBQTtnQkFDQTtjQUNBLFFBQUE7Y0FDQSxRQUFBOzs7OztNQUtBLElBQUEsWUFBQTs7O0lBR0EsU0FBQSxTQUFBO01BQ0EsT0FBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxXQUFBLENBQUEsRUFBQSxPQUFBLFFBQUEsRUFBQSxPQUFBLFNBQUEsR0FBQSxDQUFBLEVBQUE7V0FDQSxRQUFBLEVBQUEsT0FBQSxTQUFBOzs7SUFHQSxNQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsSUFBQSxDQUFBLFNBQUEsTUFBQSxPQUFBO01BQ0EsU0FBQSxTQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLFVBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUEsU0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGFBQUE7TUFDQSxTQUFBLFNBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsZ0JBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsZ0JBQUE7TUFDQSxTQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLGFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsYUFBQTtNQUNBLElBQUEsUUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxTQUFBLFdBQUE7TUFDQSxJQUFBLENBQUEsUUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxTQUFBLFdBQUE7TUFDQSxJQUFBLENBQUEsUUFBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQTs7RUFFQSxHQUFBLE9BQUEsUUFBQSxXQUFBO0lBQ0EsSUFBQSxRQUFBO01BQ0EsUUFBQSxHQUFBLFNBQUEsU0FBQSxRQUFBO01BQ0EsT0FBQSxDQUFBLEdBQUE7TUFDQSxNQUFBLE9BQUEsV0FBQTtNQUNBLGVBQUE7TUFDQSxlQUFBO01BQ0EsU0FBQSxDQUFBO01BQ0Esa0JBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsV0FBQSxXQUFBOztJQUVBLFNBQUEsUUFBQSxNQUFBO01BQ0EsT0FBQSxTQUFBLE1BQUEsSUFBQSxHQUFBLElBQUE7UUFDQSxJQUFBLEtBQUEsVUFBQSxNQUFBO1VBQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO1lBQ0EsS0FBQSxLQUFBLEtBQUEsS0FBQTtZQUNBLEtBQUEsS0FBQTtZQUNBLEtBQUEsS0FBQSxLQUFBLEtBQUE7VUFDQSxJQUFBLEtBQUEsS0FBQSxTQUFBLElBQUE7WUFDQSxJQUFBLEtBQUEsaUJBQUE7Y0FDQSxJQUFBLElBQUEsS0FBQSxTQUFBO2NBQ0EsS0FBQSxNQUFBLEtBQUE7Y0FDQSxLQUFBLE1BQUEsS0FBQTs7WUFFQSxPQUFBOztVQUVBLElBQUEsS0FBQSxTQUFBLE1BQUEsS0FBQSxpQkFBQTtZQUNBLElBQUEsSUFBQSxLQUFBLGNBQUE7WUFDQSxLQUFBLE1BQUEsS0FBQTtZQUNBLEtBQUEsTUFBQSxLQUFBOzs7UUFHQSxPQUFBLENBQUEsS0FBQTs7O0lBR0EsTUFBQSxPQUFBLFdBQUE7TUFDQSxJQUFBLENBQUEsU0FBQSxPQUFBLE1BQUE7UUFDQSxNQUFBLElBQUE7VUFDQSxNQUFBO1VBQ0EsT0FBQSxRQUFBOztRQUVBLE9BQUE7O01BRUEsSUFBQSxJQUFBLE1BQUE7UUFDQSxJQUFBLE1BQUE7UUFDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUE7TUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsSUFBQSxNQUFBO1FBQ0EsSUFBQSxFQUFBO1FBQ0EsSUFBQSxFQUFBO1FBQ0EsSUFBQSxFQUFBLElBQUEsRUFBQTtRQUNBLElBQUEsRUFBQSxJQUFBLEVBQUE7UUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsR0FBQTtVQUNBLElBQUEsUUFBQSxVQUFBLE1BQUEsQ0FBQSxJQUFBLEtBQUEsS0FBQSxNQUFBLFVBQUE7WUFDQTtVQUNBLEtBQUE7VUFDQSxLQUFBO1VBQ0EsRUFBQSxLQUFBLEtBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUE7VUFDQSxFQUFBLEtBQUEsSUFBQTtVQUNBLEVBQUEsS0FBQSxLQUFBLElBQUEsSUFBQTtVQUNBLEVBQUEsS0FBQSxJQUFBOzs7TUFHQSxJQUFBLElBQUEsUUFBQSxTQUFBO1FBQ0EsSUFBQSxLQUFBLEtBQUE7UUFDQSxJQUFBLEtBQUEsS0FBQTtRQUNBLElBQUEsQ0FBQTtRQUNBLElBQUE7VUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1lBQ0EsSUFBQSxNQUFBO1lBQ0EsRUFBQSxLQUFBLENBQUEsSUFBQSxFQUFBLEtBQUE7WUFDQSxFQUFBLEtBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQTs7O01BR0EsSUFBQSxRQUFBO1FBQ0EsMEJBQUEsSUFBQSxHQUFBLEtBQUEsU0FBQSxRQUFBO1VBQ0E7UUFDQSxJQUFBLENBQUE7UUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1VBQ0EsSUFBQSxDQUFBLENBQUEsSUFBQSxNQUFBLElBQUEsT0FBQTtZQUNBLEVBQUEsTUFBQSxRQUFBOzs7O01BSUEsSUFBQSxDQUFBO01BQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtRQUNBLElBQUEsTUFBQTtRQUNBLElBQUEsRUFBQSxPQUFBO1VBQ0EsRUFBQSxJQUFBLEVBQUE7VUFDQSxFQUFBLElBQUEsRUFBQTtlQUNBO1VBQ0EsRUFBQSxLQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUE7VUFDQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQTs7O01BR0EsTUFBQSxLQUFBO1FBQ0EsTUFBQTtRQUNBLE9BQUE7OztJQUdBLE1BQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsUUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLE9BQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsZUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxlQUFBLE9BQUEsTUFBQSxhQUFBLElBQUEsQ0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxXQUFBLE1BQUE7SUFDQSxNQUFBLGVBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsZUFBQSxPQUFBLE1BQUEsYUFBQSxJQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsV0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxXQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBLE9BQUEsTUFBQSxhQUFBLElBQUEsQ0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxpQkFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsS0FBQSxLQUFBO01BQ0Esa0JBQUEsSUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxVQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFVBQUEsQ0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQSxLQUFBLEtBQUE7TUFDQSxTQUFBLElBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxJQUFBLENBQUE7TUFDQSxJQUFBLE9BQUE7UUFDQSxJQUFBLElBQUEsR0FBQSxRQUFBO2FBQ0EsUUFBQTthQUNBLElBQUEsSUFBQSxHQUFBO1FBQ0EsTUFBQSxNQUFBO1VBQ0EsTUFBQTtVQUNBLE9BQUEsUUFBQTs7UUFFQSxHQUFBLE1BQUEsTUFBQTs7TUFFQSxPQUFBOztJQUVBLE1BQUEsUUFBQSxXQUFBO01BQ0EsSUFBQSxHQUFBLElBQUEsTUFBQTtRQUNBLElBQUEsTUFBQTtRQUNBLElBQUEsS0FBQTtRQUNBLElBQUEsS0FBQTtRQUNBLFdBQUE7TUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsQ0FBQSxJQUFBLE1BQUEsSUFBQSxRQUFBO1FBQ0EsRUFBQSxTQUFBOztNQUVBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUE7UUFDQSxJQUFBLE1BQUE7UUFDQSxJQUFBLE9BQUEsRUFBQSxVQUFBLFVBQUEsRUFBQSxTQUFBLE1BQUEsRUFBQTtRQUNBLElBQUEsT0FBQSxFQUFBLFVBQUEsVUFBQSxFQUFBLFNBQUEsTUFBQSxFQUFBO1FBQ0EsRUFBQSxFQUFBLE9BQUE7UUFDQSxFQUFBLEVBQUEsT0FBQTs7TUFFQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsSUFBQSxNQUFBO1FBQ0EsSUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsU0FBQSxLQUFBO1FBQ0EsSUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsU0FBQSxLQUFBO1FBQ0EsSUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQTtRQUNBLElBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUE7O01BRUEsWUFBQTtNQUNBLElBQUEsT0FBQSxpQkFBQTtRQUNBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLENBQUEsYUFBQSxLQUFBO1VBQ0EsTUFBQSxJQUFBOztRQUVBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBO01BQ0EsWUFBQTtNQUNBLElBQUEsT0FBQSxpQkFBQTtRQUNBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLENBQUEsYUFBQSxLQUFBO1VBQ0EsTUFBQSxJQUFBOztRQUVBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBO01BQ0EsVUFBQTtNQUNBLElBQUEsT0FBQSxXQUFBO1FBQ0EsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxRQUFBLEtBQUEsQ0FBQSxPQUFBLEtBQUEsTUFBQSxNQUFBO1VBQ0E7O1FBRUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxRQUFBLEtBQUE7O01BRUEsU0FBQSxTQUFBLFdBQUEsTUFBQTtRQUNBLElBQUEsQ0FBQSxXQUFBO1VBQ0EsWUFBQSxJQUFBLE1BQUE7VUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1lBQ0EsVUFBQSxLQUFBOztVQUVBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUE7WUFDQSxJQUFBLElBQUEsTUFBQTtZQUNBLFVBQUEsRUFBQSxPQUFBLE9BQUEsS0FBQSxFQUFBO1lBQ0EsVUFBQSxFQUFBLE9BQUEsT0FBQSxLQUFBLEVBQUE7OztRQUdBLElBQUEsYUFBQSxVQUFBO1VBQ0EsSUFBQSxDQUFBO1VBQ0EsSUFBQSxXQUFBO1VBQ0E7UUFDQSxPQUFBLEVBQUEsSUFBQTtVQUNBLElBQUEsQ0FBQSxNQUFBLElBQUEsV0FBQSxHQUFBLGFBQUEsT0FBQTtRQUNBLE9BQUEsS0FBQSxXQUFBOztNQUVBLE9BQUEsTUFBQTs7SUFFQSxNQUFBLFNBQUEsV0FBQTtNQUNBLE9BQUEsTUFBQSxNQUFBOztJQUVBLE1BQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxNQUFBLE1BQUE7O0lBRUEsTUFBQSxPQUFBLFdBQUE7TUFDQSxJQUFBLENBQUEsTUFBQSxPQUFBLEdBQUEsU0FBQSxPQUFBLE9BQUEsYUFBQTtRQUNBLG1CQUFBLDBCQUFBLEdBQUE7UUFDQSxVQUFBLEdBQUEsaUJBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxLQUFBLEdBQUEsbUJBQUEsMEJBQUE7UUFDQSxrQkFBQSx5QkFBQSxLQUFBOzs7SUFHQSxTQUFBLFNBQUEsR0FBQTtNQUNBLEVBQUEsS0FBQSxHQUFBLE1BQUEsR0FBQSxFQUFBLEtBQUEsR0FBQSxNQUFBO01BQ0EsTUFBQTs7SUFFQSxPQUFBLEdBQUEsT0FBQSxPQUFBLE9BQUE7OztFQUdBLFNBQUEseUJBQUEsR0FBQTtJQUNBLEVBQUEsU0FBQTs7O0VBR0EsU0FBQSx1QkFBQSxHQUFBO0lBQ0EsRUFBQSxTQUFBLENBQUE7OztFQUdBLFNBQUEseUJBQUEsR0FBQTtJQUNBLEVBQUEsU0FBQTtJQUNBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUE7OztFQUdBLFNBQUEsd0JBQUEsR0FBQTtJQUNBLEVBQUEsU0FBQSxDQUFBOzs7RUFHQSxTQUFBLDBCQUFBLE1BQUEsT0FBQSxTQUFBO0lBQ0EsSUFBQSxLQUFBO01BQ0EsS0FBQTtJQUNBLEtBQUEsU0FBQTtJQUNBLElBQUEsQ0FBQSxLQUFBLE1BQUE7TUFDQSxJQUFBLFFBQUEsS0FBQTtRQUNBLElBQUEsTUFBQTtRQUNBLElBQUEsQ0FBQTtRQUNBO01BQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtRQUNBLElBQUEsTUFBQTtRQUNBLElBQUEsS0FBQSxNQUFBO1FBQ0EsMEJBQUEsR0FBQSxPQUFBO1FBQ0EsS0FBQSxVQUFBLEVBQUE7UUFDQSxNQUFBLEVBQUEsU0FBQSxFQUFBO1FBQ0EsTUFBQSxFQUFBLFNBQUEsRUFBQTs7O0lBR0EsSUFBQSxLQUFBLE9BQUE7TUFDQSxJQUFBLENBQUEsS0FBQSxNQUFBO1FBQ0EsS0FBQSxNQUFBLEtBQUEsS0FBQSxXQUFBO1FBQ0EsS0FBQSxNQUFBLEtBQUEsS0FBQSxXQUFBOztNQUVBLElBQUEsSUFBQSxRQUFBLFFBQUEsS0FBQSxNQUFBO01BQ0EsS0FBQSxVQUFBLEtBQUEsY0FBQTtNQUNBLE1BQUEsSUFBQSxLQUFBLE1BQUE7TUFDQSxNQUFBLElBQUEsS0FBQSxNQUFBOztJQUVBLEtBQUEsS0FBQSxLQUFBLEtBQUE7SUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBOztFQUVBLElBQUEsOEJBQUE7SUFDQSw4QkFBQTtJQUNBLGlDQUFBO0VBQ0EsR0FBQSxPQUFBLFlBQUEsV0FBQTtJQUNBLElBQUEsT0FBQTtNQUNBLFdBQUE7TUFDQSxRQUFBOztJQUVBLFNBQUEsVUFBQSxNQUFBO01BQ0EsSUFBQSxRQUFBLENBQUE7UUFDQSxRQUFBO1FBQ0E7TUFDQSxLQUFBLFFBQUE7TUFDQSxPQUFBLENBQUEsT0FBQSxNQUFBLFVBQUEsTUFBQTtRQUNBLE1BQUEsS0FBQTtRQUNBLElBQUEsQ0FBQSxTQUFBLFNBQUEsS0FBQSxXQUFBLE1BQUEsS0FBQSxZQUFBO1lBQ0EsT0FBQSxTQUFBO1VBQ0EsSUFBQSxHQUFBLFFBQUE7VUFDQSxPQUFBLEVBQUEsS0FBQSxHQUFBO1lBQ0EsTUFBQSxLQUFBLFFBQUEsT0FBQTtZQUNBLE1BQUEsU0FBQTtZQUNBLE1BQUEsUUFBQSxLQUFBLFFBQUE7O1VBRUEsSUFBQSxPQUFBLEtBQUEsUUFBQTtVQUNBLEtBQUEsV0FBQTtlQUNBO1VBQ0EsSUFBQSxPQUFBLEtBQUEsUUFBQSxDQUFBLE1BQUEsS0FBQSxXQUFBLE1BQUEsS0FBQTtZQUNBO1VBQ0EsT0FBQSxLQUFBOzs7TUFHQSw4QkFBQSxNQUFBLFNBQUEsTUFBQTtRQUNBLElBQUEsUUFBQTtRQUNBLElBQUEsU0FBQSxTQUFBLEtBQUEsV0FBQSxPQUFBLEtBQUE7UUFDQSxJQUFBLFVBQUEsU0FBQSxLQUFBLFNBQUEsT0FBQSxTQUFBLEtBQUE7O01BRUEsT0FBQTs7SUFFQSxVQUFBLE9BQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsT0FBQTtNQUNBLE9BQUE7O0lBRUEsVUFBQSxXQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFdBQUE7TUFDQSxPQUFBOztJQUVBLFVBQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxVQUFBLFVBQUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxPQUFBO1FBQ0EsK0JBQUEsTUFBQSxTQUFBLE1BQUE7VUFDQSxJQUFBLEtBQUEsVUFBQSxLQUFBLFFBQUE7O1FBRUEsOEJBQUEsTUFBQSxTQUFBLE1BQUE7VUFDQSxJQUFBO1VBQ0EsSUFBQSxDQUFBLEtBQUEsVUFBQSxLQUFBLFFBQUEsQ0FBQSxNQUFBLEtBQUE7WUFDQSxNQUFBLEtBQUEsVUFBQTtVQUNBLElBQUEsU0FBQSxLQUFBLFFBQUEsT0FBQSxTQUFBLEtBQUE7OztNQUdBLE9BQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSwwQkFBQSxRQUFBLFdBQUE7SUFDQSxHQUFBLE9BQUEsUUFBQSxXQUFBLFFBQUEsWUFBQTtJQUNBLE9BQUEsUUFBQTtJQUNBLE9BQUEsUUFBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsK0JBQUEsTUFBQSxVQUFBO0lBQ0EsSUFBQSxRQUFBLENBQUE7SUFDQSxPQUFBLENBQUEsT0FBQSxNQUFBLFVBQUEsTUFBQTtNQUNBLFNBQUE7TUFDQSxJQUFBLENBQUEsV0FBQSxLQUFBLGNBQUEsSUFBQSxTQUFBLFNBQUE7UUFDQSxJQUFBLEdBQUE7UUFDQSxPQUFBLEVBQUEsS0FBQSxHQUFBLE1BQUEsS0FBQSxTQUFBOzs7OztFQUtBLFNBQUEsOEJBQUEsTUFBQSxVQUFBO0lBQ0EsSUFBQSxRQUFBLENBQUE7TUFDQSxTQUFBO0lBQ0EsT0FBQSxDQUFBLE9BQUEsTUFBQSxVQUFBLE1BQUE7TUFDQSxPQUFBLEtBQUE7TUFDQSxJQUFBLENBQUEsV0FBQSxLQUFBLGNBQUEsSUFBQSxTQUFBLFNBQUE7UUFDQSxJQUFBLElBQUEsQ0FBQTtVQUNBLEdBQUE7UUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLE1BQUEsS0FBQSxTQUFBOzs7SUFHQSxPQUFBLENBQUEsT0FBQSxPQUFBLFVBQUEsTUFBQTtNQUNBLFNBQUE7Ozs7RUFJQSxTQUFBLDRCQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUE7OztFQUdBLFNBQUEseUJBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQTs7O0VBR0EsU0FBQSx3QkFBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUEsUUFBQSxFQUFBOzs7RUFHQSxTQUFBLHlCQUFBLE9BQUE7SUFDQSxPQUFBLEdBQUEsTUFBQSxNQUFBLElBQUEsU0FBQSxRQUFBO01BQ0EsT0FBQSxDQUFBLE9BQUEsWUFBQSxJQUFBLElBQUEsU0FBQSxPQUFBO1FBQ0EsT0FBQTtVQUNBLFFBQUE7VUFDQSxRQUFBOzs7OztFQUtBLEdBQUEsT0FBQSxZQUFBLFdBQUE7SUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBO01BQ0EsT0FBQSxDQUFBLEdBQUE7O0lBRUEsU0FBQSxTQUFBLE1BQUEsR0FBQSxJQUFBLElBQUE7TUFDQSxJQUFBLFdBQUEsS0FBQTtNQUNBLEtBQUEsSUFBQTtNQUNBLEtBQUEsSUFBQSxLQUFBLFFBQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxJQUFBLGFBQUEsSUFBQSxTQUFBLFNBQUE7UUFDQSxJQUFBLElBQUEsQ0FBQTtVQUNBLEdBQUEsR0FBQTtRQUNBLEtBQUEsS0FBQSxRQUFBLEtBQUEsS0FBQSxRQUFBO1FBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtVQUNBLFNBQUEsSUFBQSxTQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsUUFBQSxJQUFBO1VBQ0EsS0FBQTs7Ozs7SUFLQSxTQUFBLE1BQUEsTUFBQTtNQUNBLElBQUEsV0FBQSxLQUFBO1FBQ0EsSUFBQTtNQUNBLElBQUEsYUFBQSxJQUFBLFNBQUEsU0FBQTtRQUNBLElBQUEsSUFBQSxDQUFBO1VBQ0E7UUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsS0FBQSxJQUFBLEdBQUEsTUFBQSxTQUFBOztNQUVBLE9BQUEsSUFBQTs7O0lBR0EsU0FBQSxVQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsUUFBQSxVQUFBLEtBQUEsTUFBQSxHQUFBO01BQ0EsU0FBQSxNQUFBLElBQUEsR0FBQSxLQUFBLElBQUEsS0FBQSxLQUFBLE1BQUEsTUFBQTtNQUNBLE9BQUE7O0lBRUEsVUFBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLE9BQUE7TUFDQSxPQUFBOztJQUVBLE9BQUEsMEJBQUEsV0FBQTs7RUFFQSxHQUFBLE9BQUEsTUFBQSxXQUFBO0lBQ0EsSUFBQSxRQUFBO01BQ0EsT0FBQTtNQUNBLGFBQUE7TUFDQSxXQUFBO01BQ0EsV0FBQTs7SUFFQSxTQUFBLElBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBO1FBQ0EsU0FBQSxLQUFBLElBQUEsU0FBQSxHQUFBLEdBQUE7VUFDQSxPQUFBLENBQUEsTUFBQSxLQUFBLEtBQUEsR0FBQTs7UUFFQSxJQUFBLEVBQUEsT0FBQSxlQUFBLGFBQUEsV0FBQSxNQUFBO1VBQ0EsYUFBQTtRQUNBLEtBQUEsQ0FBQSxPQUFBLGFBQUEsYUFBQSxTQUFBLE1BQUE7VUFDQSxhQUFBLFlBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsTUFBQSxHQUFBLEVBQUEsT0FBQSxhQUFBO1VBQ0EsU0FBQSxNQUFBLE1BQUEsYUFBQTtRQUNBLEtBQUEsS0FBQSxLQUFBLElBQUEsQ0FBQSxJQUFBO1FBQ0EsSUFBQSxDQUFBLEtBQUEsSUFBQSxNQUFBLEdBQUEsSUFBQTtRQUNBLFFBQUEsR0FBQSxNQUFBO1FBQ0EsT0FBQTtRQUNBO01BQ0EsSUFBQSxRQUFBLE1BQUEsTUFBQSxLQUFBLFNBQUE7UUFDQSxTQUFBLEdBQUEsR0FBQTtVQUNBLE9BQUEsT0FBQSxLQUFBLE9BQUE7WUFDQSxTQUFBLEdBQUEsR0FBQTtVQUNBLE9BQUEsS0FBQSxLQUFBLElBQUEsS0FBQTs7TUFFQSxNQUFBLFFBQUEsU0FBQSxHQUFBO1FBQ0EsS0FBQSxLQUFBO1VBQ0EsTUFBQSxLQUFBO1VBQ0EsT0FBQSxJQUFBLE9BQUE7VUFDQSxZQUFBO1VBQ0EsVUFBQSxLQUFBLElBQUEsSUFBQTtVQUNBLFVBQUE7OztNQUdBLE9BQUE7O0lBRUEsSUFBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFFBQUE7TUFDQSxPQUFBOztJQUVBLElBQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxPQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLGFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsYUFBQTtNQUNBLE9BQUE7O0lBRUEsSUFBQSxXQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFdBQUE7TUFDQSxPQUFBOztJQUVBLElBQUEsV0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBOztFQUVBLElBQUEsMkJBQUE7RUFDQSxHQUFBLE9BQUEsUUFBQSxXQUFBO0lBQ0EsSUFBQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFNBQUE7TUFDQSxNQUFBO01BQ0EsSUFBQTtNQUNBLElBQUE7O0lBRUEsU0FBQSxNQUFBLE1BQUEsT0FBQTtNQUNBLElBQUEsRUFBQSxJQUFBLEtBQUEsU0FBQSxPQUFBO01BQ0EsSUFBQSxTQUFBLEtBQUEsSUFBQSxTQUFBLEdBQUEsR0FBQTtRQUNBLE9BQUEsT0FBQSxLQUFBLE9BQUEsR0FBQTs7TUFFQSxJQUFBLFNBQUEsT0FBQSxJQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsRUFBQSxJQUFBLFNBQUEsR0FBQSxHQUFBO1VBQ0EsT0FBQSxDQUFBLEVBQUEsS0FBQSxPQUFBLEdBQUEsSUFBQSxFQUFBLEtBQUEsT0FBQSxHQUFBOzs7TUFHQSxJQUFBLFNBQUEsTUFBQSxLQUFBLE9BQUEsUUFBQTtNQUNBLFNBQUEsR0FBQSxRQUFBLFFBQUE7TUFDQSxTQUFBLEdBQUEsUUFBQSxRQUFBO01BQ0EsSUFBQSxVQUFBLE9BQUEsS0FBQSxPQUFBLFFBQUE7TUFDQSxJQUFBLElBQUEsT0FBQSxHQUFBO1FBQ0EsR0FBQSxHQUFBLEdBQUE7TUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsSUFBQSxLQUFBLE9BQUEsT0FBQSxHQUFBLElBQUEsSUFBQSxRQUFBLElBQUEsT0FBQSxHQUFBLEdBQUE7UUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1VBQ0EsSUFBQSxLQUFBLE9BQUEsT0FBQSxHQUFBLElBQUEsS0FBQSxPQUFBLElBQUEsR0FBQSxHQUFBLElBQUE7WUFDQSxHQUFBLEdBQUE7OztNQUdBLE9BQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxRQUFBLE9BQUEsTUFBQSxhQUFBLElBQUEsc0JBQUEsSUFBQTtRQUNBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQSxPQUFBLE1BQUEsYUFBQSxJQUFBLHVCQUFBO1FBQ0EsTUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxJQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLElBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsSUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxJQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLE1BQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsTUFBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSxpQkFBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBOzs7RUFHQSxTQUFBLGlCQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUE7OztFQUdBLFNBQUEsbUJBQUEsR0FBQSxJQUFBLEdBQUE7SUFDQSxFQUFBLEtBQUE7SUFDQSxFQUFBLElBQUE7O0VBRUEsSUFBQSx3QkFBQSxHQUFBLElBQUE7SUFDQSxjQUFBLFNBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBO1FBQ0EsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBO1FBQ0EsT0FBQSxLQUFBLElBQUE7UUFDQSxRQUFBLEdBQUEsTUFBQSxHQUFBLEtBQUEsU0FBQSxHQUFBLEdBQUE7VUFDQSxPQUFBLElBQUEsS0FBQSxJQUFBOztRQUVBLE1BQUE7UUFDQSxTQUFBO1FBQ0EsT0FBQTtRQUNBLFVBQUE7TUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsSUFBQSxNQUFBO1FBQ0EsSUFBQSxNQUFBLFFBQUE7VUFDQSxPQUFBLEtBQUE7VUFDQSxLQUFBLEtBQUE7ZUFDQTtVQUNBLFVBQUEsS0FBQTtVQUNBLFFBQUEsS0FBQTs7O01BR0EsT0FBQSxRQUFBLFVBQUEsT0FBQTs7SUFFQSxTQUFBLFNBQUEsTUFBQTtNQUNBLE9BQUEsR0FBQSxNQUFBLEtBQUEsUUFBQTs7SUFFQSxXQUFBOztFQUVBLElBQUEseUJBQUEsR0FBQSxJQUFBO0lBQ0EsWUFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLElBQUEsS0FBQTtRQUNBLElBQUEsS0FBQSxHQUFBO1FBQ0EsT0FBQTtRQUNBLE1BQUE7UUFDQSxHQUFBLEdBQUEsR0FBQSxLQUFBO01BQ0EsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtRQUNBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUEsR0FBQSxHQUFBO1FBQ0EsSUFBQSxJQUFBLEtBQUEsTUFBQTtRQUNBLEtBQUEsS0FBQTs7TUFFQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsR0FBQSxLQUFBLENBQUEsTUFBQSxLQUFBLE1BQUE7O01BRUEsT0FBQTs7SUFFQSxRQUFBLFNBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBO1FBQ0EsSUFBQSxFQUFBO1FBQ0EsR0FBQSxHQUFBLEdBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsS0FBQTtNQUNBLEdBQUEsS0FBQSxJQUFBLEtBQUE7TUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsS0FBQSxJQUFBLEdBQUEsS0FBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsTUFBQSxLQUFBLEdBQUEsR0FBQTtRQUNBLEtBQUEsSUFBQSxHQUFBLEtBQUEsR0FBQSxLQUFBLEVBQUEsR0FBQSxLQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtVQUNBLEtBQUEsSUFBQSxHQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsR0FBQSxLQUFBLEtBQUEsR0FBQSxJQUFBLEdBQUEsT0FBQTtjQUNBLEtBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQTtZQUNBLE1BQUEsQ0FBQSxLQUFBLEdBQUEsR0FBQSxLQUFBLEtBQUEsR0FBQSxJQUFBLEdBQUEsTUFBQTs7VUFFQSxNQUFBLEtBQUEsS0FBQSxHQUFBLEdBQUE7O1FBRUEsR0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQTtRQUNBLElBQUEsSUFBQSxJQUFBLEtBQUE7O01BRUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxHQUFBLE1BQUE7TUFDQSxPQUFBOztJQUVBLFFBQUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxJQUFBLEtBQUE7UUFDQSxJQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsSUFBQTtRQUNBLEdBQUEsR0FBQSxHQUFBLEtBQUE7TUFDQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxHQUFBO1FBQ0EsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxLQUFBLEtBQUEsS0FBQSxHQUFBLEdBQUE7UUFDQSxJQUFBO1VBQ0EsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEtBQUEsS0FBQSxHQUFBLEdBQUEsTUFBQTs7VUFFQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEdBQUEsR0FBQSxLQUFBOztNQUVBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsR0FBQSxLQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBOzs7RUFHQSxTQUFBLDRCQUFBLE1BQUE7SUFDQSxPQUFBLEdBQUEsTUFBQSxLQUFBOzs7RUFHQSxTQUFBLDBCQUFBLE1BQUE7SUFDQSxJQUFBLElBQUEsQ0FBQTtNQUNBLElBQUEsS0FBQSxHQUFBO01BQ0EsS0FBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsR0FBQSxLQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSx3QkFBQSxPQUFBO0lBQ0EsSUFBQSxJQUFBO01BQ0EsSUFBQTtNQUNBLElBQUEsTUFBQSxHQUFBO01BQ0EsR0FBQSxJQUFBLE1BQUE7SUFDQSxPQUFBLElBQUEsR0FBQSxFQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsSUFBQSxNQUFBLEdBQUEsTUFBQSxHQUFBO1FBQ0EsSUFBQTtRQUNBLElBQUE7OztJQUdBLE9BQUE7OztFQUdBLFNBQUEseUJBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQSxPQUFBLG9CQUFBOzs7RUFHQSxTQUFBLG1CQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsSUFBQSxFQUFBOztFQUVBLEdBQUEsT0FBQSxZQUFBLFdBQUE7SUFDQSxJQUFBLFlBQUE7TUFDQSxTQUFBO01BQ0EsU0FBQTtNQUNBLFNBQUE7O0lBRUEsU0FBQSxVQUFBLE1BQUEsR0FBQTtNQUNBLElBQUEsT0FBQTtRQUNBLFNBQUEsS0FBQSxJQUFBLFFBQUE7UUFDQSxRQUFBLE9BQUEsS0FBQSxNQUFBLFFBQUE7UUFDQSxhQUFBLE9BQUEsS0FBQSxNQUFBLE9BQUEsUUFBQTtRQUNBLEtBQUEsSUFBQSxDQUFBO1FBQ0EsSUFBQSxPQUFBO1FBQ0EsSUFBQSxXQUFBLFNBQUE7UUFDQSxJQUFBLFlBQUEsSUFBQSxJQUFBO1FBQ0E7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1FBQ0EsTUFBQSxLQUFBLEtBQUE7UUFDQSxJQUFBLEtBQUEsV0FBQSxJQUFBLE1BQUEsSUFBQSxJQUFBLFdBQUE7UUFDQSxJQUFBLElBQUE7O01BRUEsSUFBQSxJQUFBLEdBQUE7UUFDQSxJQUFBLENBQUE7UUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1VBQ0EsSUFBQSxPQUFBO1VBQ0EsSUFBQSxLQUFBLE1BQUEsTUFBQSxLQUFBLE1BQUEsSUFBQTtZQUNBLE1BQUEsS0FBQSxHQUFBLE9BQUEsWUFBQSxHQUFBLEdBQUEsS0FBQTtZQUNBLElBQUEsS0FBQTtZQUNBLElBQUEsS0FBQSxLQUFBOzs7O01BSUEsT0FBQTs7SUFFQSxVQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQTtNQUNBLE9BQUE7O0lBRUEsVUFBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsVUFBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUEsT0FBQSxNQUFBLFdBQUEsU0FBQSxPQUFBO1FBQ0EsT0FBQSw0QkFBQSxPQUFBO1VBQ0EsV0FBQTtNQUNBLE9BQUE7O0lBRUEsVUFBQSxZQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFlBQUEsQ0FBQSxDQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBOzs7RUFHQSxTQUFBLDhCQUFBLE9BQUEsUUFBQTtJQUNBLE9BQUEsNEJBQUEsT0FBQSxLQUFBLEtBQUEsS0FBQSxJQUFBLE9BQUE7TUFDQSxLQUFBLE1BQUE7OztFQUdBLFNBQUEsNEJBQUEsT0FBQSxHQUFBO0lBQ0EsSUFBQSxJQUFBLENBQUE7TUFDQSxJQUFBLENBQUEsTUFBQTtNQUNBLElBQUEsQ0FBQSxNQUFBLEtBQUEsS0FBQTtNQUNBLElBQUE7SUFDQSxPQUFBLEVBQUEsS0FBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLElBQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLHlCQUFBLFFBQUE7SUFDQSxPQUFBLENBQUEsR0FBQSxJQUFBLFNBQUEsR0FBQSxJQUFBOztFQUVBLEdBQUEsT0FBQSxPQUFBLFdBQUE7SUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLFlBQUEsS0FBQTtNQUNBLFVBQUE7TUFDQSxPQUFBLENBQUEsR0FBQTtNQUNBOztJQUVBLFNBQUEsS0FBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLFFBQUEsVUFBQSxLQUFBLE1BQUEsR0FBQTtRQUNBLE9BQUEsTUFBQTtRQUNBLElBQUEsS0FBQTtRQUNBLElBQUEsS0FBQTtRQUNBLElBQUEsVUFBQSxPQUFBLEtBQUEsT0FBQSxPQUFBLFdBQUE7UUFDQSxTQUFBLFdBQUE7VUFDQSxPQUFBOztNQUVBLEtBQUEsSUFBQSxLQUFBLElBQUE7TUFDQSw4QkFBQSxNQUFBLFNBQUEsR0FBQTtRQUNBLEVBQUEsSUFBQSxDQUFBLEVBQUEsRUFBQTs7TUFFQSw4QkFBQSxNQUFBO01BQ0EsSUFBQSxTQUFBO1FBQ0EsSUFBQSxLQUFBLFdBQUEsU0FBQSxJQUFBLEtBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxHQUFBO1VBQ0EsS0FBQSxJQUFBLE1BQUE7UUFDQSw4QkFBQSxNQUFBLFNBQUEsR0FBQTtVQUNBLEVBQUEsS0FBQTs7UUFFQSw4QkFBQSxNQUFBO1FBQ0EsOEJBQUEsTUFBQSxTQUFBLEdBQUE7VUFDQSxFQUFBLEtBQUE7OztNQUdBLHdCQUFBLE1BQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxTQUFBLElBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBLElBQUEsR0FBQSxJQUFBLEtBQUEsSUFBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLE9BQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBLEtBQUEsUUFBQSxPQUFBLE1BQUEsYUFBQSxJQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsVUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxVQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUEsMEJBQUEsTUFBQTs7O0VBR0EsU0FBQSxtQkFBQSxHQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUEsUUFBQSxFQUFBOzs7RUFHQSxTQUFBLHFCQUFBLEdBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxFQUFBO0lBQ0EsRUFBQSxhQUFBO0lBQ0EsRUFBQSxhQUFBO0lBQ0EsRUFBQSxhQUFBO0lBQ0EsRUFBQSxhQUFBOzs7RUFHQSxTQUFBLHFCQUFBLEdBQUEsR0FBQTtJQUNBLEVBQUEsYUFBQTtJQUNBLEVBQUEsYUFBQTs7O0VBR0EsU0FBQSx5QkFBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUEsSUFBQSxFQUFBO01BQ0EsS0FBQSxFQUFBLElBQUEsRUFBQTtJQUNBLE9BQUEsT0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7OztFQUdBLFNBQUEsdUJBQUEsTUFBQTtJQUNBLElBQUEsRUFBQSxRQUFBLEtBQUEsYUFBQSxFQUFBLElBQUEsTUFBQSxTQUFBO0lBQ0EsSUFBQSxPQUFBLE9BQUE7TUFDQSxPQUFBLENBQUE7TUFDQSxPQUFBO01BQ0EsT0FBQSxDQUFBO01BQ0EsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUE7O0lBRUEsU0FBQSxNQUFBLE1BQUE7TUFDQSxPQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxHQUFBO01BQ0EsT0FBQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLEdBQUE7TUFDQSxPQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxHQUFBOztJQUVBLE1BQUEsUUFBQTtJQUNBLElBQUEsTUFBQTtJQUNBLEVBQUEsSUFBQSxDQUFBLEVBQUE7SUFDQSxFQUFBLElBQUE7SUFDQSxNQUFBO0lBQ0EsSUFBQSxJQUFBLEdBQUE7TUFDQSxJQUFBLE1BQUE7TUFDQSxFQUFBLElBQUEsRUFBQTtNQUNBLEVBQUEsSUFBQTtNQUNBLE1BQUE7TUFDQSxJQUFBLElBQUEsR0FBQTtRQUNBLElBQUEsTUFBQTtRQUNBLG9CQUFBLEdBQUEsR0FBQTtRQUNBLE1BQUE7UUFDQSxxQkFBQSxHQUFBO1FBQ0EsRUFBQSxhQUFBO1FBQ0EscUJBQUEsR0FBQTtRQUNBLElBQUEsRUFBQTtRQUNBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxLQUFBO1VBQ0Esb0JBQUEsR0FBQSxHQUFBLElBQUEsTUFBQTtVQUNBLElBQUEsUUFBQTtZQUNBLEtBQUE7WUFDQSxLQUFBO1VBQ0EsS0FBQSxJQUFBLEVBQUEsWUFBQSxNQUFBLEdBQUEsSUFBQSxFQUFBLFlBQUEsTUFBQTtZQUNBLElBQUEseUJBQUEsR0FBQSxJQUFBO2NBQ0EsUUFBQTtjQUNBOzs7VUFHQSxJQUFBLFNBQUEsR0FBQTtZQUNBLEtBQUEsSUFBQSxFQUFBLFlBQUEsTUFBQSxFQUFBLFlBQUEsSUFBQSxFQUFBLFlBQUEsTUFBQTtjQUNBLElBQUEseUJBQUEsR0FBQSxJQUFBO2dCQUNBOzs7O1VBSUEsSUFBQSxPQUFBO1lBQ0EsSUFBQSxLQUFBLE1BQUEsTUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEscUJBQUEsR0FBQTtjQUNBO2lCQUNBLHFCQUFBLElBQUEsR0FBQTtZQUNBO2lCQUNBO1lBQ0EscUJBQUEsR0FBQTtZQUNBLElBQUE7WUFDQSxNQUFBOzs7OztJQUtBLElBQUEsS0FBQSxDQUFBLE9BQUEsUUFBQTtNQUNBLEtBQUEsQ0FBQSxPQUFBLFFBQUE7TUFDQSxLQUFBO0lBQ0EsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEtBQUE7TUFDQSxJQUFBLE1BQUE7TUFDQSxFQUFBLEtBQUE7TUFDQSxFQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUEsSUFBQSxJQUFBLEVBQUEsSUFBQSxLQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTs7SUFFQSxLQUFBLElBQUE7SUFDQSxNQUFBLFFBQUE7OztFQUdBLFNBQUEsbUJBQUEsTUFBQTtJQUNBLEtBQUEsYUFBQSxLQUFBLGFBQUE7OztFQUdBLFNBQUEscUJBQUEsTUFBQTtJQUNBLE9BQUEsS0FBQTtJQUNBLE9BQUEsS0FBQTs7O0VBR0EsU0FBQSx3QkFBQSxNQUFBLEdBQUEsR0FBQSxHQUFBO0lBQ0EsSUFBQSxXQUFBLEtBQUE7SUFDQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7SUFDQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7SUFDQSxLQUFBLEtBQUE7SUFDQSxJQUFBLFVBQUE7TUFDQSxJQUFBLElBQUEsQ0FBQTtRQUNBLElBQUEsU0FBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsd0JBQUEsU0FBQSxJQUFBLEdBQUEsR0FBQTs7OztFQUlBLFNBQUEsb0JBQUEsR0FBQSxHQUFBLEdBQUE7SUFDQSxJQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7TUFDQSxLQUFBLEVBQUEsSUFBQSxFQUFBO01BQ0EsS0FBQSxFQUFBLElBQUEsRUFBQTtJQUNBLElBQUEsT0FBQSxNQUFBLEtBQUE7TUFDQSxJQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EsTUFBQTtNQUNBLE1BQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsT0FBQSxJQUFBO1FBQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLEtBQUEsTUFBQSxDQUFBLE1BQUEsTUFBQSxLQUFBO1VBQ0EsUUFBQSxJQUFBO01BQ0EsRUFBQSxJQUFBLEVBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQTtNQUNBLEVBQUEsSUFBQSxFQUFBLElBQUEsSUFBQSxLQUFBLElBQUE7V0FDQTtNQUNBLEVBQUEsSUFBQSxFQUFBLElBQUE7TUFDQSxFQUFBLElBQUEsRUFBQTs7O0VBR0EsR0FBQSxPQUFBLE9BQUEsV0FBQTtJQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsWUFBQSxLQUFBLE1BQUEsTUFBQTtNQUNBLGFBQUE7TUFDQSxPQUFBLENBQUEsR0FBQTtNQUNBLFdBQUE7O0lBRUEsU0FBQSxLQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsUUFBQSxVQUFBLEtBQUEsTUFBQSxHQUFBO1FBQ0EsUUFBQSxNQUFBO1FBQ0EsUUFBQSxTQUFBO01BQ0EsOEJBQUEsT0FBQSxZQUFBLE1BQUEsT0FBQSxJQUFBO1FBQ0EsTUFBQTtNQUNBLCtCQUFBLE9BQUE7TUFDQSxJQUFBLFVBQUEsK0JBQUEsT0FBQTtXQUNBO1FBQ0EsSUFBQSxPQUFBO1VBQ0EsUUFBQTtVQUNBLFNBQUE7UUFDQSwrQkFBQSxPQUFBLFNBQUEsTUFBQTtVQUNBLElBQUEsS0FBQSxJQUFBLEtBQUEsR0FBQSxPQUFBO1VBQ0EsSUFBQSxLQUFBLElBQUEsTUFBQSxHQUFBLFFBQUE7VUFDQSxJQUFBLEtBQUEsUUFBQSxPQUFBLE9BQUEsU0FBQTs7UUFFQSxJQUFBLEtBQUEsV0FBQSxNQUFBLFNBQUEsSUFBQSxLQUFBO1VBQ0EsS0FBQSxLQUFBLE1BQUEsTUFBQSxJQUFBLFdBQUEsT0FBQSxRQUFBLElBQUE7VUFDQSxLQUFBLEtBQUEsTUFBQSxPQUFBLFNBQUE7UUFDQSwrQkFBQSxPQUFBLFNBQUEsTUFBQTtVQUNBLEtBQUEsSUFBQSxDQUFBLEtBQUEsSUFBQSxNQUFBO1VBQ0EsS0FBQSxJQUFBLEtBQUEsUUFBQTs7O01BR0EsT0FBQTs7O0lBR0EsU0FBQSxTQUFBLE9BQUE7TUFDQSxJQUFBLFFBQUE7VUFDQSxHQUFBO1VBQ0EsVUFBQSxDQUFBOztRQUVBLFFBQUEsQ0FBQTtRQUNBO01BQ0EsT0FBQSxDQUFBLFFBQUEsTUFBQSxVQUFBLE1BQUE7UUFDQSxLQUFBLElBQUEsV0FBQSxNQUFBLFVBQUEsT0FBQSxJQUFBLEdBQUEsSUFBQSxTQUFBLFFBQUE7VUFDQSxHQUFBLEVBQUEsR0FBQTtVQUNBLE1BQUEsS0FBQSxDQUFBLFNBQUEsS0FBQSxRQUFBO1lBQ0EsR0FBQSxTQUFBO1lBQ0EsUUFBQTtZQUNBLFVBQUEsQ0FBQSxRQUFBLFNBQUEsR0FBQSxhQUFBLE1BQUEsV0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBO1lBQ0EsR0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBO1lBQ0EsR0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBO2FBQ0EsSUFBQTs7O01BR0EsT0FBQSxNQUFBLFNBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBO01BQ0EsSUFBQSxXQUFBLEVBQUE7UUFDQSxXQUFBLEVBQUEsT0FBQTtRQUNBLElBQUEsRUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEtBQUE7TUFDQSxJQUFBLFNBQUEsUUFBQTtRQUNBLG9CQUFBO1FBQ0EsSUFBQSxXQUFBLENBQUEsU0FBQSxHQUFBLElBQUEsU0FBQSxTQUFBLFNBQUEsR0FBQTtVQUNBO1FBQ0EsSUFBQSxHQUFBO1VBQ0EsRUFBQSxJQUFBLEVBQUEsSUFBQSxXQUFBLEVBQUEsR0FBQSxFQUFBO1VBQ0EsRUFBQSxJQUFBLEVBQUEsSUFBQTtlQUNBO1VBQ0EsRUFBQSxJQUFBOzthQUVBLElBQUEsR0FBQTtRQUNBLEVBQUEsSUFBQSxFQUFBLElBQUEsV0FBQSxFQUFBLEdBQUEsRUFBQTs7TUFFQSxFQUFBLE9BQUEsSUFBQSxVQUFBLEdBQUEsR0FBQSxFQUFBLE9BQUEsS0FBQSxTQUFBOzs7SUFHQSxTQUFBLFdBQUEsR0FBQTtNQUNBLEVBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUE7TUFDQSxFQUFBLEtBQUEsRUFBQSxPQUFBOzs7SUFHQSxTQUFBLFVBQUEsR0FBQSxHQUFBLFVBQUE7TUFDQSxJQUFBLEdBQUE7UUFDQSxJQUFBLE1BQUE7VUFDQSxNQUFBO1VBQ0EsTUFBQTtVQUNBLE1BQUEsSUFBQSxPQUFBLFNBQUE7VUFDQSxNQUFBLElBQUE7VUFDQSxNQUFBLElBQUE7VUFDQSxNQUFBLElBQUE7VUFDQSxNQUFBLElBQUE7VUFDQTtRQUNBLE9BQUEsTUFBQSxvQkFBQSxNQUFBLE1BQUE7WUFDQSxNQUFBLE9BQUEsS0FBQTtVQUNBLE1BQUEsbUJBQUE7VUFDQSxNQUFBLG9CQUFBO1VBQ0EsSUFBQSxJQUFBO1VBQ0EsUUFBQSxJQUFBLElBQUEsTUFBQSxJQUFBLElBQUEsTUFBQSxXQUFBLElBQUEsR0FBQSxJQUFBO1VBQ0EsSUFBQSxRQUFBLEdBQUE7WUFDQSxtQkFBQSx1QkFBQSxLQUFBLEdBQUE7Y0FDQSxHQUFBO1lBQ0EsT0FBQTtZQUNBLE9BQUE7O1VBRUEsT0FBQSxJQUFBO1VBQ0EsT0FBQSxJQUFBO1VBQ0EsT0FBQSxJQUFBO1VBQ0EsT0FBQSxJQUFBOztRQUVBLElBQUEsT0FBQSxDQUFBLG9CQUFBLE1BQUE7VUFDQSxJQUFBLElBQUE7VUFDQSxJQUFBLEtBQUEsTUFBQTs7UUFFQSxJQUFBLE9BQUEsQ0FBQSxtQkFBQSxNQUFBO1VBQ0EsSUFBQSxJQUFBO1VBQ0EsSUFBQSxLQUFBLE1BQUE7VUFDQSxXQUFBOzs7TUFHQSxPQUFBOzs7SUFHQSxTQUFBLFNBQUEsTUFBQTtNQUNBLEtBQUEsS0FBQSxLQUFBO01BQ0EsS0FBQSxJQUFBLEtBQUEsUUFBQSxLQUFBOztJQUVBLEtBQUEsYUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxhQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLE9BQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLFdBQUEsT0FBQTtNQUNBLFdBQUEsQ0FBQSxPQUFBLE1BQUEsT0FBQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFdBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLFdBQUEsT0FBQTtNQUNBLFdBQUEsQ0FBQSxPQUFBLE1BQUEsT0FBQSxPQUFBO01BQ0EsT0FBQTs7SUFFQSxPQUFBLDBCQUFBLE1BQUE7OztFQUdBLFNBQUEseUJBQUEsR0FBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLElBQUE7OztFQUdBLFNBQUEsbUJBQUEsR0FBQTtJQUNBLElBQUEsV0FBQSxFQUFBO0lBQ0EsT0FBQSxTQUFBLFNBQUEsU0FBQSxLQUFBLEVBQUE7OztFQUdBLFNBQUEsb0JBQUEsR0FBQTtJQUNBLElBQUEsV0FBQSxFQUFBO01BQ0E7SUFDQSxPQUFBLENBQUEsSUFBQSxTQUFBLFVBQUEsU0FBQSxJQUFBLEtBQUEsRUFBQTs7O0VBR0EsU0FBQSxtQkFBQSxJQUFBLElBQUEsT0FBQTtJQUNBLElBQUEsU0FBQSxTQUFBLEdBQUEsSUFBQSxHQUFBO0lBQ0EsR0FBQSxLQUFBO0lBQ0EsR0FBQSxLQUFBO0lBQ0EsR0FBQSxLQUFBO0lBQ0EsR0FBQSxLQUFBO0lBQ0EsR0FBQSxLQUFBOzs7RUFHQSxTQUFBLG9CQUFBLEdBQUE7SUFDQSxJQUFBLFFBQUE7TUFDQSxTQUFBO01BQ0EsV0FBQSxFQUFBO01BQ0EsSUFBQSxTQUFBO01BQ0E7SUFDQSxPQUFBLEVBQUEsS0FBQSxHQUFBO01BQ0EsSUFBQSxTQUFBO01BQ0EsRUFBQSxLQUFBO01BQ0EsRUFBQSxLQUFBO01BQ0EsU0FBQSxFQUFBLEtBQUEsVUFBQSxFQUFBOzs7O0VBSUEsU0FBQSx1QkFBQSxLQUFBLEdBQUEsVUFBQTtJQUNBLE9BQUEsSUFBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLElBQUEsSUFBQTs7RUFFQSxHQUFBLE9BQUEsVUFBQSxXQUFBO0lBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxZQUFBLEtBQUEsTUFBQSxNQUFBO01BQ0EsYUFBQTtNQUNBLE9BQUEsQ0FBQSxHQUFBO01BQ0EsV0FBQTs7SUFFQSxTQUFBLFFBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxRQUFBLFVBQUEsS0FBQSxNQUFBLEdBQUE7UUFDQSxPQUFBLE1BQUE7UUFDQSxjQUFBLElBQUE7TUFDQSw4QkFBQSxNQUFBLFNBQUEsTUFBQTtRQUNBLElBQUEsV0FBQSxLQUFBO1FBQ0EsSUFBQSxZQUFBLFNBQUEsUUFBQTtVQUNBLEtBQUEsSUFBQSxtQkFBQTtVQUNBLEtBQUEsSUFBQSxtQkFBQTtlQUNBO1VBQ0EsS0FBQSxJQUFBLGVBQUEsS0FBQSxXQUFBLE1BQUE7WUFDQTtVQUNBLEtBQUEsSUFBQTtVQUNBLGVBQUE7OztNQUdBLElBQUEsT0FBQSxzQkFBQTtRQUNBLFFBQUEsdUJBQUE7UUFDQSxLQUFBLEtBQUEsSUFBQSxXQUFBLE1BQUEsU0FBQTtRQUNBLEtBQUEsTUFBQSxJQUFBLFdBQUEsT0FBQSxRQUFBO01BQ0EsOEJBQUEsTUFBQSxXQUFBLFNBQUEsTUFBQTtRQUNBLEtBQUEsSUFBQSxDQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTtRQUNBLEtBQUEsSUFBQSxDQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTtVQUNBLFNBQUEsTUFBQTtRQUNBLEtBQUEsSUFBQSxDQUFBLEtBQUEsSUFBQSxPQUFBLEtBQUEsTUFBQSxLQUFBO1FBQ0EsS0FBQSxJQUFBLENBQUEsS0FBQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxNQUFBLEtBQUE7O01BRUEsT0FBQTs7SUFFQSxRQUFBLGFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsYUFBQTtNQUNBLE9BQUE7O0lBRUEsUUFBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQSxXQUFBLE9BQUE7TUFDQSxXQUFBLENBQUEsT0FBQSxNQUFBO01BQ0EsT0FBQTs7SUFFQSxRQUFBLFdBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLFdBQUEsT0FBQTtNQUNBLFdBQUEsQ0FBQSxPQUFBLE1BQUE7TUFDQSxPQUFBOztJQUVBLE9BQUEsMEJBQUEsU0FBQTs7O0VBR0EsU0FBQSxtQkFBQSxVQUFBO0lBQ0EsT0FBQSxJQUFBLEdBQUEsSUFBQSxVQUFBLFNBQUEsT0FBQTtNQUNBLE9BQUEsTUFBQTs7OztFQUlBLFNBQUEsbUJBQUEsVUFBQTtJQUNBLE9BQUEsU0FBQSxPQUFBLFNBQUEsR0FBQSxPQUFBO01BQ0EsT0FBQSxJQUFBLE1BQUE7T0FDQSxLQUFBLFNBQUE7OztFQUdBLFNBQUEsc0JBQUEsTUFBQTtJQUNBLElBQUEsV0FBQSxLQUFBO0lBQ0EsT0FBQSxZQUFBLFNBQUEsU0FBQSxzQkFBQSxTQUFBO01BQ0E7OztFQUdBLFNBQUEsdUJBQUEsTUFBQTtJQUNBLElBQUEsV0FBQSxLQUFBO01BQ0E7SUFDQSxPQUFBLGFBQUEsSUFBQSxTQUFBLFVBQUE7TUFDQSxTQUFBLElBQUEsTUFBQTs7RUFFQSxHQUFBLE9BQUEsVUFBQSxXQUFBO0lBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQTtNQUNBLFFBQUEsS0FBQTtNQUNBLE9BQUEsQ0FBQSxHQUFBO01BQ0EsVUFBQTtNQUNBLE1BQUE7TUFDQSxTQUFBO01BQ0EsVUFBQSxPQUFBO01BQ0EsUUFBQSxNQUFBLElBQUEsS0FBQSxLQUFBOztJQUVBLFNBQUEsTUFBQSxVQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsQ0FBQTtRQUNBLElBQUEsU0FBQTtRQUNBLE9BQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1FBQ0EsT0FBQSxDQUFBLFFBQUEsU0FBQSxJQUFBLFNBQUEsSUFBQSxJQUFBLElBQUE7UUFDQSxNQUFBLE9BQUEsTUFBQSxTQUFBLFFBQUEsSUFBQSxJQUFBOzs7O0lBSUEsU0FBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLFdBQUEsS0FBQTtNQUNBLElBQUEsWUFBQSxTQUFBLFFBQUE7UUFDQSxJQUFBLE9BQUEsSUFBQTtVQUNBLE1BQUE7VUFDQSxZQUFBLFNBQUE7VUFDQSxPQUFBLE9BQUE7VUFDQSxPQUFBLElBQUEsU0FBQSxVQUFBLEtBQUEsS0FBQSxTQUFBLFNBQUEsS0FBQTtVQUNBLFNBQUEsZUFBQSxLQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTtVQUNBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQTtVQUNBO1FBQ0EsTUFBQSxXQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQTtRQUNBLElBQUEsT0FBQTtRQUNBLE9BQUEsQ0FBQSxJQUFBLFVBQUEsVUFBQSxHQUFBO1VBQ0EsSUFBQSxLQUFBLFFBQUEsVUFBQSxJQUFBO1VBQ0EsSUFBQSxRQUFBLE1BQUE7VUFDQSxJQUFBLFNBQUEsY0FBQSxDQUFBLFFBQUEsTUFBQSxLQUFBLE9BQUEsTUFBQTtZQUNBLFVBQUE7WUFDQSxPQUFBO2lCQUNBO1lBQ0EsSUFBQSxRQUFBLElBQUEsTUFBQTtZQUNBLFNBQUEsS0FBQSxHQUFBLE1BQUE7WUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQTtZQUNBLElBQUEsU0FBQSxJQUFBLE9BQUE7WUFDQSxPQUFBOzs7UUFHQSxJQUFBLElBQUEsUUFBQTtVQUNBLFNBQUEsS0FBQSxHQUFBLE1BQUE7VUFDQSxJQUFBLFNBQUEsSUFBQSxPQUFBOztRQUVBLFNBQUEsUUFBQTs7OztJQUlBLFNBQUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxXQUFBLEtBQUE7TUFDQSxJQUFBLFlBQUEsU0FBQSxRQUFBO1FBQ0EsSUFBQSxPQUFBLElBQUE7VUFDQSxZQUFBLFNBQUE7VUFDQSxPQUFBLE1BQUE7UUFDQSxNQUFBLFdBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO1FBQ0EsSUFBQSxPQUFBO1FBQ0EsT0FBQSxRQUFBLFVBQUEsT0FBQTtVQUNBLElBQUEsS0FBQTtVQUNBLElBQUEsUUFBQSxNQUFBO1VBQ0EsSUFBQSxNQUFBLEtBQUEsTUFBQTtZQUNBLFNBQUEsS0FBQSxNQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQSxNQUFBLENBQUEsVUFBQTtZQUNBLElBQUEsU0FBQSxJQUFBLE9BQUE7OztRQUdBLFNBQUEsUUFBQTs7OztJQUlBLFNBQUEsTUFBQSxLQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsSUFBQTtRQUNBLEdBQUEsT0FBQTtRQUNBLE9BQUE7UUFDQSxJQUFBLENBQUE7UUFDQSxJQUFBLElBQUE7TUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1FBQ0EsSUFBQSxFQUFBLElBQUEsSUFBQSxHQUFBLE9BQUE7UUFDQSxJQUFBLElBQUEsTUFBQSxPQUFBO1FBQ0EsSUFBQSxJQUFBLE1BQUEsT0FBQTs7TUFFQSxLQUFBO01BQ0EsS0FBQTtNQUNBLE9BQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxPQUFBLFFBQUEsR0FBQSxLQUFBLElBQUEsT0FBQTtRQUNBOzs7SUFHQSxTQUFBLFNBQUEsS0FBQSxHQUFBLE1BQUEsT0FBQTtNQUNBLElBQUEsSUFBQSxDQUFBO1FBQ0EsSUFBQSxJQUFBO1FBQ0EsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBO1FBQ0EsSUFBQSxJQUFBLE1BQUEsSUFBQSxPQUFBLEtBQUE7UUFDQTtNQUNBLElBQUEsS0FBQSxLQUFBLElBQUE7UUFDQSxJQUFBLFNBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxLQUFBO1FBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtVQUNBLElBQUEsSUFBQTtVQUNBLEVBQUEsSUFBQTtVQUNBLEVBQUEsSUFBQTtVQUNBLEVBQUEsS0FBQTtVQUNBLEtBQUEsRUFBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxLQUFBLEdBQUEsSUFBQSxNQUFBLEVBQUEsT0FBQTtZQUNBOztRQUVBLEVBQUEsSUFBQTtRQUNBLEVBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBO1FBQ0EsS0FBQSxNQUFBO2FBQ0E7UUFDQSxJQUFBLFNBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxLQUFBO1FBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtVQUNBLElBQUEsSUFBQTtVQUNBLEVBQUEsSUFBQTtVQUNBLEVBQUEsSUFBQTtVQUNBLEVBQUEsS0FBQTtVQUNBLEtBQUEsRUFBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxLQUFBLEdBQUEsSUFBQSxNQUFBLEVBQUEsT0FBQTtZQUNBOztRQUVBLEVBQUEsSUFBQTtRQUNBLEVBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBO1FBQ0EsS0FBQSxNQUFBOzs7O0lBSUEsU0FBQSxRQUFBLEdBQUE7TUFDQSxJQUFBLFFBQUEsWUFBQSxVQUFBO1FBQ0EsT0FBQSxNQUFBO01BQ0EsS0FBQSxJQUFBO01BQ0EsS0FBQSxJQUFBO01BQ0EsS0FBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUEsS0FBQTtNQUNBLElBQUEsVUFBQSxVQUFBLFFBQUE7TUFDQSxNQUFBLENBQUEsT0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxDQUFBLFdBQUEsV0FBQSxVQUFBO01BQ0EsSUFBQSxRQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLFFBQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxPQUFBO01BQ0EsT0FBQTs7SUFFQSxRQUFBLFVBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBOztNQUVBLFNBQUEsWUFBQSxNQUFBO1FBQ0EsSUFBQSxJQUFBLEVBQUEsS0FBQSxTQUFBLE1BQUEsS0FBQTtRQUNBLE9BQUEsS0FBQSxPQUFBLHlCQUFBO1VBQ0EscUJBQUEsTUFBQSxPQUFBLE1BQUEsV0FBQSxDQUFBLEdBQUEsR0FBQTtZQUNBO2NBQ0E7OztNQUdBLFNBQUEsWUFBQSxNQUFBO1FBQ0EsT0FBQSxxQkFBQSxNQUFBOztNQUVBLElBQUE7TUFDQSxNQUFBLENBQUEsVUFBQSxNQUFBLE9BQUEsMkJBQUEsQ0FBQTtVQUNBLE9BQUEsT0FBQSxhQUFBLGNBQUEsU0FBQTtTQUNBLElBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQTtVQUNBLGVBQUE7TUFDQSxPQUFBOztJQUVBLFFBQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsU0FBQTtNQUNBLFFBQUEsSUFBQSxLQUFBLFFBQUE7TUFDQSxPQUFBOztJQUVBLFFBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBO01BQ0EsV0FBQTtNQUNBLE9BQUE7O0lBRUEsUUFBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFFBQUE7TUFDQSxPQUFBOztJQUVBLFFBQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxPQUFBLElBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUEsMEJBQUEsU0FBQTs7O0VBR0EsU0FBQSx5QkFBQSxNQUFBO0lBQ0EsT0FBQTtNQUNBLEdBQUEsS0FBQTtNQUNBLEdBQUEsS0FBQTtNQUNBLElBQUEsS0FBQTtNQUNBLElBQUEsS0FBQTs7OztFQUlBLFNBQUEscUJBQUEsTUFBQSxTQUFBO0lBQ0EsSUFBQSxJQUFBLEtBQUEsSUFBQSxRQUFBO01BQ0EsSUFBQSxLQUFBLElBQUEsUUFBQTtNQUNBLEtBQUEsS0FBQSxLQUFBLFFBQUEsS0FBQSxRQUFBO01BQ0EsS0FBQSxLQUFBLEtBQUEsUUFBQSxLQUFBLFFBQUE7SUFDQSxJQUFBLEtBQUEsR0FBQTtNQUNBLEtBQUEsS0FBQTtNQUNBLEtBQUE7O0lBRUEsSUFBQSxLQUFBLEdBQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxLQUFBOztJQUVBLE9BQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtNQUNBLElBQUE7TUFDQSxJQUFBOzs7RUFHQSxHQUFBLFNBQUE7SUFDQSxRQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLFVBQUE7TUFDQSxJQUFBLElBQUEsR0FBQSxJQUFBO01BQ0EsSUFBQSxJQUFBLEdBQUEsSUFBQTtNQUNBLE9BQUEsV0FBQTtRQUNBLElBQUEsR0FBQSxHQUFBO1FBQ0EsR0FBQTtVQUNBLElBQUEsS0FBQSxXQUFBLElBQUE7VUFDQSxJQUFBLEtBQUEsV0FBQSxJQUFBO1VBQ0EsSUFBQSxJQUFBLElBQUEsSUFBQTtpQkFDQSxDQUFBLEtBQUEsSUFBQTtRQUNBLE9BQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxLQUFBLENBQUEsSUFBQSxLQUFBLElBQUEsS0FBQTs7O0lBR0EsV0FBQSxXQUFBO01BQ0EsSUFBQSxTQUFBLEdBQUEsT0FBQSxPQUFBLE1BQUEsSUFBQTtNQUNBLE9BQUEsV0FBQTtRQUNBLE9BQUEsS0FBQSxJQUFBOzs7SUFHQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsU0FBQSxHQUFBLE9BQUEsVUFBQTtNQUNBLE9BQUEsV0FBQTtRQUNBLE9BQUEsV0FBQTs7O0lBR0EsV0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLFdBQUE7UUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUE7UUFDQSxPQUFBOzs7O0VBSUEsR0FBQSxRQUFBOztFQUVBLFNBQUEsZUFBQSxRQUFBO0lBQ0EsSUFBQSxRQUFBLE9BQUE7TUFDQSxPQUFBLE9BQUEsT0FBQSxTQUFBO0lBQ0EsT0FBQSxRQUFBLE9BQUEsQ0FBQSxPQUFBLFFBQUEsQ0FBQSxNQUFBOzs7RUFHQSxTQUFBLGNBQUEsT0FBQTtJQUNBLE9BQUEsTUFBQSxjQUFBLE1BQUEsZ0JBQUEsZUFBQSxNQUFBOzs7RUFHQSxTQUFBLGtCQUFBLFFBQUEsT0FBQSxlQUFBLGFBQUE7SUFDQSxJQUFBLElBQUEsY0FBQSxPQUFBLElBQUEsT0FBQTtNQUNBLElBQUEsWUFBQSxNQUFBLElBQUEsTUFBQTtJQUNBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBLEVBQUE7Ozs7RUFJQSxTQUFBLGNBQUEsUUFBQSxNQUFBO0lBQ0EsSUFBQSxLQUFBO01BQ0EsS0FBQSxPQUFBLFNBQUE7TUFDQSxLQUFBLE9BQUE7TUFDQSxLQUFBLE9BQUE7TUFDQTtJQUNBLElBQUEsS0FBQSxJQUFBO01BQ0EsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBO01BQ0EsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBOztJQUVBLE9BQUEsTUFBQSxLQUFBLE1BQUE7SUFDQSxPQUFBLE1BQUEsS0FBQSxLQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSxrQkFBQSxNQUFBO0lBQ0EsT0FBQSxPQUFBO01BQ0EsT0FBQSxTQUFBLEdBQUE7UUFDQSxPQUFBLEtBQUEsTUFBQSxJQUFBLFFBQUE7O01BRUEsTUFBQSxTQUFBLEdBQUE7UUFDQSxPQUFBLEtBQUEsS0FBQSxJQUFBLFFBQUE7O1FBRUE7O0VBRUEsSUFBQSx3QkFBQTtJQUNBLE9BQUE7SUFDQSxNQUFBOzs7RUFHQSxTQUFBLG9CQUFBLFFBQUEsT0FBQSxlQUFBLGFBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBO01BQ0EsSUFBQTtNQUNBLElBQUEsS0FBQSxJQUFBLE9BQUEsUUFBQSxNQUFBLFVBQUE7SUFDQSxJQUFBLE9BQUEsS0FBQSxPQUFBLElBQUE7TUFDQSxTQUFBLE9BQUEsUUFBQTtNQUNBLFFBQUEsTUFBQSxRQUFBOztJQUVBLE9BQUEsRUFBQSxLQUFBLEdBQUE7TUFDQSxFQUFBLEtBQUEsY0FBQSxPQUFBLElBQUEsSUFBQSxPQUFBO01BQ0EsRUFBQSxLQUFBLFlBQUEsTUFBQSxJQUFBLElBQUEsTUFBQTs7SUFFQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsSUFBQSxHQUFBLE9BQUEsUUFBQSxHQUFBLEdBQUEsS0FBQTtNQUNBLE9BQUEsRUFBQSxHQUFBLEVBQUEsR0FBQTs7O0VBR0EsR0FBQSxNQUFBLFNBQUEsV0FBQTtJQUNBLE9BQUEsZ0JBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsZ0JBQUE7OztFQUdBLFNBQUEsZ0JBQUEsUUFBQSxPQUFBLGFBQUEsT0FBQTtJQUNBLElBQUEsUUFBQTs7SUFFQSxTQUFBLFVBQUE7TUFDQSxJQUFBLFNBQUEsS0FBQSxJQUFBLE9BQUEsUUFBQSxNQUFBLFVBQUE7UUFDQSxzQkFBQTtRQUNBLGdCQUFBLFFBQUE7UUFDQTtNQUNBLFNBQUEsT0FBQSxRQUFBLE9BQUEsZUFBQTtNQUNBLFFBQUEsT0FBQSxPQUFBLFFBQUEsZUFBQTtNQUNBLE9BQUE7OztJQUdBLFNBQUEsTUFBQSxHQUFBO01BQ0EsT0FBQSxPQUFBOztJQUVBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLE1BQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUEsRUFBQSxJQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsUUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsTUFBQSxNQUFBLEdBQUEsWUFBQTs7SUFFQSxNQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsUUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxjQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGNBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLHFCQUFBLFFBQUE7O0lBRUEsTUFBQSxhQUFBLFNBQUEsR0FBQSxRQUFBO01BQ0EsT0FBQSwwQkFBQSxRQUFBLEdBQUE7O0lBRUEsTUFBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLG9CQUFBLFFBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxnQkFBQSxRQUFBLE9BQUEsYUFBQTs7SUFFQSxPQUFBOzs7RUFHQSxTQUFBLHNCQUFBLE9BQUEsUUFBQTtJQUNBLE9BQUEsR0FBQSxPQUFBLE9BQUEsUUFBQSxTQUFBLGNBQUE7TUFDQTs7O0VBR0EsU0FBQSxvQkFBQSxRQUFBLEdBQUE7SUFDQSxPQUFBLGNBQUEsUUFBQSxrQkFBQTtNQUNBLFFBQUEsR0FBQTs7O0VBR0EsU0FBQSx5QkFBQSxRQUFBLEdBQUE7SUFDQSxJQUFBLEtBQUEsTUFBQSxJQUFBO0lBQ0EsSUFBQSxTQUFBLGVBQUE7TUFDQSxPQUFBLE9BQUEsS0FBQSxPQUFBO01BQ0EsT0FBQSxLQUFBLElBQUEsSUFBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLE9BQUEsS0FBQSxLQUFBO01BQ0EsTUFBQSxJQUFBLE9BQUE7SUFDQSxJQUFBLE9BQUEsS0FBQSxRQUFBO1NBQ0EsSUFBQSxPQUFBLEtBQUEsUUFBQTtTQUNBLElBQUEsT0FBQSxLQUFBLFFBQUE7SUFDQSxPQUFBLEtBQUEsS0FBQSxLQUFBLE9BQUEsS0FBQSxRQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsTUFBQSxPQUFBLEtBQUEsUUFBQSxPQUFBLE9BQUE7SUFDQSxPQUFBLEtBQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLHFCQUFBLFFBQUEsR0FBQTtJQUNBLE9BQUEsR0FBQSxNQUFBLE1BQUEsSUFBQSx5QkFBQSxRQUFBOzs7RUFHQSxTQUFBLDBCQUFBLFFBQUEsR0FBQSxRQUFBO0lBQ0EsSUFBQSxRQUFBLHlCQUFBLFFBQUE7SUFDQSxJQUFBLFFBQUE7TUFDQSxJQUFBLFFBQUEsYUFBQSxLQUFBO01BQ0EsTUFBQTtNQUNBLElBQUEsTUFBQSxPQUFBLEtBQUE7UUFDQSxJQUFBLFNBQUEsR0FBQSxhQUFBLEtBQUEsSUFBQSxJQUFBLE1BQUEsS0FBQSxJQUFBLE1BQUE7UUFDQSxJQUFBLENBQUEsTUFBQSxJQUFBLE1BQUEsS0FBQSxNQUFBLHlCQUFBLE9BQUE7VUFDQSxNQUFBO1FBQ0EsTUFBQSxLQUFBO1FBQ0EsU0FBQSxHQUFBLE9BQUEsTUFBQSxLQUFBO1FBQ0EsT0FBQSxTQUFBLEdBQUE7VUFDQSxPQUFBLE9BQUEsT0FBQSxNQUFBLE1BQUEsT0FBQTs7O01BR0EsSUFBQSxDQUFBLE1BQUEsSUFBQSxNQUFBLEtBQUEsTUFBQSwrQkFBQTtRQUNBLElBQUE7TUFDQSxTQUFBLE1BQUEsS0FBQTtXQUNBO01BQ0EsU0FBQSxPQUFBLHlCQUFBLE1BQUEsTUFBQTs7SUFFQSxPQUFBLEdBQUEsT0FBQTs7RUFFQSxJQUFBLG1DQUFBO0lBQ0EsR0FBQTtJQUNBLEdBQUE7SUFDQSxHQUFBO0lBQ0EsR0FBQTtJQUNBLEdBQUE7OztFQUdBLFNBQUEseUJBQUEsT0FBQTtJQUNBLE9BQUEsQ0FBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLFNBQUEsS0FBQSxPQUFBOzs7RUFHQSxTQUFBLCtCQUFBLE1BQUEsT0FBQTtJQUNBLElBQUEsSUFBQSx5QkFBQSxNQUFBO0lBQ0EsT0FBQSxRQUFBLG1DQUFBLEtBQUEsSUFBQTtRQUNBLHlCQUFBLEtBQUEsSUFBQSxJQUFBLE1BQUEsS0FBQSxJQUFBLE1BQUE7TUFDQSxFQUFBLFNBQUEsT0FBQSxJQUFBLENBQUEsU0FBQSxPQUFBOztFQUVBLEdBQUEsTUFBQSxNQUFBLFdBQUE7SUFDQSxPQUFBLGFBQUEsR0FBQSxNQUFBLFNBQUEsT0FBQSxDQUFBLEdBQUEsS0FBQSxJQUFBLE1BQUEsQ0FBQTtNQUNBOzs7O0VBSUEsU0FBQSxhQUFBLFFBQUEsTUFBQSxVQUFBLFFBQUE7SUFDQSxTQUFBLElBQUEsR0FBQTtNQUNBLE9BQUEsQ0FBQSxXQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLENBQUE7UUFDQSxLQUFBLElBQUE7OztJQUdBLFNBQUEsSUFBQSxHQUFBO01BQ0EsT0FBQSxXQUFBLEtBQUEsSUFBQSxNQUFBLEtBQUEsQ0FBQSxLQUFBLElBQUEsTUFBQSxDQUFBOzs7SUFHQSxTQUFBLE1BQUEsR0FBQTtNQUNBLE9BQUEsT0FBQSxJQUFBOztJQUVBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLElBQUEsT0FBQSxPQUFBOztJQUVBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxXQUFBLEVBQUEsTUFBQTtNQUNBLE9BQUEsT0FBQSxDQUFBLFNBQUEsRUFBQSxJQUFBLFNBQUEsSUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxPQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLE9BQUEsQ0FBQTtNQUNBLE9BQUEsT0FBQSxPQUFBLElBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsT0FBQSxXQUFBO01BQ0EsSUFBQSxRQUFBLGNBQUEsT0FBQSxJQUFBLE1BQUEsV0FBQTtRQUNBO01BQ0EsT0FBQSxPQUFBO01BQ0EsU0FBQSxNQUFBLElBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsUUFBQSxXQUFBO01BQ0EsSUFBQSxTQUFBLGVBQUE7UUFDQSxRQUFBO1FBQ0EsSUFBQSxPQUFBO1FBQ0EsSUFBQSxPQUFBO1FBQ0EsSUFBQSxLQUFBLE1BQUEsSUFBQTtRQUNBLElBQUEsS0FBQSxLQUFBLElBQUE7UUFDQSxJQUFBLE9BQUEsSUFBQSxJQUFBO01BQ0EsSUFBQSxTQUFBLElBQUEsSUFBQTtRQUNBLElBQUEsVUFBQTtVQUNBLE9BQUEsSUFBQSxHQUFBO1lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBO1VBQ0EsTUFBQSxLQUFBLElBQUE7ZUFDQTtVQUNBLE1BQUEsS0FBQSxJQUFBO1VBQ0EsT0FBQSxNQUFBO1lBQ0EsS0FBQSxJQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxLQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUE7O1FBRUEsS0FBQSxJQUFBLEdBQUEsTUFBQSxLQUFBLEdBQUEsS0FBQTtRQUNBLEtBQUEsSUFBQSxNQUFBLFFBQUEsTUFBQSxJQUFBLEtBQUEsR0FBQSxLQUFBO1FBQ0EsUUFBQSxNQUFBLE1BQUEsR0FBQTs7TUFFQSxPQUFBOztJQUVBLE1BQUEsYUFBQSxTQUFBLEdBQUEsUUFBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLElBQUEsVUFBQSxTQUFBLEdBQUEsU0FBQTtXQUNBLElBQUEsT0FBQSxXQUFBLFlBQUEsU0FBQSxHQUFBLE9BQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxNQUFBLFFBQUE7UUFDQSxJQUFBLFlBQUEsSUFBQSxPQUFBLEtBQUEsU0FBQSxJQUFBLENBQUE7VUFDQSxLQUFBO1FBQ0E7TUFDQSxPQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsSUFBQSxJQUFBLEVBQUEsSUFBQSxLQUFBLE9BQUEsSUFBQSxPQUFBLEtBQUE7OztJQUdBLE1BQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxhQUFBLE9BQUEsUUFBQSxNQUFBLFVBQUE7O0lBRUEsT0FBQSxzQkFBQSxPQUFBOztFQUVBLElBQUEscUJBQUEsR0FBQSxPQUFBO0lBQ0EsMkJBQUE7TUFDQSxPQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsQ0FBQSxLQUFBLEtBQUEsQ0FBQTs7TUFFQSxNQUFBLFNBQUEsR0FBQTtRQUNBLE9BQUEsQ0FBQSxLQUFBLE1BQUEsQ0FBQTs7O0VBR0EsR0FBQSxNQUFBLE1BQUEsV0FBQTtJQUNBLE9BQUEsYUFBQSxHQUFBLE1BQUEsVUFBQSxHQUFBLENBQUEsR0FBQTs7O0VBR0EsU0FBQSxhQUFBLFFBQUEsVUFBQSxRQUFBO0lBQ0EsSUFBQSxPQUFBLGdCQUFBO01BQ0EsT0FBQSxnQkFBQSxJQUFBOztJQUVBLFNBQUEsTUFBQSxHQUFBO01BQ0EsT0FBQSxPQUFBLEtBQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxPQUFBLE9BQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLE9BQUEsT0FBQSxDQUFBLFNBQUEsRUFBQSxJQUFBLFNBQUEsSUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEscUJBQUEsUUFBQTs7SUFFQSxNQUFBLGFBQUEsU0FBQSxHQUFBLFFBQUE7TUFDQSxPQUFBLDBCQUFBLFFBQUEsR0FBQTs7SUFFQSxNQUFBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxNQUFBLE9BQUEsb0JBQUEsUUFBQTs7SUFFQSxNQUFBLFdBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsT0FBQSxnQkFBQSxXQUFBO01BQ0EsT0FBQSxnQkFBQSxJQUFBO01BQ0EsT0FBQSxPQUFBLE9BQUEsSUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxPQUFBLFdBQUE7TUFDQSxPQUFBLGFBQUEsT0FBQSxRQUFBLFVBQUE7O0lBRUEsT0FBQSxzQkFBQSxPQUFBOzs7RUFHQSxTQUFBLGdCQUFBLEdBQUE7SUFDQSxPQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsSUFBQSxJQUFBLENBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxLQUFBLEtBQUEsSUFBQSxHQUFBOzs7RUFHQSxHQUFBLE1BQUEsT0FBQSxXQUFBO0lBQ0EsT0FBQSxHQUFBLE1BQUEsTUFBQSxTQUFBOztFQUVBLEdBQUEsTUFBQSxVQUFBLFdBQUE7SUFDQSxPQUFBLGlCQUFBLElBQUE7TUFDQSxHQUFBO01BQ0EsR0FBQTtRQUNBOzs7OztFQUtBLFNBQUEsaUJBQUEsUUFBQSxRQUFBO0lBQ0EsSUFBQSxPQUFBLE9BQUE7O0lBRUEsU0FBQSxNQUFBLEdBQUE7TUFDQSxPQUFBLE1BQUEsQ0FBQSxDQUFBLE1BQUEsSUFBQSxPQUFBLE9BQUEsTUFBQSxVQUFBLE1BQUEsSUFBQTtRQUNBLE9BQUEsS0FBQSxNQUFBLFFBQUEsS0FBQSxNQUFBOzs7SUFHQSxTQUFBLE1BQUEsT0FBQSxNQUFBO01BQ0EsT0FBQSxHQUFBLE1BQUEsT0FBQSxRQUFBLElBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxRQUFBLE9BQUE7OztJQUdBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBO01BQ0EsUUFBQSxJQUFBO01BQ0EsSUFBQSxJQUFBLENBQUE7UUFDQSxJQUFBLEVBQUE7UUFDQTtNQUNBLE9BQUEsRUFBQSxJQUFBO1FBQ0EsSUFBQSxDQUFBLE1BQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxNQUFBLElBQUEsSUFBQSxPQUFBLEtBQUE7TUFDQSxPQUFBLE1BQUEsT0FBQSxHQUFBLE1BQUEsT0FBQSxPQUFBOztJQUVBLE1BQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxRQUFBO01BQ0EsWUFBQTtNQUNBLFNBQUE7UUFDQSxHQUFBO1FBQ0EsR0FBQTs7TUFFQSxPQUFBOztJQUVBLE1BQUEsY0FBQSxTQUFBLEdBQUEsU0FBQTtNQUNBLElBQUEsVUFBQSxTQUFBLEdBQUEsVUFBQTtNQUNBLElBQUEsUUFBQSxFQUFBO1FBQ0EsT0FBQSxFQUFBO1FBQ0EsT0FBQSxPQUFBLFNBQUEsS0FBQSxRQUFBLENBQUEsUUFBQSxRQUFBO1VBQ0EsS0FBQSxDQUFBLE9BQUEsVUFBQSxPQUFBLFNBQUEsSUFBQTtNQUNBLFFBQUEsTUFBQSxRQUFBLE9BQUEsVUFBQSxHQUFBO01BQ0EsWUFBQTtNQUNBLFNBQUE7UUFDQSxHQUFBO1FBQ0EsR0FBQTs7TUFFQSxPQUFBOztJQUVBLE1BQUEsbUJBQUEsU0FBQSxHQUFBLFNBQUE7TUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLFVBQUE7TUFDQSxJQUFBLFFBQUEsRUFBQTtRQUNBLE9BQUEsRUFBQTtRQUNBLE9BQUEsT0FBQSxTQUFBLEtBQUEsUUFBQSxPQUFBLEtBQUEsTUFBQSxDQUFBO1lBQ0EsUUFBQTtVQUNBLEtBQUEsQ0FBQSxPQUFBLFVBQUEsT0FBQSxTQUFBLElBQUEsV0FBQTtNQUNBLFFBQUEsTUFBQSxRQUFBLEtBQUEsTUFBQSxPQUFBLFVBQUEsSUFBQSxDQUFBLE9BQUE7UUFDQSxDQUFBLE9BQUEsU0FBQSxJQUFBLFdBQUEsUUFBQSxJQUFBO01BQ0EsWUFBQTtNQUNBLFNBQUE7UUFDQSxHQUFBO1FBQ0EsR0FBQTs7TUFFQSxPQUFBOztJQUVBLE1BQUEsYUFBQSxTQUFBLEdBQUEsU0FBQSxjQUFBO01BQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQSxVQUFBO01BQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQSxlQUFBO01BQ0EsSUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBO1FBQ0EsUUFBQSxFQUFBLFVBQUE7UUFDQSxPQUFBLEVBQUEsSUFBQTtRQUNBLE9BQUEsQ0FBQSxPQUFBLFVBQUEsT0FBQSxTQUFBLFVBQUE7VUFDQTtNQUNBLFFBQUEsTUFBQSxRQUFBLE9BQUEsY0FBQTtNQUNBLElBQUEsU0FBQSxNQUFBO01BQ0EsWUFBQSxRQUFBLElBQUE7TUFDQSxTQUFBO1FBQ0EsR0FBQTtRQUNBLEdBQUE7O01BRUEsT0FBQTs7SUFFQSxNQUFBLGtCQUFBLFNBQUEsR0FBQSxTQUFBLGNBQUE7TUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLFVBQUE7TUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLGVBQUE7TUFDQSxJQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUE7UUFDQSxRQUFBLEVBQUEsVUFBQTtRQUNBLE9BQUEsRUFBQSxJQUFBO1FBQ0EsT0FBQSxLQUFBLE1BQUEsQ0FBQSxPQUFBLFVBQUEsT0FBQSxTQUFBLFVBQUE7VUFDQTtNQUNBLFFBQUEsTUFBQSxRQUFBLEtBQUEsTUFBQSxDQUFBLE9BQUEsUUFBQSxDQUFBLE9BQUE7UUFDQSxXQUFBLFFBQUEsSUFBQTtNQUNBLElBQUEsU0FBQSxNQUFBO01BQ0EsWUFBQSxLQUFBLE1BQUEsUUFBQSxJQUFBO01BQ0EsU0FBQTtRQUNBLEdBQUE7UUFDQSxHQUFBOztNQUVBLE9BQUE7O0lBRUEsTUFBQSxZQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsY0FBQSxXQUFBO01BQ0EsT0FBQSxlQUFBLE9BQUEsRUFBQTs7SUFFQSxNQUFBLE9BQUEsV0FBQTtNQUNBLE9BQUEsaUJBQUEsUUFBQTs7SUFFQSxPQUFBLE1BQUEsT0FBQTs7RUFFQSxHQUFBLE1BQUEsYUFBQSxXQUFBO0lBQ0EsT0FBQSxHQUFBLE1BQUEsVUFBQSxNQUFBOztFQUVBLEdBQUEsTUFBQSxhQUFBLFdBQUE7SUFDQSxPQUFBLEdBQUEsTUFBQSxVQUFBLE1BQUE7O0VBRUEsR0FBQSxNQUFBLGNBQUEsV0FBQTtJQUNBLE9BQUEsR0FBQSxNQUFBLFVBQUEsTUFBQTs7RUFFQSxHQUFBLE1BQUEsY0FBQSxXQUFBO0lBQ0EsT0FBQSxHQUFBLE1BQUEsVUFBQSxNQUFBOztFQUVBLElBQUEsZ0JBQUEsQ0FBQSxTQUFBLFVBQUEsU0FBQSxVQUFBO0lBQ0EsU0FBQSxVQUFBLFNBQUEsVUFBQTtJQUNBLElBQUE7RUFDQSxJQUFBLGdCQUFBLENBQUEsU0FBQSxVQUFBLFVBQUEsVUFBQTtJQUNBLFVBQUEsVUFBQSxVQUFBLFNBQUEsVUFBQSxTQUFBO0lBQ0EsVUFBQSxVQUFBLFNBQUEsVUFBQSxVQUFBLFVBQUE7SUFDQTtJQUNBLElBQUE7RUFDQSxJQUFBLGlCQUFBLENBQUEsU0FBQSxTQUFBLFNBQUEsVUFBQTtJQUNBLFNBQUEsVUFBQSxVQUFBLFNBQUEsVUFBQSxVQUFBO0lBQ0EsU0FBQSxVQUFBLFVBQUEsVUFBQSxTQUFBLFVBQUE7SUFDQTtJQUNBLElBQUE7RUFDQSxJQUFBLGlCQUFBLENBQUEsU0FBQSxTQUFBLFVBQUEsVUFBQTtJQUNBLFVBQUEsVUFBQSxVQUFBLFNBQUEsU0FBQSxVQUFBO0lBQ0EsU0FBQSxVQUFBLFVBQUEsVUFBQSxTQUFBLFNBQUE7SUFDQTtJQUNBLElBQUE7RUFDQSxHQUFBLE1BQUEsV0FBQSxXQUFBO0lBQ0EsT0FBQSxrQkFBQSxJQUFBOzs7RUFHQSxTQUFBLGtCQUFBLFFBQUEsT0FBQTtJQUNBLElBQUE7O0lBRUEsU0FBQSxVQUFBO01BQ0EsSUFBQSxJQUFBO1FBQ0EsSUFBQSxNQUFBO01BQ0EsYUFBQTtNQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsV0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLFFBQUEsSUFBQTtNQUNBLE9BQUE7OztJQUdBLFNBQUEsTUFBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxNQUFBLEdBQUEsT0FBQSxZQUFBOztJQUVBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxTQUFBLEVBQUEsSUFBQSxXQUFBLE9BQUEsWUFBQSxLQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsUUFBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxZQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsZUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLE1BQUEsUUFBQTtNQUNBLE9BQUEsSUFBQSxJQUFBLENBQUEsS0FBQSxPQUFBLENBQUEsSUFBQSxJQUFBLFdBQUEsSUFBQSxLQUFBLE9BQUE7UUFDQSxJQUFBLFdBQUEsU0FBQSxXQUFBLEtBQUEsT0FBQSxPQUFBO1VBQ0E7OztJQUdBLE1BQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxrQkFBQSxRQUFBOztJQUVBLE9BQUE7O0VBRUEsR0FBQSxNQUFBLFdBQUEsV0FBQTtJQUNBLE9BQUEsa0JBQUEsR0FBQSxHQUFBLENBQUEsR0FBQTs7O0VBR0EsU0FBQSxrQkFBQSxJQUFBLElBQUEsT0FBQTtJQUNBLElBQUEsSUFBQTs7SUFFQSxTQUFBLE1BQUEsR0FBQTtNQUNBLE9BQUEsTUFBQSxLQUFBLElBQUEsR0FBQSxLQUFBLElBQUEsR0FBQSxLQUFBLE1BQUEsTUFBQSxJQUFBOzs7SUFHQSxTQUFBLFVBQUE7TUFDQSxLQUFBLE1BQUEsVUFBQSxLQUFBO01BQ0EsSUFBQSxNQUFBLFNBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUEsQ0FBQSxJQUFBO01BQ0EsS0FBQSxDQUFBLEVBQUE7TUFDQSxLQUFBLENBQUEsRUFBQSxFQUFBLFNBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLGVBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxNQUFBLFFBQUE7TUFDQSxJQUFBLElBQUEsSUFBQSxNQUFBLElBQUEsS0FBQTtNQUNBLE9BQUEsQ0FBQSxHQUFBLElBQUEsSUFBQTs7SUFFQSxNQUFBLE9BQUEsV0FBQTtNQUNBLE9BQUEsa0JBQUEsSUFBQSxJQUFBOztJQUVBLE9BQUE7O0VBRUEsR0FBQSxNQUFBLFlBQUEsV0FBQTtJQUNBLE9BQUEsbUJBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQTs7O0VBR0EsU0FBQSxtQkFBQSxRQUFBLE9BQUE7SUFDQSxTQUFBLE1BQUEsR0FBQTtNQUNBLElBQUEsS0FBQSxHQUFBLE9BQUEsTUFBQSxHQUFBLE9BQUEsUUFBQTs7SUFFQSxNQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFFBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsZUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLE1BQUEsUUFBQTtNQUNBLE9BQUEsQ0FBQSxPQUFBLElBQUEsSUFBQSxPQUFBOztJQUVBLE1BQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxtQkFBQSxRQUFBOztJQUVBLE9BQUE7O0VBRUEsR0FBQSxNQUFBLFdBQUEsV0FBQTtJQUNBLE9BQUEsa0JBQUEsQ0FBQSxHQUFBOzs7RUFHQSxTQUFBLGtCQUFBLFFBQUE7SUFDQSxTQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsQ0FBQTs7SUFFQSxTQUFBLFNBQUE7SUFDQSxTQUFBLFNBQUEsU0FBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUEsRUFBQSxJQUFBO01BQ0EsT0FBQTs7SUFFQSxTQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxxQkFBQSxRQUFBOztJQUVBLFNBQUEsYUFBQSxTQUFBLEdBQUEsUUFBQTtNQUNBLE9BQUEsMEJBQUEsUUFBQSxHQUFBOztJQUVBLFNBQUEsT0FBQSxXQUFBO01BQ0EsT0FBQSxrQkFBQTs7SUFFQSxPQUFBOztFQUVBLEdBQUEsTUFBQTs7RUFFQSxTQUFBLFVBQUE7SUFDQSxPQUFBOztFQUVBLEdBQUEsSUFBQSxNQUFBLFdBQUE7SUFDQSxJQUFBLGNBQUE7TUFDQSxjQUFBO01BQ0EsZUFBQTtNQUNBLFlBQUE7TUFDQSxhQUFBO01BQ0EsV0FBQTtNQUNBLFdBQUE7O0lBRUEsU0FBQSxNQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUEsSUFBQSxHQUFBLENBQUEsWUFBQSxNQUFBLE1BQUE7UUFDQSxLQUFBLEtBQUEsSUFBQSxHQUFBLENBQUEsWUFBQSxNQUFBLE1BQUE7UUFDQSxLQUFBLFdBQUEsTUFBQSxNQUFBLGFBQUE7UUFDQSxLQUFBLFNBQUEsTUFBQSxNQUFBLGFBQUE7UUFDQSxLQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQTtNQUNBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQTtNQUNBLElBQUEsTUFBQSxJQUFBLE9BQUEsY0FBQSxJQUFBLE9BQUEsS0FBQSxjQUFBO1FBQ0EsSUFBQSxNQUFBLE1BQUE7TUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsS0FBQTtRQUNBLEtBQUE7UUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsT0FBQTtNQUNBLElBQUEsS0FBQSxDQUFBLENBQUEsU0FBQSxNQUFBLE1BQUEsY0FBQSxLQUFBLEdBQUE7UUFDQSxLQUFBLGNBQUEsaUJBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO1VBQ0EsQ0FBQSxVQUFBLE1BQUEsTUFBQTtRQUNBLElBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQTtRQUNBLElBQUEsSUFBQSxLQUFBLFFBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsSUFBQSxLQUFBLFFBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQTs7TUFFQSxJQUFBLElBQUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxJQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQSxJQUFBLE9BQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxNQUFBLGdCQUFBLElBQUEsSUFBQSxJQUFBLFFBQUEsS0FBQSxJQUFBO1VBQ0EsSUFBQSxLQUFBLENBQUEsS0FBQSxNQUFBO1VBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQTtVQUNBLEtBQUEsS0FBQSxLQUFBLElBQUE7VUFDQSxLQUFBLEtBQUE7O2FBRUE7UUFDQSxLQUFBLEtBQUE7O01BRUEsSUFBQSxJQUFBO1FBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsSUFBQSxPQUFBLElBQUEsSUFBQTtRQUNBLElBQUEsTUFBQSxnQkFBQSxJQUFBLElBQUEsSUFBQSxRQUFBLElBQUEsS0FBQSxJQUFBO1VBQ0EsSUFBQSxLQUFBLENBQUEsS0FBQSxNQUFBO1VBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQTtVQUNBLEtBQUEsS0FBQSxLQUFBLElBQUE7VUFDQSxLQUFBLEtBQUE7O2FBRUE7UUFDQSxLQUFBLEtBQUE7O01BRUEsSUFBQSxDQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLE1BQUEsR0FBQSxDQUFBLGFBQUEsTUFBQTtVQUNBLGVBQUEsTUFBQTtRQUNBLEtBQUEsS0FBQSxLQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsS0FBQSxNQUFBLE9BQUEsQ0FBQSxJQUFBLE1BQUEsTUFBQSxPQUFBLENBQUEsSUFBQTtVQUNBLHlCQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsSUFBQTtVQUNBLEtBQUEsS0FBQSxHQUFBO1VBQ0EsS0FBQSxLQUFBLEdBQUE7VUFDQSxLQUFBLEtBQUEsR0FBQTtVQUNBLEtBQUEsS0FBQSxHQUFBO1VBQ0EsS0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxPQUFBLEtBQUEsS0FBQTtZQUNBLEtBQUEsS0FBQSxNQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxRQUFBO1VBQ0EsS0FBQSxLQUFBLEtBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsTUFBQSxNQUFBO1VBQ0EsSUFBQSxNQUFBLEtBQUEsSUFBQSxJQUFBLENBQUEsS0FBQSxPQUFBLEtBQUE7WUFDQSxNQUFBLHlCQUFBLE1BQUEsT0FBQSxDQUFBLElBQUEsTUFBQSxDQUFBO2NBQ0E7ZUFDQSxDQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7WUFDQSxNQUFBLHlCQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxLQUFBLElBQUE7Y0FDQTtVQUNBLElBQUEsT0FBQSxLQUFBO1lBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsU0FBQSxJQUFBO2NBQ0EsSUFBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsT0FBQSxJQUFBLEtBQUE7Z0JBQ0EsSUFBQSxHQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxHQUFBLEtBQUEsS0FBQTtjQUNBLEtBQUEsSUFBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsU0FBQSxJQUFBLEtBQUEsSUFBQTs7aUJBRUE7WUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxTQUFBLElBQUE7Y0FDQSxJQUFBOztlQUVBO1VBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBOztRQUVBLElBQUEsTUFBQSxNQUFBO1VBQ0EsSUFBQSxNQUFBLEtBQUEsSUFBQSxJQUFBLENBQUEsS0FBQSxPQUFBLEtBQUE7WUFDQSxNQUFBLHlCQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQTtjQUNBO1lBQ0EsTUFBQSx5QkFBQSxDQUFBLElBQUEsS0FBQSxNQUFBLE9BQUEsQ0FBQSxJQUFBLE1BQUE7Y0FDQSxJQUFBO2VBQ0EsSUFBQSxDQUFBLEtBQUE7VUFDQSxJQUFBLE9BQUEsS0FBQTtZQUNBLEtBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLFNBQUEsSUFBQTtjQUNBLElBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBLE9BQUEsS0FBQSxnQkFBQTtnQkFDQSxHQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxHQUFBLEtBQUEsS0FBQSxJQUFBO2NBQ0EsS0FBQSxJQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxTQUFBLElBQUEsS0FBQSxJQUFBOztpQkFFQTtZQUNBLEtBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLFNBQUEsSUFBQTtjQUNBLElBQUE7O2VBRUE7VUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7O2FBRUE7UUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxJQUFBLE1BQUEsTUFBQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxPQUFBLElBQUEsS0FBQTtVQUNBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBO1FBQ0EsSUFBQSxNQUFBLE1BQUEsS0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsT0FBQSxJQUFBLEtBQUE7VUFDQSxJQUFBLEtBQUEsSUFBQSxLQUFBOztNQUVBLEtBQUEsS0FBQTtNQUNBLE9BQUEsS0FBQSxLQUFBOzs7SUFHQSxTQUFBLGNBQUEsSUFBQSxJQUFBO01BQ0EsT0FBQSxRQUFBLEtBQUEsTUFBQSxLQUFBLE1BQUEsS0FBQSxVQUFBLEtBQUEsUUFBQTtRQUNBLEtBQUEsTUFBQSxLQUFBLE1BQUEsS0FBQSxVQUFBLEtBQUEsUUFBQTs7SUFFQSxJQUFBLGNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsY0FBQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLGNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsY0FBQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLGVBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsZUFBQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLFlBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsWUFBQSxLQUFBLGlCQUFBLGlCQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLElBQUEsYUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxhQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLElBQUEsV0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxXQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLElBQUEsV0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxXQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLElBQUEsV0FBQSxXQUFBO01BQ0EsSUFBQSxJQUFBLENBQUEsQ0FBQSxZQUFBLE1BQUEsTUFBQSxhQUFBLENBQUEsWUFBQTtVQUNBLE1BQUEsY0FBQTtRQUNBLElBQUEsQ0FBQSxDQUFBLFdBQUEsTUFBQSxNQUFBLGFBQUEsQ0FBQSxTQUFBLE1BQUE7VUFDQSxjQUFBLElBQUE7TUFDQSxPQUFBLENBQUEsS0FBQSxJQUFBLEtBQUEsR0FBQSxLQUFBLElBQUEsS0FBQTs7SUFFQSxPQUFBOztFQUVBLElBQUEsaUJBQUE7O0VBRUEsU0FBQSxzQkFBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBOzs7RUFHQSxTQUFBLHNCQUFBLEdBQUE7SUFDQSxPQUFBLEVBQUE7OztFQUdBLFNBQUEscUJBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQTs7O0VBR0EsU0FBQSxtQkFBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBOzs7RUFHQSxTQUFBLG1CQUFBLEdBQUE7SUFDQSxPQUFBLEtBQUEsRUFBQTs7O0VBR0EsU0FBQSxnQkFBQSxJQUFBLElBQUEsSUFBQSxJQUFBO0lBQ0EsT0FBQSxDQUFBLEtBQUEsTUFBQSxLQUFBLENBQUEsS0FBQSxNQUFBLEtBQUEsSUFBQSxJQUFBOzs7RUFHQSxTQUFBLHlCQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQTtJQUNBLElBQUEsTUFBQSxHQUFBLEtBQUEsR0FBQTtNQUNBLE1BQUEsR0FBQSxLQUFBLEdBQUE7TUFDQSxLQUFBLENBQUEsS0FBQSxLQUFBLENBQUEsTUFBQSxLQUFBLEtBQUEsTUFBQSxNQUFBLE1BQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxLQUFBLENBQUEsS0FBQTtNQUNBLEtBQUEsR0FBQSxLQUFBO01BQ0EsS0FBQSxHQUFBLEtBQUE7TUFDQSxLQUFBLEdBQUEsS0FBQTtNQUNBLEtBQUEsR0FBQSxLQUFBO01BQ0EsS0FBQSxDQUFBLEtBQUEsTUFBQTtNQUNBLEtBQUEsQ0FBQSxLQUFBLE1BQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUEsS0FBQSxLQUFBO01BQ0EsSUFBQSxLQUFBO01BQ0EsSUFBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLElBQUEsQ0FBQSxLQUFBLElBQUEsQ0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsSUFBQSxLQUFBLElBQUE7TUFDQSxNQUFBLENBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLE1BQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxNQUFBLENBQUEsSUFBQSxLQUFBLEtBQUEsS0FBQTtNQUNBLE1BQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxLQUFBLEtBQUE7TUFDQSxNQUFBLE1BQUE7TUFDQSxNQUFBLE1BQUE7TUFDQSxNQUFBLE1BQUE7TUFDQSxNQUFBLE1BQUE7SUFDQSxJQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUEsTUFBQTtJQUNBLE9BQUE7TUFDQSxDQUFBLE1BQUEsSUFBQSxNQUFBO01BQ0EsQ0FBQSxNQUFBLEtBQUEsR0FBQSxNQUFBLEtBQUE7Ozs7RUFJQSxTQUFBLFlBQUEsWUFBQTtJQUNBLElBQUEsSUFBQTtNQUNBLElBQUE7TUFDQSxVQUFBO01BQ0EsY0FBQTtNQUNBLGlCQUFBLFlBQUE7TUFDQSxVQUFBOztJQUVBLFNBQUEsS0FBQSxNQUFBO01BQ0EsSUFBQSxXQUFBO1FBQ0EsU0FBQTtRQUNBLElBQUEsQ0FBQTtRQUNBLElBQUEsS0FBQTtRQUNBLEdBQUEsS0FBQSxXQUFBO1FBQ0EsS0FBQSxXQUFBOztNQUVBLFNBQUEsVUFBQTtRQUNBLFNBQUEsS0FBQSxLQUFBLFlBQUEsV0FBQSxTQUFBOztNQUVBLE9BQUEsRUFBQSxJQUFBLEdBQUE7UUFDQSxJQUFBLFFBQUEsS0FBQSxNQUFBLElBQUEsS0FBQSxJQUFBLElBQUE7VUFDQSxPQUFBLEtBQUEsQ0FBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUE7ZUFDQSxJQUFBLE9BQUEsUUFBQTtVQUNBO1VBQ0EsU0FBQTs7O01BR0EsSUFBQSxPQUFBLFFBQUE7TUFDQSxPQUFBLFNBQUEsU0FBQSxTQUFBLEtBQUEsTUFBQTs7SUFFQSxLQUFBLElBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsSUFBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxJQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLElBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsVUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxVQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLGNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsSUFBQSxPQUFBLE1BQUEsWUFBQSxpQkFBQSxjQUFBO1dBQ0EsaUJBQUEsQ0FBQSxjQUFBLHlCQUFBLElBQUE7UUFDQSxtQkFBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxVQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFVBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUE7O0VBRUEsR0FBQSxJQUFBLE9BQUEsV0FBQTtJQUNBLE9BQUEsWUFBQTs7RUFFQSxJQUFBLDJCQUFBLEdBQUEsSUFBQTtJQUNBLFFBQUE7SUFDQSxpQkFBQTtJQUNBLE1BQUE7SUFDQSxlQUFBO0lBQ0EsY0FBQTtJQUNBLE9BQUE7SUFDQSxjQUFBO0lBQ0EsZ0JBQUE7SUFDQSxRQUFBO0lBQ0EsVUFBQTtJQUNBLGlCQUFBO0lBQ0EsbUJBQUE7SUFDQSxVQUFBOztFQUVBLHlCQUFBLFFBQUEsU0FBQSxLQUFBLE9BQUE7SUFDQSxNQUFBLE1BQUE7SUFDQSxNQUFBLFNBQUEsV0FBQSxLQUFBOzs7RUFHQSxTQUFBLGtCQUFBLFFBQUE7SUFDQSxPQUFBLE9BQUEsS0FBQTs7O0VBR0EsU0FBQSx3QkFBQSxRQUFBO0lBQ0EsT0FBQSxrQkFBQSxVQUFBOzs7RUFHQSxTQUFBLGdCQUFBLFFBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxPQUFBLENBQUEsRUFBQSxJQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxNQUFBLEdBQUEsS0FBQTtNQUNBO0lBQ0EsSUFBQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsS0FBQSxLQUFBOzs7RUFHQSxTQUFBLHNCQUFBLFFBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxPQUFBLENBQUEsRUFBQSxJQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxJQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsS0FBQSxLQUFBOzs7RUFHQSxTQUFBLHFCQUFBLFFBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxPQUFBLENBQUEsRUFBQSxJQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxJQUFBLEtBQUEsRUFBQTtJQUNBLE9BQUEsS0FBQSxLQUFBOzs7RUFHQSxTQUFBLHdCQUFBLFFBQUEsU0FBQTtJQUNBLE9BQUEsT0FBQSxTQUFBLElBQUEsa0JBQUEsVUFBQSxPQUFBO01BQ0EsbUJBQUEsT0FBQSxNQUFBLEdBQUEsQ0FBQSxJQUFBO1FBQ0EsUUFBQTs7O0VBR0EsU0FBQSwwQkFBQSxRQUFBLFNBQUE7SUFDQSxPQUFBLE9BQUEsU0FBQSxJQUFBLGtCQUFBLFVBQUEsT0FBQTtNQUNBLG9CQUFBLE9BQUEsS0FBQSxPQUFBO1FBQ0EsU0FBQSw0QkFBQSxDQUFBLE9BQUEsT0FBQSxTQUFBLElBQUE7UUFDQSxRQUFBLENBQUEsT0FBQSxNQUFBOzs7RUFHQSxTQUFBLG9CQUFBLFFBQUEsU0FBQTtJQUNBLE9BQUEsT0FBQSxTQUFBLElBQUEsa0JBQUEsVUFBQSxPQUFBO01BQ0EsbUJBQUEsUUFBQSw0QkFBQTtRQUNBOzs7RUFHQSxTQUFBLG1CQUFBLFFBQUEsVUFBQTtJQUNBLElBQUEsU0FBQSxTQUFBLEtBQUEsT0FBQSxVQUFBLFNBQUEsVUFBQSxPQUFBO01BQ0EsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLGtCQUFBOztJQUVBLElBQUEsT0FBQSxPQUFBLFVBQUEsU0FBQTtNQUNBLE9BQUE7TUFDQSxLQUFBLE9BQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxLQUFBLFNBQUE7TUFDQSxJQUFBO01BQ0EsS0FBQTtJQUNBLElBQUEsTUFBQTtNQUNBLFFBQUEsT0FBQSxFQUFBLEtBQUEsR0FBQSxLQUFBLElBQUEsS0FBQSxPQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsSUFBQTtRQUNBLE1BQUEsRUFBQSxLQUFBLE1BQUEsRUFBQTtNQUNBLEtBQUEsT0FBQTtNQUNBLEtBQUE7O0lBRUEsSUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsU0FBQTtNQUNBLElBQUEsT0FBQTtNQUNBO01BQ0EsUUFBQSxPQUFBLEdBQUEsS0FBQSxHQUFBLE1BQUEsT0FBQSxHQUFBLEtBQUEsR0FBQSxNQUFBLE9BQUEsRUFBQTtRQUNBLEVBQUEsTUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsTUFBQSxFQUFBLEtBQUEsTUFBQSxFQUFBO01BQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLFNBQUEsUUFBQSxLQUFBLE1BQUE7UUFDQSxJQUFBLE9BQUE7UUFDQSxJQUFBLFNBQUE7UUFDQSxRQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsTUFBQSxFQUFBO1VBQ0EsTUFBQSxFQUFBOzs7SUFHQSxJQUFBLE1BQUE7TUFDQSxJQUFBLEtBQUEsT0FBQTtNQUNBLFFBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLElBQUEsS0FBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsSUFBQTtRQUNBLE1BQUEsR0FBQSxLQUFBLE1BQUEsR0FBQTs7SUFFQSxPQUFBOzs7RUFHQSxTQUFBLDRCQUFBLFFBQUEsU0FBQTtJQUNBLElBQUEsV0FBQTtNQUNBLElBQUEsQ0FBQSxJQUFBLFdBQUE7TUFDQSxJQUFBLEtBQUEsT0FBQTtNQUNBLEtBQUEsT0FBQTtNQUNBLElBQUE7TUFDQSxJQUFBLE9BQUE7SUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO01BQ0EsS0FBQTtNQUNBLEtBQUE7TUFDQSxLQUFBLE9BQUE7TUFDQSxTQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUEsR0FBQTs7SUFFQSxPQUFBOzs7RUFHQSxTQUFBLGlCQUFBLFFBQUE7SUFDQSxJQUFBLE9BQUEsU0FBQSxHQUFBLE9BQUEsa0JBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxLQUFBLE9BQUE7TUFDQSxLQUFBLEdBQUE7TUFDQSxLQUFBLEdBQUE7TUFDQSxLQUFBLENBQUEsSUFBQSxJQUFBLElBQUEsQ0FBQSxLQUFBLE9BQUEsSUFBQTtNQUNBLEtBQUEsQ0FBQSxJQUFBLElBQUEsSUFBQSxHQUFBO01BQ0EsT0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsZ0JBQUEseUJBQUE7UUFDQSxLQUFBLGdCQUFBLHlCQUFBOztJQUVBLE9BQUEsS0FBQSxPQUFBLElBQUE7SUFDQSxPQUFBLEVBQUEsS0FBQSxHQUFBO01BQ0EsS0FBQSxPQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUEsS0FBQSxHQUFBO01BQ0EsR0FBQTtNQUNBLEdBQUEsS0FBQSxHQUFBO01BQ0EsdUJBQUEsTUFBQSxJQUFBOztJQUVBLE9BQUE7SUFDQSxLQUFBLEtBQUEsS0FBQTtJQUNBLE9BQUEsS0FBQSxLQUFBOzs7RUFHQSxTQUFBLHFCQUFBLFFBQUE7SUFDQSxJQUFBLE9BQUEsU0FBQSxHQUFBLE9BQUEsa0JBQUE7SUFDQSxJQUFBLE9BQUE7TUFDQSxJQUFBLENBQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxJQUFBLEtBQUEsQ0FBQTtNQUNBLEtBQUEsQ0FBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7TUFDQSxLQUFBLE9BQUE7TUFDQSxHQUFBLEtBQUEsR0FBQTtNQUNBLEdBQUEsS0FBQSxHQUFBOztJQUVBLEtBQUEsS0FBQSxnQkFBQSx5QkFBQSxNQUFBO01BQ0EsZ0JBQUEseUJBQUE7SUFDQSxFQUFBO0lBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtNQUNBLEtBQUEsT0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBLEtBQUEsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBLEtBQUEsR0FBQTtNQUNBLHVCQUFBLE1BQUEsSUFBQTs7SUFFQSxPQUFBLEtBQUEsS0FBQTs7O0VBR0EsU0FBQSx1QkFBQSxRQUFBO0lBQ0EsSUFBQSxNQUFBLElBQUEsQ0FBQTtNQUNBLElBQUEsT0FBQTtNQUNBLElBQUEsSUFBQTtNQUNBLElBQUEsS0FBQTtNQUNBLEtBQUE7SUFDQSxPQUFBLEVBQUEsSUFBQSxHQUFBO01BQ0EsS0FBQSxPQUFBLElBQUE7TUFDQSxHQUFBLEtBQUEsR0FBQTtNQUNBLEdBQUEsS0FBQSxHQUFBOztJQUVBLE9BQUEsQ0FBQSxnQkFBQSx5QkFBQSxLQUFBO01BQ0EsZ0JBQUEseUJBQUE7O0lBRUEsRUFBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7TUFDQSxLQUFBLE9BQUEsSUFBQTtNQUNBLEdBQUE7TUFDQSxHQUFBLEtBQUEsR0FBQTtNQUNBLEdBQUE7TUFDQSxHQUFBLEtBQUEsR0FBQTtNQUNBLHVCQUFBLE1BQUEsSUFBQTs7SUFFQSxPQUFBLEtBQUEsS0FBQTs7O0VBR0EsU0FBQSxrQkFBQSxRQUFBLFNBQUE7SUFDQSxJQUFBLElBQUEsT0FBQSxTQUFBO0lBQ0EsSUFBQSxHQUFBO01BQ0EsSUFBQSxLQUFBLE9BQUEsR0FBQTtRQUNBLEtBQUEsT0FBQSxHQUFBO1FBQ0EsS0FBQSxPQUFBLEdBQUEsS0FBQTtRQUNBLEtBQUEsT0FBQSxHQUFBLEtBQUE7UUFDQSxJQUFBLENBQUE7UUFDQSxHQUFBO01BQ0EsT0FBQSxFQUFBLEtBQUEsR0FBQTtRQUNBLElBQUEsT0FBQTtRQUNBLElBQUEsSUFBQTtRQUNBLEVBQUEsS0FBQSxVQUFBLEVBQUEsS0FBQSxDQUFBLElBQUEsWUFBQSxLQUFBLElBQUE7UUFDQSxFQUFBLEtBQUEsVUFBQSxFQUFBLEtBQUEsQ0FBQSxJQUFBLFlBQUEsS0FBQSxJQUFBOzs7SUFHQSxPQUFBLGlCQUFBOzs7RUFHQSxTQUFBLGdCQUFBLEdBQUEsR0FBQTtJQUNBLE9BQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUE7O0VBRUEsSUFBQSwwQkFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQTtJQUNBLDBCQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBO0lBQ0EsMEJBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQTs7RUFFQSxTQUFBLHVCQUFBLE1BQUEsR0FBQSxHQUFBO0lBQ0EsS0FBQSxLQUFBLEtBQUEsZ0JBQUEseUJBQUEsSUFBQTtNQUNBLGdCQUFBLHlCQUFBLElBQUEsS0FBQTtRQUNBLHlCQUFBLElBQUEsS0FBQTtRQUNBLHlCQUFBLElBQUEsS0FBQTtRQUNBLHlCQUFBLElBQUEsS0FBQTtRQUNBLHlCQUFBOzs7RUFHQSxTQUFBLGlCQUFBLElBQUEsSUFBQTtJQUNBLE9BQUEsQ0FBQSxHQUFBLEtBQUEsR0FBQSxPQUFBLEdBQUEsS0FBQSxHQUFBOzs7RUFHQSxTQUFBLDZCQUFBLFFBQUE7SUFDQSxJQUFBLElBQUE7TUFDQSxJQUFBLE9BQUEsU0FBQTtNQUNBLElBQUE7TUFDQSxLQUFBLE9BQUE7TUFDQSxLQUFBLE9BQUE7TUFDQSxJQUFBLEVBQUEsS0FBQSxpQkFBQSxJQUFBO0lBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtNQUNBLEVBQUEsS0FBQSxDQUFBLEtBQUEsSUFBQSxpQkFBQSxLQUFBLElBQUEsS0FBQSxPQUFBLElBQUEsUUFBQTs7SUFFQSxFQUFBLEtBQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLDRCQUFBLFFBQUE7SUFDQSxJQUFBLFdBQUE7TUFDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLElBQUEsNkJBQUE7TUFDQSxJQUFBLENBQUE7TUFDQSxJQUFBLE9BQUEsU0FBQTtJQUNBLE9BQUEsRUFBQSxJQUFBLEdBQUE7TUFDQSxJQUFBLGlCQUFBLE9BQUEsSUFBQSxPQUFBLElBQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxHQUFBO1FBQ0EsRUFBQSxLQUFBLEVBQUEsSUFBQSxLQUFBO2FBQ0E7UUFDQSxJQUFBLEVBQUEsS0FBQTtRQUNBLElBQUEsRUFBQSxJQUFBLEtBQUE7UUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxJQUFBLEdBQUE7VUFDQSxJQUFBLElBQUEsSUFBQSxLQUFBLEtBQUE7VUFDQSxFQUFBLEtBQUEsSUFBQTtVQUNBLEVBQUEsSUFBQSxLQUFBLElBQUE7Ozs7SUFJQSxJQUFBLENBQUE7SUFDQSxPQUFBLEVBQUEsS0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLE9BQUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxJQUFBLEtBQUEsT0FBQSxLQUFBLElBQUEsR0FBQSxJQUFBLElBQUE7U0FDQSxLQUFBLElBQUEsRUFBQSxLQUFBLEVBQUE7TUFDQSxTQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsRUFBQSxLQUFBLEtBQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSxvQkFBQSxRQUFBO0lBQ0EsT0FBQSxPQUFBLFNBQUEsSUFBQSxrQkFBQSxVQUFBLE9BQUE7TUFDQSxtQkFBQSxRQUFBLDRCQUFBOztFQUVBLEdBQUEsSUFBQSxLQUFBLFNBQUEsV0FBQTtJQUNBLElBQUEsT0FBQSxZQUFBO0lBQ0EsS0FBQSxTQUFBLEtBQUEsR0FBQSxPQUFBLEtBQUE7SUFDQSxLQUFBLFFBQUEsS0FBQSxHQUFBLE9BQUEsS0FBQTtJQUNBLE9BQUE7OztFQUdBLFNBQUEsa0JBQUEsUUFBQTtJQUNBLElBQUEsT0FBQSxJQUFBLENBQUE7TUFDQSxJQUFBLE9BQUE7TUFDQSxHQUFBO0lBQ0EsT0FBQSxFQUFBLElBQUEsR0FBQTtNQUNBLFFBQUEsT0FBQTtNQUNBLElBQUEsTUFBQTtNQUNBLElBQUEsTUFBQSxLQUFBO01BQ0EsTUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBO01BQ0EsTUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsWUFBQSxZQUFBO0lBQ0EsSUFBQSxLQUFBO01BQ0EsS0FBQTtNQUNBLEtBQUE7TUFDQSxLQUFBO01BQ0EsVUFBQTtNQUNBLGNBQUE7TUFDQSxpQkFBQSxZQUFBO01BQ0EscUJBQUE7TUFDQSxJQUFBO01BQ0EsVUFBQTs7SUFFQSxTQUFBLEtBQUEsTUFBQTtNQUNBLElBQUEsV0FBQTtRQUNBLFVBQUE7UUFDQSxVQUFBO1FBQ0EsSUFBQSxDQUFBO1FBQ0EsSUFBQSxLQUFBO1FBQ0EsR0FBQSxNQUFBLFdBQUE7UUFDQSxNQUFBLFdBQUE7UUFDQSxNQUFBLE9BQUEsS0FBQSxXQUFBO1VBQ0EsT0FBQTtZQUNBLFdBQUE7UUFDQSxNQUFBLE9BQUEsS0FBQSxXQUFBO1VBQ0EsT0FBQTtZQUNBLFdBQUE7UUFDQSxHQUFBOztNQUVBLFNBQUEsVUFBQTtRQUNBLFNBQUEsS0FBQSxLQUFBLFlBQUEsV0FBQSxVQUFBLFVBQUE7VUFDQSxtQkFBQSxXQUFBLFFBQUEsWUFBQSxVQUFBOzs7TUFHQSxPQUFBLEVBQUEsSUFBQSxHQUFBO1FBQ0EsSUFBQSxRQUFBLEtBQUEsTUFBQSxJQUFBLEtBQUEsSUFBQSxJQUFBO1VBQ0EsUUFBQSxLQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsS0FBQSxNQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsSUFBQSxLQUFBLE1BQUEsR0FBQTtVQUNBLFFBQUEsS0FBQSxDQUFBLENBQUEsSUFBQSxLQUFBLE1BQUEsR0FBQSxJQUFBLENBQUEsSUFBQSxLQUFBLE1BQUEsR0FBQTtlQUNBLElBQUEsUUFBQSxRQUFBO1VBQ0E7VUFDQSxVQUFBO1VBQ0EsVUFBQTs7O01BR0EsSUFBQSxRQUFBLFFBQUE7TUFDQSxPQUFBLFNBQUEsU0FBQSxTQUFBLEtBQUEsTUFBQTs7SUFFQSxLQUFBLElBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsS0FBQSxLQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLEtBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsS0FBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxLQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLEtBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsSUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsS0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxLQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLEtBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsS0FBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxVQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFVBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsY0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxJQUFBLE9BQUEsTUFBQSxZQUFBLGlCQUFBLGNBQUE7V0FDQSxpQkFBQSxDQUFBLGNBQUEseUJBQUEsSUFBQTtRQUNBLG1CQUFBO01BQ0EscUJBQUEsWUFBQSxXQUFBO01BQ0EsSUFBQSxZQUFBLFNBQUEsTUFBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxVQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFVBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUE7O0VBRUEsc0JBQUEsVUFBQTtFQUNBLHFCQUFBLFVBQUE7RUFDQSxHQUFBLElBQUEsT0FBQSxXQUFBO0lBQ0EsT0FBQSxZQUFBOztFQUVBLEdBQUEsSUFBQSxLQUFBLFNBQUEsV0FBQTtJQUNBLElBQUEsT0FBQSxZQUFBO0lBQ0EsS0FBQSxTQUFBLEtBQUEsR0FBQSxPQUFBLEtBQUE7SUFDQSxLQUFBLGNBQUEsS0FBQSxJQUFBLE9BQUEsS0FBQTtJQUNBLEtBQUEsY0FBQSxLQUFBLElBQUEsT0FBQSxLQUFBO0lBQ0EsS0FBQSxRQUFBLEtBQUEsR0FBQSxPQUFBLEtBQUE7SUFDQSxLQUFBLGFBQUEsS0FBQSxJQUFBLE9BQUEsS0FBQTtJQUNBLEtBQUEsV0FBQSxLQUFBLElBQUEsT0FBQSxLQUFBO0lBQ0EsT0FBQTs7RUFFQSxHQUFBLElBQUEsUUFBQSxXQUFBO0lBQ0EsSUFBQSxTQUFBO01BQ0EsU0FBQTtNQUNBLFNBQUE7TUFDQSxhQUFBO01BQ0EsV0FBQTs7SUFFQSxTQUFBLE1BQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLFNBQUEsTUFBQSxRQUFBLEdBQUE7UUFDQSxJQUFBLFNBQUEsTUFBQSxRQUFBLEdBQUE7TUFDQSxPQUFBLE1BQUEsRUFBQSxLQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLE9BQUEsR0FBQTtRQUNBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxNQUFBO1VBQ0EsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxPQUFBOzs7SUFHQSxTQUFBLFNBQUEsTUFBQSxHQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsV0FBQSxFQUFBLEtBQUEsTUFBQSxHQUFBO1FBQ0EsSUFBQSxPQUFBLEtBQUEsTUFBQSxVQUFBO1FBQ0EsS0FBQSxXQUFBLEtBQUEsTUFBQSxVQUFBLEtBQUE7UUFDQSxLQUFBLFNBQUEsS0FBQSxNQUFBLFVBQUEsS0FBQTtNQUNBLE9BQUE7UUFDQSxHQUFBO1FBQ0EsSUFBQTtRQUNBLElBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQTtRQUNBLElBQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBOzs7O0lBSUEsU0FBQSxPQUFBLEdBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQTs7O0lBR0EsU0FBQSxJQUFBLEdBQUEsR0FBQSxHQUFBO01BQ0EsT0FBQSxNQUFBLElBQUEsTUFBQSxJQUFBLFFBQUEsRUFBQSxJQUFBLEtBQUEsUUFBQTs7O0lBR0EsU0FBQSxNQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7TUFDQSxPQUFBLFdBQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFNBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGFBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxXQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLFdBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSxtQkFBQSxHQUFBO0lBQ0EsT0FBQSxFQUFBOztFQUVBLEdBQUEsSUFBQSxXQUFBLFdBQUE7SUFDQSxJQUFBLFNBQUE7TUFDQSxTQUFBO01BQ0EsYUFBQTs7SUFFQSxTQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxLQUFBLE9BQUEsS0FBQSxNQUFBLEdBQUE7UUFDQSxLQUFBLE9BQUEsS0FBQSxNQUFBLEdBQUE7UUFDQSxJQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQTtRQUNBLElBQUEsQ0FBQSxJQUFBO1VBQ0EsR0FBQSxHQUFBO1VBQ0EsR0FBQTtXQUNBO1VBQ0EsR0FBQSxHQUFBO1VBQ0EsR0FBQTtXQUNBO01BQ0EsSUFBQSxFQUFBLElBQUE7TUFDQSxPQUFBLE1BQUEsRUFBQSxLQUFBLE1BQUEsRUFBQSxLQUFBLE1BQUEsRUFBQSxLQUFBLE1BQUEsRUFBQTs7SUFFQSxTQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxTQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQSxXQUFBO01BQ0EsT0FBQTs7SUFFQSxTQUFBLGFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsYUFBQTtNQUNBLE9BQUE7O0lBRUEsT0FBQTs7O0VBR0EsU0FBQSwwQkFBQSxHQUFBO0lBQ0EsT0FBQSxDQUFBLEVBQUEsR0FBQSxFQUFBOztFQUVBLEdBQUEsSUFBQSxTQUFBLFNBQUEsV0FBQTtJQUNBLElBQUEsV0FBQSxHQUFBLElBQUE7TUFDQSxhQUFBO01BQ0EsY0FBQSxTQUFBO0lBQ0EsU0FBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsVUFBQSxTQUFBO1FBQ0EsZ0NBQUEsYUFBQSxNQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsZ0NBQUEsWUFBQTtJQUNBLE9BQUEsV0FBQTtNQUNBLElBQUEsSUFBQSxXQUFBLE1BQUEsTUFBQTtRQUNBLElBQUEsRUFBQTtRQUNBLElBQUEsRUFBQSxLQUFBO01BQ0EsT0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxLQUFBLElBQUE7OztFQUdBLEdBQUEsSUFBQSxTQUFBLFdBQUE7SUFDQSxJQUFBLE9BQUE7TUFDQSxPQUFBOztJQUVBLFNBQUEsT0FBQSxHQUFBLEdBQUE7TUFDQSxPQUFBLENBQUEsZUFBQSxJQUFBLEtBQUEsS0FBQSxNQUFBLEdBQUE7UUFDQSxxQkFBQSxLQUFBLEtBQUEsTUFBQSxHQUFBOztJQUVBLE9BQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxPQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxPQUFBLFdBQUE7TUFDQSxPQUFBOztJQUVBLE9BQUE7OztFQUdBLFNBQUEsb0JBQUE7SUFDQSxPQUFBOzs7RUFHQSxTQUFBLG9CQUFBO0lBQ0EsT0FBQTs7O0VBR0EsU0FBQSxvQkFBQSxNQUFBO0lBQ0EsSUFBQSxJQUFBLEtBQUEsS0FBQSxPQUFBO0lBQ0EsT0FBQSxRQUFBLElBQUEsTUFBQSxJQUFBLE1BQUEsSUFBQSxjQUFBLENBQUEsSUFBQSxNQUFBLElBQUE7TUFDQSxJQUFBLGNBQUEsSUFBQTs7RUFFQSxJQUFBLGlCQUFBLEdBQUEsSUFBQTtJQUNBLFFBQUE7SUFDQSxPQUFBLFNBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxLQUFBLEtBQUEsT0FBQSxLQUFBO01BQ0EsT0FBQSxNQUFBLENBQUEsSUFBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLElBQUE7UUFDQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLE1BQUEsSUFBQSxJQUFBLE1BQUEsSUFBQSxNQUFBLElBQUEsTUFBQSxJQUFBO1FBQ0EsTUFBQSxDQUFBLElBQUEsTUFBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLElBQUE7O0lBRUEsU0FBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLEtBQUEsS0FBQSxLQUFBLFFBQUEsSUFBQTtRQUNBLEtBQUEsS0FBQTtNQUNBLE9BQUEsUUFBQSxDQUFBLEtBQUEsTUFBQSxLQUFBLE9BQUEsUUFBQSxLQUFBLE1BQUEsQ0FBQTtRQUNBLE9BQUE7O0lBRUEsUUFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLElBQUEsS0FBQSxLQUFBLFFBQUE7TUFDQSxPQUFBLE1BQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLE1BQUEsSUFBQSxNQUFBLENBQUEsSUFBQSxNQUFBLElBQUE7UUFDQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLE1BQUEsSUFBQTs7SUFFQSxpQkFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLEtBQUEsS0FBQSxLQUFBLE9BQUE7UUFDQSxLQUFBLEtBQUEscUJBQUE7TUFDQSxPQUFBLFFBQUEsS0FBQSxNQUFBLEtBQUEsTUFBQSxDQUFBLEtBQUEsTUFBQSxDQUFBLEtBQUEsTUFBQTtRQUNBLEtBQUE7O0lBRUEsZUFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLEtBQUEsS0FBQSxLQUFBLE9BQUE7UUFDQSxLQUFBLEtBQUEscUJBQUE7TUFDQSxPQUFBLFFBQUEsQ0FBQSxLQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUEsTUFBQSxDQUFBLEtBQUEsTUFBQTtRQUNBOzs7RUFHQSxHQUFBLElBQUEsY0FBQSxlQUFBO0VBQ0EsSUFBQSxxQkFBQSxLQUFBLEtBQUE7SUFDQSxxQkFBQSxLQUFBLElBQUEsS0FBQTtFQUNBLHNCQUFBLGFBQUEsU0FBQSxNQUFBO0lBQ0EsSUFBQSxLQUFBLDBCQUFBLEVBQUE7TUFDQSxLQUFBLHVCQUFBO01BQ0EsWUFBQTtNQUNBLFVBQUEsTUFBQSxhQUFBLHdCQUFBO1FBQ0EsTUFBQSxLQUFBO1FBQ0EsTUFBQTtRQUNBLE9BQUE7UUFDQSxVQUFBOztJQUVBLEtBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxJQUFBLEtBQUEsUUFBQSxFQUFBLElBQUEsSUFBQTtNQUNBLFVBQUEsS0FBQSxXQUFBO01BQ0EsS0FBQSxJQUFBLFFBQUEsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxPQUFBLE1BQUEsSUFBQSxrQkFBQSxNQUFBLEdBQUEsSUFBQTtVQUNBO1FBQ0EsU0FBQSxLQUFBOzs7SUFHQSxPQUFBLGNBQUEsV0FBQSxJQUFBOztFQUVBLHNCQUFBLFlBQUEsU0FBQSxNQUFBO0lBQ0EsT0FBQSxLQUFBLEtBQUEsUUFBQSxPQUFBO01BQ0EseUJBQUEsdUJBQUE7O0VBRUEsSUFBQSx5QkFBQTtJQUNBOztFQUVBLFNBQUEseUJBQUEsSUFBQTtJQUNBLE9BQUEsV0FBQTtNQUNBLElBQUEsTUFBQTtNQUNBLElBQUEsQ0FBQSxPQUFBLEtBQUEsU0FBQSxTQUFBLEtBQUEsS0FBQSxVQUFBO1FBQ0EsSUFBQSxFQUFBLEtBQUEsT0FBQSxPQUFBLEtBQUEsS0FBQTthQUNBLE9BQUEsS0FBQTtRQUNBLEtBQUEsVUFBQTtRQUNBLE9BQUEsU0FBQSxPQUFBLE1BQUEsVUFBQSxLQUFBLE1BQUEsS0FBQTtVQUNBLE9BQUE7Ozs7O0VBS0EsU0FBQSxjQUFBLFFBQUEsSUFBQSxJQUFBO0lBQ0EsWUFBQSxRQUFBO0lBQ0EsT0FBQSxZQUFBO0lBQ0EsT0FBQSxLQUFBO0lBQ0EsT0FBQTs7RUFFQSxJQUFBLHlCQUFBO0lBQ0Esa0JBQUE7SUFDQSx3QkFBQTtFQUNBLHVCQUFBLE9BQUEsc0JBQUE7RUFDQSx1QkFBQSxRQUFBLHNCQUFBO0VBQ0EsdUJBQUEsT0FBQSxzQkFBQTtFQUNBLHVCQUFBLE9BQUEsc0JBQUE7RUFDQSxHQUFBLGFBQUEsU0FBQSxXQUFBLE1BQUE7SUFDQSxPQUFBLGFBQUEsVUFBQSxhQUFBO01BQ0EsVUFBQSxXQUFBLFFBQUEsWUFBQSxpQkFBQTtRQUNBOztFQUVBLEdBQUEsV0FBQSxZQUFBO0VBQ0EsdUJBQUEsU0FBQSxTQUFBLFVBQUE7SUFDQSxJQUFBLEtBQUEsS0FBQTtNQUNBLEtBQUEsS0FBQTtNQUNBLFlBQUE7TUFDQSxVQUFBLFNBQUE7SUFDQSxXQUFBLHNCQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO01BQ0EsVUFBQSxLQUFBLFdBQUE7TUFDQSxLQUFBLElBQUEsUUFBQSxLQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxNQUFBLFFBQUEsRUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLENBQUEsT0FBQSxNQUFBLFFBQUEsVUFBQSxTQUFBLEtBQUEsTUFBQSxLQUFBO1lBQ0EsR0FBQSxLQUFBO1VBQ0EsSUFBQSxjQUFBLE1BQUEsUUFBQSxXQUFBLEtBQUE7VUFDQSxrQkFBQSxTQUFBLEdBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQTtVQUNBLFNBQUEsS0FBQTtlQUNBO1VBQ0EsU0FBQSxLQUFBOzs7O0lBSUEsT0FBQSxjQUFBLFdBQUEsSUFBQTs7RUFFQSx1QkFBQSxZQUFBLFNBQUEsVUFBQTtJQUNBLElBQUEsS0FBQSxLQUFBO01BQ0EsS0FBQSxLQUFBO01BQ0EsWUFBQTtNQUNBLFVBQUEsVUFBQSxNQUFBLFNBQUE7SUFDQSxXQUFBLHlCQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO01BQ0EsS0FBQSxJQUFBLFFBQUEsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO1FBQ0EsSUFBQSxPQUFBLE1BQUEsSUFBQTtVQUNBLGFBQUEsS0FBQSxJQUFBO1VBQ0EsV0FBQSxTQUFBLEtBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQTtVQUNBLFVBQUEsS0FBQSxXQUFBO1VBQ0EsS0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsU0FBQSxRQUFBLEVBQUEsSUFBQSxJQUFBO1lBQ0EsSUFBQSxVQUFBLFNBQUEsSUFBQSxrQkFBQSxTQUFBLEdBQUE7Y0FDQSxJQUFBO1lBQ0EsU0FBQSxLQUFBOzs7OztJQUtBLE9BQUEsY0FBQSxXQUFBLElBQUE7O0VBRUEsdUJBQUEsU0FBQSxTQUFBLFFBQUE7SUFDQSxJQUFBLFlBQUE7TUFDQSxVQUFBLE9BQUE7SUFDQSxJQUFBLE9BQUEsV0FBQSxZQUFBLFNBQUEsb0JBQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsS0FBQSxRQUFBLElBQUEsR0FBQSxLQUFBO01BQ0EsVUFBQSxLQUFBLFdBQUE7TUFDQSxLQUFBLElBQUEsUUFBQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxRQUFBLElBQUEsR0FBQSxLQUFBO1FBQ0EsSUFBQSxDQUFBLE9BQUEsTUFBQSxPQUFBLE9BQUEsS0FBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLElBQUE7VUFDQSxTQUFBLEtBQUE7Ozs7SUFJQSxPQUFBLGNBQUEsV0FBQSxLQUFBLFdBQUEsS0FBQTs7RUFFQSx1QkFBQSxRQUFBLFNBQUEsTUFBQSxPQUFBO0lBQ0EsSUFBQSxLQUFBLEtBQUE7TUFDQSxLQUFBLEtBQUE7SUFDQSxJQUFBLFVBQUEsU0FBQSxHQUFBLE9BQUEsS0FBQSxPQUFBLElBQUEsSUFBQSxNQUFBLElBQUE7SUFDQSxPQUFBLGtCQUFBLE1BQUEsU0FBQSxPQUFBLFNBQUEsTUFBQTtNQUNBLEtBQUEsSUFBQSxJQUFBLE1BQUEsT0FBQTtRQUNBLFNBQUEsTUFBQTtNQUNBLEtBQUEsSUFBQSxJQUFBLE1BQUEsSUFBQSxNQUFBOzs7O0VBSUEsU0FBQSxvQkFBQSxRQUFBLE1BQUEsT0FBQSxPQUFBO0lBQ0EsSUFBQSxLQUFBLE9BQUE7TUFDQSxLQUFBLE9BQUE7SUFDQSxPQUFBLGtCQUFBLFFBQUEsT0FBQSxVQUFBLGFBQUE7TUFDQSxNQUFBLEdBQUEsR0FBQTtNQUNBLEtBQUEsSUFBQSxJQUFBLE1BQUEsSUFBQSxNQUFBLE1BQUEsTUFBQSxLQUFBLE1BQUEsS0FBQTtRQUNBLEdBQUE7U0FDQSxRQUFBLE1BQUEsUUFBQSxTQUFBLE1BQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxNQUFBLElBQUEsTUFBQTs7O0VBR0EsdUJBQUEsT0FBQSxTQUFBLFFBQUEsT0FBQTtJQUNBLElBQUEsVUFBQSxTQUFBLEdBQUE7TUFDQSxLQUFBLFNBQUEsUUFBQSxLQUFBLEtBQUEsT0FBQSxPQUFBO01BQ0EsT0FBQTs7SUFFQSxJQUFBLGNBQUEsVUFBQSxjQUFBO01BQ0E7TUFDQSxPQUFBLEdBQUEsR0FBQSxRQUFBOztJQUVBLFNBQUEsV0FBQTtNQUNBLEtBQUEsZ0JBQUE7OztJQUdBLFNBQUEsYUFBQTtNQUNBLEtBQUEsa0JBQUEsS0FBQSxPQUFBLEtBQUE7OztJQUdBLFNBQUEsVUFBQSxHQUFBO01BQ0EsT0FBQSxLQUFBLE9BQUEsWUFBQSxLQUFBLElBQUEsV0FBQTtRQUNBLElBQUEsSUFBQSxLQUFBLGFBQUE7VUFDQTtRQUNBLE9BQUEsTUFBQSxNQUFBLElBQUEsWUFBQSxHQUFBLElBQUEsU0FBQSxHQUFBO1VBQ0EsS0FBQSxhQUFBLE1BQUEsRUFBQTs7Ozs7SUFLQSxTQUFBLFlBQUEsR0FBQTtNQUNBLE9BQUEsS0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLFdBQUE7UUFDQSxJQUFBLElBQUEsS0FBQSxlQUFBLEtBQUEsT0FBQSxLQUFBO1VBQ0E7UUFDQSxPQUFBLE1BQUEsTUFBQSxJQUFBLFlBQUEsR0FBQSxJQUFBLFNBQUEsR0FBQTtVQUNBLEtBQUEsZUFBQSxLQUFBLE9BQUEsS0FBQSxPQUFBLEVBQUE7Ozs7SUFJQSxPQUFBLG9CQUFBLE1BQUEsVUFBQSxRQUFBLE9BQUEsS0FBQTtNQUNBLGNBQUE7O0VBRUEsdUJBQUEsWUFBQSxTQUFBLFFBQUEsT0FBQTtJQUNBLElBQUEsT0FBQSxHQUFBLEdBQUEsUUFBQTs7SUFFQSxTQUFBLFVBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLE1BQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxLQUFBLGFBQUE7TUFDQSxPQUFBLEtBQUEsU0FBQSxHQUFBO1FBQ0EsS0FBQSxhQUFBLE1BQUEsRUFBQTs7OztJQUlBLFNBQUEsWUFBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsTUFBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLEtBQUEsZUFBQSxLQUFBLE9BQUE7U0FDQTtNQUNBLE9BQUEsS0FBQSxTQUFBLEdBQUE7UUFDQSxLQUFBLGVBQUEsS0FBQSxPQUFBLEtBQUEsT0FBQSxFQUFBOzs7SUFHQSxPQUFBLEtBQUEsTUFBQSxVQUFBLFFBQUEsS0FBQSxRQUFBO01BQ0E7O0VBRUEsdUJBQUEsUUFBQSxTQUFBLE1BQUEsT0FBQSxVQUFBO0lBQ0EsSUFBQSxJQUFBLFVBQUE7SUFDQSxJQUFBLElBQUEsR0FBQTtNQUNBLElBQUEsT0FBQSxTQUFBLFVBQUE7UUFDQSxJQUFBLElBQUEsR0FBQSxRQUFBO1FBQ0EsS0FBQSxZQUFBLE1BQUEsS0FBQSxNQUFBLFVBQUEsS0FBQSxXQUFBO1FBQ0EsT0FBQTs7TUFFQSxXQUFBOzs7SUFHQSxTQUFBLFlBQUE7TUFDQSxLQUFBLE1BQUEsZUFBQTs7O0lBR0EsU0FBQSxZQUFBLEdBQUE7TUFDQSxPQUFBLEtBQUEsT0FBQSxhQUFBLEtBQUEsSUFBQSxXQUFBO1FBQ0EsSUFBQSxJQUFBLFVBQUEsaUJBQUEsTUFBQSxNQUFBO1lBQ0E7VUFDQTtRQUNBLE9BQUEsTUFBQSxNQUFBLElBQUEsZUFBQSxHQUFBLElBQUEsU0FBQSxHQUFBO1VBQ0EsS0FBQSxNQUFBLFlBQUEsTUFBQSxFQUFBLElBQUE7Ozs7SUFJQSxPQUFBLG9CQUFBLE1BQUEsV0FBQSxNQUFBLE9BQUE7O0VBRUEsdUJBQUEsYUFBQSxTQUFBLE1BQUEsT0FBQSxVQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQSxXQUFBOztJQUVBLFNBQUEsV0FBQSxHQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsTUFBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLFVBQUEsaUJBQUE7UUFDQSxNQUFBLGlCQUFBO01BQ0EsT0FBQSxLQUFBLFNBQUEsR0FBQTtRQUNBLEtBQUEsTUFBQSxZQUFBLE1BQUEsRUFBQSxJQUFBOzs7SUFHQSxPQUFBLEtBQUEsTUFBQSxXQUFBLE1BQUE7O0VBRUEsdUJBQUEsT0FBQSxTQUFBLE9BQUE7SUFDQSxPQUFBLG9CQUFBLE1BQUEsUUFBQSxPQUFBOzs7RUFHQSxTQUFBLG1CQUFBLEdBQUE7SUFDQSxJQUFBLEtBQUEsTUFBQSxJQUFBO0lBQ0EsT0FBQSxXQUFBO01BQ0EsS0FBQSxjQUFBOzs7RUFHQSx1QkFBQSxTQUFBLFdBQUE7SUFDQSxJQUFBLEtBQUEsS0FBQTtJQUNBLE9BQUEsS0FBQSxLQUFBLGtCQUFBLFdBQUE7TUFDQSxJQUFBO01BQ0EsSUFBQSxLQUFBLElBQUEsUUFBQSxNQUFBLElBQUEsS0FBQSxhQUFBLEVBQUE7UUFDQTs7O0VBR0EsdUJBQUEsT0FBQSxTQUFBLE9BQUE7SUFDQSxJQUFBLEtBQUEsS0FBQTtNQUNBLEtBQUEsS0FBQTtJQUNBLElBQUEsVUFBQSxTQUFBLEdBQUEsT0FBQSxLQUFBLE9BQUEsSUFBQSxJQUFBO0lBQ0EsSUFBQSxPQUFBLFVBQUEsWUFBQSxRQUFBLEdBQUEsS0FBQSxNQUFBLElBQUE7SUFDQSxPQUFBLGtCQUFBLE1BQUEsU0FBQSxNQUFBO01BQ0EsS0FBQSxJQUFBLElBQUEsT0FBQTs7O0VBR0EsdUJBQUEsUUFBQSxTQUFBLE9BQUE7SUFDQSxJQUFBLEtBQUEsS0FBQTtNQUNBLEtBQUEsS0FBQTtJQUNBLElBQUEsVUFBQSxTQUFBLEdBQUEsT0FBQSxLQUFBLE9BQUEsSUFBQSxJQUFBO0lBQ0EsT0FBQSxrQkFBQSxNQUFBLE9BQUEsVUFBQSxhQUFBO01BQ0EsTUFBQSxHQUFBLEdBQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxRQUFBLENBQUEsTUFBQSxLQUFBLE1BQUEsS0FBQSxVQUFBLEdBQUE7U0FDQSxRQUFBLENBQUEsT0FBQSxTQUFBLE1BQUE7TUFDQSxLQUFBLElBQUEsSUFBQSxRQUFBOzs7RUFHQSx1QkFBQSxXQUFBLFNBQUEsT0FBQTtJQUNBLElBQUEsS0FBQSxLQUFBO01BQ0EsS0FBQSxLQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQSxPQUFBLEtBQUEsT0FBQSxJQUFBLElBQUE7SUFDQSxPQUFBLGtCQUFBLE1BQUEsT0FBQSxVQUFBLGFBQUE7TUFDQSxNQUFBLEdBQUEsR0FBQTtNQUNBLEtBQUEsSUFBQSxJQUFBLFdBQUEsS0FBQSxJQUFBLEdBQUEsTUFBQSxLQUFBLE1BQUEsS0FBQTtRQUNBLEdBQUE7U0FDQSxRQUFBLEtBQUEsSUFBQSxHQUFBLFFBQUEsU0FBQSxNQUFBO01BQ0EsS0FBQSxJQUFBLElBQUEsV0FBQTs7O0VBR0EsdUJBQUEsT0FBQSxTQUFBLE1BQUEsVUFBQTtJQUNBLElBQUEsS0FBQSxLQUFBO01BQ0EsS0FBQSxLQUFBO0lBQ0EsSUFBQSxVQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsVUFBQTtRQUNBLFlBQUE7TUFDQSxJQUFBO1FBQ0EseUJBQUE7UUFDQSxrQkFBQSxNQUFBLFNBQUEsTUFBQSxHQUFBLEdBQUE7VUFDQSx1QkFBQSxLQUFBLElBQUE7VUFDQSxLQUFBLEtBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQTs7Z0JBRUE7UUFDQSx1QkFBQTtRQUNBLHlCQUFBOztXQUVBO01BQ0Esa0JBQUEsTUFBQSxTQUFBLE1BQUE7UUFDQSxJQUFBLGFBQUEsS0FBQSxJQUFBO1FBQ0EsQ0FBQSxXQUFBLFVBQUEsV0FBQSxRQUFBLEdBQUEsU0FBQTtVQUNBLE9BQUEsZUFBQSxHQUFBLE1BQUE7OztJQUdBLE9BQUE7O0VBRUEsdUJBQUEsYUFBQSxXQUFBO0lBQ0EsSUFBQSxNQUFBLEtBQUE7TUFDQSxNQUFBLEVBQUE7TUFDQSxLQUFBLEtBQUE7TUFDQSxZQUFBO01BQ0EsVUFBQSxPQUFBLE1BQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsS0FBQSxRQUFBLElBQUEsR0FBQSxLQUFBO01BQ0EsVUFBQSxLQUFBLFdBQUE7TUFDQSxLQUFBLElBQUEsUUFBQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxRQUFBLElBQUEsR0FBQSxLQUFBO1FBQ0EsSUFBQSxPQUFBLE1BQUEsSUFBQTtVQUNBLGFBQUEsS0FBQSxJQUFBO1VBQ0Esa0JBQUEsTUFBQSxHQUFBLElBQUEsS0FBQTtZQUNBLE1BQUEsV0FBQTtZQUNBLE1BQUEsV0FBQTtZQUNBLE9BQUEsV0FBQSxRQUFBLFdBQUE7WUFDQSxVQUFBLFdBQUE7OztRQUdBLFNBQUEsS0FBQTs7O0lBR0EsT0FBQSxjQUFBLFdBQUEsSUFBQTs7O0VBR0EsU0FBQSx1QkFBQSxNQUFBO0lBQ0EsT0FBQSxRQUFBLE9BQUEsbUJBQUEsa0JBQUEsT0FBQTs7O0VBR0EsU0FBQSxrQkFBQSxNQUFBLEdBQUEsSUFBQSxJQUFBLFNBQUE7SUFDQSxJQUFBLE9BQUEsS0FBQSxRQUFBLEtBQUEsTUFBQTtRQUNBLFFBQUE7UUFDQSxPQUFBOztNQUVBLGFBQUEsS0FBQTtJQUNBLElBQUEsQ0FBQSxZQUFBO01BQ0EsSUFBQSxPQUFBLFFBQUE7TUFDQSxhQUFBLEtBQUEsTUFBQTtRQUNBLE9BQUEsSUFBQTtRQUNBLE1BQUE7UUFDQSxPQUFBLFFBQUE7UUFDQSxVQUFBLFFBQUE7UUFDQSxNQUFBLFFBQUE7UUFDQSxPQUFBOztNQUVBLFVBQUE7TUFDQSxFQUFBLEtBQUE7TUFDQSxHQUFBLE1BQUEsU0FBQSxTQUFBO1FBQ0EsSUFBQSxRQUFBLFdBQUE7VUFDQSxVQUFBLE1BQUEsUUFBQTtVQUNBLFVBQUE7UUFDQSxNQUFBLElBQUEsUUFBQTtRQUNBLElBQUEsU0FBQSxTQUFBLE9BQUEsTUFBQSxVQUFBO1FBQ0EsTUFBQSxJQUFBOztRQUVBLFNBQUEsTUFBQSxTQUFBO1VBQ0EsSUFBQSxLQUFBLFNBQUEsSUFBQSxPQUFBO1VBQ0EsSUFBQSxTQUFBLEtBQUEsS0FBQTtVQUNBLElBQUEsUUFBQTtZQUNBLEVBQUEsS0FBQTtZQUNBLE9BQUEsS0FBQSxLQUFBO1lBQ0EsT0FBQSxTQUFBLE9BQUEsTUFBQSxVQUFBLEtBQUEsTUFBQSxLQUFBO2NBQ0EsT0FBQTs7VUFFQSxLQUFBLFNBQUE7VUFDQSxXQUFBLFNBQUEsV0FBQSxNQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUE7WUFDQTtVQUNBLFdBQUEsTUFBQSxRQUFBLFNBQUEsS0FBQSxPQUFBO1lBQ0EsSUFBQSxRQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUEsVUFBQSxJQUFBO2NBQ0EsUUFBQSxLQUFBOzs7VUFHQSxPQUFBLFdBQUE7VUFDQSxXQUFBLFdBQUE7VUFDQSxHQUFBLE1BQUEsV0FBQTtZQUNBLE1BQUEsSUFBQSxLQUFBLFdBQUEsS0FBQSxVQUFBO1lBQ0EsT0FBQTthQUNBLEdBQUE7OztRQUdBLFNBQUEsS0FBQSxTQUFBO1VBQ0EsSUFBQSxLQUFBLFdBQUEsSUFBQSxPQUFBO1VBQ0EsSUFBQSxJQUFBLFVBQUE7WUFDQSxJQUFBLEtBQUE7WUFDQSxJQUFBLFFBQUE7VUFDQSxPQUFBLElBQUEsR0FBQTtZQUNBLFFBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQTs7VUFFQSxJQUFBLEtBQUEsR0FBQTtZQUNBLFdBQUEsU0FBQSxXQUFBLE1BQUEsSUFBQSxLQUFBLE1BQUEsS0FBQTtjQUNBO1lBQ0EsT0FBQTs7OztRQUlBLFNBQUEsT0FBQTtVQUNBLElBQUEsRUFBQSxLQUFBLE9BQUEsT0FBQSxLQUFBO2VBQ0EsT0FBQSxLQUFBO1VBQ0EsT0FBQTs7U0FFQSxHQUFBOzs7RUFHQSxHQUFBLElBQUEsT0FBQSxXQUFBO0lBQ0EsSUFBQSxRQUFBLEdBQUEsTUFBQTtNQUNBLFNBQUE7TUFDQSxnQkFBQTtNQUNBLGdCQUFBO01BQ0EsY0FBQTtNQUNBLGlCQUFBLENBQUE7TUFDQSxhQUFBO01BQ0E7O0lBRUEsU0FBQSxLQUFBLEdBQUE7TUFDQSxFQUFBLEtBQUEsV0FBQTtRQUNBLElBQUEsSUFBQSxHQUFBLE9BQUE7UUFDQSxJQUFBLFNBQUEsS0FBQSxhQUFBO1VBQ0EsU0FBQSxLQUFBLFlBQUEsTUFBQTtRQUNBLElBQUEsUUFBQSxjQUFBLE9BQUEsT0FBQSxRQUFBLE9BQUEsTUFBQTtZQUNBLFFBQUEsa0JBQUEsT0FBQSxXQUFBO1VBQ0EsYUFBQSxlQUFBLE9BQUEsT0FBQTtVQUNBLE9BQUEsV0FBQSxNQUFBLFFBQUE7VUFDQSxjQUFBO1VBQ0EsT0FBQSxFQUFBLFVBQUEsU0FBQSxLQUFBLE9BQUE7VUFDQSxZQUFBLEtBQUEsUUFBQSxPQUFBLEtBQUEsV0FBQTtZQUNBLFNBQUEsUUFBQSxNQUFBLFdBQUE7VUFDQSxXQUFBLEdBQUEsV0FBQSxLQUFBLFFBQUEsTUFBQSxXQUFBLEdBQUE7VUFDQSxhQUFBLEdBQUEsV0FBQSxLQUFBLFNBQUEsTUFBQSxXQUFBO1VBQ0EsY0FBQSxLQUFBLElBQUEsZUFBQSxLQUFBO1VBQ0E7UUFDQSxJQUFBLFFBQUEsY0FBQTtVQUNBLE9BQUEsRUFBQSxVQUFBLFdBQUEsS0FBQSxDQUFBO1VBQ0EsY0FBQSxLQUFBLFFBQUEsT0FBQSxRQUFBLEtBQUE7Y0FDQTtZQUNBLEdBQUEsV0FBQTtRQUNBLFVBQUEsT0FBQTtRQUNBLFVBQUEsT0FBQTtRQUNBLElBQUEsWUFBQSxVQUFBLE9BQUE7VUFDQSxhQUFBLFdBQUEsT0FBQTtVQUNBLE9BQUEsS0FBQSxPQUFBLFFBQUEsS0FBQTtVQUNBLFlBQUEsVUFBQSxPQUFBO1VBQ0EsYUFBQSxXQUFBLE9BQUE7VUFDQSxPQUFBLFdBQUEsU0FBQSxXQUFBLFNBQUEsQ0FBQSxJQUFBO1VBQ0EsSUFBQSxJQUFBLElBQUE7UUFDQSxJQUFBLFdBQUEsWUFBQSxXQUFBLE9BQUE7VUFDQSxnQkFBQSxjQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQTtZQUNBLEtBQUE7VUFDQSxLQUFBLEtBQUEsTUFBQSxPQUFBLElBQUEsUUFBQSxTQUFBO1lBQ0EsZUFBQTtVQUNBLFdBQUEsS0FBQSxLQUFBLE1BQUEsTUFBQSxLQUFBLE1BQUE7WUFDQSxnQkFBQSxRQUFBLE1BQUEsS0FBQSxNQUFBO1lBQ0E7ZUFDQTtVQUNBLGdCQUFBLGNBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO1lBQ0EsS0FBQTtVQUNBLEtBQUEsS0FBQSxNQUFBLFNBQUEsTUFBQSxlQUFBLE9BQUE7WUFDQSxRQUFBO1VBQ0EsV0FBQSxLQUFBLEtBQUEsTUFBQSxPQUFBLGdCQUFBO1lBQ0EsTUFBQSxLQUFBLFFBQUEsTUFBQSxLQUFBLE1BQUE7WUFDQTs7UUFFQSxVQUFBLEtBQUEsSUFBQSxPQUFBO1FBQ0EsVUFBQSxLQUFBLElBQUEsT0FBQTtRQUNBLFdBQUEsS0FBQSxJQUFBLEdBQUEsS0FBQSxJQUFBLE9BQUE7UUFDQSxXQUFBLEtBQUEsSUFBQSxHQUFBLEtBQUEsSUFBQSxPQUFBO1FBQ0EsSUFBQSxPQUFBLFdBQUE7VUFDQSxJQUFBLElBQUE7WUFDQSxLQUFBLEVBQUEsY0FBQTtVQUNBLFNBQUEsU0FBQSxTQUFBLEdBQUE7WUFDQSxPQUFBLEVBQUEsS0FBQTs7ZUFFQSxJQUFBLE9BQUEsV0FBQTtVQUNBLFNBQUE7ZUFDQTtVQUNBLFNBQUEsS0FBQSxlQUFBLFFBQUE7O1FBRUEsVUFBQSxLQUFBLGVBQUEsUUFBQTtRQUNBLFdBQUEsS0FBQSxlQUFBLFFBQUE7OztJQUdBLEtBQUEsUUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsU0FBQSxLQUFBLHFCQUFBLElBQUE7UUFDQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxRQUFBLFdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxpQkFBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxhQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGFBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsYUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxjQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLFdBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxJQUFBLFVBQUE7TUFDQSxJQUFBLENBQUEsR0FBQSxPQUFBO01BQ0EsZ0JBQUEsQ0FBQTtNQUNBLGdCQUFBLENBQUEsVUFBQSxJQUFBO01BQ0EsT0FBQTs7SUFFQSxLQUFBLGdCQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGdCQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLEtBQUEsZ0JBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsZ0JBQUEsQ0FBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxjQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLGNBQUEsQ0FBQTtNQUNBLE9BQUE7O0lBRUEsS0FBQSxnQkFBQSxXQUFBO01BQ0EsT0FBQSxVQUFBLFVBQUE7O0lBRUEsT0FBQTs7RUFFQSxJQUFBLDJCQUFBO0lBQ0EscUJBQUE7TUFDQSxLQUFBO01BQ0EsT0FBQTtNQUNBLFFBQUE7TUFDQSxNQUFBOzs7RUFHQSxTQUFBLGFBQUEsV0FBQSxJQUFBLElBQUE7SUFDQSxVQUFBLEtBQUEsYUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLEtBQUEsR0FBQTtNQUNBLE9BQUEsZ0JBQUEsU0FBQSxNQUFBLEtBQUEsR0FBQSxNQUFBOzs7O0VBSUEsU0FBQSxhQUFBLFdBQUEsSUFBQSxJQUFBO0lBQ0EsVUFBQSxLQUFBLGFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxLQUFBLEdBQUE7TUFDQSxPQUFBLGtCQUFBLFNBQUEsTUFBQSxLQUFBLEdBQUEsTUFBQTs7O0VBR0EsR0FBQSxJQUFBLFFBQUEsV0FBQTtJQUNBLElBQUEsUUFBQSxpQkFBQSxPQUFBLGNBQUEsU0FBQTtNQUNBLElBQUE7TUFDQSxJQUFBO01BQ0EsVUFBQSxDQUFBLEdBQUE7TUFDQSxVQUFBLENBQUEsR0FBQTtNQUNBLGVBQUEsZUFBQSxTQUFBO01BQ0EsU0FBQTtNQUNBLFVBQUEsb0JBQUE7O0lBRUEsU0FBQSxNQUFBLEdBQUE7TUFDQSxFQUFBLEtBQUEsV0FBQTtRQUNBLElBQUEsSUFBQSxHQUFBLE9BQUEsTUFBQSxNQUFBLGtCQUFBLE9BQUE7VUFDQSwrQkFBQSxpQkFBQTtVQUNBLG1CQUFBLFlBQUEsR0FBQTtVQUNBO1FBQ0EsSUFBQSxhQUFBLEVBQUEsVUFBQSxlQUFBLEtBQUEsQ0FBQTtRQUNBLFdBQUEsUUFBQSxPQUFBLFFBQUEsS0FBQSxTQUFBO1dBQ0EsTUFBQSxjQUFBLFVBQUEsTUFBQSxVQUFBO1FBQ0EsRUFBQSxVQUFBLFdBQUEsS0FBQSxDQUFBLElBQUEsUUFBQSxPQUFBLFFBQUE7VUFDQSxTQUFBLFVBQUEsTUFBQSxVQUFBO1FBQ0EsSUFBQSxTQUFBLEVBQUEsVUFBQSxXQUFBLEtBQUEsU0FBQTtRQUNBLE9BQUEsT0FBQTtRQUNBLE9BQUEsUUFBQSxPQUFBLEtBQUEsS0FBQSxTQUFBLFNBQUEsR0FBQTtVQUNBLE9BQUEsWUFBQTtXQUNBLE1BQUEsVUFBQSxTQUFBLEdBQUE7VUFDQSxPQUFBLG1CQUFBO1dBQ0EsT0FBQSxRQUFBLEtBQUEsS0FBQSxTQUFBLEdBQUE7VUFDQSxPQUFBLFFBQUEsS0FBQSxLQUFBLENBQUEsSUFBQTtXQUNBLEtBQUEsS0FBQSxTQUFBLEdBQUE7VUFDQSxPQUFBLFFBQUEsS0FBQSxLQUFBLENBQUEsSUFBQTtXQUNBLEtBQUEsU0FBQSxHQUFBLEtBQUEsVUFBQSxHQUFBLE1BQUE7VUFDQTtRQUNBLE9BQUEsTUFBQSxXQUFBLE1BQUEsVUFBQSxTQUFBO1FBQ0EsSUFBQSxVQUFBLEdBQUEsV0FBQTtVQUNBLG1CQUFBLEdBQUEsV0FBQTtVQUNBO1FBQ0EsSUFBQSxHQUFBO1VBQ0EsUUFBQSxjQUFBO1VBQ0EsaUJBQUEsS0FBQSxLQUFBLE1BQUEsSUFBQSxLQUFBLFNBQUEsTUFBQTtZQUNBLE1BQUE7VUFDQSxRQUFBOztRQUVBLElBQUEsR0FBQTtVQUNBLFFBQUEsY0FBQTtVQUNBLGlCQUFBLEtBQUEsS0FBQSxNQUFBLElBQUEsS0FBQSxVQUFBLE1BQUE7WUFDQSxNQUFBO1VBQ0EsUUFBQTs7UUFFQSxPQUFBOzs7SUFHQSxNQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsRUFBQSxLQUFBLFdBQUE7UUFDQSxJQUFBLFNBQUEsTUFBQSxHQUFBLE1BQUE7VUFDQSxVQUFBO1lBQ0EsR0FBQTtZQUNBLEdBQUE7WUFDQSxHQUFBO1lBQ0EsR0FBQTs7VUFFQSxVQUFBLEtBQUEsYUFBQTtRQUNBLEtBQUEsWUFBQTtRQUNBLElBQUEsd0JBQUE7VUFDQSxHQUFBLE9BQUEsTUFBQSxhQUFBLEtBQUEsZUFBQSxXQUFBO1lBQ0EsZ0JBQUEsUUFBQTtZQUNBLGdCQUFBLFFBQUE7WUFDQSxVQUFBLFFBQUE7WUFDQSxVQUFBLFFBQUE7WUFDQSxPQUFBO2NBQ0EsTUFBQTs7YUFFQSxNQUFBLGVBQUEsV0FBQTtZQUNBLElBQUEsS0FBQSxvQkFBQSxTQUFBLFFBQUE7Y0FDQSxLQUFBLG9CQUFBLFNBQUEsUUFBQTtZQUNBLGdCQUFBLGdCQUFBO1lBQ0EsT0FBQSxTQUFBLEdBQUE7Y0FDQSxVQUFBLFFBQUEsSUFBQSxHQUFBO2NBQ0EsVUFBQSxRQUFBLElBQUEsR0FBQTtjQUNBLE9BQUE7Z0JBQ0EsTUFBQTtnQkFDQSxNQUFBOzs7YUFHQSxLQUFBLGFBQUEsV0FBQTtZQUNBLGdCQUFBLFFBQUE7WUFDQSxnQkFBQSxRQUFBO1lBQ0EsT0FBQTtjQUNBLE1BQUE7Y0FDQSxNQUFBOztZQUVBLE9BQUE7Y0FDQSxNQUFBOzs7ZUFHQTtVQUNBLE9BQUE7WUFDQSxNQUFBOztVQUVBLE9BQUE7WUFDQSxNQUFBO1lBQ0EsTUFBQTs7VUFFQSxPQUFBO1lBQ0EsTUFBQTs7Ozs7O0lBTUEsU0FBQSxPQUFBLEdBQUE7TUFDQSxFQUFBLFVBQUEsV0FBQSxLQUFBLGFBQUEsU0FBQSxHQUFBO1FBQ0EsT0FBQSxlQUFBLFFBQUEsQ0FBQSxLQUFBLEtBQUEsTUFBQSxNQUFBLFFBQUE7VUFDQSxLQUFBLEtBQUEsTUFBQTs7OztJQUlBLFNBQUEsUUFBQSxHQUFBO01BQ0EsRUFBQSxPQUFBLFdBQUEsS0FBQSxLQUFBLFFBQUE7TUFDQSxFQUFBLFVBQUEsMkJBQUEsS0FBQSxTQUFBLFFBQUE7UUFDQSxRQUFBOzs7SUFHQSxTQUFBLFFBQUEsR0FBQTtNQUNBLEVBQUEsT0FBQSxXQUFBLEtBQUEsS0FBQSxRQUFBO01BQ0EsRUFBQSxVQUFBLDJCQUFBLEtBQUEsVUFBQSxRQUFBO1FBQ0EsUUFBQTs7O0lBR0EsU0FBQSxhQUFBO01BQ0EsSUFBQSxTQUFBO1FBQ0EsY0FBQSxHQUFBLE9BQUEsR0FBQSxNQUFBO1FBQ0EsU0FBQSxNQUFBLEdBQUEsUUFBQTtRQUNBLElBQUEsR0FBQSxPQUFBO1FBQ0EsV0FBQSxZQUFBO1FBQ0EsWUFBQSxDQUFBLFVBQUEsS0FBQSxhQUFBO1FBQ0EsWUFBQSxDQUFBLFVBQUEsS0FBQSxhQUFBO1FBQ0EsV0FBQSxZQUFBLFFBQUE7UUFDQSxjQUFBO1FBQ0EsUUFBQSxTQUFBLEdBQUEsTUFBQTtRQUNBO01BQ0EsSUFBQSxJQUFBLEdBQUEsT0FBQSxXQUFBLEdBQUEsaUJBQUEsU0FBQTtRQUNBLGVBQUE7TUFDQSxJQUFBLEdBQUEsTUFBQSxnQkFBQTtRQUNBLEVBQUEsR0FBQSxtQkFBQSxXQUFBLEdBQUEsa0JBQUE7YUFDQTtRQUNBLEVBQUEsR0FBQSxtQkFBQSxXQUFBLEdBQUEsaUJBQUE7O01BRUEsRUFBQSxZQUFBLFVBQUEsS0FBQTtNQUNBLElBQUEsVUFBQTtRQUNBLE9BQUEsS0FBQSxRQUFBLEtBQUEsT0FBQTtRQUNBLE9BQUEsS0FBQSxRQUFBLEtBQUEsT0FBQTthQUNBLElBQUEsVUFBQTtRQUNBLElBQUEsS0FBQSxDQUFBLEtBQUEsS0FBQTtVQUNBLEtBQUEsQ0FBQSxLQUFBLEtBQUE7UUFDQSxTQUFBLENBQUEsUUFBQSxJQUFBLE1BQUEsT0FBQSxJQUFBLFFBQUEsSUFBQSxNQUFBLE9BQUE7UUFDQSxPQUFBLEtBQUEsUUFBQTtRQUNBLE9BQUEsS0FBQSxRQUFBO2FBQ0EsSUFBQSxHQUFBLE1BQUEsUUFBQSxTQUFBLE9BQUE7TUFDQSxFQUFBLE1BQUEsa0JBQUEsUUFBQSxVQUFBLFdBQUE7UUFDQSxXQUFBO01BQ0EsR0FBQSxPQUFBLFFBQUEsTUFBQSxVQUFBLFlBQUEsTUFBQTtNQUNBLE9BQUE7UUFDQSxNQUFBOztNQUVBOztNQUVBLFNBQUEsVUFBQTtRQUNBLElBQUEsR0FBQSxNQUFBLFdBQUEsSUFBQTtVQUNBLElBQUEsQ0FBQSxVQUFBO1lBQ0EsU0FBQTtZQUNBLE9BQUEsTUFBQSxRQUFBO1lBQ0EsT0FBQSxNQUFBLFFBQUE7WUFDQSxXQUFBOztVQUVBOzs7O01BSUEsU0FBQSxRQUFBO1FBQ0EsSUFBQSxHQUFBLE1BQUEsV0FBQSxNQUFBLFlBQUEsR0FBQTtVQUNBLE9BQUEsTUFBQSxRQUFBO1VBQ0EsT0FBQSxNQUFBLFFBQUE7VUFDQSxXQUFBO1VBQ0E7Ozs7TUFJQSxTQUFBLFlBQUE7UUFDQSxJQUFBLFFBQUEsR0FBQSxNQUFBO1VBQ0EsUUFBQTtRQUNBLElBQUEsUUFBQTtVQUNBLE1BQUEsTUFBQSxPQUFBO1VBQ0EsTUFBQSxNQUFBLE9BQUE7O1FBRUEsSUFBQSxDQUFBLFVBQUE7VUFDQSxJQUFBLEdBQUEsTUFBQSxRQUFBO1lBQ0EsSUFBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLENBQUEsUUFBQSxLQUFBLFFBQUEsTUFBQSxHQUFBO2NBQ0EsUUFBQSxLQUFBLFFBQUEsTUFBQTtZQUNBLE9BQUEsS0FBQSxRQUFBLEVBQUEsTUFBQSxLQUFBLE9BQUE7WUFDQSxPQUFBLEtBQUEsUUFBQSxFQUFBLE1BQUEsS0FBQSxPQUFBO2lCQUNBLFNBQUE7O1FBRUEsSUFBQSxhQUFBLE1BQUEsT0FBQSxHQUFBLElBQUE7VUFDQSxRQUFBO1VBQ0EsUUFBQTs7UUFFQSxJQUFBLGFBQUEsTUFBQSxPQUFBLEdBQUEsSUFBQTtVQUNBLFFBQUE7VUFDQSxRQUFBOztRQUVBLElBQUEsT0FBQTtVQUNBLE9BQUE7VUFDQSxPQUFBO1lBQ0EsTUFBQTtZQUNBLE1BQUEsV0FBQSxTQUFBOzs7OztNQUtBLFNBQUEsTUFBQSxPQUFBLE9BQUEsR0FBQTtRQUNBLElBQUEsUUFBQSxjQUFBO1VBQ0EsS0FBQSxNQUFBO1VBQ0EsS0FBQSxNQUFBO1VBQ0EsV0FBQSxPQUFBO1VBQ0EsU0FBQSxJQUFBLFVBQUE7VUFDQSxPQUFBLE9BQUEsS0FBQSxPQUFBO1VBQ0EsS0FBQTtRQUNBLElBQUEsVUFBQTtVQUNBLE1BQUE7VUFDQSxNQUFBLE9BQUE7O1FBRUEsTUFBQSxDQUFBLElBQUEsU0FBQSxVQUFBLEtBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxJQUFBLE1BQUE7VUFDQSxNQUFBO1FBQ0EsSUFBQSxVQUFBO1VBQ0EsTUFBQSxDQUFBLE9BQUEsWUFBQTtlQUNBO1VBQ0EsSUFBQSxRQUFBLFdBQUEsS0FBQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxPQUFBO1lBQ0E7VUFDQSxJQUFBLFdBQUEsS0FBQTtZQUNBLE1BQUE7WUFDQSxNQUFBO2lCQUNBO1lBQ0EsTUFBQTs7O1FBR0EsSUFBQSxPQUFBLE1BQUEsT0FBQSxPQUFBLE1BQUEsS0FBQTtVQUNBLElBQUEsR0FBQSxnQkFBQTtlQUNBLGdCQUFBO1VBQ0EsT0FBQSxLQUFBO1VBQ0EsT0FBQSxLQUFBO1VBQ0EsT0FBQTs7OztNQUlBLFNBQUEsV0FBQTtRQUNBO1FBQ0EsRUFBQSxNQUFBLGtCQUFBLE9BQUEsVUFBQSxXQUFBO1VBQ0EsV0FBQSxNQUFBLFVBQUEsU0FBQTtRQUNBLEdBQUEsT0FBQSxRQUFBLE1BQUEsVUFBQTtRQUNBLEVBQUEsR0FBQSxtQkFBQSxNQUFBLEdBQUEsaUJBQUEsTUFBQTtVQUNBLG1CQUFBLE1BQUEsR0FBQSxrQkFBQSxNQUFBO1VBQ0EsaUJBQUEsTUFBQSxHQUFBLGVBQUE7UUFDQTtRQUNBLE9BQUE7VUFDQSxNQUFBOzs7O0lBSUEsTUFBQSxJQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLElBQUE7TUFDQSxVQUFBLG9CQUFBLENBQUEsS0FBQSxJQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsSUFBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBLE9BQUE7TUFDQSxJQUFBO01BQ0EsVUFBQSxvQkFBQSxDQUFBLEtBQUEsSUFBQSxDQUFBO01BQ0EsT0FBQTs7SUFFQSxNQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxPQUFBLEtBQUEsSUFBQSxDQUFBLFFBQUEsVUFBQTtRQUNBLFNBQUEsSUFBQSxTQUFBO01BQ0EsSUFBQSxLQUFBLEdBQUEsU0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLEVBQUE7V0FDQSxJQUFBLEdBQUEsU0FBQSxDQUFBLENBQUE7V0FDQSxJQUFBLEdBQUEsU0FBQSxDQUFBLENBQUE7TUFDQSxPQUFBOztJQUVBLE1BQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUE7TUFDQSxJQUFBLENBQUEsVUFBQSxRQUFBO1FBQ0EsSUFBQSxHQUFBO1VBQ0EsSUFBQSxlQUFBO1lBQ0EsS0FBQSxjQUFBLElBQUEsS0FBQSxjQUFBO2lCQUNBO1lBQ0EsS0FBQSxRQUFBLElBQUEsS0FBQSxRQUFBO1lBQ0EsSUFBQSxFQUFBLFFBQUEsS0FBQSxFQUFBLE9BQUEsS0FBQSxLQUFBLEVBQUEsT0FBQTtZQUNBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsS0FBQTs7O1FBR0EsSUFBQSxHQUFBO1VBQ0EsSUFBQSxlQUFBO1lBQ0EsS0FBQSxjQUFBLElBQUEsS0FBQSxjQUFBO2lCQUNBO1lBQ0EsS0FBQSxRQUFBLElBQUEsS0FBQSxRQUFBO1lBQ0EsSUFBQSxFQUFBLFFBQUEsS0FBQSxFQUFBLE9BQUEsS0FBQSxLQUFBLEVBQUEsT0FBQTtZQUNBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsS0FBQTs7O1FBR0EsT0FBQSxLQUFBLElBQUE7VUFDQSxDQUFBLElBQUE7VUFDQSxDQUFBLElBQUE7WUFDQSxJQUFBLENBQUEsSUFBQSxNQUFBLEtBQUEsQ0FBQSxJQUFBOztNQUVBLElBQUEsR0FBQTtRQUNBLEtBQUEsRUFBQSxJQUFBLEtBQUEsRUFBQTtRQUNBLElBQUEsR0FBQSxLQUFBLEdBQUEsSUFBQSxLQUFBLEdBQUE7UUFDQSxnQkFBQSxDQUFBLElBQUE7UUFDQSxJQUFBLEVBQUEsUUFBQSxLQUFBLEVBQUEsS0FBQSxLQUFBLEVBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxJQUFBLE1BQUEsUUFBQSxNQUFBLE1BQUEsUUFBQSxJQUFBLFVBQUEsQ0FBQSxJQUFBOztNQUVBLElBQUEsR0FBQTtRQUNBLEtBQUEsRUFBQSxJQUFBLEtBQUEsRUFBQTtRQUNBLElBQUEsR0FBQSxLQUFBLEdBQUEsSUFBQSxLQUFBLEdBQUE7UUFDQSxnQkFBQSxDQUFBLElBQUE7UUFDQSxJQUFBLEVBQUEsUUFBQSxLQUFBLEVBQUEsS0FBQSxLQUFBLEVBQUE7UUFDQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUE7UUFDQSxJQUFBLE1BQUEsUUFBQSxNQUFBLE1BQUEsUUFBQSxJQUFBLFVBQUEsQ0FBQSxJQUFBOztNQUVBLE9BQUE7O0lBRUEsTUFBQSxRQUFBLFdBQUE7TUFDQSxJQUFBLENBQUEsTUFBQSxTQUFBO1FBQ0EsVUFBQSxDQUFBLEdBQUEsSUFBQSxVQUFBLENBQUEsR0FBQTtRQUNBLGdCQUFBLGdCQUFBOztNQUVBLE9BQUE7O0lBRUEsTUFBQSxRQUFBLFdBQUE7TUFDQSxPQUFBLENBQUEsQ0FBQSxLQUFBLFFBQUEsTUFBQSxRQUFBLE1BQUEsQ0FBQSxDQUFBLEtBQUEsUUFBQTtRQUNBLFFBQUE7O0lBRUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxPQUFBOztFQUVBLElBQUEscUJBQUE7SUFDQSxHQUFBO0lBQ0EsR0FBQTtJQUNBLEdBQUE7SUFDQSxHQUFBO0lBQ0EsSUFBQTtJQUNBLElBQUE7SUFDQSxJQUFBO0lBQ0EsSUFBQTs7RUFFQSxJQUFBLHNCQUFBO0lBQ0EsQ0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLE1BQUEsTUFBQSxNQUFBO0lBQ0EsQ0FBQSxLQUFBO0lBQ0EsQ0FBQSxLQUFBO0lBQ0E7O0VBRUEsSUFBQSxpQkFBQSxRQUFBLFNBQUEsZUFBQTtFQUNBLElBQUEsb0JBQUEsZUFBQTtFQUNBLElBQUEsb0JBQUEsa0JBQUE7RUFDQSxlQUFBLE1BQUEsS0FBQSxVQUFBLGVBQUEsQ0FBQSxJQUFBO01BQ0EsOEJBQUE7SUFDQTs7RUFFQSxTQUFBLHdCQUFBLE1BQUE7SUFDQSxPQUFBLEtBQUE7O0VBRUEsd0JBQUEsUUFBQSxTQUFBLFFBQUE7SUFDQSxJQUFBLE9BQUEsSUFBQSxLQUFBO0lBQ0EsT0FBQSxNQUFBLFFBQUEsT0FBQTs7RUFFQSx3QkFBQSxXQUFBLGtCQUFBO0VBQ0EsUUFBQSxTQUFBLGlCQUFBLFNBQUEsTUFBQTtJQUNBLE9BQUEsSUFBQSxRQUFBLEtBQUEsTUFBQSxPQUFBLE9BQUE7S0FDQSxTQUFBLE1BQUEsUUFBQTtJQUNBLEtBQUEsUUFBQSxLQUFBLFlBQUEsS0FBQSxNQUFBLFVBQUE7S0FDQSxTQUFBLE1BQUE7SUFDQSxPQUFBLEtBQUE7O0VBRUEsUUFBQSxVQUFBLFFBQUEsT0FBQTtFQUNBLFFBQUEsUUFBQSxNQUFBLFFBQUEsT0FBQSxJQUFBO0VBQ0EsUUFBQSxTQUFBLGlCQUFBLFNBQUEsTUFBQTtJQUNBLE9BQUEsSUFBQSxRQUFBLEtBQUEsTUFBQSxPQUFBLE9BQUE7S0FDQSxTQUFBLE1BQUEsUUFBQTtJQUNBLEtBQUEsUUFBQSxLQUFBLFlBQUEsS0FBQSxNQUFBLFVBQUE7S0FDQSxTQUFBLE1BQUE7SUFDQSxPQUFBLEtBQUE7O0VBRUEsUUFBQSxVQUFBLFFBQUEsT0FBQTtFQUNBLFFBQUEsUUFBQSxNQUFBLFFBQUEsT0FBQSxJQUFBO0VBQ0EsUUFBQSxPQUFBLGlCQUFBLFNBQUEsTUFBQTtJQUNBLElBQUEsV0FBQSxLQUFBLHNCQUFBO0lBQ0EsT0FBQSxJQUFBLFFBQUEsQ0FBQSxLQUFBLE1BQUEsT0FBQSxPQUFBLFlBQUE7TUFDQTtLQUNBLFNBQUEsTUFBQSxRQUFBO0lBQ0EsS0FBQSxRQUFBLEtBQUEsWUFBQSxLQUFBLE1BQUEsVUFBQTtLQUNBLFNBQUEsTUFBQTtJQUNBLE9BQUEsS0FBQTs7RUFFQSxRQUFBLFFBQUEsUUFBQSxLQUFBO0VBQ0EsUUFBQSxNQUFBLE1BQUEsUUFBQSxLQUFBLElBQUE7RUFDQSxRQUFBLFFBQUEsaUJBQUEsU0FBQSxNQUFBO0lBQ0EsT0FBQSxRQUFBLElBQUE7SUFDQSxLQUFBLFFBQUE7SUFDQSxPQUFBO0tBQ0EsU0FBQSxNQUFBLFFBQUE7SUFDQSxLQUFBLFNBQUEsS0FBQSxhQUFBO0tBQ0EsU0FBQSxNQUFBO0lBQ0EsT0FBQSxLQUFBOztFQUVBLFFBQUEsU0FBQSxRQUFBLE1BQUE7RUFDQSxRQUFBLE9BQUEsTUFBQSxRQUFBLE1BQUEsSUFBQTs7RUFFQSxTQUFBLGNBQUEsUUFBQSxTQUFBLFFBQUE7SUFDQSxTQUFBLE1BQUEsR0FBQTtNQUNBLE9BQUEsT0FBQTs7SUFFQSxNQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxrQkFBQSxPQUFBLE9BQUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQSxPQUFBLFNBQUEsSUFBQTtNQUNBLE9BQUEsT0FBQTtNQUNBLE9BQUE7OztJQUdBLFNBQUEsV0FBQSxRQUFBLE9BQUE7TUFDQSxJQUFBLE9BQUEsT0FBQSxLQUFBLE9BQUE7UUFDQSxTQUFBLE9BQUE7UUFDQSxJQUFBLEdBQUEsT0FBQSxvQkFBQTtNQUNBLE9BQUEsS0FBQSxtQkFBQSxTQUFBLENBQUEsUUFBQTtRQUNBLHlCQUFBLE9BQUEsSUFBQSxTQUFBLEdBQUE7VUFDQSxPQUFBLElBQUE7WUFDQSxPQUFBO1VBQ0EsQ0FBQSxJQUFBLENBQUEsMkJBQUE7UUFDQSxRQUFBLE9BQUEsTUFBQSxRQUFBLFNBQUEsbUJBQUEsSUFBQTtRQUNBLG1CQUFBLEtBQUEsU0FBQSxJQUFBLElBQUE7O0lBRUEsTUFBQSxPQUFBLFNBQUEsVUFBQSxNQUFBO01BQ0EsSUFBQSxTQUFBLE1BQUE7UUFDQSxTQUFBLGVBQUE7UUFDQSxTQUFBLFlBQUEsT0FBQSxXQUFBLFFBQUEsTUFBQSxPQUFBO1FBQ0EsWUFBQSxXQUFBLFFBQUE7TUFDQSxJQUFBLFFBQUEsV0FBQSxPQUFBLElBQUEsT0FBQSxPQUFBOztNQUVBLFNBQUEsUUFBQSxNQUFBO1FBQ0EsT0FBQSxDQUFBLE1BQUEsU0FBQSxDQUFBLFNBQUEsTUFBQSxNQUFBLGtCQUFBO1VBQ0EsT0FBQSxJQUFBLE1BQUE7O01BRUEsT0FBQSxNQUFBLE9BQUEsY0FBQSxRQUFBLE9BQUEsSUFBQTtRQUNBLE9BQUEsU0FBQSxNQUFBO1VBQ0EsT0FBQSxRQUFBLE9BQUEsU0FBQSxNQUFBLFFBQUE7WUFDQSxrQkFBQSxPQUFBO1VBQ0EsT0FBQTs7UUFFQSxNQUFBLFNBQUEsTUFBQTtVQUNBLE9BQUEsUUFBQSxPQUFBLFNBQUEsS0FBQSxRQUFBO1lBQ0Esa0JBQUEsQ0FBQSxPQUFBO1VBQ0EsT0FBQTs7VUFFQTs7SUFFQSxNQUFBLFFBQUEsU0FBQSxVQUFBLE1BQUE7TUFDQSxJQUFBLFNBQUEsZUFBQSxNQUFBO1FBQ0EsU0FBQSxZQUFBLE9BQUEsV0FBQSxRQUFBLE1BQUEsT0FBQTtRQUNBLFdBQUEsV0FBQSxRQUFBLFlBQUEsQ0FBQSxTQUFBLFNBQUEsQ0FBQTtVQUNBLE9BQUE7V0FDQTtNQUNBLElBQUEsUUFBQSxXQUFBLE9BQUEsSUFBQSxPQUFBLE9BQUE7TUFDQSxPQUFBLFNBQUEsTUFBQSxPQUFBLElBQUEsa0JBQUEsQ0FBQSxPQUFBLEtBQUE7UUFDQSxPQUFBLElBQUEsSUFBQTs7SUFFQSxNQUFBLGFBQUEsV0FBQTtNQUNBLE9BQUE7O0lBRUEsTUFBQSxPQUFBLFdBQUE7TUFDQSxPQUFBLGNBQUEsT0FBQSxRQUFBLFNBQUE7O0lBRUEsT0FBQSxzQkFBQSxPQUFBOzs7RUFHQSxTQUFBLGtCQUFBLEdBQUE7SUFDQSxPQUFBLElBQUEsS0FBQTs7RUFFQSxJQUFBLHFCQUFBLENBQUEsS0FBQSxLQUFBLE1BQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxNQUFBO0lBQ0EsT0FBQSxPQUFBLE9BQUEsT0FBQSxRQUFBLFFBQUEsUUFBQSxRQUFBOztFQUVBLElBQUEsNEJBQUE7SUFDQSxDQUFBLFFBQUEsUUFBQTtJQUNBLENBQUEsUUFBQSxRQUFBO0lBQ0EsQ0FBQSxRQUFBLFFBQUE7SUFDQSxDQUFBLFFBQUEsUUFBQTtJQUNBLENBQUEsUUFBQSxRQUFBO0lBQ0EsQ0FBQSxRQUFBLFFBQUE7SUFDQSxDQUFBLFFBQUEsUUFBQTtJQUNBLENBQUEsUUFBQSxRQUFBO0lBQ0EsQ0FBQSxRQUFBLE1BQUE7SUFDQSxDQUFBLFFBQUEsTUFBQTtJQUNBLENBQUEsUUFBQSxNQUFBO0lBQ0EsQ0FBQSxRQUFBLE1BQUE7SUFDQSxDQUFBLFFBQUEsS0FBQTtJQUNBLENBQUEsUUFBQSxLQUFBO0lBQ0EsQ0FBQSxRQUFBLE1BQUE7SUFDQSxDQUFBLFFBQUEsT0FBQTtJQUNBLENBQUEsUUFBQSxPQUFBO0lBQ0EsQ0FBQSxRQUFBLE1BQUE7O0VBRUEsSUFBQSwyQkFBQSxlQUFBLE1BQUE7SUFDQSxDQUFBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBOztJQUVBLENBQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUE7O0lBRUEsQ0FBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQTs7SUFFQSxDQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBOztJQUVBLENBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUEsWUFBQSxFQUFBLGFBQUE7O0lBRUEsQ0FBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQSxhQUFBOztJQUVBLENBQUEsTUFBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUE7O0lBRUEsQ0FBQSxNQUFBOztFQUVBLElBQUEsNEJBQUE7SUFDQSxPQUFBLFNBQUEsT0FBQSxNQUFBLE1BQUE7TUFDQSxPQUFBLEdBQUEsTUFBQSxLQUFBLEtBQUEsUUFBQSxRQUFBLE1BQUEsQ0FBQSxNQUFBLE1BQUE7UUFDQTs7SUFFQSxPQUFBO0lBQ0EsTUFBQTs7RUFFQSwwQkFBQSxPQUFBLFFBQUE7RUFDQSxRQUFBLFFBQUEsV0FBQTtJQUNBLE9BQUEsY0FBQSxHQUFBLE1BQUEsVUFBQTtNQUNBOztFQUVBLElBQUEsMEJBQUEsMEJBQUEsSUFBQSxTQUFBLEdBQUE7SUFDQSxPQUFBLENBQUEsRUFBQSxHQUFBLEtBQUEsRUFBQTs7RUFFQSxJQUFBLHlCQUFBLGtCQUFBLE1BQUE7SUFDQSxDQUFBLE9BQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBOztJQUVBLENBQUEsT0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUE7O0lBRUEsQ0FBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQTs7SUFFQSxDQUFBLFNBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxFQUFBOztJQUVBLENBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUEsZUFBQSxFQUFBLGdCQUFBOztJQUVBLENBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxPQUFBLEVBQUEsZ0JBQUE7O0lBRUEsQ0FBQSxNQUFBLFNBQUEsR0FBQTtNQUNBLE9BQUEsRUFBQTs7SUFFQSxDQUFBLE1BQUE7O0VBRUEsd0JBQUEsT0FBQSxRQUFBLEtBQUE7RUFDQSxRQUFBLE1BQUEsTUFBQSxXQUFBO0lBQ0EsT0FBQSxjQUFBLEdBQUEsTUFBQSxVQUFBO01BQ0E7O0VBRUEsR0FBQSxPQUFBLFdBQUEsU0FBQSxTQUFBO0lBQ0EsT0FBQSxRQUFBOztFQUVBLEdBQUEsT0FBQSxTQUFBLEtBQUEsVUFBQTtJQUNBLE9BQUEsT0FBQSxLQUFBLG9CQUFBLFNBQUE7OztFQUdBLFNBQUEsUUFBQSxTQUFBO0lBQ0EsT0FBQSxLQUFBLE1BQUEsUUFBQTs7RUFFQSxHQUFBLE9BQUEsU0FBQSxLQUFBLFVBQUE7SUFDQSxPQUFBLE9BQUEsS0FBQSxhQUFBLFNBQUE7OztFQUdBLFNBQUEsUUFBQSxTQUFBO0lBQ0EsSUFBQSxRQUFBLFlBQUE7SUFDQSxNQUFBLFdBQUEsWUFBQTtJQUNBLE9BQUEsTUFBQSx5QkFBQSxRQUFBOztFQUVBLEdBQUEsTUFBQSxXQUFBLFNBQUEsU0FBQTtJQUNBLE9BQUEsUUFBQTs7RUFFQSxJQUFBLE9BQUEsV0FBQSxjQUFBLE9BQUEsS0FBQSxPQUFBO09BQ0EsSUFBQSxPQUFBLFdBQUEsWUFBQSxPQUFBLFNBQUEsT0FBQTtJQUNBO0VBQ0EsS0FBQSxLQUFBOztFQUVBLE9BQUE7O0NBRUE7QUFDQTs7Ozs7OztBQzN3WEE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxXQUFBOzs7QUFHQSxTQUFBLFFBQUEsSUFBQSxRQUFBOzs7Ozs7RUFNQSxTQUFBLGVBQUEsTUFBQTtJQUNBOzs7O0lBSUEsSUFBQSxRQUFBOzs7O01BSUEsS0FBQSxTQUFBLEtBQUEsS0FBQTtRQUNBLE9BQUEsT0FBQSxRQUFBLGVBQUEsS0FBQSxLQUFBOzs7OztNQUtBLGNBQUEsU0FBQSxLQUFBO1FBQ0EsT0FBQSxRQUFBLEtBQUE7Ozs7O01BS0EsUUFBQSxTQUFBLFFBQUEsUUFBQTtRQUNBLFNBQUEsVUFBQTtRQUNBLEtBQUEsSUFBQSxRQUFBLFFBQUE7VUFDQSxJQUFBLE9BQUEsT0FBQSxVQUFBLFVBQUE7WUFDQSxPQUFBLFFBQUEsS0FBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO2lCQUNBO1lBQ0EsT0FBQSxRQUFBLE9BQUE7OztRQUdBLE9BQUE7Ozs7SUFJQSxTQUFBLE9BQUEsTUFBQTs7TUFFQSxJQUFBO1FBQ0E7O01BRUEsV0FBQTs7O1FBR0EsaUJBQUE7UUFDQSxpQkFBQTtRQUNBLGNBQUE7UUFDQSxlQUFBOzs7UUFHQSxXQUFBO1FBQ0EsYUFBQSxDQUFBLFdBQUE7UUFDQSxZQUFBLENBQUEsV0FBQTtRQUNBLGdCQUFBLENBQUEsVUFBQTtRQUNBLGlCQUFBO1FBQ0EsWUFBQTs7UUFFQSxjQUFBO1FBQ0EsZUFBQTs7OztRQUlBLFlBQUE7UUFDQSxTQUFBO1FBQ0Esa0JBQUE7UUFDQSxvQkFBQTtRQUNBLFFBQUE7UUFDQSxlQUFBO1VBQ0EsS0FBQTtVQUNBLFFBQUE7VUFDQSxNQUFBO1VBQ0EsT0FBQTs7UUFFQSxzQkFBQTtVQUNBLEtBQUEsQ0FBQTtVQUNBLFFBQUE7VUFDQSxNQUFBO1VBQ0EsT0FBQTs7UUFFQSxZQUFBOztRQUVBLG1CQUFBOzs7UUFHQSxZQUFBOztRQUVBLGNBQUE7UUFDQSxtQkFBQTs7OztNQUlBLFNBQUEsTUFBQSxPQUFBLFVBQUE7O01BRUEsSUFBQSxPQUFBLHFCQUFBLFFBQUEsQ0FBQSxLQUFBO1FBQ0EsT0FBQSxnQkFBQTthQUNBO1FBQ0EsT0FBQSxnQkFBQTs7Ozs7TUFLQSxPQUFBLGVBQUEsS0FBQTs7O01BR0EsSUFBQSxPQUFBLFdBQUE7UUFDQSxPQUFBLGVBQUEsa0JBQUEsS0FBQTtRQUNBLElBQUEsZ0JBQUEsS0FBQTtRQUNBLElBQUEsZ0JBQUEsS0FBQTtRQUNBLEtBQUEsWUFBQTtRQUNBLEtBQUEsWUFBQTs7OztNQUlBLElBQUEsQ0FBQSxNQUFBLGFBQUEsS0FBQSxjQUFBLENBQUEsTUFBQSxhQUFBLEtBQUEsWUFBQTtRQUNBLE9BQUEsZUFBQTtRQUNBLE9BQUEsUUFBQTtRQUNBLE9BQUEsTUFBQSxNQUFBLEtBQUE7UUFDQSxPQUFBLE1BQUEsTUFBQSxLQUFBOzs7O01BSUEsSUFBQSxDQUFBLE1BQUEsYUFBQSxLQUFBLFVBQUEsbUJBQUEsS0FBQSxRQUFBO1FBQ0EsT0FBQSxhQUFBLEtBQUE7YUFDQTtRQUNBLE9BQUEsYUFBQTs7O01BR0EsT0FBQSxrQkFBQSxNQUFBLElBQUEsS0FBQSxhQUFBLFVBQUEsSUFBQSxZQUFBLE1BQUEsSUFBQSxLQUFBLGFBQUEsVUFBQSxJQUFBO01BQ0EsT0FBQSxrQkFBQSxNQUFBLElBQUEsS0FBQSxhQUFBLFVBQUEsSUFBQSxTQUFBLE1BQUEsSUFBQSxLQUFBLGFBQUEsVUFBQSxJQUFBOzs7O01BSUEsSUFBQSxPQUFBLGlCQUFBOzs7UUFHQSxPQUFBLGVBQUE7OztRQUdBLElBQUEsYUFBQSxPQUFBLEtBQUEsT0FBQSxNQUFBLEtBQUEsYUFBQSxXQUFBO1FBQ0EsT0FBQSxhQUFBLE1BQUE7UUFDQSxPQUFBLEtBQUEsWUFBQSxTQUFBLE9BQUEsR0FBQTtVQUNBLElBQUEsTUFBQSxHQUFBO1lBQ0EsT0FBQSxhQUFBLElBQUEsU0FBQTtpQkFDQTtZQUNBLE9BQUEsYUFBQSxJQUFBLFNBQUEsT0FBQSxpQkFBQTs7Ozs7UUFLQSxJQUFBLGFBQUEsT0FBQSxLQUFBLE9BQUEsTUFBQSxLQUFBLGFBQUEsV0FBQTtRQUNBLE9BQUEsYUFBQSxNQUFBO1FBQ0EsT0FBQSxLQUFBLFlBQUEsU0FBQSxPQUFBLEdBQUE7VUFDQSxJQUFBLE1BQUEsR0FBQTtZQUNBLE9BQUEsYUFBQSxJQUFBLFNBQUE7aUJBQ0E7WUFDQSxPQUFBLGFBQUEsSUFBQSxTQUFBLE9BQUEsaUJBQUE7Ozs7Ozs7TUFPQSxTQUFBLGtCQUFBLEtBQUE7UUFDQSxJQUFBLE9BQUE7VUFDQTtVQUNBOztRQUVBLEtBQUEsWUFBQSxJQUFBO1FBQ0EsS0FBQSxZQUFBLElBQUE7UUFDQSxLQUFBLFFBQUE7O1FBRUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxJQUFBLE1BQUEsUUFBQSxLQUFBO1VBQ0EsWUFBQTtVQUNBLFVBQUEsU0FBQSxJQUFBLE1BQUEsR0FBQTtVQUNBLFVBQUEsU0FBQSxJQUFBLE1BQUEsR0FBQTtVQUNBLFVBQUEsUUFBQSxJQUFBLE1BQUEsR0FBQTs7O1VBR0EsSUFBQSxNQUFBLElBQUEsSUFBQSxNQUFBLElBQUEsY0FBQTtZQUNBLFVBQUEsWUFBQSxJQUFBLE1BQUEsR0FBQTs7VUFFQSxJQUFBLE1BQUEsSUFBQSxJQUFBLE1BQUEsSUFBQSxhQUFBO1lBQ0EsVUFBQSxXQUFBLElBQUEsTUFBQSxHQUFBOztVQUVBLElBQUEsTUFBQSxJQUFBLElBQUEsTUFBQSxJQUFBLGFBQUE7WUFDQSxVQUFBLFdBQUEsSUFBQSxNQUFBLEdBQUE7O1VBRUEsSUFBQSxNQUFBLElBQUEsSUFBQSxNQUFBLElBQUEsU0FBQTtZQUNBLFVBQUEsT0FBQSxJQUFBLE1BQUEsR0FBQTs7VUFFQSxLQUFBLE1BQUEsS0FBQTs7O1FBR0EsT0FBQTs7OztNQUlBLFNBQUEsbUJBQUEsT0FBQTtRQUNBLE9BQUEsVUFBQSxTQUFBLFVBQUEsV0FBQSxVQUFBLFVBQUEsVUFBQTs7O01BR0EsT0FBQTs7O0lBR0EsSUFBQSxTQUFBLENBQUEsV0FBQTs7O01BR0EsSUFBQTs7O01BR0EsSUFBQSxPQUFBLENBQUEsV0FBQSxXQUFBLFdBQUE7TUFDQSxJQUFBLE9BQUEsR0FBQSxNQUFBLGFBQUEsUUFBQTtNQUNBLElBQUEsT0FBQSxHQUFBLE1BQUEsY0FBQTtNQUNBLElBQUEsT0FBQSxHQUFBLE1BQUEsY0FBQTtNQUNBLGNBQUEsS0FBQSxPQUFBLE1BQUEsT0FBQSxNQUFBLE9BQUE7O01BRUEsU0FBQSxvQkFBQTs7UUFFQSxPQUFBOzs7TUFHQSxTQUFBLGlCQUFBLEdBQUE7UUFDQSxPQUFBLFlBQUEsSUFBQTs7O01BR0EsU0FBQSxpQkFBQTtRQUNBLE9BQUEsWUFBQTs7O01BR0EsT0FBQTtRQUNBLG1CQUFBO1FBQ0Esa0JBQUE7UUFDQSxnQkFBQTs7Ozs7Ozs7SUFRQSxTQUFBLFdBQUEsTUFBQSxRQUFBLE1BQUE7O01BRUEsSUFBQSxlQUFBO1FBQ0E7UUFDQTs7TUFFQTs7TUFFQSxJQUFBLFNBQUEsT0FBQTtRQUNBLFlBQUE7UUFDQTthQUNBO1FBQ0EsWUFBQTtRQUNBOzs7TUFHQSxTQUFBLHFCQUFBO1FBQ0EsSUFBQTtRQUNBLElBQUEsT0FBQSxhQUFBLFVBQUEsU0FBQSxPQUFBLGFBQUEsVUFBQSxRQUFBO1VBQ0EsYUFBQSxPQUFBLGFBQUE7ZUFDQTtVQUNBLGFBQUEsT0FBQSxhQUFBOztRQUVBLEtBQUEsSUFBQSxHQUFBLElBQUEsT0FBQSxhQUFBLFVBQUEsUUFBQSxLQUFBOztVQUVBLElBQUEsTUFBQSxHQUFBO1lBQ0EsYUFBQSxLQUFBLE9BQUE7aUJBQ0E7WUFDQSxhQUFBLEtBQUEsT0FBQSxpQkFBQTs7Ozs7OztNQU9BLFNBQUEsY0FBQSxZQUFBO1FBQ0EsR0FBQSxVQUFBLE1BQUE7V0FDQSxNQUFBLFFBQUEsU0FBQSxHQUFBO1lBQ0EsT0FBQSxhQUFBLEVBQUEsTUFBQTs7OztNQUlBLFNBQUEsWUFBQSxHQUFBO1FBQ0EsT0FBQSxhQUFBOzs7TUFHQSxTQUFBLGdCQUFBLEdBQUE7UUFDQSxPQUFBLGFBQUE7OztNQUdBLFNBQUEsbUJBQUE7UUFDQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLFNBQUEsV0FBQTtZQUNBLElBQUEsYUFBQSxPQUFBLFdBQUEsZUFBQTtZQUNBLE9BQUEsYUFBQTs7V0FFQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7V0FDQSxNQUFBLFFBQUEsU0FBQSxHQUFBO1lBQ0EsSUFBQSxhQUFBLE9BQUEsWUFBQTtZQUNBLE9BQUEsZ0JBQUEsRUFBQSxNQUFBOztXQUVBLEtBQUEsS0FBQSxXQUFBO1lBQ0EsSUFBQSxjQUFBLE9BQUEsV0FBQSxlQUFBO1lBQ0EsT0FBQSxjQUFBOzs7O01BSUEsU0FBQSxtQkFBQTtRQUNBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsU0FBQTtXQUNBLEtBQUEsU0FBQSxPQUFBLE9BQUEsUUFBQTtXQUNBLEtBQUEsVUFBQSxXQUFBO1lBQ0EsSUFBQSxjQUFBLE9BQUEsV0FBQSxNQUFBO1lBQ0EsT0FBQTs7V0FFQSxNQUFBLFFBQUEsU0FBQSxHQUFBO1lBQ0EsSUFBQSxhQUFBLE9BQUEsWUFBQTtZQUNBLE9BQUEsZ0JBQUEsRUFBQSxNQUFBOzs7Ozs7OztNQVFBLElBQUEsT0FBQSxPQUFBLGdCQUFBLFlBQUE7O1FBRUE7V0FDQSxHQUFBLFNBQUEsU0FBQSxHQUFBO1lBQ0EsSUFBQSxhQUFBLE9BQUEsWUFBQTtZQUNBLElBQUEsYUFBQSxFQUFBLE1BQUE7OztZQUdBLFlBQUEsT0FBQSxhQUFBO1lBQ0EsSUFBQSxjQUFBOztZQUVBLE9BQUEsS0FBQSxXQUFBLFNBQUEsTUFBQTs7Y0FFQSxJQUFBLEtBQUEsTUFBQSxnQkFBQSxZQUFBOztnQkFFQSxZQUFBLEtBQUEsS0FBQTs7Ozs7O1lBTUEsSUFBQSxhQUFBO1lBQ0EsV0FBQSxPQUFBO1lBQ0EsV0FBQSxRQUFBO1lBQ0EsV0FBQSxPQUFBO2NBQ0EsUUFBQTtjQUNBLFVBQUEsYUFBQTs7OztZQUlBLE9BQUEsWUFBQTs7Ozs7TUFLQSxPQUFBO1FBQ0EsYUFBQTtRQUNBLGlCQUFBO1FBQ0EsZUFBQTs7Ozs7SUFLQSxTQUFBLE9BQUEsY0FBQSxVQUFBLFFBQUE7O01BRUEsSUFBQSxTQUFBO1FBQ0EsWUFBQSxhQUFBO1FBQ0EsWUFBQSxhQUFBO1FBQ0E7OztNQUdBOzs7TUFHQSxjQUFBO1NBQ0EsT0FBQTtTQUNBLEtBQUEsYUFBQTtVQUNBLE9BQUEsSUFBQSxNQUFBLE9BQUEsT0FBQTtVQUNBLE9BQUEsSUFBQSxNQUFBLE9BQUEsTUFBQTtTQUNBLE9BQUE7U0FDQSxLQUFBLE1BQUE7OztNQUdBO1NBQ0EsT0FBQTtTQUNBLEtBQUEsU0FBQTtTQUNBLEtBQUEsTUFBQTtTQUNBLE1BQUEsUUFBQTtTQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBO1NBQ0EsS0FBQSxVQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7OztNQUdBLElBQUEsYUFBQSxZQUFBLFVBQUE7U0FDQSxLQUFBO1NBQ0E7U0FDQSxPQUFBO1NBQ0EsS0FBQSxTQUFBO1NBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxPQUFBO1VBQ0EsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBOzs7O01BSUEsSUFBQSxPQUFBLE9BQUEsY0FBQSxVQUFBO1FBQ0EsYUFBQSxXQUFBLEtBQUE7YUFDQTtRQUNBLGFBQUEsV0FBQSxLQUFBOzs7OztNQUtBLElBQUEsT0FBQSxPQUFBLGVBQUEsWUFBQTtRQUNBLEdBQUEsVUFBQTtXQUNBLEdBQUEsU0FBQSxTQUFBLEdBQUE7O1lBRUEsSUFBQSxZQUFBO1lBQ0EsVUFBQSxNQUFBLE9BQUEsYUFBQSxVQUFBLEVBQUEsT0FBQTtZQUNBLFVBQUEsTUFBQSxPQUFBLGFBQUEsVUFBQSxFQUFBLE9BQUE7WUFDQSxVQUFBLFFBQUEsRUFBQTtZQUNBLElBQUEsTUFBQSxJQUFBLEdBQUEsYUFBQTtjQUNBLFVBQUEsV0FBQSxFQUFBOztZQUVBLElBQUEsTUFBQSxJQUFBLEdBQUEsYUFBQTtjQUNBLFVBQUEsV0FBQSxFQUFBOztZQUVBLElBQUEsTUFBQSxJQUFBLEdBQUEsU0FBQTtjQUNBLFVBQUEsT0FBQSxFQUFBOzs7WUFHQSxPQUFBLFdBQUE7WUFDQSxpQkFBQTs7YUFFQTs7O1FBR0EsSUFBQSxPQUFBLG1CQUFBOztVQUVBLEdBQUEsVUFBQTthQUNBLEdBQUEsU0FBQSxTQUFBLEdBQUE7O2NBRUEsaUJBQUE7Ozs7Ozs7O01BUUEsU0FBQSxpQkFBQSxjQUFBOzs7UUFHQSxHQUFBLE9BQUEsY0FBQSxLQUFBLFNBQUEsR0FBQTtVQUNBLElBQUEsUUFBQSxFQUFBO1VBQ0EsSUFBQSxRQUFBLEVBQUE7O1VBRUEsR0FBQSxVQUFBO2FBQ0E7O1VBRUEsSUFBQSxTQUFBLE9BQUEsT0FBQSxrQkFBQSxTQUFBLE9BQUEsT0FBQSxnQkFBQTs7O1lBR0EsT0FBQSxPQUFBLGlCQUFBO1lBQ0EsT0FBQSxPQUFBLGlCQUFBOzs7Ozs7WUFNQSxJQUFBLG1CQUFBO1lBQ0EsSUFBQSxpQkFBQTs7WUFFQSxJQUFBLGVBQUEsbUJBQUEsT0FBQSxJQUFBO1lBQ0EsSUFBQSxnQkFBQSxtQkFBQSxPQUFBLElBQUEsZUFBQSxPQUFBLElBQUE7OztZQUdBLEdBQUEsT0FBQSxhQUFBO2VBQ0EsT0FBQTtlQUNBLEtBQUEsU0FBQTtlQUNBLEtBQUEsTUFBQTtlQUNBLEtBQUEsU0FBQSxPQUFBLE9BQUEsUUFBQTtlQUNBLEtBQUEsVUFBQTtlQUNBLEtBQUEsUUFBQSxPQUFBLE9BQUE7ZUFDQSxLQUFBLGFBQUEsV0FBQTtnQkFDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsU0FBQTs7ZUFFQSxLQUFBLFdBQUE7OztZQUdBLEdBQUEsT0FBQSxhQUFBO2VBQ0EsT0FBQTtlQUNBLEtBQUEsU0FBQTtlQUNBLEtBQUEsTUFBQTtlQUNBLEtBQUEsU0FBQTtlQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBLGdCQUFBO2VBQ0EsS0FBQSxRQUFBLE9BQUEsT0FBQTtlQUNBLEtBQUEsYUFBQSxXQUFBO2dCQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBO2tCQUNBLGdCQUFBLE9BQUE7O2VBRUEsS0FBQSxXQUFBOzs7WUFHQSxHQUFBLE9BQUEsYUFBQTtlQUNBLE9BQUE7ZUFDQSxLQUFBLFNBQUE7ZUFDQSxLQUFBLE1BQUE7ZUFDQSxLQUFBLFNBQUE7ZUFDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxnQkFBQTtlQUNBLEtBQUEsUUFBQSxPQUFBLE9BQUE7ZUFDQSxLQUFBLGFBQUEsV0FBQTtnQkFDQSxJQUFBLGdCQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtnQkFDQSxPQUFBLGVBQUEsZ0JBQUE7a0JBQ0EsZ0JBQUEsT0FBQTs7ZUFFQSxLQUFBLFdBQUE7OztZQUdBLEdBQUEsT0FBQSxhQUFBO2VBQ0EsT0FBQTtlQUNBLEtBQUEsU0FBQTtlQUNBLEtBQUEsTUFBQTtlQUNBLEtBQUEsU0FBQSxXQUFBO2dCQUNBLE9BQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxPQUFBOztlQUVBLEtBQUEsVUFBQTtlQUNBLEtBQUEsUUFBQSxPQUFBLE9BQUE7ZUFDQSxLQUFBLGFBQUEsV0FBQTtnQkFDQSxJQUFBLGtCQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUEsZUFBQTtnQkFDQSxJQUFBLGtCQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7Z0JBQ0EsT0FBQSxlQUFBLGtCQUFBO2tCQUNBLGtCQUFBOztlQUVBLEtBQUEsV0FBQTs7aUJBRUE7WUFDQSxPQUFBLE9BQUEsaUJBQUEsQ0FBQTtZQUNBLE9BQUEsT0FBQSxpQkFBQSxDQUFBOzs7Ozs7OztNQVFBOztNQUVBLFNBQUEsb0JBQUE7UUFDQSxPQUFBLEtBQUEsV0FBQSxTQUFBLEtBQUEsV0FBQTtVQUNBLE9BQUEsYUFBQSxHQUFBLE1BQUEsVUFBQSxRQUFBLElBQUEsU0FBQSxXQUFBO1lBQ0EsT0FBQTtjQUNBLE9BQUE7Y0FDQSxPQUFBO2NBQ0EsT0FBQTtjQUNBLFdBQUE7Ozs7O1FBS0EsT0FBQSxLQUFBLGFBQUEsT0FBQSxTQUFBLE1BQUE7VUFDQSxPQUFBLEtBQUEsUUFBQSxLQUFBLFFBQUEsUUFBQSxLQUFBOztVQUVBLElBQUEsS0FBQSxZQUFBLEtBQUEsVUFBQTtZQUNBLE9BQUEsS0FBQSxRQUFBLEtBQUEsUUFBQSxXQUFBLEtBQUE7WUFDQSxPQUFBLEtBQUEsUUFBQSxLQUFBLFFBQUEsV0FBQSxLQUFBOztVQUVBLElBQUEsS0FBQSxXQUFBO1lBQ0EsT0FBQSxLQUFBLFFBQUEsS0FBQSxRQUFBLFlBQUEsS0FBQTs7VUFFQSxJQUFBLEtBQUEsTUFBQTtZQUNBLE9BQUEsS0FBQSxRQUFBLEtBQUEsUUFBQSxPQUFBLEtBQUE7Ozs7UUFJQSxPQUFBOzs7TUFHQSxTQUFBLGtCQUFBOzs7UUFHQTtXQUNBLFVBQUE7V0FDQSxLQUFBO1dBQ0E7V0FDQSxPQUFBO1dBQ0EsS0FBQSxTQUFBO1dBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxPQUFBO1lBQ0EsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBOztXQUVBLE9BQUE7V0FDQSxLQUFBLE1BQUE7V0FDQSxLQUFBLE1BQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtXQUNBLE1BQUEsZ0JBQUEsT0FBQSxJQUFBLGVBQUEsT0FBQSxJQUFBLGNBQUE7V0FDQSxNQUFBLFVBQUE7OztRQUdBO1dBQ0EsVUFBQTtXQUNBLEtBQUE7V0FDQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLE9BQUE7WUFDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsU0FBQTs7V0FFQSxPQUFBO1dBQ0EsS0FBQSxNQUFBO1dBQ0EsS0FBQSxNQUFBLENBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtXQUNBLE1BQUEsZ0JBQUEsT0FBQSxJQUFBLGVBQUE7V0FDQSxNQUFBLFVBQUE7Ozs7TUFJQSxTQUFBLGlCQUFBLGNBQUE7OztRQUdBLElBQUEsV0FBQSxPQUFBLE9BQUEsY0FBQSxTQUFBLEtBQUE7VUFDQSxPQUFBLElBQUEsVUFBQTs7OztRQUlBLElBQUEsT0FBQSxHQUFBLE9BQUE7V0FDQSxVQUFBO1dBQ0EsS0FBQTtXQUNBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsU0FBQTs7U0FFQSxLQUFBLFNBQUEsT0FBQSxPQUFBLFFBQUE7V0FDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7O1dBRUEsTUFBQSxRQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsRUFBQSxRQUFBLElBQUEsT0FBQSxPQUFBLFlBQUEsS0FBQSxPQUFBLE9BQUEsWUFBQTs7V0FFQSxHQUFBLGFBQUEsU0FBQSxHQUFBOztZQUVBLEdBQUEsVUFBQTtlQUNBLFFBQUEsVUFBQSxTQUFBLEdBQUEsR0FBQTtnQkFDQSxPQUFBLE1BQUEsRUFBQTs7O1lBR0EsR0FBQSxVQUFBO2VBQ0EsUUFBQSxVQUFBLFNBQUEsR0FBQSxHQUFBO2dCQUNBLE9BQUEsTUFBQSxFQUFBOzs7V0FHQSxHQUFBLFlBQUEsU0FBQSxXQUFBO1lBQ0EsR0FBQSxVQUFBLFFBQUEsUUFBQSxVQUFBOztXQUVBLEtBQUEsU0FBQSxTQUFBLEdBQUE7WUFDQSxPQUFBLEVBQUE7OztRQUdBO1dBQ0EsTUFBQSxnQkFBQSxTQUFBLEdBQUE7O1lBRUEsSUFBQSxpQkFBQSxPQUFBLE9BQUEsY0FBQSxLQUFBLElBQUEsRUFBQTtZQUNBLE9BQUE7OztRQUdBO1dBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxFQUFBLFNBQUE7Ozs7OztRQU1BLElBQUEsT0FBQSxPQUFBLFlBQUE7VUFDQSxLQUFBLE9BQUE7YUFDQSxLQUFBLFNBQUEsR0FBQTtjQUNBLElBQUEsY0FBQSxZQUFBLEVBQUE7Y0FDQSxPQUFBOzs7Ozs7O01BT0EsU0FBQSxnQkFBQSxjQUFBOzs7UUFHQSxJQUFBLFdBQUEsT0FBQSxPQUFBLGNBQUEsU0FBQSxLQUFBO1VBQ0EsT0FBQSxJQUFBLFVBQUE7Ozs7UUFJQSxJQUFBLE9BQUEsR0FBQSxPQUFBOztXQUVBLFVBQUE7V0FDQSxLQUFBO1dBQ0E7V0FDQSxPQUFBO1dBQ0EsS0FBQSxTQUFBO1dBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxFQUFBLFNBQUE7Ozs7UUFJQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLFNBQUEsT0FBQSxPQUFBLFFBQUE7V0FDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7V0FDQSxNQUFBLGdCQUFBLFNBQUEsR0FBQTs7WUFFQSxJQUFBLGlCQUFBLE9BQUEsT0FBQSxjQUFBLEtBQUEsSUFBQSxFQUFBO1lBQ0EsSUFBQSxLQUFBLElBQUEsRUFBQSxZQUFBLEtBQUEsS0FBQSxJQUFBLEVBQUEsWUFBQSxHQUFBO2NBQ0EsaUJBQUE7O1lBRUEsT0FBQTs7O1dBR0EsTUFBQSxRQUFBLFNBQUEsR0FBQTs7WUFFQSxPQUFBLEVBQUEsUUFBQSxJQUFBLE9BQUEsT0FBQSxZQUFBLEtBQUEsT0FBQSxPQUFBLFlBQUE7OztRQUdBO1dBQ0EsR0FBQSxhQUFBLFNBQUEsR0FBQTs7WUFFQSxHQUFBLFVBQUE7ZUFDQSxRQUFBLFVBQUEsU0FBQSxHQUFBLEdBQUE7Z0JBQ0EsT0FBQSxNQUFBLEVBQUE7O1lBRUEsR0FBQSxVQUFBO2VBQ0EsUUFBQSxVQUFBLFNBQUEsR0FBQSxHQUFBO2dCQUNBLE9BQUEsTUFBQSxFQUFBOzs7V0FHQSxHQUFBLFlBQUEsU0FBQSxXQUFBO1lBQ0EsR0FBQSxVQUFBLFFBQUEsUUFBQSxVQUFBOztXQUVBLEtBQUEsU0FBQSxTQUFBLEdBQUE7WUFDQSxPQUFBLEVBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBNkJBLElBQUEsbUJBQUE7UUFDQSxJQUFBLG9CQUFBOztRQUVBLElBQUEsZUFBQSxtQkFBQSxPQUFBLElBQUE7UUFDQSxJQUFBLGdCQUFBLG1CQUFBLE9BQUEsSUFBQSxlQUFBLE9BQUEsSUFBQTs7O1FBR0E7V0FDQSxPQUFBO1dBQ0EsS0FBQSxTQUFBO1dBQ0EsS0FBQSxNQUFBO1dBQ0EsS0FBQSxTQUFBLE9BQUEsT0FBQSxRQUFBO1dBQ0EsS0FBQSxVQUFBO1dBQ0EsS0FBQSxRQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsRUFBQSxZQUFBLElBQUEsT0FBQSxPQUFBLGVBQUEsS0FBQSxPQUFBLE9BQUEsZUFBQTs7V0FFQSxLQUFBLFdBQUEsU0FBQSxHQUFBO1lBQ0EsT0FBQSxLQUFBLElBQUEsRUFBQTs7OztRQUlBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsU0FBQTtXQUNBLEtBQUEsTUFBQTtXQUNBLEtBQUEsU0FBQTtXQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBLGdCQUFBO1dBQ0EsS0FBQSxRQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsRUFBQSxZQUFBLElBQUEsT0FBQSxPQUFBLGVBQUEsS0FBQSxPQUFBLE9BQUEsZUFBQTs7V0FFQSxLQUFBLGFBQUEsV0FBQTtZQUNBLE9BQUEsZUFBQSxJQUFBO2NBQ0EsZ0JBQUEsT0FBQTs7V0FFQSxLQUFBLFdBQUEsU0FBQSxHQUFBO1lBQ0EsT0FBQSxLQUFBLElBQUEsRUFBQTs7OztRQUlBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsU0FBQTtXQUNBLEtBQUEsTUFBQTtXQUNBLEtBQUEsU0FBQTtXQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBLGdCQUFBO1dBQ0EsS0FBQSxRQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsRUFBQSxZQUFBLElBQUEsT0FBQSxPQUFBLGVBQUEsS0FBQSxPQUFBLE9BQUEsZUFBQTs7V0FFQSxLQUFBLGFBQUEsV0FBQTtZQUNBLElBQUEsZ0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtZQUNBLE9BQUEsZUFBQSxnQkFBQTtjQUNBLGdCQUFBLE9BQUE7O1dBRUEsS0FBQSxXQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsS0FBQSxJQUFBLEVBQUE7Ozs7UUFJQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLE1BQUE7V0FDQSxLQUFBLFNBQUEsV0FBQTtZQUNBLE9BQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxPQUFBOztXQUVBLEtBQUEsVUFBQTtXQUNBLEtBQUEsUUFBQSxTQUFBLEdBQUE7WUFDQSxPQUFBLEVBQUEsWUFBQSxJQUFBLE9BQUEsT0FBQSxlQUFBLEtBQUEsT0FBQSxPQUFBLGVBQUE7O1dBRUEsS0FBQSxhQUFBLFdBQUE7WUFDQSxJQUFBLGtCQUFBLGVBQUE7WUFDQSxJQUFBLGtCQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7WUFDQSxPQUFBLGVBQUEsa0JBQUE7Y0FDQSxrQkFBQTs7V0FFQSxLQUFBLFdBQUEsU0FBQSxHQUFBO1lBQ0EsT0FBQSxLQUFBLElBQUEsRUFBQTs7Ozs7OztRQU9BO1dBQ0EsT0FBQTs7V0FFQSxLQUFBLFNBQUE7V0FDQSxNQUFBLGdCQUFBO1dBQ0EsS0FBQSxLQUFBLFdBQUE7WUFDQSxJQUFBLFVBQUE7WUFDQSxJQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7WUFDQSxJQUFBLFVBQUE7WUFDQSxJQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxPQUFBLE9BQUEsUUFBQTtjQUNBO1lBQ0EsSUFBQSxnQkFBQSxNQUFBLFVBQUEsTUFBQSxVQUFBO2NBQ0EsVUFBQSxPQUFBLFVBQUEsUUFBQSxVQUFBO1lBQ0EsT0FBQTs7V0FFQSxNQUFBLGdCQUFBLFNBQUEsR0FBQTs7WUFFQSxJQUFBLGlCQUFBO1lBQ0EsSUFBQSxLQUFBLElBQUEsRUFBQSxZQUFBLEdBQUE7Y0FDQSxpQkFBQSxPQUFBLE9BQUEsY0FBQSxLQUFBLElBQUEsRUFBQTs7WUFFQSxPQUFBOzs7V0FHQSxNQUFBLFFBQUEsV0FBQTs7WUFFQSxPQUFBLE9BQUEsT0FBQSxZQUFBOzs7OztRQUtBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsU0FBQTs7V0FFQSxNQUFBLGdCQUFBO1dBQ0EsS0FBQSxLQUFBLFdBQUE7WUFDQSxJQUFBLFVBQUE7WUFDQSxJQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7WUFDQSxJQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxPQUFBLE9BQUEsUUFBQTtjQUNBO1lBQ0EsSUFBQSxVQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUEsT0FBQSxPQUFBLFFBQUE7Y0FDQTtZQUNBLElBQUEsZ0JBQUEsTUFBQSxVQUFBLE9BQUEsVUFBQTtjQUNBLFVBQUEsT0FBQSxVQUFBLFNBQUEsVUFBQTtZQUNBLE9BQUE7O1dBRUEsTUFBQSxnQkFBQSxTQUFBLEdBQUE7O1lBRUEsSUFBQSxpQkFBQTtZQUNBLElBQUEsS0FBQSxJQUFBLEVBQUEsWUFBQSxHQUFBO2NBQ0EsaUJBQUEsT0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLEVBQUE7O1lBRUEsT0FBQTs7O1dBR0EsTUFBQSxRQUFBLFdBQUE7WUFDQSxPQUFBLE9BQUEsT0FBQSxZQUFBOzs7O1FBSUEsSUFBQSxPQUFBLE9BQUEsWUFBQTtVQUNBO2FBQ0EsT0FBQTthQUNBLEtBQUEsU0FBQSxHQUFBO2NBQ0EsSUFBQSxjQUFBLFlBQUEsRUFBQTtjQUNBLE9BQUE7Ozs7OztNQU1BLE9BQUE7UUFDQSxpQkFBQSxXQUFBO1VBQ0EsT0FBQTs7UUFFQSxZQUFBLFdBQUE7VUFDQSxPQUFBOztRQUVBLFdBQUEsU0FBQSxNQUFBO1VBQ0EsSUFBQSxTQUFBLE9BQUE7WUFDQSxJQUFBLFFBQUEsYUFBQTtpQkFDQTtZQUNBLElBQUEsUUFBQSxhQUFBOztVQUVBLE9BQUE7Ozs7Ozs7Ozs7SUFVQSxTQUFBLE9BQUEsUUFBQSxPQUFBLE1BQUE7Ozs7TUFJQSxJQUFBLFdBQUE7UUFDQTs7TUFFQSxLQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsUUFBQSxLQUFBO1FBQ0EsU0FBQSxLQUFBLE1BQUEsR0FBQTs7Ozs7TUFLQSxTQUFBLGNBQUEsYUFBQTtRQUNBLElBQUEsU0FBQSxRQUFBLGlCQUFBLENBQUEsR0FBQTtVQUNBO1VBQ0EsZ0NBQUE7VUFDQSxpQkFBQTs7Ozs7O01BTUEsU0FBQSxnQ0FBQSxhQUFBO1FBQ0EsSUFBQSxNQUFBLE9BQUEsUUFBQSxVQUFBO1VBQ0EsYUFBQSxPQUFBLE9BQUEsUUFBQTtVQUNBLFNBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxTQUFBLElBQUE7OztRQUdBLElBQUEsbUJBQUEsR0FBQSxRQUFBLE9BQUEsSUFBQTs7O01BR0EsU0FBQSx3QkFBQTtRQUNBLEdBQUEsVUFBQSxtQkFBQSxPQUFBLFFBQUEsTUFBQSxXQUFBOzs7TUFHQSxTQUFBLGlCQUFBLGFBQUE7O1FBRUEsR0FBQSxVQUFBO1dBQ0EsT0FBQSxTQUFBLEdBQUE7WUFDQSxPQUFBLEVBQUEsVUFBQTs7V0FFQSxPQUFBO1dBQ0EsTUFBQSxXQUFBOzs7OztNQUtBLFNBQUEsZUFBQTtRQUNBLE9BQUE7OztNQUdBLE9BQUE7UUFDQSxlQUFBO1FBQ0EsY0FBQTs7Ozs7SUFLQSxTQUFBLFVBQUEsUUFBQTs7TUFFQSxJQUFBLFNBQUEseUJBQUE7OztNQUdBLFNBQUEseUJBQUEsUUFBQTs7O1FBR0EsSUFBQSxTQUFBOzs7UUFHQSxPQUFBLFNBQUE7UUFDQSxPQUFBLE9BQUEsZUFBQSxPQUFBOztRQUVBLElBQUEsT0FBQSxPQUFBLGNBQUE7VUFDQSxPQUFBLE9BQUEsb0JBQUE7VUFDQSxPQUFBLE9BQUEsUUFBQTtVQUNBLE9BQUEsT0FBQSxNQUFBLE1BQUEsT0FBQSxNQUFBO1VBQ0EsT0FBQSxPQUFBLE1BQUEsTUFBQSxPQUFBLE1BQUE7ZUFDQTtVQUNBLE9BQUEsT0FBQSxvQkFBQTs7O1FBR0EsT0FBQSxPQUFBLGtCQUFBLE9BQUE7UUFDQSxJQUFBLE9BQUEsT0FBQSxpQkFBQTtVQUNBLE9BQUEsT0FBQSxlQUFBLE9BQUE7O1FBRUEsT0FBQSxPQUFBLGdCQUFBLE9BQUE7OztRQUdBLE9BQUEsU0FBQTtRQUNBLE9BQUEsT0FBQSxjQUFBLE9BQUE7UUFDQSxPQUFBLE9BQUEsYUFBQSxPQUFBO1FBQ0EsT0FBQSxPQUFBLGlCQUFBLE9BQUE7UUFDQSxPQUFBLE9BQUEsZUFBQSxPQUFBO1FBQ0EsT0FBQSxPQUFBLGFBQUEsT0FBQTs7O1FBR0EsT0FBQSxNQUFBO1FBQ0EsT0FBQSxJQUFBLGFBQUEsT0FBQTtRQUNBLE9BQUEsSUFBQSxVQUFBLE9BQUE7UUFDQSxPQUFBLElBQUEsU0FBQSxPQUFBOztRQUVBLE9BQUEsSUFBQSxtQkFBQSxPQUFBO1FBQ0EsT0FBQSxJQUFBLHFCQUFBLE9BQUE7O1FBRUEsT0FBQSxJQUFBLGdCQUFBLE9BQUE7UUFDQSxPQUFBLElBQUEsdUJBQUEsT0FBQTtRQUNBLE9BQUEsSUFBQSxTQUFBLE9BQUE7UUFDQSxPQUFBLElBQUEsYUFBQSxPQUFBO1FBQ0EsT0FBQSxJQUFBLG9CQUFBLE9BQUE7UUFDQSxPQUFBLElBQUEsa0JBQUEsT0FBQTtRQUNBLE9BQUEsSUFBQSxvQkFBQSxPQUFBOzs7UUFHQSxPQUFBLE9BQUEsaUJBQUEsQ0FBQTtRQUNBLE9BQUEsT0FBQSxpQkFBQSxDQUFBO1FBQ0EsT0FBQSxPQUFBLG1CQUFBLENBQUE7UUFDQSxPQUFBLE9BQUEsbUJBQUEsQ0FBQTs7O1FBR0EsT0FBQSxJQUFBLGFBQUEsT0FBQTs7UUFFQSxPQUFBLE9BQUEsbUJBQUEsT0FBQTs7OztRQUlBLElBQUEsT0FBQSxJQUFBLFdBQUEsTUFBQTtVQUNBLEdBQUEsT0FBQTthQUNBLE1BQUEsV0FBQTs7UUFFQSxPQUFBLElBQUEsZ0JBQUEsT0FBQTs7O1FBR0EsT0FBQSxlQUFBLE9BQUE7O1FBRUEsSUFBQSxlQUFBLE9BQUE7OztRQUdBLG9CQUFBOzs7UUFHQSxPQUFBLElBQUEsVUFBQTtRQUNBLE9BQUEsSUFBQSxRQUFBLFFBQUEsT0FBQSxHQUFBLE9BQUEsTUFBQSxPQUFBLElBQUEsWUFBQSxNQUFBLFNBQUEsUUFBQSxNQUFBO1FBQ0EsT0FBQSxJQUFBLFFBQUEsU0FBQSxPQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUEsSUFBQSxZQUFBLE1BQUEsVUFBQSxRQUFBLE1BQUE7O1FBRUEsT0FBQSxJQUFBLHNCQUFBOzs7OztRQUtBLElBQUEsWUFBQSxhQUFBO1FBQ0EsSUFBQSxZQUFBLGFBQUE7Ozs7UUFJQSxJQUFBLGVBQUEsT0FBQSxJQUFBLFdBQUEsU0FBQSxNQUFBO1VBQ0EsT0FBQSxLQUFBLEtBQUE7V0FDQSxLQUFBO1FBQ0EsSUFBQSxlQUFBLE9BQUEsSUFBQSxXQUFBLFNBQUEsTUFBQTtVQUNBLE9BQUEsS0FBQSxLQUFBO1dBQ0EsS0FBQTs7UUFFQSxPQUFBLE9BQUEsZUFBQTtRQUNBLE9BQUEsT0FBQSxlQUFBOzs7UUFHQSxPQUFBLE9BQUEsaUJBQUE7OztRQUdBLElBQUEsZUFBQTtRQUNBLElBQUEsZUFBQSxPQUFBLE9BQUE7OztRQUdBLE9BQUEsT0FBQSxZQUFBOzs7UUFHQSxJQUFBLG1CQUFBLEdBQUEsTUFBQTtXQUNBLE9BQUEsQ0FBQSxPQUFBLE9BQUEsV0FBQTtXQUNBLE1BQUEsQ0FBQSxHQUFBLE9BQUEsT0FBQSxZQUFBLGVBQUEsTUFBQTs7UUFFQSxPQUFBLE9BQUEsV0FBQSxpQkFBQTtRQUNBLE9BQUEsT0FBQSxXQUFBLGlCQUFBOzs7O1FBSUEsSUFBQSxrQkFBQTtRQUNBLElBQUEsa0JBQUE7UUFDQSxJQUFBLGNBQUEsR0FBQSxNQUFBO1dBQ0EsT0FBQSxDQUFBLGNBQUE7V0FDQSxNQUFBLENBQUEsaUJBQUEsa0JBQUEsTUFBQTs7O1FBR0EsT0FBQSxhQUFBO1FBQ0EsT0FBQSxXQUFBLFFBQUE7OztRQUdBLElBQUEscUJBQUEsR0FBQSxNQUFBO1dBQ0EsT0FBQSxDQUFBLEtBQUE7V0FDQSxNQUFBLENBQUEsS0FBQTtXQUNBLE1BQUE7Ozs7OztRQU1BLE9BQUEsV0FBQSxNQUFBLE1BQUEsTUFBQSxZQUFBLGdCQUFBLG1CQUFBLE9BQUEsSUFBQSxRQUFBLFNBQUEsT0FBQTs7UUFFQSxPQUFBLFdBQUEsTUFBQSxNQUFBLFlBQUEsZ0JBQUEsbUJBQUEsT0FBQSxJQUFBLFFBQUEsVUFBQSxPQUFBOzs7UUFHQSxPQUFBLFdBQUEsU0FBQTtRQUNBLE9BQUEsV0FBQSxPQUFBLE9BQUEsT0FBQSxJQUFBLG9CQUFBLE9BQUEsT0FBQTtRQUNBLE9BQUEsV0FBQSxPQUFBLE1BQUEsT0FBQSxJQUFBLG9CQUFBLE9BQUEsT0FBQTs7OztRQUlBLE9BQUEsYUFBQTtRQUNBLElBQUEsT0FBQSxJQUFBLGlCQUFBOztVQUVBLE9BQUEsV0FBQSxNQUFBO1VBQ0EsT0FBQSxXQUFBLE1BQUE7O1VBRUEsT0FBQSxXQUFBLGVBQUE7O1VBRUEsT0FBQSxjQUFBO1lBQ0EsS0FBQTtZQUNBLEtBQUE7OztlQUdBOztVQUVBLE9BQUEsV0FBQSxNQUFBO1VBQ0EsT0FBQSxXQUFBLE1BQUE7O1VBRUEsT0FBQSxXQUFBLGVBQUE7Ozs7UUFJQSxPQUFBLFdBQUEsYUFBQTtRQUNBLE9BQUEsV0FBQSxXQUFBLE1BQUEsT0FBQSxXQUFBLE1BQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxPQUFBLElBQUE7UUFDQSxPQUFBLFdBQUEsV0FBQSxNQUFBLE9BQUEsV0FBQSxNQUFBLE1BQUEsT0FBQSxXQUFBLE1BQUEsT0FBQSxJQUFBOzs7UUFHQSxPQUFBLElBQUEsUUFBQTtRQUNBLE9BQUEsSUFBQSxNQUFBLFNBQUE7O1FBRUEsT0FBQSxJQUFBLE1BQUEsT0FBQSxPQUFBLE9BQUEsV0FBQSxPQUFBLE9BQUEsT0FBQSxXQUFBLFdBQUE7UUFDQSxPQUFBLElBQUEsTUFBQSxPQUFBLE1BQUEsT0FBQSxXQUFBLE9BQUEsTUFBQSxPQUFBLFdBQUEsV0FBQTs7Ozs7UUFLQSxPQUFBLElBQUEscUJBQUEsWUFBQSxnQkFBQSxNQUFBLE9BQUE7Ozs7UUFJQSxJQUFBLGtCQUFBLE9BQUEsSUFBQSxRQUFBLFNBQUEsT0FBQSxPQUFBO1VBQ0EsT0FBQSxXQUFBLE1BQUEsTUFBQSxPQUFBLFdBQUEsT0FBQSxPQUFBLElBQUEsb0JBQUEsT0FBQSxJQUFBOzs7UUFHQSxJQUFBLG1CQUFBLE9BQUEsSUFBQSxRQUFBLFVBQUEsT0FBQSxPQUFBO1VBQ0EsT0FBQSxXQUFBLE1BQUEsTUFBQSxPQUFBLFdBQUEsT0FBQSxJQUFBLE9BQUEsSUFBQTs7UUFFQSxPQUFBLElBQUEsZ0JBQUEsVUFBQTtRQUNBLE9BQUEsSUFBQSxnQkFBQSxVQUFBOzs7UUFHQSxPQUFBLElBQUEsTUFBQSxNQUFBOzs7Ozs7UUFNQSxJQUFBLGtCQUFBLE9BQUEsSUFBQSxnQkFBQSxtQkFBQSxPQUFBLElBQUEsZUFBQTs7O1VBR0EsT0FBQSxJQUFBLE1BQUEsSUFBQSxTQUFBLG1CQUFBLE9BQUEsSUFBQSxnQkFBQSxPQUFBLElBQUE7Ozs7VUFJQSxPQUFBLElBQUEsZUFBQTs7OztVQUlBLElBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxTQUFBLGtCQUFBOztZQUVBLE9BQUEsSUFBQSxNQUFBLElBQUEsU0FBQTs7WUFFQSxPQUFBLElBQUEsZUFBQTs7OzthQUlBOztVQUVBLE9BQUEsSUFBQSxNQUFBLElBQUEsU0FBQTs7VUFFQSxPQUFBLElBQUEsZUFBQTs7OztRQUlBLElBQUEsT0FBQSxpQkFBQSxHQUFBO1VBQ0EsT0FBQSxJQUFBLGVBQUE7Ozs7Ozs7UUFPQSxPQUFBLE9BQUEsU0FBQTs7VUFFQSxTQUFBLEdBQUEsTUFBQSxPQUFBLElBQUEsZUFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1lBQ0EsT0FBQSxVQUFBLEdBQUEsTUFBQSxVQUFBLEdBQUE7O1VBRUEsU0FBQSxHQUFBLE1BQUEsT0FBQSxJQUFBLGVBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtZQUNBLE9BQUEsVUFBQSxHQUFBLE1BQUEsVUFBQSxHQUFBOzs7VUFHQSxVQUFBLEdBQUEsTUFBQSxPQUFBLElBQUEsZUFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1lBQ0EsT0FBQSxVQUFBLEdBQUEsT0FBQSxVQUFBLEdBQUE7O1VBRUEsVUFBQSxHQUFBLE1BQUEsT0FBQSxJQUFBLGVBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtZQUNBLE9BQUEsVUFBQSxHQUFBLE9BQUEsVUFBQSxHQUFBOzs7VUFHQSxXQUFBLEdBQUEsTUFBQSxPQUFBLElBQUEsZUFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1lBQ0EsT0FBQSxVQUFBLEdBQUEsUUFBQSxVQUFBLEdBQUE7O1VBRUEsV0FBQSxHQUFBLE1BQUEsT0FBQSxJQUFBLGVBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtZQUNBLE9BQUEsVUFBQSxHQUFBLFFBQUEsVUFBQSxHQUFBOzs7VUFHQSxXQUFBLEdBQUEsTUFBQSxPQUFBLElBQUEsZUFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1lBQ0EsT0FBQSxVQUFBLEdBQUEsS0FBQSxVQUFBLEdBQUE7O1VBRUEsV0FBQSxHQUFBLE1BQUEsT0FBQSxJQUFBLGVBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtZQUNBLE9BQUEsVUFBQSxHQUFBLEtBQUEsVUFBQSxHQUFBOzs7Ozs7Ozs7Ozs7UUFZQSxJQUFBLGNBQUEsR0FBQSxNQUFBLFVBQUEsV0FBQSxDQUFBLEdBQUE7UUFDQSxZQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUE7UUFDQSxJQUFBLGtCQUFBLFlBQUEsY0FBQTtRQUNBLElBQUEsa0JBQUEsT0FBQSxXQUFBLE1BQUEsS0FBQTtVQUNBLGtCQUFBLG1CQUFBLE9BQUEsV0FBQSxNQUFBLE1BQUE7O1FBRUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxRQUFBOzs7O1FBSUEsT0FBQSxPQUFBLFVBQUEsR0FBQSxNQUFBLFVBQUEsV0FBQSxDQUFBLEdBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtRQUNBLE9BQUEsT0FBQSxVQUFBLEdBQUEsTUFBQSxVQUFBLFdBQUEsQ0FBQSxHQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7OztRQUdBLElBQUEsT0FBQSxJQUFBLGVBQUEsT0FBQTtVQUNBLE9BQUEsT0FBQSxRQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUE7VUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO2VBQ0EsSUFBQSxPQUFBLElBQUEsZUFBQSxTQUFBO1VBQ0EsT0FBQSxPQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQTtVQUNBLE9BQUEsT0FBQSxRQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUE7ZUFDQSxJQUFBLE9BQUEsSUFBQSxlQUFBLFFBQUE7VUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO1VBQ0EsT0FBQSxPQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQTtlQUNBLElBQUEsT0FBQSxJQUFBLGVBQUEsU0FBQTtVQUNBLE9BQUEsT0FBQSxRQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUE7VUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBOzs7Ozs7O1FBT0EsT0FBQSxJQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTs7O1FBR0EsT0FBQSxJQUFBLGNBQUEsQ0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFFBQUEsT0FBQSxJQUFBLGtCQUFBLE9BQUEsSUFBQSxNQUFBLElBQUEsU0FBQSxPQUFBLElBQUE7OztRQUdBLElBQUEsT0FBQSxJQUFBLGNBQUEsR0FBQTtVQUNBLE9BQUEsSUFBQSxjQUFBOzs7Ozs7UUFNQSxJQUFBLGVBQUE7UUFDQSxJQUFBLGVBQUE7OztRQUdBLElBQUEsZ0JBQUE7UUFDQSxJQUFBLGdCQUFBOzs7O1FBSUEsT0FBQSxvQkFBQSxHQUFBO1dBQ0EsU0FBQSxPQUFBLENBQUEsR0FBQTtXQUNBLE1BQUEsQ0FBQSxLQUFBOzs7UUFHQSxPQUFBLE9BQUEsaUJBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtRQUNBLE9BQUEsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBOzs7UUFHQSxPQUFBLElBQUEsa0JBQUE7UUFDQSxPQUFBLElBQUEsZ0JBQUEsTUFBQTtRQUNBLE9BQUEsSUFBQSxnQkFBQSxNQUFBOzs7O1FBSUEsT0FBQSxJQUFBLFlBQUEsT0FBQSxXQUFBLE1BQUEsT0FBQSxPQUFBLE9BQUEsUUFBQSxjQUFBOzs7UUFHQSxPQUFBLE9BQUEsV0FBQSxPQUFBLElBQUEsYUFBQSxPQUFBLFNBQUEsR0FBQTtVQUNBLE9BQUEsS0FBQSxJQUFBLEVBQUE7V0FDQTs7OztRQUlBLElBQUEsT0FBQSxpQkFBQSxHQUFBOztVQUVBLElBQUEsT0FBQSxPQUFBLHFCQUFBLFVBQUE7WUFDQSxPQUFBLE9BQUEsZ0JBQUEsR0FBQSxNQUFBO2VBQ0EsT0FBQSxDQUFBLEdBQUEsS0FBQSxJQUFBLE9BQUEsT0FBQSxZQUFBLE1BQUE7ZUFDQSxNQUFBLENBQUEsS0FBQTtpQkFDQSxJQUFBLE9BQUEsT0FBQSxxQkFBQSxPQUFBO1lBQ0EsT0FBQSxPQUFBLGdCQUFBLEdBQUEsTUFBQTtlQUNBLE9BQUEsQ0FBQSxPQUFBLEtBQUEsSUFBQSxPQUFBLE9BQUEsWUFBQSxNQUFBO2VBQ0EsTUFBQSxDQUFBLEtBQUE7O2VBRUE7O1VBRUEsSUFBQSxPQUFBLE9BQUEscUJBQUEsVUFBQTtZQUNBLE9BQUEsT0FBQSxnQkFBQSxHQUFBLE1BQUE7ZUFDQSxPQUFBLENBQUEsR0FBQSxPQUFBLGVBQUEsTUFBQTtlQUNBLE1BQUEsQ0FBQSxLQUFBO2lCQUNBLElBQUEsT0FBQSxPQUFBLHFCQUFBLE9BQUE7WUFDQSxPQUFBLE9BQUEsZ0JBQUEsR0FBQSxNQUFBO2VBQ0EsT0FBQSxDQUFBLE9BQUEsT0FBQSxlQUFBLE1BQUE7ZUFDQSxNQUFBLENBQUEsS0FBQTs7Ozs7UUFLQSxPQUFBLElBQUEsWUFBQTs7Ozs7UUFLQSxJQUFBLE1BQUEsSUFBQSxhQUFBLE1BQUEsSUFBQSxlQUFBLE1BQUEsSUFBQSxhQUFBLE1BQUEsSUFBQSxjQUFBO1VBQ0EsT0FBQSxPQUFBLFlBQUE7ZUFDQTtVQUNBLE9BQUEsT0FBQSxZQUFBOzs7O1FBSUEsSUFBQSxNQUFBLElBQUEsYUFBQSxNQUFBLElBQUEsY0FBQTtVQUNBLE9BQUEsT0FBQSxZQUFBO2VBQ0E7VUFDQSxPQUFBLE9BQUEsWUFBQTs7O1FBR0EsT0FBQTs7OztNQUlBLFNBQUEsb0JBQUEsUUFBQTs7O1FBR0EsSUFBQSxPQUFBLElBQUEsVUFBQSxPQUFBO1VBQ0EsSUFBQSxnQkFBQSxPQUFBLElBQUE7ZUFDQTtVQUNBLElBQUEsZ0JBQUEsT0FBQSxJQUFBOzs7UUFHQSxJQUFBLE9BQUEsSUFBQSxRQUFBOzs7VUFHQSxJQUFBLGVBQUEsT0FBQTtVQUNBLElBQUEsZ0JBQUEsT0FBQTs7O1VBR0EsSUFBQSxXQUFBO1VBQ0EsU0FBQSxRQUFBLGVBQUEsY0FBQSxPQUFBLGNBQUE7VUFDQSxTQUFBLFNBQUEsZ0JBQUEsY0FBQSxNQUFBLGNBQUE7OztVQUdBLEdBQUEsT0FBQSxNQUFBLE9BQUEsSUFBQTthQUNBLE1BQUEsZUFBQSxjQUFBLE9BQUE7YUFDQSxNQUFBLGNBQUEsY0FBQSxNQUFBO2FBQ0EsTUFBQSxTQUFBLFNBQUEsUUFBQTthQUNBLE1BQUEsVUFBQSxTQUFBLFNBQUE7O2VBRUE7OztVQUdBLEdBQUEsT0FBQSxNQUFBLE9BQUEsSUFBQTthQUNBLE1BQUEsZUFBQSxjQUFBLE9BQUE7YUFDQSxNQUFBLGNBQUEsY0FBQSxNQUFBOzs7O01BSUEsT0FBQTs7OztJQUlBLFNBQUEsT0FBQSxNQUFBOzs7O01BSUEsU0FBQSxVQUFBLFFBQUEsV0FBQSxTQUFBOztRQUVBLFNBQUEsWUFBQSxHQUFBO1VBQ0EsSUFBQSxZQUFBLEVBQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUE7VUFDQSxJQUFBLFVBQUEsU0FBQSxPQUFBLE9BQUEsZ0JBQUE7WUFDQSxZQUFBLFVBQUEsVUFBQSxHQUFBLE9BQUEsT0FBQSxrQkFBQTs7VUFFQSxPQUFBOzs7UUFHQSxJQUFBLGdCQUFBLEdBQUEsT0FBQTtXQUNBLE9BQUE7V0FDQSxLQUFBLE1BQUE7V0FDQSxLQUFBLGFBQUEsZUFBQSxPQUFBLFdBQUEsT0FBQSxPQUFBO1lBQ0EsT0FBQSxJQUFBLE1BQUEsT0FBQSxNQUFBOzs7UUFHQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFFBQUEsT0FBQSxJQUFBO1dBQ0EsS0FBQSxTQUFBLE9BQUEsV0FBQSxXQUFBO1dBQ0EsS0FBQSxVQUFBLEtBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxTQUFBO1dBQ0EsS0FBQSxTQUFBOzs7UUFHQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsZUFBQSxPQUFBLFdBQUEsTUFBQSxNQUFBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsTUFBQTs7Ozs7UUFLQSxJQUFBLGFBQUEsR0FBQSxPQUFBO1dBQ0EsVUFBQTtXQUNBLEtBQUE7V0FDQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLE9BQUE7WUFDQSxPQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUE7O1dBRUEsR0FBQSxZQUFBLFNBQUEsR0FBQTtZQUNBLFFBQUEsWUFBQSxLQUFBO1lBQ0EsSUFBQSxPQUFBLG1CQUFBO2NBQ0EscUJBQUEsTUFBQSxFQUFBOzs7O1FBSUEsSUFBQSxPQUFBLE9BQUEsZUFBQTs7VUFFQSxJQUFBLE1BQUEsR0FBQTthQUNBLEtBQUEsU0FBQTthQUNBLFVBQUE7YUFDQSxPQUFBLENBQUEsR0FBQTthQUNBLEtBQUEsU0FBQSxHQUFBO2NBQ0EsSUFBQSxZQUFBLEVBQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUE7Y0FDQSxPQUFBLFdBQUEsWUFBQTs7O1VBR0EsR0FBQSxPQUFBLE1BQUEsT0FBQSxJQUFBO2FBQ0EsT0FBQTthQUNBLE9BQUE7YUFDQSxLQUFBOztVQUVBO2FBQ0EsR0FBQSxhQUFBLFNBQUEsR0FBQTtjQUNBLEdBQUEsT0FBQTtpQkFDQSxPQUFBO2lCQUNBLFFBQUEsVUFBQTtjQUNBLElBQUEsS0FBQTs7YUFFQSxHQUFBLFlBQUEsU0FBQSxTQUFBLEdBQUE7Y0FDQSxHQUFBLE9BQUE7aUJBQ0EsT0FBQTtpQkFDQSxRQUFBLFVBQUE7Y0FDQSxJQUFBLEtBQUE7O2VBRUE7VUFDQTthQUNBLEdBQUEsYUFBQSxTQUFBLEdBQUE7Y0FDQSxHQUFBLE9BQUE7aUJBQ0EsT0FBQTtpQkFDQSxRQUFBLFVBQUE7O2FBRUEsR0FBQSxZQUFBLFNBQUEsU0FBQSxHQUFBO2NBQ0EsR0FBQSxPQUFBO2lCQUNBLE9BQUE7aUJBQ0EsUUFBQSxVQUFBOzs7Ozs7UUFNQTtXQUNBLE9BQUEsUUFBQTtXQUNBLEtBQUEsS0FBQSxDQUFBO1dBQ0EsS0FBQSxLQUFBO1dBQ0EsS0FBQSxTQUFBO1dBQ0EsS0FBQSxVQUFBO1dBQ0EsTUFBQSxXQUFBOzs7UUFHQTtXQUNBLE9BQUE7V0FDQSxLQUFBLEtBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtXQUNBLEtBQUEsZUFBQTtXQUNBLE1BQUEsYUFBQSxPQUFBLE9BQUEsaUJBQUE7V0FDQSxLQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsWUFBQTs7OztRQUlBO1dBQ0EsS0FBQSxXQUFBO1lBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQTtlQUNBLE9BQUEsUUFBQSxHQUFBO2VBQ0E7WUFDQSxHQUFBLE9BQUE7ZUFDQSxPQUFBO2VBQ0EsS0FBQSxLQUFBLEtBQUE7ZUFDQSxLQUFBLEtBQUE7ZUFDQSxLQUFBLFNBQUEsS0FBQTtlQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQTtlQUNBLE1BQUEsUUFBQSxXQUFBO2dCQUNBLElBQUEsVUFBQTtnQkFDQSxPQUFBOztlQUVBLE1BQUEsV0FBQSxTQUFBLEdBQUE7Z0JBQ0EsSUFBQSxlQUFBOztnQkFFQSxJQUFBLEVBQUEsV0FBQSxHQUFBO2tCQUNBLGVBQUE7O2dCQUVBLE9BQUE7Ozs7O1FBS0EsT0FBQSxxQkFBQTtRQUNBLE9BQUEsbUJBQUEsTUFBQTs7UUFFQSxHQUFBLFVBQUEsbUJBQUEsS0FBQSxXQUFBO1VBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUEsUUFBQSxPQUFBLFVBQUE7VUFDQSxJQUFBLFlBQUEsT0FBQSxtQkFBQSxLQUFBO1lBQ0EsT0FBQSxtQkFBQSxNQUFBOzs7Ozs7UUFNQSxJQUFBLGdCQUFBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsTUFBQTtXQUNBLEtBQUEsYUFBQSxlQUFBLE9BQUEsV0FBQSxNQUFBLE1BQUE7V0FDQSxPQUFBO1dBQ0EsS0FBQSxNQUFBOzs7UUFHQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLFFBQUEsT0FBQSxJQUFBO1dBQ0EsS0FBQSxTQUFBLE9BQUEsV0FBQSxNQUFBO1dBQ0EsS0FBQSxVQUFBLFdBQUE7WUFDQSxJQUFBLGNBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtZQUNBLE9BQUE7Ozs7UUFJQSxJQUFBLHlCQUFBO1dBQ0EsVUFBQTtXQUNBLEtBQUE7V0FDQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLE9BQUE7WUFDQSxPQUFBLGtCQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUE7Ozs7UUFJQTtXQUNBLE9BQUE7V0FDQSxLQUFBLEtBQUEsV0FBQTtZQUNBLElBQUEsV0FBQSxPQUFBLFdBQUEsZUFBQTtZQUNBLElBQUEsV0FBQTtZQUNBLElBQUEsUUFBQTtZQUNBLElBQUEsUUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO1lBQ0EsSUFBQSxVQUFBLE9BQUEsV0FBQSxlQUFBO1lBQ0EsSUFBQSxVQUFBLE9BQUEsT0FBQSxRQUFBO1lBQ0EsSUFBQSxnQkFBQSxPQUFBLFdBQUEsTUFBQSxXQUFBO2NBQ0EsUUFBQSxNQUFBLFFBQUEsU0FBQSxVQUFBLE1BQUEsVUFBQTtZQUNBLE9BQUE7O1dBRUEsS0FBQSxRQUFBLFNBQUEsR0FBQTs7WUFFQSxJQUFBLGFBQUE7WUFDQSxJQUFBLE9BQUEsT0FBQSxpQkFBQTtjQUNBLGFBQUEsT0FBQSxPQUFBLGFBQUEsSUFBQSxFQUFBOztZQUVBLE9BQUE7Ozs7UUFJQSxJQUFBLE1BQUEsSUFBQSxPQUFBLGFBQUEsVUFBQSxJQUFBLFVBQUE7OztVQUdBLElBQUEsVUFBQSxLQUFBLElBQUEsT0FBQSxJQUFBLFdBQUEsU0FBQSxHQUFBO1lBQ0EsT0FBQSxLQUFBLElBQUEsRUFBQTthQUNBO1VBQ0EsT0FBQSxPQUFBLGdCQUFBLEdBQUE7YUFDQTthQUNBLE9BQUEsQ0FBQSxHQUFBO2FBQ0EsTUFBQSxDQUFBLEdBQUEsT0FBQSxXQUFBLE1BQUE7O1VBRUE7YUFDQSxPQUFBO2FBQ0EsS0FBQSxTQUFBO2FBQ0EsS0FBQSxTQUFBLFNBQUEsR0FBQTtjQUNBLElBQUEsYUFBQTtjQUNBLGFBQUEsT0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLEVBQUE7Y0FDQSxPQUFBOzthQUVBLEtBQUEsS0FBQSxTQUFBLEdBQUE7Y0FDQSxJQUFBLGFBQUE7Y0FDQSxhQUFBLENBQUEsT0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLEVBQUE7Y0FDQSxPQUFBOzthQUVBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQTthQUNBLEtBQUEsUUFBQSxTQUFBLEdBQUE7Y0FDQSxPQUFBLEVBQUEsUUFBQSxJQUFBLE9BQUEsT0FBQSxXQUFBLEtBQUEsT0FBQSxPQUFBLFdBQUE7O2FBRUEsS0FBQSxXQUFBOzs7OztRQUtBLEdBQUEsVUFBQTtXQUNBLEdBQUEsU0FBQSxTQUFBLEdBQUE7WUFDQSxJQUFBLE9BQUEsT0FBQSxlQUFBLFlBQUE7Y0FDQSxPQUFBLFlBQUEsRUFBQSxNQUFBO2NBQ0EscUJBQUEsTUFBQSxFQUFBO21CQUNBO2NBQ0EsSUFBQSxPQUFBLG1CQUFBO2dCQUNBLHFCQUFBLE1BQUEsRUFBQTs7Ozs7OztRQU9BLFNBQUEscUJBQUEsYUFBQSxnQkFBQTs7VUFFQSxJQUFBLGtCQUFBLE9BQUEsa0JBQUE7O1lBRUEsSUFBQSxtQkFBQTtZQUNBLElBQUEsaUJBQUE7WUFDQSxJQUFBLGVBQUEsbUJBQUEsT0FBQSxJQUFBO1lBQ0EsSUFBQSxnQkFBQSxtQkFBQSxPQUFBLElBQUEsZUFBQSxPQUFBLElBQUE7O1lBRUEsR0FBQSxVQUFBO2VBQ0E7Ozs7Ozs7OztZQVNBLEdBQUEsT0FBQTtlQUNBLE9BQUE7ZUFDQSxLQUFBLFNBQUE7ZUFDQSxLQUFBLE1BQUE7ZUFDQSxLQUFBLFNBQUEsT0FBQSxJQUFBLFFBQUE7ZUFDQSxLQUFBLFVBQUE7ZUFDQSxLQUFBLFFBQUEsT0FBQSxPQUFBO2VBQ0EsS0FBQSxXQUFBOztZQUVBLEdBQUEsT0FBQTtlQUNBLE9BQUE7ZUFDQSxLQUFBLFNBQUE7ZUFDQSxLQUFBLE1BQUE7ZUFDQSxLQUFBLFNBQUEsT0FBQSxJQUFBLFFBQUE7ZUFDQSxLQUFBLFVBQUE7ZUFDQSxLQUFBLFFBQUEsT0FBQSxPQUFBO2VBQ0EsS0FBQSxXQUFBO2VBQ0EsS0FBQSxhQUFBLFdBQUE7Z0JBQ0EsSUFBQSxrQkFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO2dCQUNBLE9BQUEsaUJBQUEsa0JBQUE7O2lCQUVBO1lBQ0EsR0FBQSxVQUFBO2VBQ0E7WUFDQSxPQUFBLG1CQUFBLENBQUE7Ozs7Ozs7Ozs7UUFVQSxPQUFBOzs7O01BSUEsU0FBQSxVQUFBLFFBQUEsV0FBQSxTQUFBOztRQUVBLFNBQUEsWUFBQSxHQUFBO1VBQ0EsSUFBQSxZQUFBLEVBQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUE7VUFDQSxJQUFBLFVBQUEsU0FBQSxPQUFBLE9BQUEsZ0JBQUE7WUFDQSxZQUFBLFVBQUEsVUFBQSxHQUFBLE9BQUEsT0FBQSxrQkFBQTs7VUFFQSxPQUFBOzs7O1FBSUEsSUFBQSxvQkFBQSxHQUFBLE9BQUE7V0FDQSxPQUFBO1dBQ0EsS0FBQSxNQUFBO1dBQ0EsS0FBQSxhQUFBLGVBQUEsT0FBQSxJQUFBLE1BQUEsT0FBQSxPQUFBO1lBQ0EsT0FBQSxXQUFBLE9BQUEsTUFBQTs7O1FBR0E7V0FDQSxPQUFBO1dBQ0EsS0FBQSxRQUFBLE9BQUEsSUFBQTtXQUNBLEtBQUEsU0FBQSxLQUFBLE9BQUEsSUFBQSxNQUFBLElBQUEsUUFBQTtXQUNBLEtBQUEsVUFBQSxPQUFBLFdBQUEsV0FBQTtXQUNBLEtBQUEsU0FBQTs7O1FBR0E7V0FDQSxPQUFBO1dBQ0EsS0FBQSxTQUFBOztXQUVBLEtBQUEsYUFBQSxpQkFBQSxPQUFBLFdBQUEsTUFBQSxNQUFBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsTUFBQTs7O1FBR0EsSUFBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBLElBQUEsT0FBQSxJQUFBOztRQUVBLElBQUEsb0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTs7OztRQUlBLElBQUEsZ0JBQUEsR0FBQSxPQUFBO1dBQ0EsVUFBQTtXQUNBLEtBQUE7V0FDQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLE9BQUE7WUFDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsU0FBQTs7OztRQUlBLElBQUEsa0JBQUE7O1dBRUEsT0FBQTtXQUNBLEtBQUEsU0FBQTs7V0FFQSxLQUFBLGFBQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBLElBQUEsTUFBQSxpQkFBQTtXQUNBLEdBQUEsYUFBQSxTQUFBLEdBQUE7WUFDQSxHQUFBLE9BQUEsTUFBQSxPQUFBO2VBQ0EsUUFBQSxVQUFBOzs7V0FHQSxHQUFBLFlBQUEsU0FBQSxHQUFBO1lBQ0EsR0FBQSxPQUFBLE1BQUEsT0FBQTtlQUNBLFFBQUEsVUFBQTs7Ozs7UUFLQTtXQUNBLE9BQUE7V0FDQSxLQUFBLEtBQUE7O1dBRUEsS0FBQSxLQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7V0FDQSxLQUFBLE1BQUEsT0FBQSxJQUFBO1dBQ0EsS0FBQSxlQUFBO1dBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQTtZQUNBLE9BQUEsRUFBQTs7O1dBR0EsTUFBQSxhQUFBLE9BQUEsT0FBQSxpQkFBQTtXQUNBLEtBQUEsU0FBQSxHQUFBO1lBQ0EsT0FBQSxZQUFBOzs7UUFHQSxJQUFBLE9BQUEsT0FBQSxlQUFBOzs7VUFHQSxJQUFBLE1BQUEsR0FBQTthQUNBLEtBQUEsU0FBQTthQUNBLFVBQUE7YUFDQSxPQUFBLENBQUEsSUFBQTthQUNBLEtBQUEsU0FBQSxHQUFBO2NBQ0EsSUFBQSxZQUFBLEVBQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUE7Y0FDQSxPQUFBLFdBQUEsWUFBQTs7VUFFQSxHQUFBLE9BQUEsTUFBQSxPQUFBLElBQUE7YUFDQSxPQUFBO2FBQ0EsT0FBQTthQUNBLEtBQUE7O1VBRUE7YUFDQSxPQUFBO2FBQ0EsR0FBQSxhQUFBLElBQUE7YUFDQSxHQUFBLFlBQUEsSUFBQTs7O1FBR0EsT0FBQSxtQkFBQSxNQUFBO1FBQ0EsR0FBQSxVQUFBLG9CQUFBLEtBQUEsV0FBQTtVQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsTUFBQSxPQUFBLFFBQUEsT0FBQSxVQUFBO1VBQ0EsSUFBQSxZQUFBLE9BQUEsbUJBQUEsS0FBQTs7O1lBR0EsT0FBQSxtQkFBQSxNQUFBOzs7Ozs7UUFNQSxPQUFBLGlCQUFBO1FBQ0EsT0FBQSxlQUFBLE1BQUE7UUFDQSxPQUFBLGVBQUEsTUFBQTs7UUFFQSxJQUFBLE9BQUEsbUJBQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxLQUFBOzs7VUFHQSxPQUFBLGVBQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxNQUFBLE9BQUEsbUJBQUE7O1VBRUEsT0FBQSxtQkFBQSxNQUFBLE9BQUEsZUFBQSxNQUFBLE9BQUEsbUJBQUE7OztVQUdBLE9BQUEsT0FBQSxpQkFBQSxPQUFBLE9BQUEsaUJBQUEsT0FBQSxlQUFBOzs7VUFHQSxHQUFBLFVBQUEsbUJBQUEsS0FBQSxXQUFBO1lBQ0EsR0FBQSxPQUFBLE1BQUEsT0FBQTtlQUNBLE1BQUEsYUFBQSxPQUFBLE9BQUEsaUJBQUE7Ozs7UUFJQSxJQUFBLE9BQUEsbUJBQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxLQUFBO1VBQ0EsT0FBQSxlQUFBLE1BQUEsT0FBQSxXQUFBLE1BQUEsTUFBQSxPQUFBLG1CQUFBOztVQUVBLE9BQUEsbUJBQUEsTUFBQSxPQUFBLGVBQUEsTUFBQSxPQUFBLG1CQUFBOztVQUVBLE9BQUEsT0FBQSxpQkFBQSxPQUFBLE9BQUEsaUJBQUEsT0FBQSxlQUFBOztVQUVBLEdBQUEsVUFBQSxvQkFBQSxLQUFBLFdBQUE7WUFDQSxHQUFBLE9BQUEsTUFBQSxPQUFBO2VBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQSxpQkFBQTs7Ozs7UUFLQTtXQUNBLE9BQUEsUUFBQTtXQUNBLEtBQUEsS0FBQTtXQUNBLEtBQUEsS0FBQTtXQUNBLEtBQUEsU0FBQTtXQUNBLEtBQUEsVUFBQTtXQUNBLE1BQUEsV0FBQTs7O1FBR0E7V0FDQSxLQUFBLFdBQUE7WUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBO2VBQ0EsT0FBQSxRQUFBLEdBQUE7ZUFDQTtZQUNBLEdBQUEsT0FBQTtlQUNBLE9BQUE7ZUFDQSxLQUFBLEtBQUEsS0FBQSxJQUFBO2VBQ0EsS0FBQSxLQUFBO2VBQ0EsS0FBQSxTQUFBLEtBQUEsUUFBQTtlQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO2VBQ0EsTUFBQSxRQUFBO2VBQ0EsTUFBQSxXQUFBOzs7O1FBSUE7V0FDQSxPQUFBO1dBQ0EsTUFBQSxnQkFBQTtXQUNBLEtBQUEsS0FBQSxXQUFBOztZQUVBLElBQUEsV0FBQSxDQUFBLE9BQUEsSUFBQTtZQUNBLElBQUEsVUFBQTtZQUNBLElBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO1lBQ0EsSUFBQSxVQUFBLEVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtjQUNBLE9BQUEsSUFBQTtZQUNBLElBQUEsVUFBQSxDQUFBLE9BQUEsSUFBQTtZQUNBLElBQUEsZ0JBQUEsT0FBQSxXQUFBLFVBQUEsVUFBQTtjQUNBLFVBQUEsU0FBQSxVQUFBLE1BQUEsVUFBQTtZQUNBLE9BQUE7O1dBRUEsS0FBQSxRQUFBLFNBQUEsR0FBQTtZQUNBLElBQUEsYUFBQTtZQUNBLElBQUEsT0FBQSxPQUFBLGlCQUFBO2NBQ0EsYUFBQSxPQUFBLE9BQUEsYUFBQSxJQUFBLEVBQUE7O1lBRUEsT0FBQTs7Ozs7UUFLQSxJQUFBLFVBQUEsS0FBQSxJQUFBLE9BQUEsSUFBQSxXQUFBLFNBQUEsR0FBQTtVQUNBLE9BQUEsS0FBQSxJQUFBLEVBQUE7V0FDQTtRQUNBLElBQUEsVUFBQSxLQUFBLElBQUEsT0FBQSxJQUFBLFdBQUEsU0FBQSxHQUFBO1VBQ0EsT0FBQSxLQUFBLElBQUEsRUFBQTtXQUNBOzs7UUFHQSxPQUFBLE9BQUEsZ0JBQUEsR0FBQTtXQUNBO1dBQ0EsT0FBQSxDQUFBLFVBQUEsTUFBQTtXQUNBLE1BQUEsQ0FBQSxHQUFBLE9BQUEsV0FBQSxNQUFBOzs7UUFHQSxJQUFBLE1BQUEsSUFBQSxPQUFBLGFBQUEsVUFBQSxJQUFBLFVBQUE7VUFDQTthQUNBLE9BQUE7YUFDQSxLQUFBLFNBQUE7YUFDQSxLQUFBLFNBQUEsU0FBQSxHQUFBO2NBQ0EsSUFBQSxhQUFBO2NBQ0EsSUFBQSxFQUFBLFFBQUEsR0FBQTtnQkFDQSxhQUFBLE9BQUEsT0FBQSxjQUFBLEVBQUE7O2NBRUEsT0FBQTs7O2FBR0EsS0FBQSxVQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7YUFDQSxLQUFBLFFBQUEsU0FBQSxHQUFBO2NBQ0EsT0FBQSxFQUFBLFFBQUEsSUFBQSxPQUFBLE9BQUEsV0FBQSxLQUFBLE9BQUEsT0FBQSxXQUFBOzthQUVBLEtBQUEsV0FBQTs7Ozs7UUFLQSxHQUFBLFVBQUE7V0FDQSxHQUFBLFNBQUEsU0FBQSxHQUFBOztZQUVBLElBQUEsT0FBQSxPQUFBLGVBQUEsWUFBQTtjQUNBLE9BQUEsWUFBQSxFQUFBLE1BQUE7Y0FDQSxxQkFBQSxNQUFBLEVBQUE7bUJBQ0E7O2NBRUEsSUFBQSxPQUFBLG1CQUFBO2dCQUNBLHFCQUFBLE1BQUEsRUFBQTs7Ozs7O1dBTUEsR0FBQSxZQUFBLFNBQUEsR0FBQTtZQUNBLFFBQUEsWUFBQSxLQUFBO1lBQ0EsSUFBQSxPQUFBLG1CQUFBO2NBQ0EscUJBQUEsTUFBQSxFQUFBOzs7OztRQUtBLFNBQUEscUJBQUEsYUFBQSxnQkFBQTs7VUFFQSxJQUFBLGtCQUFBLE9BQUEsa0JBQUE7O1lBRUEsT0FBQSxtQkFBQTs7WUFFQSxJQUFBLG1CQUFBO1lBQ0EsSUFBQSxpQkFBQTtZQUNBLElBQUEsZUFBQSxtQkFBQSxPQUFBLElBQUE7WUFDQSxJQUFBLGdCQUFBLG1CQUFBLE9BQUEsSUFBQSxlQUFBLE9BQUEsSUFBQTs7WUFFQSxHQUFBLFVBQUE7ZUFDQTs7Ozs7Ozs7Ozs7OztZQWFBLEdBQUEsT0FBQTtlQUNBLE9BQUE7ZUFDQSxLQUFBLFNBQUE7ZUFDQSxLQUFBLE1BQUE7ZUFDQSxLQUFBLFNBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtlQUNBLEtBQUEsVUFBQTtlQUNBLEtBQUEsUUFBQSxPQUFBLE9BQUE7ZUFDQSxLQUFBLFdBQUE7ZUFDQSxLQUFBLGFBQUEsV0FBQTtnQkFDQSxJQUFBLGtCQUFBO2dCQUNBLElBQUEsa0JBQUEsRUFBQSxPQUFBLElBQUEsTUFBQSxJQUFBO2tCQUNBLE9BQUEsV0FBQSxNQUFBLE9BQUEsSUFBQTtnQkFDQSxPQUFBLGVBQUEsa0JBQUEsTUFBQSxrQkFBQTs7O1lBR0EsR0FBQSxPQUFBO2VBQ0EsT0FBQTtlQUNBLEtBQUEsU0FBQTtlQUNBLEtBQUEsTUFBQTtlQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBO2VBQ0EsS0FBQSxVQUFBO2VBQ0EsS0FBQSxRQUFBLE9BQUEsT0FBQTtlQUNBLEtBQUEsV0FBQTtlQUNBLEtBQUEsYUFBQSxXQUFBOztnQkFFQSxJQUFBLGtCQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7Z0JBQ0EsSUFBQSxrQkFBQSxFQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7a0JBQ0EsT0FBQSxXQUFBLE1BQUEsT0FBQSxJQUFBO2dCQUNBLE9BQUEsZUFBQSxrQkFBQSxNQUFBLGtCQUFBOztpQkFFQTtZQUNBLEdBQUEsVUFBQTtlQUNBO1lBQ0EsT0FBQSxtQkFBQSxDQUFBOzs7OztRQUtBLE9BQUE7Ozs7TUFJQSxPQUFBO1FBQ0EsV0FBQTtRQUNBLFdBQUE7Ozs7OztJQU1BLFNBQUEsY0FBQTs7TUFFQSxTQUFBLEtBQUEsUUFBQTs7Ozs7UUFLQSxHQUFBLE9BQUE7V0FDQSxPQUFBO1dBQ0EsS0FBQSxRQUFBLE9BQUEsSUFBQTtXQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsb0JBQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLE1BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsaUJBQUEsT0FBQSxJQUFBLG9CQUFBOzs7UUFHQSxHQUFBLE9BQUE7V0FDQSxPQUFBO1dBQ0EsS0FBQSxNQUFBO1dBQ0EsS0FBQSxPQUFBLE9BQUEsTUFBQTtXQUNBLEtBQUEsZUFBQTtXQUNBLEtBQUEsYUFBQSxXQUFBO1lBQ0EsSUFBQSxTQUFBLE9BQUEsSUFBQSxNQUFBLElBQUEsUUFBQSxJQUFBLE9BQUEsV0FBQTtlQUNBO1lBQ0EsSUFBQSxTQUFBLE9BQUEsT0FBQSxvQkFBQSxPQUFBLElBQUE7WUFDQSxPQUFBLGVBQUEsU0FBQSxNQUFBLFNBQUE7O1dBRUEsTUFBQSxhQUFBO1dBQ0EsTUFBQSxlQUFBOzs7O1FBSUEsR0FBQSxPQUFBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsUUFBQSxPQUFBLElBQUE7V0FDQSxLQUFBLFNBQUEsT0FBQSxPQUFBLG9CQUFBO1dBQ0EsS0FBQSxVQUFBO1dBQ0EsS0FBQSxNQUFBO1dBQ0EsS0FBQSxTQUFBO1dBQ0EsS0FBQSxhQUFBLGVBQUEsT0FBQSxJQUFBLG9CQUFBOzs7O1FBSUEsR0FBQSxPQUFBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsTUFBQTtXQUNBLEtBQUEsYUFBQSxXQUFBOztZQUVBLElBQUEsU0FBQSxPQUFBLE9BQUEsb0JBQUEsT0FBQSxJQUFBO1lBQ0EsSUFBQSxTQUFBLE9BQUEsSUFBQSxNQUFBLElBQUEsU0FBQSxJQUFBLE9BQUEsV0FBQTtlQUNBO1lBQ0EsT0FBQSxlQUFBLFNBQUEsTUFBQSxTQUFBOzs7O1FBSUEsR0FBQSxPQUFBO1dBQ0EsT0FBQTtXQUNBLEtBQUEsT0FBQSxPQUFBLE1BQUE7V0FDQSxLQUFBLGVBQUE7V0FDQSxLQUFBLGFBQUE7V0FDQSxNQUFBLGFBQUE7V0FDQSxNQUFBLGVBQUE7Ozs7TUFJQSxPQUFBO1FBQ0EsTUFBQTs7Ozs7OztJQU9BLFNBQUEsVUFBQSxRQUFBLG1CQUFBOzs7TUFHQSxLQUFBLFFBQUE7O01BRUEsU0FBQSxLQUFBLFFBQUEsbUJBQUE7Ozs7OztRQU1BO1dBQ0EsT0FBQTtXQUNBLE1BQUEsZ0JBQUE7O1dBRUEsS0FBQSxLQUFBO1dBQ0EsS0FBQSxRQUFBLE9BQUEsSUFBQTtXQUNBLEtBQUEsTUFBQTtXQUNBLEtBQUEsYUFBQSxlQUFBLE9BQUEsSUFBQSxNQUFBLElBQUEsUUFBQTtZQUNBLE9BQUEsV0FBQSxNQUFBLE1BQUE7OztRQUdBO1dBQ0EsT0FBQTtXQUNBLE1BQUEsZ0JBQUE7O1dBRUEsS0FBQSxLQUFBO1dBQ0EsS0FBQSxRQUFBLE9BQUEsSUFBQTtXQUNBLEtBQUEsTUFBQTs7V0FFQSxLQUFBLGFBQUEsa0JBQUEsT0FBQSxXQUFBLE1BQUE7WUFDQTs7Ozs7UUFLQSxHQUFBLE9BQUE7V0FDQSxPQUFBO1dBQ0EsS0FBQSxRQUFBLE9BQUEsSUFBQTtXQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsTUFBQSxPQUFBO1dBQ0EsS0FBQSxVQUFBLE9BQUEsSUFBQSxNQUFBLE9BQUE7V0FDQSxLQUFBLE1BQUE7OztRQUdBLEdBQUEsT0FBQTtXQUNBLE9BQUE7V0FDQSxLQUFBLFFBQUEsT0FBQSxJQUFBO1dBQ0EsS0FBQSxTQUFBO1dBQ0EsS0FBQSxVQUFBO1dBQ0EsS0FBQSxhQUFBLFdBQUE7WUFDQSxJQUFBLFdBQUEsT0FBQSxJQUFBLE1BQUEsT0FBQSxPQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7WUFDQSxJQUFBLFVBQUEsT0FBQSxXQUFBLE9BQUEsTUFBQSxPQUFBLFdBQUE7ZUFDQTtZQUNBLE9BQUEsZUFBQSxXQUFBLE1BQUEsVUFBQTs7V0FFQSxLQUFBLFNBQUE7V0FDQSxLQUFBLE1BQUE7Ozs7UUFJQSxHQUFBLE9BQUE7V0FDQSxPQUFBO1dBQ0EsS0FBQSxNQUFBO1dBQ0EsS0FBQSxRQUFBLE9BQUEsSUFBQTtXQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsUUFBQTs7V0FFQSxLQUFBLFVBQUEsSUFBQSxPQUFBLElBQUE7V0FDQSxLQUFBLGFBQUEsV0FBQTs7WUFFQSxJQUFBLGNBQUEsT0FBQSxJQUFBLFFBQUEsU0FBQSxJQUFBLE9BQUEsSUFBQTtZQUNBLE9BQUEsaUJBQUEsY0FBQTs7Ozs7Ozs7O0lBU0EsU0FBQSx5QkFBQSxRQUFBOzs7TUFHQSxJQUFBLE9BQUEsSUFBQSxVQUFBLE9BQUE7UUFDQSxJQUFBLGdCQUFBLE9BQUEsSUFBQTthQUNBO1FBQ0EsSUFBQSxnQkFBQSxPQUFBLElBQUE7Ozs7TUFJQSxJQUFBLGVBQUEsT0FBQTtNQUNBLElBQUEsZ0JBQUEsT0FBQTs7O01BR0EsSUFBQSxXQUFBO01BQ0EsU0FBQSxRQUFBLGVBQUEsY0FBQSxPQUFBLGNBQUE7TUFDQSxTQUFBLFNBQUEsZ0JBQUEsY0FBQSxNQUFBLGNBQUE7O01BRUEsNkJBQUEsU0FBQSxPQUFBLFNBQUEsUUFBQSxjQUFBLE1BQUEsY0FBQSxLQUFBOzs7OztJQUtBLFNBQUEsNkJBQUEsaUJBQUEsa0JBQUEsaUJBQUEsZ0JBQUEsWUFBQTs7TUFFQSxJQUFBLFNBQUEsY0FBQSxLQUFBOzs7O01BSUEsSUFBQSxTQUFBO01BQ0EsSUFBQSxTQUFBO01BQ0EsSUFBQSxTQUFBO01BQ0EsSUFBQSxTQUFBOzs7TUFHQSxJQUFBLGNBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxTQUFBO01BQ0EsSUFBQSxXQUFBLEVBQUEsU0FBQSxLQUFBOzs7OztNQUtBLElBQUE7OztTQUdBLEtBQUEsYUFBQSxlQUFBLENBQUEsR0FBQSxJQUFBLFlBQUE7VUFDQSxZQUFBLElBQUEsTUFBQSxTQUFBLE1BQUEsZUFBQSxDQUFBO1lBQ0E7Y0FDQTs7O01BR0EsR0FBQSxPQUFBO1NBQ0EsS0FBQSxhQUFBLGVBQUEsQ0FBQSxHQUFBLFlBQUEsTUFBQTtVQUNBLFNBQUEsTUFBQSxTQUFBLE1BQUEsZUFBQSxDQUFBLEdBQUEsVUFBQTs7OztNQUlBLEdBQUEsT0FBQTtTQUNBLEtBQUEsYUFBQSxlQUFBLENBQUEsR0FBQSxZQUFBLE1BQUE7VUFDQSxJQUFBLE1BQUEsU0FBQSxNQUFBLGVBQUEsQ0FBQSxHQUFBLFVBQUE7OztNQUdBLEdBQUEsT0FBQTtTQUNBLEtBQUEsYUFBQSxZQUFBLElBQUEsTUFBQSxJQUFBLE1BQUEsZUFBQTtVQUNBLFFBQUE7WUFDQTs7O01BR0EsR0FBQSxPQUFBO1NBQ0EsS0FBQSxhQUFBLFlBQUEsSUFBQSxNQUFBLElBQUEsTUFBQSxlQUFBO1VBQ0EsUUFBQTtZQUNBOzs7OztNQUtBLElBQUEsZUFBQSxPQUFBLElBQUEsTUFBQSxPQUFBLE1BQUEsV0FBQSxTQUFBOzs7TUFHQSxPQUFBLEtBQUEsTUFBQTtNQUNBLE9BQUEsS0FBQSxVQUFBLENBQUEsUUFBQTs7Ozs7TUFLQSxHQUFBLE9BQUEsTUFBQSxPQUFBLElBQUE7U0FDQSxNQUFBLGVBQUEsa0JBQUE7U0FDQSxNQUFBLGNBQUEsaUJBQUE7U0FDQSxNQUFBLFNBQUEsa0JBQUE7U0FDQSxNQUFBLFVBQUEsbUJBQUE7OztNQUdBLE9BQUEsSUFBQSxVQUFBO01BQ0EsT0FBQSxJQUFBLFFBQUEsUUFBQSxPQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUEsSUFBQSxZQUFBLE1BQUEsU0FBQSxRQUFBLE1BQUE7TUFDQSxPQUFBLElBQUEsUUFBQSxTQUFBLE9BQUEsR0FBQSxPQUFBLE1BQUEsT0FBQSxJQUFBLFlBQUEsTUFBQSxVQUFBLFFBQUEsTUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXdDQSxJQUFBLGtCQUFBLE9BQUEsSUFBQSxRQUFBLFNBQUEsT0FBQSxPQUFBO1FBQ0EsT0FBQSxXQUFBLE1BQUEsTUFBQSxPQUFBLFdBQUEsT0FBQSxPQUFBLElBQUEsb0JBQUEsT0FBQSxJQUFBOzs7TUFHQSxJQUFBLG1CQUFBLE9BQUEsSUFBQSxRQUFBLFVBQUEsT0FBQSxPQUFBO1FBQ0EsT0FBQSxXQUFBLE1BQUEsTUFBQSxPQUFBLFdBQUEsT0FBQSxJQUFBLE9BQUEsSUFBQTs7Ozs7Ozs7O01BU0EsSUFBQSxjQUFBLEdBQUEsTUFBQSxVQUFBLFdBQUEsQ0FBQSxHQUFBO01BQ0EsWUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO01BQ0EsSUFBQSxrQkFBQSxZQUFBLGNBQUE7TUFDQSxJQUFBLGtCQUFBLE9BQUEsV0FBQSxNQUFBLEtBQUE7UUFDQSxrQkFBQSxtQkFBQSxPQUFBLFdBQUEsTUFBQSxNQUFBOztNQUVBLE9BQUEsSUFBQSxNQUFBLElBQUEsUUFBQTs7Ozs7OztNQU9BLElBQUEsa0JBQUEsT0FBQSxJQUFBLGdCQUFBLG1CQUFBLE9BQUEsSUFBQSxlQUFBOzs7UUFHQSxPQUFBLElBQUEsTUFBQSxJQUFBLFNBQUEsbUJBQUEsT0FBQSxJQUFBLGdCQUFBLE9BQUEsSUFBQTs7OztRQUlBLE9BQUEsSUFBQSxlQUFBOzs7O1FBSUEsSUFBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFNBQUEsa0JBQUE7O1VBRUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxTQUFBOztVQUVBLE9BQUEsSUFBQSxlQUFBOzs7O1dBSUE7O1FBRUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxTQUFBOztRQUVBLE9BQUEsSUFBQSxlQUFBOzs7O01BSUEsT0FBQSxJQUFBLGNBQUEsQ0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFFBQUEsT0FBQSxJQUFBLGtCQUFBLE9BQUEsSUFBQSxNQUFBLElBQUEsU0FBQSxPQUFBLElBQUE7OztNQUdBLElBQUEsT0FBQSxJQUFBLGNBQUEsR0FBQTtRQUNBLE9BQUEsSUFBQSxjQUFBOzs7Ozs7TUFNQSxJQUFBLFlBQUEsR0FBQSxPQUFBLE1BQUEsT0FBQSxJQUFBO1NBQ0EsT0FBQTtTQUNBLEtBQUEsTUFBQTtTQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsUUFBQTtTQUNBLEtBQUEsVUFBQSxPQUFBLElBQUEsUUFBQTs7O01BR0EsT0FBQSxPQUFBLFFBQUEsV0FBQSxDQUFBLEdBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtNQUNBLE9BQUEsT0FBQSxRQUFBLFdBQUEsQ0FBQSxHQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7OztNQUdBLE9BQUEsSUFBQSxZQUFBLE9BQUEsV0FBQSxNQUFBLE9BQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtNQUNBLE9BQUE7U0FDQSxZQUFBLENBQUEsR0FBQSxPQUFBLElBQUEsWUFBQSxPQUFBLElBQUE7OztNQUdBLE9BQUEsSUFBQSxlQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7OztNQUdBLE9BQUEsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO01BQ0EsT0FBQSxPQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7O01BRUEsVUFBQSxPQUFBO1NBQ0EsS0FBQSxTQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7U0FDQSxLQUFBLFVBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTs7OztNQUlBLFVBQUEsVUFBQTtTQUNBLEtBQUEsU0FBQSxPQUFBLE9BQUEsUUFBQTtTQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQTtTQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUE7VUFDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsRUFBQSxTQUFBOzs7TUFHQSxVQUFBLFVBQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxPQUFBLFFBQUE7U0FDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7O01BRUEsVUFBQSxVQUFBO1NBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxPQUFBO1VBQ0EsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBOzs7TUFHQSxVQUFBLFVBQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtTQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBOztNQUVBLFVBQUEsVUFBQTtTQUNBLEtBQUEsS0FBQSxXQUFBO1VBQ0EsSUFBQSxVQUFBO1VBQ0EsSUFBQSxVQUFBLE9BQUEsT0FBQSxRQUFBO1VBQ0EsSUFBQSxVQUFBO1VBQ0EsSUFBQSxVQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtVQUNBLElBQUEsZ0JBQUEsTUFBQSxVQUFBLE1BQUEsVUFBQTtZQUNBLFVBQUEsT0FBQSxVQUFBLFFBQUEsVUFBQTtVQUNBLE9BQUE7OztNQUdBLFVBQUEsVUFBQTtTQUNBLEtBQUEsS0FBQSxXQUFBO1VBQ0EsSUFBQSxVQUFBO1VBQ0EsSUFBQSxVQUFBLE9BQUEsT0FBQSxRQUFBO1VBQ0EsSUFBQSxVQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtVQUNBLElBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7VUFDQSxJQUFBLGdCQUFBLE1BQUEsVUFBQSxPQUFBLFVBQUE7WUFDQSxVQUFBLE9BQUEsVUFBQSxTQUFBLFVBQUE7VUFDQSxPQUFBOzs7O01BSUEsSUFBQSxtQkFBQTtNQUNBLElBQUEsaUJBQUE7O01BRUEsSUFBQSxlQUFBLG1CQUFBLE9BQUEsSUFBQTtNQUNBLElBQUEsZ0JBQUEsbUJBQUEsT0FBQSxJQUFBLGVBQUEsT0FBQSxJQUFBOzs7Ozs7TUFNQSxHQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxPQUFBLFFBQUE7U0FDQSxLQUFBLFVBQUE7U0FDQSxLQUFBLGFBQUEsV0FBQTtVQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsa0JBQUE7Ozs7TUFJQSxHQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUE7U0FDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxnQkFBQTtTQUNBLEtBQUEsYUFBQSxXQUFBO1VBQ0EsT0FBQSxlQUFBLE9BQUEsT0FBQSxRQUFBLE9BQUEsT0FBQSxrQkFBQTtZQUNBLGdCQUFBLE9BQUE7Ozs7TUFJQSxHQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUE7U0FDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxnQkFBQTtTQUNBLEtBQUEsYUFBQSxXQUFBO1VBQ0EsSUFBQSxnQkFBQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsa0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtVQUNBLE9BQUEsZUFBQSxnQkFBQTtZQUNBLGdCQUFBLE9BQUE7Ozs7TUFJQSxHQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUEsV0FBQTtVQUNBLE9BQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxPQUFBOztTQUVBLEtBQUEsVUFBQTtTQUNBLEtBQUEsYUFBQSxXQUFBO1VBQ0EsSUFBQSxrQkFBQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsa0JBQUEsZUFBQTtVQUNBLElBQUEsa0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtVQUNBLE9BQUEsZUFBQSxrQkFBQTtZQUNBLGtCQUFBOzs7OztNQUtBLEdBQUEsT0FBQTtTQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsUUFBQTtTQUNBLEtBQUEsVUFBQTs7TUFFQSxHQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxJQUFBLFFBQUE7U0FDQSxLQUFBLFVBQUE7U0FDQSxLQUFBLGFBQUEsV0FBQTtVQUNBLElBQUEsa0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtVQUNBLE9BQUEsaUJBQUEsa0JBQUE7Ozs7O01BS0EsR0FBQSxPQUFBO1NBQ0EsS0FBQSxTQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7U0FDQSxLQUFBLFVBQUE7U0FDQSxLQUFBLGFBQUEsV0FBQTtVQUNBLElBQUEsa0JBQUE7VUFDQSxJQUFBLGtCQUFBLEVBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtZQUNBLE9BQUEsV0FBQSxNQUFBLE9BQUEsSUFBQTtVQUNBLE9BQUEsZUFBQSxrQkFBQSxNQUFBLGtCQUFBOzs7TUFHQSxHQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtTQUNBLEtBQUEsVUFBQTtTQUNBLEtBQUEsYUFBQSxXQUFBO1VBQ0EsSUFBQSxrQkFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO1VBQ0EsSUFBQSxrQkFBQSxFQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7WUFDQSxPQUFBLFdBQUEsTUFBQSxPQUFBLElBQUE7VUFDQSxPQUFBLGVBQUEsa0JBQUEsTUFBQSxrQkFBQTs7OztNQUlBLFNBQUEsWUFBQSxHQUFBO1FBQ0EsSUFBQSxZQUFBLEVBQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUE7UUFDQSxJQUFBLFVBQUEsU0FBQSxPQUFBLE9BQUEsZ0JBQUE7VUFDQSxZQUFBLFVBQUEsVUFBQSxHQUFBLE9BQUEsT0FBQSxrQkFBQTs7UUFFQSxPQUFBOzs7Ozs7TUFNQSxVQUFBLE9BQUE7U0FDQSxLQUFBLGFBQUEsZUFBQSxPQUFBLFdBQUEsT0FBQSxPQUFBO1VBQ0EsT0FBQSxJQUFBLE1BQUEsT0FBQSxNQUFBOztNQUVBLFVBQUEsT0FBQTtTQUNBLE9BQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxXQUFBLFdBQUE7U0FDQSxLQUFBLFVBQUEsS0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFNBQUE7O01BRUEsVUFBQSxPQUFBO1NBQ0EsT0FBQTtTQUNBLEtBQUEsYUFBQSxlQUFBLE9BQUEsV0FBQSxNQUFBLE1BQUE7O01BRUEsVUFBQSxVQUFBO1NBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxPQUFBO1VBQ0EsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBOzs7TUFHQSxVQUFBLFVBQUE7U0FDQSxPQUFBO1NBQ0EsS0FBQSxLQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7O01BRUEsVUFBQSxVQUFBO1NBQ0EsT0FBQTtTQUNBLE1BQUEsYUFBQSxPQUFBLE9BQUEsaUJBQUE7U0FDQSxLQUFBLFNBQUEsR0FBQTtVQUNBLE9BQUEsWUFBQTs7OztNQUlBLFVBQUEsVUFBQTtTQUNBLEtBQUEsV0FBQTtVQUNBLElBQUEsT0FBQSxHQUFBLE9BQUE7YUFDQSxPQUFBLFFBQUEsR0FBQTthQUNBO1VBQ0EsR0FBQSxPQUFBO2FBQ0EsT0FBQTthQUNBLEtBQUEsS0FBQSxLQUFBLElBQUE7YUFDQSxLQUFBLEtBQUE7YUFDQSxLQUFBLFNBQUEsS0FBQSxRQUFBO2FBQ0EsS0FBQSxVQUFBLE9BQUEsT0FBQSxRQUFBO2FBQ0EsTUFBQSxRQUFBLFdBQUE7Y0FDQSxJQUFBLFVBQUE7Y0FDQSxPQUFBOzthQUVBLE1BQUEsV0FBQSxTQUFBLEdBQUE7Y0FDQSxJQUFBLGVBQUE7O2NBRUEsSUFBQSxFQUFBLFdBQUEsR0FBQTtnQkFDQSxlQUFBOztjQUVBLE9BQUE7Ozs7OztNQU1BLE9BQUEscUJBQUE7TUFDQSxPQUFBLG1CQUFBLE1BQUE7TUFDQSxHQUFBLFVBQUEsbUJBQUEsS0FBQSxXQUFBO1FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUEsUUFBQSxPQUFBLFVBQUE7UUFDQSxJQUFBLFlBQUEsT0FBQSxtQkFBQSxLQUFBO1VBQ0EsT0FBQSxtQkFBQSxNQUFBOzs7O01BSUEsVUFBQSxPQUFBO1NBQ0EsS0FBQSxhQUFBLGVBQUEsT0FBQSxXQUFBLE1BQUEsTUFBQTs7TUFFQSxVQUFBLE9BQUE7U0FDQSxPQUFBO1NBQ0EsS0FBQSxTQUFBLE9BQUEsV0FBQSxNQUFBO1NBQ0EsS0FBQSxVQUFBLFdBQUE7VUFDQSxJQUFBLGNBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtVQUNBLE9BQUE7OztNQUdBLFVBQUEsVUFBQTtTQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUEsT0FBQTtVQUNBLE9BQUEsa0JBQUEsT0FBQSxPQUFBLFFBQUEsU0FBQTs7O01BR0EsVUFBQSxVQUFBO1NBQ0EsT0FBQTtTQUNBLEtBQUEsS0FBQSxXQUFBO1VBQ0EsSUFBQSxXQUFBLE9BQUEsV0FBQSxlQUFBO1VBQ0EsSUFBQSxXQUFBO1VBQ0EsSUFBQSxRQUFBO1VBQ0EsSUFBQSxRQUFBLE9BQUEsT0FBQSxRQUFBLGNBQUE7VUFDQSxJQUFBLFVBQUEsT0FBQSxXQUFBLGVBQUE7VUFDQSxJQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7VUFDQSxJQUFBLGdCQUFBLE9BQUEsV0FBQSxNQUFBLFdBQUE7WUFDQSxRQUFBLE1BQUEsUUFBQSxTQUFBLFVBQUEsTUFBQSxVQUFBO1VBQ0EsT0FBQTs7OztNQUlBLElBQUEsTUFBQSxJQUFBLE9BQUEsYUFBQSxVQUFBLElBQUEsVUFBQTs7O1FBR0EsSUFBQSxVQUFBLEtBQUEsSUFBQSxPQUFBLElBQUEsT0FBQSxhQUFBLFdBQUEsU0FBQSxHQUFBO1VBQ0EsT0FBQSxLQUFBLElBQUEsRUFBQTtXQUNBO1FBQ0EsT0FBQSxPQUFBLGdCQUFBLEdBQUE7V0FDQTtXQUNBLE9BQUEsQ0FBQSxHQUFBO1dBQ0EsTUFBQSxDQUFBLEdBQUEsT0FBQSxXQUFBLE1BQUE7O1FBRUEsVUFBQSxVQUFBO1dBQ0EsS0FBQSxTQUFBLFNBQUEsR0FBQTtZQUNBLElBQUEsYUFBQTtZQUNBLGFBQUEsT0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLEVBQUE7WUFDQSxPQUFBOztXQUVBLEtBQUEsS0FBQSxTQUFBLEdBQUE7WUFDQSxJQUFBLGFBQUE7WUFDQSxhQUFBLENBQUEsT0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLEVBQUE7WUFDQSxPQUFBOztXQUVBLEtBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQTs7Ozs7O01BTUEsVUFBQSxPQUFBO1NBQ0EsS0FBQSxhQUFBLGVBQUEsT0FBQSxJQUFBLE1BQUEsT0FBQSxPQUFBO1VBQ0EsT0FBQSxXQUFBLE9BQUEsTUFBQTs7TUFFQSxVQUFBLE9BQUE7U0FDQSxPQUFBO1NBQ0EsS0FBQSxTQUFBLEtBQUEsT0FBQSxJQUFBLE1BQUEsSUFBQSxRQUFBO1NBQ0EsS0FBQSxVQUFBLE9BQUEsV0FBQSxXQUFBOztNQUVBLFVBQUEsT0FBQTtTQUNBLE9BQUE7U0FDQSxLQUFBLGFBQUEsaUJBQUEsT0FBQSxXQUFBLE1BQUEsTUFBQTs7O01BR0EsSUFBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBLElBQUEsT0FBQSxJQUFBOztNQUVBLElBQUEsb0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTs7TUFFQSxVQUFBLFVBQUE7U0FDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLE9BQUE7VUFDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsU0FBQTs7O01BR0EsVUFBQSxVQUFBO1NBQ0EsS0FBQSxhQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxJQUFBLE1BQUEsaUJBQUE7O01BRUEsVUFBQSxVQUFBO1NBQ0EsT0FBQTtTQUNBLEtBQUEsS0FBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO1NBQ0EsS0FBQSxNQUFBLElBQUEsT0FBQSxJQUFBO1NBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQSxpQkFBQTtTQUNBLEtBQUEsU0FBQSxHQUFBO1VBQ0EsT0FBQSxZQUFBOzs7O01BSUEsT0FBQSxtQkFBQSxNQUFBO01BQ0EsVUFBQSxVQUFBLG9CQUFBLEtBQUEsV0FBQTtRQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsTUFBQSxPQUFBLFFBQUEsT0FBQSxVQUFBO1FBQ0EsSUFBQSxZQUFBLE9BQUEsbUJBQUEsS0FBQTtVQUNBLE9BQUEsbUJBQUEsTUFBQSxZQUFBOzs7Ozs7O01BT0EsT0FBQSxpQkFBQTtNQUNBLE9BQUEsZUFBQSxNQUFBO01BQ0EsT0FBQSxlQUFBLE1BQUE7O01BRUEsSUFBQSxPQUFBLG1CQUFBLE1BQUEsT0FBQSxXQUFBLE1BQUEsS0FBQTs7O1FBR0EsT0FBQSxlQUFBLE1BQUEsT0FBQSxXQUFBLE1BQUEsTUFBQSxPQUFBLG1CQUFBOztRQUVBLE9BQUEsbUJBQUEsTUFBQSxPQUFBLGVBQUEsTUFBQSxPQUFBLG1CQUFBOzs7UUFHQSxPQUFBLE9BQUEsaUJBQUEsT0FBQSxPQUFBLGlCQUFBLE9BQUEsZUFBQTs7UUFFQSxHQUFBLFVBQUEsbUJBQUEsS0FBQSxXQUFBO1VBQ0EsR0FBQSxPQUFBLE1BQUEsT0FBQTthQUNBLE1BQUEsYUFBQSxPQUFBLE9BQUEsaUJBQUE7Ozs7TUFJQSxJQUFBLE9BQUEsbUJBQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxLQUFBOzs7UUFHQSxPQUFBLGVBQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxNQUFBLE9BQUEsbUJBQUE7O1FBRUEsT0FBQSxtQkFBQSxNQUFBLE9BQUEsZUFBQSxNQUFBLE9BQUEsbUJBQUE7O1FBRUEsT0FBQSxPQUFBLGlCQUFBLE9BQUEsT0FBQSxpQkFBQSxPQUFBLGVBQUE7O1FBRUEsR0FBQSxVQUFBLG9CQUFBLEtBQUEsV0FBQTtVQUNBLEdBQUEsT0FBQSxNQUFBLE9BQUE7YUFDQSxNQUFBLGFBQUEsT0FBQSxPQUFBLGlCQUFBOzs7O01BSUEsVUFBQSxVQUFBO1NBQ0EsS0FBQSxXQUFBO1VBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQTthQUNBLE9BQUEsUUFBQSxHQUFBO2FBQ0E7VUFDQSxHQUFBLE9BQUE7YUFDQSxPQUFBO2FBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQTthQUNBLEtBQUEsS0FBQTthQUNBLEtBQUEsU0FBQSxLQUFBLFFBQUE7YUFDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTthQUNBLE1BQUEsUUFBQTthQUNBLE1BQUEsV0FBQTs7O01BR0EsVUFBQSxVQUFBO1NBQ0EsT0FBQTtTQUNBLEtBQUEsS0FBQSxXQUFBOztVQUVBLElBQUEsV0FBQSxDQUFBLE9BQUEsSUFBQTtVQUNBLElBQUEsVUFBQTtVQUNBLElBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO1VBQ0EsSUFBQSxVQUFBLEVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtZQUNBLE9BQUEsSUFBQTtVQUNBLElBQUEsVUFBQSxDQUFBLE9BQUEsSUFBQTtVQUNBLElBQUEsZ0JBQUEsT0FBQSxXQUFBLFVBQUEsVUFBQTtZQUNBLFVBQUEsU0FBQSxVQUFBLE1BQUEsVUFBQTtVQUNBLE9BQUE7O1NBRUEsS0FBQSxRQUFBLFNBQUEsR0FBQTtVQUNBLElBQUEsYUFBQTtVQUNBLElBQUEsT0FBQSxPQUFBLGlCQUFBO1lBQ0EsYUFBQSxPQUFBLE9BQUEsYUFBQSxJQUFBLEVBQUE7O1VBRUEsT0FBQTs7Ozs7TUFLQSxJQUFBLFVBQUEsS0FBQSxJQUFBLE9BQUEsSUFBQSxPQUFBLGFBQUEsV0FBQSxTQUFBLEdBQUE7UUFDQSxPQUFBLEtBQUEsSUFBQSxFQUFBO1NBQ0E7TUFDQSxJQUFBLFVBQUEsS0FBQSxJQUFBLE9BQUEsSUFBQSxPQUFBLGFBQUEsV0FBQSxTQUFBLEdBQUE7UUFDQSxPQUFBLEtBQUEsSUFBQSxFQUFBO1NBQ0E7OztNQUdBLE9BQUEsT0FBQSxnQkFBQSxHQUFBO1NBQ0E7U0FDQSxPQUFBLENBQUEsVUFBQSxNQUFBO1NBQ0EsTUFBQSxDQUFBLEdBQUEsT0FBQSxXQUFBLE1BQUE7OztNQUdBLElBQUEsTUFBQSxJQUFBLE9BQUEsYUFBQSxVQUFBLElBQUEsVUFBQTs7UUFFQSxVQUFBLFVBQUE7V0FDQSxLQUFBLFNBQUEsU0FBQSxHQUFBO1lBQ0EsSUFBQSxhQUFBO1lBQ0EsSUFBQSxFQUFBLFFBQUEsR0FBQTtjQUNBLGFBQUEsT0FBQSxPQUFBLGNBQUEsRUFBQTs7WUFFQSxPQUFBOzs7V0FHQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTs7Ozs7TUFLQSxVQUFBLFVBQUE7U0FDQSxLQUFBLFNBQUEsV0FBQTtVQUNBLElBQUEsYUFBQSxPQUFBLFdBQUEsZUFBQTtVQUNBLE9BQUEsYUFBQTs7U0FFQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7U0FDQSxLQUFBLEtBQUEsV0FBQTtVQUNBLElBQUEsY0FBQSxPQUFBLFdBQUEsZUFBQTtVQUNBLE9BQUEsY0FBQTs7O01BR0EsVUFBQSxVQUFBO1NBQ0EsS0FBQSxTQUFBLE9BQUEsT0FBQSxRQUFBO1NBQ0EsS0FBQSxVQUFBLFdBQUE7VUFDQSxJQUFBLGNBQUEsT0FBQSxXQUFBLE1BQUE7VUFDQSxPQUFBOzs7TUFHQSxVQUFBLFVBQUE7U0FDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLE9BQUE7VUFDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsU0FBQTs7Ozs7TUFLQSxVQUFBLFVBQUE7U0FDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLE9BQUE7VUFDQSxPQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUE7OztNQUdBLFVBQUEsVUFBQTtTQUNBLE9BQUE7U0FDQSxLQUFBLE1BQUEsT0FBQSxJQUFBLE1BQUEsSUFBQTtTQUNBLE1BQUEsZ0JBQUEsT0FBQSxJQUFBLGVBQUEsT0FBQSxJQUFBLGNBQUE7O01BRUEsVUFBQSxVQUFBO1NBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxPQUFBO1VBQ0EsT0FBQSxlQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUE7OztNQUdBLFVBQUEsVUFBQTtTQUNBLE9BQUE7U0FDQSxLQUFBLE1BQUEsQ0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBO1NBQ0EsTUFBQSxnQkFBQSxPQUFBLElBQUEsZUFBQTs7OztNQUlBLFVBQUEsT0FBQTtTQUNBLEtBQUEsVUFBQSxPQUFBLE9BQUEsb0JBQUE7U0FDQSxLQUFBLGFBQUEsaUJBQUEsT0FBQSxJQUFBLG9CQUFBOzs7TUFHQSxVQUFBLE9BQUE7U0FDQSxLQUFBLGFBQUEsV0FBQTtVQUNBLElBQUEsU0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFFBQUEsSUFBQSxPQUFBLFdBQUE7YUFDQTtVQUNBLElBQUEsU0FBQSxPQUFBLE9BQUEsb0JBQUEsT0FBQSxJQUFBO1VBQ0EsT0FBQSxlQUFBLFNBQUEsTUFBQSxTQUFBOzs7O01BSUEsVUFBQSxPQUFBO1NBQ0EsS0FBQSxTQUFBLE9BQUEsT0FBQSxvQkFBQTtTQUNBLEtBQUEsYUFBQSxlQUFBLE9BQUEsSUFBQSxvQkFBQTs7O01BR0EsVUFBQSxPQUFBO1NBQ0EsS0FBQSxhQUFBLFdBQUE7VUFDQSxJQUFBLFNBQUEsT0FBQSxPQUFBLG9CQUFBLE9BQUEsSUFBQTtVQUNBLElBQUEsU0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFNBQUEsSUFBQSxPQUFBLFdBQUE7YUFDQTtVQUNBLE9BQUEsZUFBQSxTQUFBLE1BQUEsU0FBQTs7Ozs7Ozs7Ozs7Ozs7OztNQWdCQSxVQUFBLE9BQUE7U0FDQSxLQUFBLGFBQUEsZUFBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFFBQUE7VUFDQSxPQUFBLFdBQUEsTUFBQSxNQUFBOztNQUVBLFVBQUEsT0FBQTtTQUNBLEtBQUEsYUFBQSxrQkFBQSxPQUFBLFdBQUEsTUFBQSxNQUFBOztNQUVBLFVBQUEsT0FBQTtTQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsTUFBQSxPQUFBO1NBQ0EsS0FBQSxVQUFBLE9BQUEsSUFBQSxNQUFBLE9BQUE7O01BRUEsVUFBQSxPQUFBO1NBQ0EsS0FBQSxhQUFBLFdBQUE7VUFDQSxJQUFBLFdBQUEsT0FBQSxJQUFBLE1BQUEsT0FBQSxPQUFBLE9BQUEsSUFBQSxNQUFBLElBQUE7VUFDQSxJQUFBLFVBQUEsT0FBQSxXQUFBLE9BQUEsTUFBQSxPQUFBLFdBQUE7YUFDQTtVQUNBLE9BQUEsZUFBQSxXQUFBLE1BQUEsVUFBQTs7Ozs7TUFLQSxVQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxJQUFBLFFBQUE7U0FDQSxLQUFBLFVBQUEsSUFBQSxPQUFBLElBQUE7U0FDQSxLQUFBLGFBQUEsV0FBQTs7VUFFQSxJQUFBLGNBQUEsT0FBQSxJQUFBLFFBQUEsU0FBQSxJQUFBLE9BQUEsSUFBQTtVQUNBLE9BQUEsaUJBQUEsY0FBQTs7Ozs7Ozs7TUFRQSxVQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxJQUFBO1NBQ0EsS0FBQSxVQUFBLE9BQUEsSUFBQSxRQUFBO1NBQ0EsS0FBQSxhQUFBOzs7TUFHQSxVQUFBLE9BQUE7U0FDQSxLQUFBLFNBQUEsT0FBQSxJQUFBO1NBQ0EsS0FBQSxVQUFBLE9BQUEsSUFBQSxRQUFBO1NBQ0EsS0FBQSxhQUFBLFdBQUE7VUFDQSxJQUFBLGNBQUEsT0FBQSxJQUFBLFFBQUEsUUFBQSxPQUFBLElBQUE7VUFDQSxPQUFBLGVBQUEsY0FBQTs7OztNQUlBLFVBQUEsT0FBQTtTQUNBLEtBQUEsU0FBQSxPQUFBLElBQUEsUUFBQTtTQUNBLEtBQUEsVUFBQSxPQUFBLElBQUE7U0FDQSxLQUFBLGFBQUEsV0FBQTtVQUNBLElBQUEsY0FBQTtVQUNBLE9BQUEsZUFBQSxjQUFBOzs7O01BSUEsVUFBQSxPQUFBO1NBQ0EsS0FBQSxTQUFBLE9BQUEsSUFBQSxRQUFBO1NBQ0EsS0FBQSxVQUFBLE9BQUEsSUFBQTtTQUNBLEtBQUEsYUFBQSxXQUFBO1VBQ0EsSUFBQSxjQUFBLE9BQUEsSUFBQSxRQUFBLFNBQUEsT0FBQSxJQUFBO1VBQ0EsT0FBQSxpQkFBQSxjQUFBOzs7Ozs7O01BT0EsT0FBQSxLQUFBLE1BQUEsR0FBQTtRQUNBLENBQUEsT0FBQSxJQUFBLE1BQUEsT0FBQSxNQUFBLE9BQUEsSUFBQSxNQUFBLE9BQUE7OztNQUdBLEdBQUEsT0FBQSxhQUFBLE1BQUEsV0FBQTs7Ozs7SUFLQSxTQUFBLElBQUEsUUFBQTs7O01BR0EsSUFBQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7OztNQUdBLFNBQUEsS0FBQTs7OztNQUlBLFNBQUEsS0FBQSxRQUFBOzs7UUFHQSxTQUFBLFVBQUE7O1FBRUEsSUFBQSxlQUFBLE9BQUE7OztRQUdBLElBQUEsWUFBQSxhQUFBO1FBQ0EsSUFBQSxZQUFBLGFBQUE7Ozs7Ozs7UUFPQSxHQUFBLE9BQUEsYUFBQTs7O1FBR0EsT0FBQSxLQUFBOzs7UUFHQSxPQUFBLE9BQUEsR0FBQTtXQUNBO1dBQ0EsWUFBQSxDQUFBLEdBQUEsT0FBQSxJQUFBLFlBQUEsT0FBQSxJQUFBO1dBQ0EsR0FBQSxRQUFBLEtBQUE7O1FBRUEsSUFBQSxZQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUEsSUFBQTtXQUNBLE9BQUE7V0FDQSxLQUFBLE1BQUE7V0FDQSxLQUFBLFNBQUEsT0FBQSxJQUFBLFFBQUE7V0FDQSxLQUFBLFVBQUEsT0FBQSxJQUFBLFFBQUE7O1FBRUEsSUFBQSxPQUFBLElBQUEsU0FBQTtVQUNBLFVBQUEsS0FBQSxPQUFBOzs7OztRQUtBLFNBQUEsT0FBQSxjQUFBLFdBQUE7Ozs7UUFJQSxVQUFBLFFBQUE7OztRQUdBLElBQUEsU0FBQSxPQUFBOzs7O1FBSUEsSUFBQSx5QkFBQSxPQUFBLFVBQUEsUUFBQSxXQUFBOzs7O1FBSUEsSUFBQSxvQkFBQSxPQUFBLFVBQUEsUUFBQSxXQUFBOzs7OztRQUtBLElBQUEsT0FBQSxJQUFBLGlCQUFBOzs7VUFHQSxpQkFBQSxXQUFBLE9BQUEsUUFBQTs7O1VBR0EsSUFBQSxZQUFBO2FBQ0EsT0FBQTs7YUFFQSxLQUFBLGFBQUEsV0FBQTtjQUNBLElBQUEsY0FBQSxPQUFBLFdBQUEsTUFBQSxNQUFBO2NBQ0EsT0FBQSxpQkFBQSxjQUFBOzthQUVBLE9BQUE7OzthQUdBLEtBQUEsTUFBQTs7O1VBR0EsSUFBQSxzQkFBQTthQUNBLFVBQUE7YUFDQSxLQUFBO2FBQ0E7YUFDQSxPQUFBO2FBQ0EsS0FBQSxTQUFBO2FBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxPQUFBO2NBQ0EsT0FBQSxlQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUE7Ozs7VUFJQSxpQkFBQSxXQUFBLE9BQUEsUUFBQTs7O1VBR0EsSUFBQSxPQUFBLE9BQUEsZ0JBQUEsWUFBQTs7WUFFQTtlQUNBLEdBQUEsU0FBQSxTQUFBLEdBQUE7Z0JBQ0EsSUFBQSxhQUFBLE9BQUEsWUFBQTtnQkFDQSxJQUFBLGFBQUEsRUFBQSxNQUFBOzs7Z0JBR0EsWUFBQSxPQUFBLGFBQUE7Z0JBQ0EsSUFBQSxjQUFBO2dCQUNBLE9BQUEsS0FBQSxXQUFBLFNBQUEsTUFBQTs7a0JBRUEsSUFBQSxLQUFBLE1BQUEsZ0JBQUEsWUFBQTs7b0JBRUEsWUFBQSxLQUFBLEtBQUE7Ozs7OztnQkFNQSxJQUFBLGFBQUE7Z0JBQ0EsV0FBQSxPQUFBO2dCQUNBLFdBQUEsUUFBQTtnQkFDQSxXQUFBLE9BQUE7a0JBQ0EsUUFBQTtrQkFDQSxVQUFBLGFBQUE7Ozs7Z0JBSUEsT0FBQSxZQUFBOzs7Ozs7Ozs7UUFTQSxJQUFBLFlBQUEsVUFBQSxRQUFBOzs7UUFHQSxJQUFBLE9BQUEsT0FBQSxjQUFBO1VBQ0EsSUFBQSxlQUFBO1VBQ0EsYUFBQSxLQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQXFEQSxPQUFBLEtBQUEsVUFBQSxDQUFBLE9BQUEsSUFBQSxNQUFBLE9BQUEsTUFBQSxPQUFBLElBQUEsTUFBQSxPQUFBOzs7UUFHQSxJQUFBLE9BQUEsSUFBQSxRQUFBO1VBQ0EsR0FBQSxPQUFBLFFBQUEsR0FBQSxVQUFBLFdBQUE7WUFDQSxHQUFBLE9BQUEsYUFBQSxNQUFBLFdBQUE7WUFDQSxJQUFBLFlBQUE7WUFDQSxJQUFBLE9BQUEsSUFBQSxhQUFBLE1BQUE7Y0FDQSxZQUFBOztZQUVBLFdBQUEsMEJBQUEsV0FBQTs7OztRQUlBLElBQUEsT0FBQSxJQUFBLGVBQUE7O1VBRUEsSUFBQSxpQkFBQTs7VUFFQSxHQUFBLE9BQUEsYUFBQSxPQUFBO2FBQ0EsS0FBQSxNQUFBO2FBQ0EsS0FBQSxlQUFBO2FBQ0EsS0FBQSxxQkFBQTthQUNBLEtBQUEsZUFBQTthQUNBLEtBQUEsYUFBQTthQUNBLEtBQUEsU0FBQSxHQUFBO2NBQ0EsSUFBQSxPQUFBLElBQUEsV0FBQSxPQUFBOztnQkFFQSxPQUFBO3FCQUNBOztnQkFFQSxPQUFBOzs7YUFHQSxLQUFBLEtBQUE7YUFDQSxLQUFBLEtBQUE7YUFDQSxNQUFBLFVBQUE7YUFDQSxNQUFBLFdBQUE7YUFDQSxHQUFBLGFBQUEsV0FBQTtjQUNBLEdBQUEsT0FBQSxNQUFBLE1BQUEsV0FBQTs7YUFFQSxHQUFBLFlBQUEsV0FBQTtjQUNBLEdBQUEsT0FBQSxNQUFBLE1BQUEsV0FBQTs7YUFFQSxHQUFBLFNBQUEsV0FBQTs7O2NBR0EsSUFBQSxPQUFBLElBQUEsV0FBQSxPQUFBOztnQkFFQSxHQUFBLE9BQUE7bUJBQ0EsTUFBQSxXQUFBO2dCQUNBLEdBQUEsT0FBQTttQkFDQSxLQUFBLFNBQUEsR0FBQTs7b0JBRUEsT0FBQTs7Z0JBRUEsT0FBQSxJQUFBLFNBQUE7OztxQkFHQTs7Z0JBRUEsR0FBQSxPQUFBO21CQUNBLE1BQUEsV0FBQTtnQkFDQSxHQUFBLE9BQUE7bUJBQ0EsS0FBQSxTQUFBLEdBQUE7O29CQUVBLE9BQUE7O2dCQUVBLE9BQUEsSUFBQSxTQUFBOzs7OztjQUtBLE9BQUEsSUFBQSxvQkFBQTs7Y0FFQSxHQUFBLE9BQUEsYUFBQSxNQUFBLFdBQUE7Y0FDQSxJQUFBLFlBQUE7Y0FDQSxJQUFBLE9BQUEsSUFBQSxhQUFBLE1BQUE7Z0JBQ0EsWUFBQTs7Y0FFQSxXQUFBLDBCQUFBLFdBQUE7Ozs7O1FBS0EsS0FBQTs7UUFFQSxPQUFBOzs7Ozs7TUFNQSxJQUFBLGNBQUEsT0FBQSxRQUFBLE9BQUEsYUFBQSxXQUFBOzs7TUFHQSxJQUFBLGlCQUFBLFNBQUEsYUFBQTs7UUFFQSxJQUFBLFdBQUEsT0FBQSxPQUFBO1FBQ0EsSUFBQSxlQUFBLEdBQUE7V0FDQTtXQUNBLE9BQUEsQ0FBQSxHQUFBO1dBQ0EsTUFBQSxDQUFBLEdBQUE7O1FBRUEsSUFBQSxnQkFBQSxhQUFBOztRQUVBLElBQUEsT0FBQSxPQUFBLHFCQUFBLFVBQUE7VUFDQSxPQUFBLE9BQUEsZ0JBQUEsR0FBQSxNQUFBO2FBQ0EsT0FBQSxDQUFBLEdBQUEsZ0JBQUEsS0FBQSxJQUFBLE9BQUEsT0FBQTthQUNBLE1BQUE7YUFDQSxNQUFBLENBQUEsS0FBQTtlQUNBLElBQUEsT0FBQSxPQUFBLHFCQUFBLE9BQUE7VUFDQSxPQUFBLE9BQUEsZ0JBQUEsR0FBQSxNQUFBO2FBQ0EsT0FBQSxDQUFBLFFBQUEsZ0JBQUEsS0FBQSxJQUFBLE9BQUEsT0FBQTthQUNBLE1BQUE7YUFDQSxNQUFBLENBQUEsS0FBQTs7O1FBR0EsR0FBQSxVQUFBO1dBQ0EsTUFBQSxnQkFBQSxTQUFBLEdBQUE7WUFDQSxPQUFBLE9BQUEsT0FBQSxjQUFBLEtBQUEsSUFBQSxFQUFBOzs7OztNQUtBLElBQUEsbUJBQUEsU0FBQSxlQUFBOzs7Ozs7TUFNQSxPQUFBO1FBQ0EsUUFBQSxXQUFBO1VBQ0EsS0FBQTs7UUFFQSxjQUFBLFNBQUEsU0FBQSxZQUFBO1VBQ0EsSUFBQSxZQUFBLE9BQUE7WUFDQSxlQUFBLGNBQUE7aUJBQ0E7WUFDQSxlQUFBLGNBQUE7OztRQUdBLGlCQUFBLFdBQUE7VUFDQSxPQUFBLE9BQUE7O1FBRUEsWUFBQSxXQUFBO1VBQ0EsT0FBQSxPQUFBOztRQUVBLFdBQUEsU0FBQSxNQUFBO1VBQ0EsT0FBQSxPQUFBLFVBQUE7O1FBRUEsb0JBQUEsS0FBQTs7UUFFQSxTQUFBLFFBQUE7UUFDQSxRQUFBO1FBQ0EsZ0JBQUE7UUFDQSxrQkFBQTtRQUNBLDhCQUFBO1FBQ0EsUUFBQTs7Ozs7Ozs7O0lBU0EsU0FBQSxRQUFBLFFBQUE7Ozs7TUFJQSxTQUFBLFlBQUEsWUFBQTs7UUFFQSxPQUFBLElBQUEsWUFBQTs7O1FBR0EsSUFBQSxlQUFBLE9BQUE7VUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO1VBQ0EsT0FBQSxPQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQTtlQUNBLElBQUEsZUFBQSxTQUFBO1VBQ0EsT0FBQSxPQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQTtVQUNBLE9BQUEsT0FBQSxRQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUE7ZUFDQSxJQUFBLGVBQUEsUUFBQTtVQUNBLE9BQUEsT0FBQSxRQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUE7VUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO2VBQ0EsSUFBQSxlQUFBLFNBQUE7VUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBO1VBQ0EsT0FBQSxPQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQTs7OztRQUlBLElBQUEsR0FBQSxVQUFBLFNBQUEsR0FBQSxTQUFBLE9BQUE7OztVQUdBLElBQUEsSUFBQSxJQUFBO2FBQ0EsYUFBQSxTQUFBOzs7VUFHQSxFQUFBLFVBQUE7YUFDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLEdBQUE7Y0FDQSxPQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLEtBQUE7O2FBRUEsVUFBQTthQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUE7Y0FDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsRUFBQSxTQUFBOzs7O1VBSUEsR0FBQSxPQUFBLGVBQUEsVUFBQTthQUNBLGFBQUEsU0FBQTthQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUEsR0FBQTtjQUNBLE9BQUEsaUJBQUEsT0FBQSxPQUFBLFFBQUEsS0FBQTs7OztVQUlBLEdBQUEsT0FBQSxlQUFBLFVBQUE7YUFDQSxhQUFBLFNBQUE7YUFDQSxLQUFBLGFBQUEsU0FBQSxHQUFBLEdBQUE7Y0FDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsS0FBQTs7OztVQUlBLEdBQUEsVUFBQTthQUNBLGFBQUEsU0FBQTthQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUEsR0FBQTtjQUNBLE9BQUEsaUJBQUEsT0FBQSxPQUFBLFFBQUEsS0FBQTs7OztVQUlBLEdBQUEsVUFBQTthQUNBLGFBQUEsU0FBQTthQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUEsR0FBQTtjQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxLQUFBOzs7ZUFHQTs7O1VBR0EsSUFBQSxJQUFBLElBQUE7OztVQUdBLEVBQUEsVUFBQTthQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUEsR0FBQTtjQUNBLE9BQUEsaUJBQUEsT0FBQSxPQUFBLFFBQUEsS0FBQTs7YUFFQSxVQUFBO2FBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQTtjQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxFQUFBLFNBQUE7Ozs7VUFJQSxHQUFBLE9BQUEsZUFBQSxVQUFBO2FBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxHQUFBO2NBQ0EsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxLQUFBOzs7O1VBSUEsR0FBQSxPQUFBLGVBQUEsVUFBQTthQUNBLEtBQUEsYUFBQSxTQUFBLEdBQUEsR0FBQTtjQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxLQUFBOzs7O1VBSUEsR0FBQSxVQUFBO2FBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxHQUFBO2NBQ0EsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxLQUFBOzs7O1VBSUEsR0FBQSxVQUFBO2FBQ0EsS0FBQSxhQUFBLFNBQUEsR0FBQSxHQUFBO2NBQ0EsT0FBQSxlQUFBLE9BQUEsT0FBQSxRQUFBLEtBQUE7Ozs7OztRQU1BOzs7UUFHQSxXQUFBLGFBQUE7Ozs7TUFJQSxTQUFBLGNBQUE7OztRQUdBLElBQUEsV0FBQSxHQUFBLE9BQUEsTUFBQSxPQUFBLFFBQUE7OztRQUdBLE9BQUEsSUFBQSxZQUFBOztRQUVBLElBQUEsTUFBQSxJQUFBO1FBQ0EsSUFBQSxZQUFBLElBQUEsVUFBQTtRQUNBLElBQUEsWUFBQSxJQUFBLFVBQUE7OztRQUdBLElBQUEsVUFBQTtRQUNBLE9BQUEsS0FBQSxXQUFBLFNBQUEsTUFBQTtVQUNBLFFBQUEsS0FBQSxLQUFBOzs7O1FBSUEsSUFBQSxXQUFBLE9BQUEsUUFBQSxTQUFBOzs7UUFHQSxVQUFBO1FBQ0EsT0FBQSxLQUFBLFdBQUEsU0FBQSxNQUFBLE9BQUE7VUFDQSxRQUFBLEtBQUEsSUFBQSxVQUFBLE9BQUE7Ozs7UUFJQSxJQUFBLFdBQUEsR0FBQSxNQUFBLFFBQUEsUUFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO1VBQ0EsT0FBQSxRQUFBLEtBQUEsUUFBQTs7Ozs7OztRQU9BLE9BQUEsT0FBQSxRQUFBLE9BQUE7Ozs7OztRQU1BLElBQUEsSUFBQSxJQUFBO1dBQ0EsYUFBQSxTQUFBOzs7UUFHQSxFQUFBLFVBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxNQUFBO1lBQ0EsT0FBQSxlQUFBLE9BQUEsT0FBQSxRQUFBLEtBQUEsU0FBQTs7OztRQUlBLEdBQUEsT0FBQSxlQUFBLFVBQUE7V0FDQSxhQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxNQUFBLE9BQUE7WUFDQSxPQUFBLGVBQUEsT0FBQSxPQUFBLFFBQUEsU0FBQTs7OztRQUlBLEdBQUEsVUFBQTtXQUNBLGFBQUEsU0FBQTtXQUNBLEtBQUEsYUFBQSxTQUFBLE1BQUEsT0FBQTtZQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBOztXQUVBLEtBQUEsT0FBQSxXQUFBOztZQUVBLE9BQUEsSUFBQSxZQUFBOzs7Ozs7Ozs7OztRQVdBOzs7UUFHQSxXQUFBLGFBQUE7OztNQUdBLFNBQUEsY0FBQTs7UUFFQSxPQUFBLElBQUEsWUFBQTs7UUFFQSxJQUFBLE1BQUEsSUFBQTtRQUNBLElBQUEsWUFBQSxJQUFBLFVBQUE7UUFDQSxJQUFBLFlBQUEsSUFBQSxVQUFBOzs7UUFHQSxJQUFBLFlBQUEsR0FBQSxPQUFBLE1BQUEsT0FBQSxRQUFBLEtBQUE7Ozs7UUFJQSxJQUFBLFVBQUE7UUFDQSxPQUFBLEtBQUEsV0FBQSxTQUFBLE1BQUE7VUFDQSxRQUFBLEtBQUEsS0FBQTs7OztRQUlBLElBQUEsV0FBQSxPQUFBLFFBQUEsU0FBQTs7O1FBR0EsVUFBQTtRQUNBLE9BQUEsS0FBQSxXQUFBLFNBQUEsTUFBQSxPQUFBO1VBQ0EsUUFBQSxLQUFBLElBQUEsT0FBQSxVQUFBOzs7O1FBSUEsSUFBQSxXQUFBLEdBQUEsTUFBQSxRQUFBLFFBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtVQUNBLE9BQUEsUUFBQSxLQUFBLFFBQUE7Ozs7O1FBS0EsT0FBQSxPQUFBLFFBQUEsT0FBQTs7OztRQUlBLElBQUEsSUFBQSxJQUFBO1dBQ0EsYUFBQSxTQUFBOzs7UUFHQSxFQUFBLFVBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxNQUFBLE9BQUE7WUFDQSxPQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUE7Ozs7UUFJQSxHQUFBLFVBQUE7V0FDQSxhQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsU0FBQSxNQUFBLE9BQUE7WUFDQSxPQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLFNBQUE7Ozs7UUFJQSxHQUFBLE9BQUEsZUFBQSxVQUFBO1dBQ0EsYUFBQSxTQUFBO1dBQ0EsS0FBQSxhQUFBLFNBQUEsTUFBQSxPQUFBO1lBQ0EsT0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBOzs7O1FBSUEsR0FBQSxPQUFBLGVBQUEsVUFBQTtXQUNBLGFBQUEsU0FBQTtXQUNBLEtBQUEsYUFBQSxTQUFBLE1BQUEsT0FBQTtZQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxTQUFBOztXQUVBLEtBQUEsT0FBQSxXQUFBOztZQUVBLE9BQUEsSUFBQSxZQUFBOzs7Ozs7Ozs7Ozs7Ozs7UUFlQTs7O1FBR0EsV0FBQSxhQUFBOzs7O01BSUEsU0FBQSxjQUFBO1FBQ0EsT0FBQSxJQUFBLFlBQUE7Ozs7TUFJQSxTQUFBLDRCQUFBOztRQUVBLElBQUEsbUJBQUE7UUFDQSxJQUFBLGlCQUFBOztRQUVBLElBQUEsZUFBQSxtQkFBQSxPQUFBLElBQUE7UUFDQSxJQUFBLGdCQUFBLG1CQUFBLE9BQUEsSUFBQSxlQUFBLE9BQUEsSUFBQTs7Ozs7UUFLQSxHQUFBLE9BQUE7V0FDQSxLQUFBLFNBQUEsT0FBQSxPQUFBLFFBQUE7V0FDQSxLQUFBLFVBQUE7V0FDQSxhQUFBLFNBQUE7V0FDQSxLQUFBLGFBQUEsV0FBQTtZQUNBLE9BQUEsZUFBQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsa0JBQUE7Ozs7UUFJQSxHQUFBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxnQkFBQTtXQUNBLGFBQUEsU0FBQTtXQUNBLEtBQUEsYUFBQSxXQUFBO1lBQ0EsT0FBQSxlQUFBLE9BQUEsT0FBQSxRQUFBLE9BQUEsT0FBQSxrQkFBQTtjQUNBLGdCQUFBLE9BQUE7Ozs7UUFJQSxHQUFBLE9BQUE7V0FDQSxLQUFBLFNBQUE7V0FDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxnQkFBQTtXQUNBLGFBQUEsU0FBQTtXQUNBLEtBQUEsYUFBQSxXQUFBO1lBQ0EsSUFBQSxnQkFBQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsa0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtZQUNBLE9BQUEsZUFBQSxnQkFBQTtjQUNBLGdCQUFBLE9BQUE7Ozs7UUFJQSxHQUFBLE9BQUE7V0FDQSxLQUFBLFNBQUEsV0FBQTtZQUNBLE9BQUEsT0FBQSxPQUFBLFFBQUEsY0FBQSxPQUFBOztXQUVBLEtBQUEsVUFBQTtXQUNBLGFBQUEsU0FBQTtXQUNBLEtBQUEsYUFBQSxXQUFBO1lBQ0EsSUFBQSxrQkFBQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUEsa0JBQUEsZUFBQTtZQUNBLElBQUEsa0JBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtZQUNBLE9BQUEsZUFBQSxrQkFBQTtjQUNBLGtCQUFBOzs7OztNQUtBLE9BQUE7UUFDQSxhQUFBO1FBQ0EsYUFBQTtRQUNBLGFBQUE7Ozs7Ozs7SUFPQSxTQUFBLEtBQUEsUUFBQTs7OztNQUlBLFNBQUEsU0FBQTs7UUFFQSxJQUFBLFNBQUEsR0FBQSxNQUFBO1VBQ0EsU0FBQSxHQUFBLE1BQUE7VUFDQSxVQUFBLEdBQUEsTUFBQSxVQUFBLEtBQUEsT0FBQSxJQUFBLE1BQUEsT0FBQTtVQUNBLFVBQUEsR0FBQSxNQUFBLFVBQUEsS0FBQSxPQUFBLElBQUEsTUFBQSxPQUFBOzs7UUFHQSxxQkFBQSxTQUFBLFNBQUEsUUFBQTs7O01BR0EsU0FBQSxxQkFBQSxTQUFBLFNBQUEsUUFBQSxRQUFBOztRQUVBLElBQUEsV0FBQTs7Ozs7OztRQU9BLElBQUEsYUFBQSxDQUFBLFdBQUEsS0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBOzs7UUFHQSxJQUFBLFdBQUEsR0FBQTs7O1VBR0EsVUFBQTs7O2FBR0EsSUFBQSxXQUFBLENBQUEsWUFBQTtVQUNBLFVBQUEsQ0FBQTs7Ozs7O1FBTUEsSUFBQSxXQUFBLE9BQUEsSUFBQSxhQUFBOztVQUVBLFVBQUE7VUFDQSxTQUFBOzs7O2FBSUE7OztVQUdBLElBQUEsYUFBQSxDQUFBLFdBQUEsT0FBQSxJQUFBLGNBQUEsS0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBOzs7VUFHQSxJQUFBLFVBQUEsR0FBQTs7O1lBR0EsVUFBQTs7WUFFQSxTQUFBLFdBQUEsT0FBQSxJQUFBOzs7ZUFHQSxJQUFBLFdBQUEsQ0FBQSxZQUFBOzs7WUFHQSxVQUFBLENBQUE7O1lBRUEsU0FBQSxXQUFBLE9BQUEsSUFBQTs7O2VBR0E7OztZQUdBLFNBQUEsV0FBQSxPQUFBLElBQUE7Ozs7Ozs7OztRQVNBLElBQUE7V0FDQSxLQUFBLGFBQUEsZUFBQSxDQUFBLFNBQUEsV0FBQTtZQUNBLFNBQUEsTUFBQSxTQUFBOzs7UUFHQSxHQUFBLE9BQUE7V0FDQSxLQUFBLGFBQUEsZUFBQSxDQUFBLEdBQUEsV0FBQSxhQUFBO1lBQ0E7Ozs7UUFJQSxHQUFBLE9BQUE7V0FDQSxLQUFBLGFBQUEsZUFBQSxDQUFBLEdBQUEsV0FBQTtZQUNBLFNBQUE7Ozs7UUFJQSxHQUFBLE9BQUE7V0FDQSxLQUFBLGFBQUEsZUFBQSxDQUFBLFNBQUEsS0FBQSxhQUFBO1lBQ0E7OztRQUdBLEdBQUEsT0FBQTtXQUNBLEtBQUEsYUFBQSxlQUFBLENBQUEsU0FBQSxLQUFBLGFBQUE7WUFDQTs7O1FBR0EsT0FBQTtXQUNBLFVBQUEsQ0FBQSxVQUFBLE9BQUEsSUFBQSxNQUFBLE9BQUEsTUFBQSxVQUFBLE9BQUEsSUFBQSxNQUFBLE9BQUE7O1FBRUEsSUFBQSxRQUFBO1FBQ0Esb0JBQUE7Ozs7OztRQU1BLElBQUEsTUFBQSxJQUFBLE9BQUEsYUFBQSxVQUFBLElBQUEsVUFBQTtVQUNBLEdBQUEsVUFBQTthQUNBLEtBQUEsU0FBQSxTQUFBLEdBQUE7Y0FDQSxJQUFBLGFBQUE7Y0FDQSxhQUFBLE9BQUEsT0FBQSxjQUFBLEtBQUEsSUFBQSxFQUFBLFVBQUE7Y0FDQSxPQUFBOzthQUVBLEtBQUEsS0FBQSxTQUFBLEdBQUE7Y0FDQSxJQUFBLGFBQUE7Y0FDQSxhQUFBLENBQUEsT0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLEVBQUEsVUFBQTtjQUNBLE9BQUE7Ozs7UUFJQSxJQUFBLE1BQUEsSUFBQSxPQUFBLGFBQUEsVUFBQSxJQUFBLFVBQUE7VUFDQSxHQUFBLFVBQUE7YUFDQSxLQUFBLFNBQUEsU0FBQSxHQUFBO2NBQ0EsSUFBQSxhQUFBO2NBQ0EsSUFBQSxFQUFBLFFBQUEsR0FBQTtnQkFDQSxhQUFBLE9BQUEsT0FBQSxjQUFBLEVBQUEsU0FBQTs7Y0FFQSxPQUFBOzs7Ozs7TUFNQSxTQUFBLG1CQUFBLFFBQUEsUUFBQSxVQUFBOzs7UUFHQSxJQUFBLENBQUEsT0FBQSxJQUFBLFdBQUE7OztVQUdBLElBQUEsY0FBQSxPQUFBLElBQUEsTUFBQSxJQUFBLFNBQUE7Ozs7O1VBS0EsSUFBQSxhQUFBLGNBQUEsT0FBQSxJQUFBOzs7O1VBSUEsSUFBQSxVQUFBLGNBQUEsWUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUF1QkEsSUFBQSxnQkFBQSxjQUFBO1lBQ0EsSUFBQSxlQUFBLENBQUEsY0FBQSxPQUFBLElBQUE7Y0FDQTs7O1lBR0EsU0FBQSxTQUFBOzs7OztVQUtBLElBQUEsU0FBQSxFQUFBLGNBQUEsYUFBQTs7WUFFQSxnQkFBQSxjQUFBOztZQUVBLGVBQUEsY0FBQSxPQUFBLElBQUEsY0FBQTs7O1lBR0EsU0FBQSxTQUFBOzs7OztVQUtBLElBQUEsU0FBQTtVQUNBLElBQUEsU0FBQTs7O1VBR0EsSUFBQSxrQkFBQTs7O1VBR0EsSUFBQSxXQUFBLEVBQUEsU0FBQSxLQUFBOzs7OztVQUtBLElBQUE7YUFDQSxhQUFBLFNBQUE7OzthQUdBLEtBQUEsYUFBQSxlQUFBLENBQUEsR0FBQSxJQUFBLFlBQUE7Y0FDQSxZQUFBLElBQUEsTUFBQSxTQUFBLE1BQUEsZUFBQSxDQUFBO2dCQUNBO2tCQUNBOzs7VUFHQSxHQUFBLE9BQUE7YUFDQTthQUNBLFNBQUE7YUFDQSxLQUFBLGFBQUEsZUFBQSxDQUFBLEdBQUEsWUFBQSxNQUFBO2NBQ0EsU0FBQSxNQUFBLFNBQUEsTUFBQSxlQUFBLENBQUEsR0FBQSxVQUFBOzs7O1VBSUEsR0FBQSxPQUFBO2FBQ0E7YUFDQSxTQUFBO2FBQ0EsS0FBQSxhQUFBLGVBQUEsQ0FBQSxHQUFBLFlBQUEsTUFBQTtjQUNBLElBQUEsTUFBQSxTQUFBLE1BQUEsZUFBQSxDQUFBLEdBQUEsVUFBQTs7O1VBR0EsR0FBQSxPQUFBO2FBQ0E7YUFDQSxTQUFBO2FBQ0EsS0FBQSxhQUFBLFlBQUEsSUFBQSxNQUFBLElBQUEsTUFBQSxlQUFBO2NBQ0EsUUFBQTtnQkFDQTs7O1VBR0EsR0FBQSxPQUFBO2FBQ0E7YUFDQSxTQUFBO2FBQ0EsS0FBQSxhQUFBLFlBQUEsSUFBQSxNQUFBLElBQUEsTUFBQSxlQUFBO2NBQ0EsUUFBQTtnQkFDQTs7Ozs7VUFLQSxJQUFBLGVBQUEsT0FBQSxJQUFBLE1BQUEsT0FBQSxNQUFBLFdBQUEsU0FBQTs7O1VBR0EsT0FBQSxLQUFBLE1BQUE7VUFDQSxPQUFBLEtBQUEsVUFBQSxDQUFBLFFBQUE7O1VBRUEsSUFBQSxRQUFBO1VBQ0Esb0JBQUE7Ozs7VUFJQSxHQUFBLE9BQUE7YUFDQSxLQUFBLFdBQUE7O2NBRUEsSUFBQSxPQUFBLEdBQUEsT0FBQTtpQkFDQSxPQUFBLFFBQUEsR0FBQTtpQkFDQTs7O2NBR0EsR0FBQSxPQUFBO2lCQUNBLE9BQUE7aUJBQ0EsS0FBQSxLQUFBLEtBQUEsSUFBQTtpQkFDQSxLQUFBLEtBQUE7aUJBQ0EsS0FBQSxTQUFBLEtBQUEsUUFBQTtpQkFDQSxLQUFBLFVBQUEsT0FBQSxPQUFBLFFBQUE7aUJBQ0EsTUFBQSxRQUFBOzs7Ozs7Ozs7VUFTQSxJQUFBLE1BQUEsSUFBQSxPQUFBLGFBQUEsVUFBQSxJQUFBLFVBQUE7O1lBRUEsR0FBQSxVQUFBO2VBQ0E7ZUFDQSxTQUFBO2VBQ0EsS0FBQSxTQUFBLFNBQUEsR0FBQTtnQkFDQSxJQUFBLGFBQUE7Z0JBQ0EsSUFBQSxFQUFBLFFBQUEsR0FBQTtrQkFDQSxhQUFBLE9BQUEsT0FBQSxjQUFBLEVBQUEsU0FBQTs7Z0JBRUEsT0FBQTs7OztVQUlBLElBQUEsTUFBQSxJQUFBLE9BQUEsYUFBQSxVQUFBLElBQUEsVUFBQTs7WUFFQSxHQUFBLFVBQUE7ZUFDQTtlQUNBLFNBQUE7ZUFDQSxLQUFBLFNBQUEsU0FBQSxHQUFBO2dCQUNBLElBQUEsYUFBQTtnQkFDQSxhQUFBLE9BQUEsT0FBQSxjQUFBLEtBQUEsSUFBQSxFQUFBLFVBQUE7Z0JBQ0EsT0FBQTs7ZUFFQSxLQUFBLEtBQUEsU0FBQSxHQUFBO2dCQUNBLElBQUEsYUFBQTtnQkFDQSxhQUFBLENBQUEsT0FBQSxPQUFBLGNBQUEsS0FBQSxJQUFBLEVBQUEsVUFBQTtnQkFDQSxPQUFBOzs7Ozs7O01BT0EsU0FBQSxvQkFBQSxPQUFBOztRQUVBLElBQUEsa0JBQUE7O1FBRUEsSUFBQSxnQkFBQTs7UUFFQSxJQUFBLGFBQUE7UUFDQSxXQUFBLE1BQUEsT0FBQSxtQkFBQSxNQUFBLE9BQUEsT0FBQSxXQUFBLE9BQUEsS0FBQTtRQUNBLFdBQUEsTUFBQSxPQUFBLG1CQUFBLE1BQUEsT0FBQSxPQUFBLFdBQUEsT0FBQSxLQUFBLFVBQUEsT0FBQSxJQUFBOztRQUVBLFNBQUEsWUFBQSxHQUFBO1VBQ0EsSUFBQSxZQUFBLEVBQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUE7VUFDQSxJQUFBLFVBQUEsU0FBQSxPQUFBLE9BQUEsZ0JBQUE7WUFDQSxZQUFBLFVBQUEsVUFBQSxHQUFBLE9BQUEsT0FBQSxrQkFBQTs7VUFFQSxPQUFBOzs7UUFHQSxJQUFBLFdBQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxLQUFBOztVQUVBLE9BQUEsSUFBQSxnQkFBQSxNQUFBLE9BQUEsV0FBQSxNQUFBLE1BQUEsV0FBQTs7VUFFQSxHQUFBLFVBQUEsbUJBQUEsS0FBQSxXQUFBO1lBQ0EsSUFBQSxPQUFBO2NBQ0EsR0FBQSxPQUFBLE1BQUEsT0FBQTtpQkFDQSxhQUFBLFNBQUE7aUJBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQSxpQkFBQSxPQUFBLElBQUEsZ0JBQUEsTUFBQTtpQkFDQSxLQUFBLEtBQUEsT0FBQSxPQUFBLFFBQUE7a0JBQ0EsT0FBQSxrQkFBQSxPQUFBLElBQUEsZ0JBQUE7bUJBQ0E7Y0FDQSxHQUFBLE9BQUEsTUFBQSxPQUFBO2lCQUNBLE1BQUEsYUFBQSxPQUFBLE9BQUEsaUJBQUEsT0FBQSxJQUFBLGdCQUFBLE1BQUE7aUJBQ0EsS0FBQSxLQUFBLE9BQUEsT0FBQSxRQUFBO2tCQUNBLE9BQUEsa0JBQUEsT0FBQSxJQUFBLGdCQUFBOzs7ZUFHQTtVQUNBLEdBQUEsVUFBQSxtQkFBQSxLQUFBLFdBQUE7WUFDQSxJQUFBLE9BQUE7Y0FDQSxHQUFBLE9BQUEsTUFBQSxPQUFBO2lCQUNBLGFBQUEsU0FBQTtpQkFDQSxNQUFBLGFBQUEsT0FBQSxPQUFBLGlCQUFBO2lCQUNBLEtBQUEsS0FBQSxPQUFBLE9BQUEsUUFBQSxjQUFBO2NBQ0EsR0FBQSxPQUFBLE1BQUEsT0FBQTtpQkFDQSxLQUFBLFNBQUEsR0FBQTtrQkFDQSxPQUFBLFlBQUE7OzttQkFHQTtjQUNBLEdBQUEsT0FBQSxNQUFBLE9BQUE7aUJBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQSxpQkFBQTtpQkFDQSxLQUFBLEtBQUEsT0FBQSxPQUFBLFFBQUEsY0FBQTtpQkFDQSxLQUFBLFNBQUEsR0FBQTtrQkFDQSxPQUFBLFlBQUE7Ozs7Ozs7UUFPQSxJQUFBLFdBQUEsTUFBQSxPQUFBLFdBQUEsTUFBQSxLQUFBOztVQUVBLE9BQUEsSUFBQSxnQkFBQSxNQUFBLE9BQUEsV0FBQSxNQUFBLE1BQUEsV0FBQTs7VUFFQSxHQUFBLFVBQUEsb0JBQUEsS0FBQSxXQUFBO1lBQ0EsSUFBQSxPQUFBO2NBQ0EsR0FBQSxPQUFBLE1BQUEsT0FBQTtpQkFDQSxhQUFBLFNBQUE7aUJBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQTtrQkFDQSxPQUFBLElBQUEsZ0JBQUEsTUFBQTttQkFDQTtjQUNBLEdBQUEsT0FBQSxNQUFBLE9BQUE7aUJBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQTtrQkFDQSxPQUFBLElBQUEsZ0JBQUEsTUFBQTs7O2VBR0E7VUFDQSxHQUFBLFVBQUEsb0JBQUEsS0FBQSxXQUFBO1lBQ0EsSUFBQSxPQUFBO2NBQ0EsR0FBQSxPQUFBLE1BQUEsT0FBQTtpQkFDQSxhQUFBLFNBQUE7aUJBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQSxpQkFBQTtjQUNBLEdBQUEsT0FBQSxNQUFBLE9BQUE7aUJBQ0EsS0FBQSxTQUFBLEdBQUE7a0JBQ0EsT0FBQSxZQUFBOzttQkFFQTtjQUNBLEdBQUEsT0FBQSxNQUFBLE9BQUE7aUJBQ0EsTUFBQSxhQUFBLE9BQUEsT0FBQSxpQkFBQTtpQkFDQSxLQUFBLFNBQUEsR0FBQTtrQkFDQSxPQUFBLFlBQUE7Ozs7Ozs7UUFPQSxJQUFBLGdCQUFBLE9BQUEsV0FBQSxNQUFBO1FBQ0EsSUFBQSxnQkFBQSxPQUFBLFdBQUEsTUFBQTs7O1FBR0EsSUFBQSxPQUFBLE9BQUEsV0FBQSxHQUFBO1VBQ0EsR0FBQSxVQUFBLG1CQUFBLEtBQUEsV0FBQTtZQUNBLFVBQUEsTUFBQTs7O1FBR0EsSUFBQSxPQUFBLE9BQUEsV0FBQSxHQUFBO1VBQ0EsR0FBQSxVQUFBLG9CQUFBLEtBQUEsV0FBQTtZQUNBLFVBQUEsTUFBQTs7OztRQUlBLFNBQUEsVUFBQSxnQkFBQSxTQUFBOztVQUVBLElBQUE7WUFDQTs7VUFFQSxJQUFBLHFCQUFBOztVQUVBLElBQUEsWUFBQSxPQUFBO1lBQ0EsWUFBQSxPQUFBLFdBQUEsTUFBQSxNQUFBO1lBQ0EsWUFBQSxPQUFBLEtBQUE7aUJBQ0E7O1lBRUEsWUFBQSxPQUFBLFdBQUEsTUFBQTtZQUNBLFlBQUEsT0FBQSxLQUFBLFVBQUEsT0FBQSxJQUFBOzs7VUFHQSxJQUFBLFlBQUEsR0FBQSxPQUFBLGdCQUFBLE9BQUEsUUFBQSxPQUFBLFVBQUE7VUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLGdCQUFBLE9BQUEsUUFBQTtVQUNBLElBQUEsZUFBQSxZQUFBOztVQUVBLElBQUEsZUFBQSxXQUFBOztZQUVBLElBQUEsZ0JBQUEsWUFBQTtZQUNBLElBQUEsZ0JBQUEsS0FBQSxNQUFBLFVBQUEsU0FBQSxpQkFBQTtZQUNBLElBQUEsZUFBQSxVQUFBLFVBQUEsR0FBQSxpQkFBQTtZQUNBLEdBQUEsT0FBQSxnQkFBQSxPQUFBO2VBQ0EsS0FBQTs7Ozs7Ozs7TUFRQSxTQUFBLGtCQUFBOzs7UUFHQSxHQUFBLFVBQUEsT0FBQSxHQUFBLGlCQUFBOzs7UUFHQSxHQUFBLE9BQUE7V0FDQSxHQUFBLFlBQUEsV0FBQTs7WUFFQSxtQkFBQSxHQUFBLEdBQUE7Ozs7TUFJQSxPQUFBO1FBQ0EsUUFBQTtRQUNBLG9CQUFBO1FBQ0EsaUJBQUE7Ozs7Ozs7Ozs7Ozs7SUFhQSxJQUFBLFNBQUEsT0FBQTs7O0lBR0EsSUFBQSxNQUFBLElBQUE7Ozs7OztJQU1BLE9BQUE7TUFDQSxXQUFBLElBQUEsT0FBQTtNQUNBLFdBQUEsSUFBQSxPQUFBO01BQ0EsZUFBQSxJQUFBO01BQ0EsU0FBQSxJQUFBO01BQ0EsZ0JBQUEsSUFBQTtNQUNBLGtCQUFBLElBQUE7TUFDQSxRQUFBLElBQUE7TUFDQSxRQUFBLElBQUE7Ozs7RUFJQSxPQUFBO0lBQ0EsYUFBQSxTQUFBLE1BQUE7TUFDQSxPQUFBLGVBQUE7Ozs7QUFJQTs7Ozs7OztBQ3R2SUE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxVQUFBOzs7QUFHQSxTQUFBLFNBQUE7RUFDQSxPQUFBO0lBQ0EsYUFBQSxDQUFBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTtPQUNBO01BQ0EsU0FBQTtNQUNBLFFBQUE7TUFDQSxRQUFBO01BQ0EsT0FBQTs7SUFFQSxhQUFBLENBQUE7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBO09BQ0E7TUFDQSxTQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7TUFDQSxPQUFBOztJQUVBLFNBQUEsQ0FBQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7T0FDQTtNQUNBLFFBQUEsQ0FBQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7O01BRUEsYUFBQTtNQUNBLFVBQUE7TUFDQSxVQUFBO01BQ0EsU0FBQTtPQUNBO01BQ0EsUUFBQSxDQUFBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBO1NBQ0E7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTs7TUFFQSxhQUFBO01BQ0EsVUFBQTtNQUNBLFVBQUE7TUFDQSxTQUFBO09BQ0E7TUFDQSxRQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsT0FBQTtRQUNBLFFBQUE7U0FDQTtRQUNBLFdBQUE7UUFDQSxPQUFBO1FBQ0EsUUFBQTtTQUNBO1FBQ0EsV0FBQTtRQUNBLE9BQUE7UUFDQSxRQUFBOztNQUVBLGFBQUE7TUFDQSxVQUFBO01BQ0EsVUFBQTtNQUNBLFNBQUE7Ozs7QUFJQTs7QUMvck5BO0dBQ0EsT0FBQSxvQkFBQSxDQUFBLFlBQUE7R0FDQSxXQUFBLHFCQUFBO0dBQ0EsV0FBQTtFQUNBLENBQUEsVUFBQSxrQkFBQTtNQUNBLFNBQUEsUUFBQSxnQkFBQSxPQUFBO1VBQ0EsT0FBQSxRQUFBO1VBQ0EsT0FBQSxZQUFBLE1BQUE7VUFDQSxPQUFBLFNBQUEsV0FBQTtjQUNBLGVBQUEsUUFBQTs7O0dBR0EsV0FBQTtFQUNBLENBQUEsVUFBQSxrQkFBQTtNQUNBLFNBQUEsUUFBQSxnQkFBQSxjQUFBO1VBQ0EsT0FBQSxlQUFBO1VBQ0EsT0FBQSxtQkFBQSxhQUFBO1VBQ0EsT0FBQSxTQUFBLFdBQUE7Y0FDQSxlQUFBLFFBQUE7Ozs7O0FBS0EsU0FBQSxrQkFBQSxTQUFBLFFBQUEsT0FBQSxRQUFBLElBQUEsUUFBQSxRQUFBOztFQUVBLElBQUEsS0FBQTtFQUNBLElBQUEsTUFBQSxPQUFBLFNBQUEsS0FBQSxZQUFBO0VBQ0EsR0FBQSxVQUFBLFFBQUEsU0FBQSxLQUFBLE1BQUEsR0FBQSxNQUFBO0VBQ0EsR0FBQSxTQUFBO0VBQ0EsR0FBQSxXQUFBO0VBQ0EsR0FBQSxpQkFBQTtFQUNBLEdBQUEsaUJBQUE7RUFDQSxHQUFBLFNBQUE7RUFDQSxHQUFBLFVBQUE7RUFDQSxHQUFBLGNBQUE7RUFDQSxHQUFBLFdBQUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTs7RUFFQSxHQUFBLFFBQUE7SUFDQSxTQUFBO0lBQ0EsVUFBQTtJQUNBLGNBQUE7O0VBRUEsR0FBQSxZQUFBO0lBQ0EsY0FBQTtJQUNBLFlBQUE7SUFDQSxXQUFBO0lBQ0EsaUJBQUE7SUFDQSxXQUFBO0lBQ0EsZUFBQTtNQUNBLE9BQUE7TUFDQSxVQUFBO01BQ0EsUUFBQTtNQUNBLFNBQUE7O0lBRUEsZUFBQTs7SUFFQSxTQUFBOztJQUVBLGFBQUEsQ0FBQSxXQUFBO0lBQ0EsbUJBQUE7SUFDQSxpQkFBQTtJQUNBLFlBQUE7SUFDQSxZQUFBO0lBQ0EsYUFBQTs7SUFFQSxRQUFBO0lBQ0EsT0FBQTtJQUNBLE1BQUE7SUFDQSxpQkFBQTs7RUFFQSxHQUFBLFlBQUE7RUFDQSxHQUFBLG1CQUFBOztFQUVBLFNBQUEsVUFBQSxPQUFBO01BQ0EsSUFBQSxNQUFBLE1BQUEsT0FBQTs7VUFFQSxRQUFBLENBQUEsRUFBQSxNQUFBOztNQUVBLE1BQUEsUUFBQSxTQUFBLE1BQUE7VUFDQSxPQUFBLEtBQUE7O01BRUEsT0FBQSxLQUFBO1VBQ0EsYUFBQSxHQUFBLFVBQUE7VUFDQSxZQUFBO1VBQ0EsU0FBQTtjQUNBLE9BQUEsV0FBQTtrQkFDQSxPQUFBOzs7Ozs7O0dBT0E7O0VBRUEsU0FBQSxpQkFBQSxjQUFBO01BQ0EsSUFBQSxhQUFBLE1BQUEsT0FBQTs7VUFFQSxlQUFBLENBQUEsRUFBQSxNQUFBOztNQUVBLGFBQUEsUUFBQSxTQUFBLGFBQUE7VUFDQSxPQUFBLFlBQUE7O01BRUEsT0FBQSxLQUFBO1VBQ0EsYUFBQSxHQUFBLFVBQUE7VUFDQSxZQUFBO1VBQ0EsU0FBQTtjQUNBLGNBQUEsV0FBQTtrQkFDQSxPQUFBOzs7Ozs7O0dBT0E7O0VBRUEsU0FBQSxXQUFBLE9BQUEsUUFBQTtJQUNBLEdBQUEsaUJBQUE7SUFDQSxHQUFBLFVBQUEsY0FBQSxNQUFBLFdBQUE7SUFDQSxHQUFBLFFBQUE7TUFDQSxVQUFBLFdBQUEsUUFBQSxRQUFBO01BQ0EsU0FBQSxXQUFBLFFBQUEsUUFBQTs7SUFFQTs7O0VBR0EsU0FBQSxPQUFBLFVBQUE7SUFDQSxHQUFBLFVBQUEsU0FBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxDQUFBLE9BQUEsUUFBQSxHQUFBLFdBQUE7UUFDQSxHQUFBLE9BQUEsTUFBQSxVQUFBLGNBQUEsTUFBQSxXQUFBOzs7SUFHQSxHQUFBLGlCQUFBO0lBQ0EsSUFBQSxVQUFBLE9BQUEsSUFBQSxTQUFBLE9BQUEsU0FBQSxNQUFBO01BQ0EsT0FBQSxLQUFBOztJQUVBLEdBQUEsUUFBQTtNQUNBLFNBQUEsU0FBQTtNQUNBLFVBQUEsU0FBQTtNQUNBLGNBQUEsUUFBQSxLQUFBOztJQUVBOzs7RUFHQSxTQUFBLHFCQUFBLE9BQUEsVUFBQTtJQUNBLE1BQUE7TUFDQSxLQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7UUFDQSxHQUFBOztPQUVBLEtBQUEsU0FBQSxVQUFBO01BQ0EsSUFBQSxVQUFBO01BQ0EsT0FBQSxLQUFBLFNBQUEsTUFBQSxTQUFBLEtBQUE7UUFDQSxJQUFBLElBQUEsS0FBQTtVQUNBLFFBQUEsS0FBQSxJQUFBOzs7TUFHQSxNQUFBO1FBQ0EsS0FBQTtRQUNBLFFBQUE7UUFDQSxRQUFBO1VBQ0EsY0FBQSxRQUFBLEtBQUE7O1NBRUEsS0FBQSxTQUFBLFVBQUE7UUFDQSxJQUFBLG9CQUFBO1FBQ0EsT0FBQSxLQUFBLFNBQUEsTUFBQSxTQUFBLEtBQUE7VUFDQSxJQUFBLElBQUEsVUFBQTtZQUNBLElBQUEsYUFBQSxXQUFBLElBQUEsS0FBQSxJQUFBO2VBQ0E7WUFDQSxrQkFBQSxLQUFBOzs7UUFHQSxTQUFBOzs7OztFQUtBLFNBQUEsc0JBQUEsT0FBQSxVQUFBO0lBQ0EsTUFBQTtNQUNBLEtBQUE7TUFDQSxRQUFBO01BQ0EsUUFBQTtRQUNBLFVBQUE7O09BRUEsS0FBQSxTQUFBLFVBQUE7TUFDQSxJQUFBLHFCQUFBO01BQ0EsT0FBQSxLQUFBLFNBQUEsTUFBQSxTQUFBLEtBQUE7UUFDQSxJQUFBLElBQUEsVUFBQTtVQUNBLElBQUEsYUFBQSxXQUFBLElBQUEsS0FBQSxJQUFBLGFBQUE7VUFDQSxtQkFBQSxLQUFBOzs7TUFHQSxTQUFBOzs7O0VBSUEsU0FBQSxZQUFBLE9BQUEsVUFBQTtJQUNBLE1BQUE7TUFDQSxLQUFBO01BQ0EsUUFBQTtNQUNBLFFBQUE7UUFDQSxHQUFBOztPQUVBLEtBQUEsU0FBQSxVQUFBO01BQ0EsSUFBQSxXQUFBO01BQ0EsT0FBQSxLQUFBLFNBQUEsTUFBQSxTQUFBLEtBQUE7UUFDQSxJQUFBLElBQUEsVUFBQTtVQUNBLElBQUEsYUFBQSxXQUFBLElBQUEsS0FBQSxJQUFBLGFBQUE7VUFDQSxTQUFBLEtBQUE7OztNQUdBLFNBQUE7Ozs7RUFJQSxTQUFBLGNBQUEsU0FBQTtJQUNBLElBQUEsU0FBQSxRQUFBO0lBQ0EsSUFBQSxRQUFBLFFBQUEsU0FBQSxNQUFBOztJQUVBLElBQUEsYUFBQTtJQUNBLElBQUEsWUFBQTtJQUNBLElBQUEsZUFBQTtJQUNBLElBQUEsY0FBQTtJQUNBLElBQUEsV0FBQTs7SUFFQSxJQUFBLFVBQUEsV0FBQSxLQUFBLFdBQUEsV0FBQSxLQUFBO0lBQ0EsSUFBQSxTQUFBLFVBQUEsS0FBQSxXQUFBLFVBQUEsS0FBQTtJQUNBLElBQUEsV0FBQSxZQUFBLEtBQUEsV0FBQSxZQUFBLEtBQUE7SUFDQSxJQUFBLFFBQUEsYUFBQSxLQUFBLFdBQUEsYUFBQSxLQUFBO01BQ0EsU0FBQSxLQUFBLFdBQUEsU0FBQSxLQUFBOztJQUVBLFFBQUEsWUFBQTtJQUNBLFFBQUEsYUFBQSxVQUFBO0lBQ0EsUUFBQSxZQUFBLFVBQUE7O0lBRUEsSUFBQSxVQUFBO01BQ0EsSUFBQSxRQUFBLE1BQUEsU0FBQSxjQUFBO1FBQ0EsUUFBQSxhQUFBO2FBQ0EsSUFBQSxRQUFBLE1BQUEsU0FBQSxTQUFBO1FBQ0EsSUFBQSxTQUFBLFFBQUEsYUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBLEdBQUE7UUFDQSxJQUFBLFdBQUEsSUFBQSxLQUFBLGFBQUEsU0FBQSxHQUFBLEdBQUEsR0FBQTtRQUNBLElBQUEsYUFBQSxJQUFBLEtBQUEsYUFBQSxTQUFBLEdBQUEsR0FBQSxHQUFBOztRQUVBLElBQUEsV0FBQSxVQUFBO1VBQ0EsUUFBQSxhQUFBO2VBQ0EsSUFBQSxXQUFBLFlBQUE7VUFDQSxRQUFBLGFBQUE7Ozs7OztFQU1BLFNBQUEsT0FBQSxPQUFBO0lBQ0EsSUFBQSxDQUFBLENBQUEsU0FBQSxNQUFBLFFBQUE7TUFDQSxHQUFBLFVBQUE7V0FDQSxJQUFBLENBQUEsR0FBQSxRQUFBLFFBQUE7TUFDQTs7O0lBR0EsR0FBQSxpQkFBQTtJQUNBLEdBQUEsY0FBQSxHQUFBO0lBQ0EsSUFBQSxnQkFBQTs7SUFFQSxHQUFBLFVBQUEsbUJBQUEsS0FBQSxTQUFBLEdBQUEsR0FBQTtNQUNBLElBQUEsUUFBQSxHQUFBLE9BQUEsTUFBQTtNQUNBLElBQUEsR0FBQSxRQUFBLGtCQUFBLE1BQUEsaUJBQUEsQ0FBQSxlQUFBO1FBQ0EsR0FBQSxPQUFBLE1BQUEsR0FBQSxTQUFBLE1BQUEsTUFBQSxDQUFBLEdBQUE7UUFDQSxnQkFBQTs7OztJQUlBLEdBQUEsVUFBQSxtQkFBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO01BQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxNQUFBO01BQ0EsSUFBQSxHQUFBLFFBQUEsa0JBQUEsTUFBQSxpQkFBQSxDQUFBLGVBQUE7UUFDQSxHQUFBLE9BQUEsTUFBQSxHQUFBLFNBQUEsTUFBQSxNQUFBLENBQUEsR0FBQTtRQUNBLGdCQUFBOzs7O0lBSUEsSUFBQSxlQUFBO01BQ0E7OztJQUdBLEdBQUEsaUJBQUE7O0lBRUEscUJBQUEsR0FBQSxTQUFBLFNBQUEsYUFBQTtNQUNBLHNCQUFBLEdBQUEsU0FBQSxTQUFBLGNBQUE7UUFDQSxZQUFBLEdBQUEsU0FBQSxTQUFBLFVBQUE7VUFDQSxJQUFBLFlBQUEsWUFBQSxPQUFBLGNBQUE7VUFDQSxHQUFBLFdBQUEsT0FBQSxLQUFBLFdBQUEsT0FBQTtVQUNBLEdBQUEsVUFBQSxpQkFBQSxNQUFBLFdBQUE7VUFDQSxPQUFBLEtBQUEsR0FBQSxVQUFBLFNBQUEsU0FBQTtZQUNBLGNBQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxTQUFBO1lBQ0EsSUFBQSxVQUFBLE9BQUEsSUFBQSxPQUFBLFNBQUEsS0FBQTtjQUNBLE9BQUEsSUFBQTs7WUFFQSxHQUFBLFVBQUEsU0FBQSxLQUFBLFNBQUEsR0FBQSxHQUFBO2NBQ0EsSUFBQSxPQUFBO2NBQ0EsT0FBQSxLQUFBLEVBQUEsTUFBQSxTQUFBLFNBQUE7Z0JBQ0EsSUFBQSxRQUFBLFFBQUEsUUFBQSxPQUFBLENBQUEsR0FBQTtrQkFDQSxHQUFBLE9BQUEsTUFBQSxVQUFBO3FCQUNBLE1BQUEsV0FBQTtxQkFDQSxNQUFBLFFBQUE7Ozs7O1VBS0EsR0FBQSxpQkFBQTs7Ozs7O0VBTUEsU0FBQSxXQUFBO0lBQ0EsTUFBQTtNQUNBLEtBQUE7TUFDQSxRQUFBO01BQ0EsUUFBQSxHQUFBO09BQ0EsS0FBQSxTQUFBLFVBQUE7TUFDQSxHQUFBLFdBQUE7TUFDQSxPQUFBLEtBQUEsU0FBQSxNQUFBLFNBQUEsU0FBQTtRQUNBLElBQUEsUUFBQSxVQUFBO1VBQ0EsUUFBQSxhQUFBLFdBQUEsSUFBQSxLQUFBLFFBQUEsYUFBQTtVQUNBLGNBQUE7VUFDQSxHQUFBLFNBQUEsS0FBQTs7Ozs7O0VBTUEsR0FBQSxVQUFBO0lBQ0EsUUFBQTtJQUNBLFFBQUE7SUFDQSxXQUFBO0lBQ0EsY0FBQTs7O0VBR0EsU0FBQSxVQUFBLE9BQUEsT0FBQSxLQUFBLE1BQUEsTUFBQTtJQUNBLFdBQUEsV0FBQTtNQUNBLElBQUEsVUFBQSxLQUFBO1FBQ0E7YUFDQSxJQUFBLFFBQUEsT0FBQSxLQUFBO1FBQ0EsVUFBQSxPQUFBLE9BQUEsS0FBQSxHQUFBO2FBQ0E7UUFDQSxRQUFBLFFBQUE7UUFDQSxHQUFBLFFBQUEsU0FBQTtRQUNBLE9BQUE7UUFDQSxVQUFBLE9BQUEsT0FBQSxLQUFBLE1BQUE7O09BRUE7OztFQUdBLFNBQUEsaUJBQUE7SUFDQSxNQUFBO01BQ0EsS0FBQTtNQUNBLFFBQUE7T0FDQSxLQUFBLFNBQUEsVUFBQTtNQUNBLElBQUEsU0FBQSxTQUFBO01BQ0EsT0FBQSxTQUFBO01BQ0EsVUFBQSxVQUFBLEdBQUEsT0FBQSxRQUFBLEdBQUE7TUFDQSxVQUFBLFVBQUEsR0FBQSxPQUFBLFFBQUEsR0FBQTtNQUNBLFVBQUEsZ0JBQUEsR0FBQSxPQUFBLGNBQUEsSUFBQTtNQUNBLFVBQUEsYUFBQSxHQUFBLE9BQUEsV0FBQSxHQUFBOzs7O0VBSUE7O0FBRUEiLCJmaWxlIjoiZ3JpZC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBhdXRob3IgTWljaGFlbCBNY0Rlcm1vdHRcbiAqIENyZWF0ZWQgb24gNy8yOC8xNS5cbiAqL1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2NsdXN0ZXJncmFtJywgW10pXG4gIC5kaXJlY3RpdmUoJ2NsdXN0ZXJncmFtJywgY2x1c3RlcmdyYW1EaXIpO1xuXG5mdW5jdGlvbiBjbHVzdGVyZ3JhbURpcigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7XG4gICAgICBhcmd1bWVudHM6ICc9J1xuICAgIH0sXG4gICAgdGVtcGxhdGVVcmw6ICdjbHVzdGVyZ3JhbS5odG1sJyxcbiAgICBjb250cm9sbGVyOiBDbHVzdGVyZ3JhbUNvbnRyb2xsZXIsXG4gICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcbiAgfTtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gQ2x1c3RlcmdyYW1Db250cm9sbGVyKCR0aW1lb3V0LCBsb2Rhc2gsIGQzLCBkM0NsdXN0KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5zZXRPcmRlciA9IHNldE9yZGVyO1xuICAgIHZtLmFjdGl2ZSA9ICdyYW5rJztcbiAgICB2YXIgY2x1c3RlcmdyYW07XG4gICAgdmFyIGNsdXN0Q29sb3JzID0ge1xuICAgICAgJ1Byb21vQ2VsbCBNeW9jeXRlcyc6ICcjNUQ0QTY2JyxcbiAgICAgICdDZWxsIEZyZWUnOiAnI0RBQTQ5QScsXG4gICAgfTtcbiAgICB2YXIgb3JhbmdlR3JvdXAgPSBbJ0wxMDAwJywgJ1JOQS1TZXEnLCAnQVRBQy1TZXEnXTtcbiAgICB2YXIgcHVycGxlR3JvdXAgPSBbJ0dDUCcsICdQMTAwJywgJ1JQUEEnLCAnU1dBVEgtTVMnXTtcbiAgICB2YXIgZGFya0dyZWVuR3JvdXAgPSBbJ01FTUEnLCAnVmlhYmlsaXR5JywgJ0ltbXVub2ZsdW9yZXNjZW5jZSddXG5cbiAgICBmdW5jdGlvbiBzZXRPcmRlcihvcmRlclN0cmluZykge1xuICAgICAgdm0uYWN0aXZlID0gb3JkZXJTdHJpbmc7XG4gICAgICBpZiAoY2x1c3RlcmdyYW0pIHtcbiAgICAgICAgY2x1c3RlcmdyYW0ucmVvcmRlcihvcmRlclN0cmluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbHVzdGVyZ3JhbSA9IGQzQ2x1c3QuY2x1c3RlcmdyYW0odm0uYXJndW1lbnRzKTtcbiAgICAgICAgY2x1c3RlcmdyYW0ucmVvcmRlcihvcmRlclN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyQ2x1c3QoKSB7XG4gICAgICB2bS5hcmd1bWVudHMub3JkZXIgPSB2bS5hY3RpdmU7XG4gICAgICBpZiAoIWNsdXN0ZXJncmFtKSB7XG4gICAgICAgIGNsdXN0ZXJncmFtID0gZDNDbHVzdC5jbHVzdGVyZ3JhbSh2bS5hcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpLmVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICB2YXIgbGFiZWwgPSBkMy5zZWxlY3QodGhpcykudGV4dCgpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfdHJpYW5nbGVfZ3JvdXAnKS5lYWNoKGZ1bmN0aW9uKGUsIGopIHtcbiAgICAgICAgICB2YXIgcGF0aCA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3BhdGgnKTtcbiAgICAgICAgICBpZiAoaSAhPT0gaikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3JhbmdlR3JvdXAuaW5kZXhPZihsYWJlbCkgPiAtMSkge1xuICAgICAgICAgICAgcGF0aC5zdHlsZSgnZmlsbCcsICdvcmFuZ2UnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHB1cnBsZUdyb3VwLmluZGV4T2YobGFiZWwpID4gLTEpIHtcbiAgICAgICAgICAgIHBhdGguc3R5bGUoJ2ZpbGwnLCAncHVycGxlJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChkYXJrR3JlZW5Hcm91cC5pbmRleE9mKGxhYmVsKSA+IC0xKSB7XG4gICAgICAgICAgICBwYXRoLnN0eWxlKCdmaWxsJywgJyMzNzNGNDcnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGF0aC5zdHlsZSgnZmlsbCcsICdyZWQnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKS5lYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgIHZhciBsYWJlbCA9IG5vZGUudGV4dCgpO1xuICAgICAgICB2YXIgcGF0aCA9IG5vZGUuc2VsZWN0KCdwYXRoJyk7XG4gICAgICAgIGlmIChsb2Rhc2guaGFzKGNsdXN0Q29sb3JzLCBsYWJlbCkpIHtcbiAgICAgICAgICBwYXRoLnN0eWxlKCdmaWxsJywgY2x1c3RDb2xvcnNbbGFiZWxdKTtcbiAgICAgICAgfSBlbHNlIGlmIChsYWJlbC5zcGxpdCgnICcpWzBdID09PSAnaVBTQycpIHtcbiAgICAgICAgICBwYXRoLnN0eWxlKCdmaWxsJywgJyMwMDgwMDAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRoLnN0eWxlKCdmaWxsJywgJyNjYzknKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2ltdWxhdGVDbGljaygpIHtcbiAgICAgIGQzLnNlbGVjdCgnLnRpbGUnKS5lYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLm9uKCdjbGljaycpLmFwcGx5KHRoaXMsIFtkLCBpXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXJDbHVzdCgpO1xuICAgIHNpbXVsYXRlQ2xpY2soKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAYXV0aG9yIE1pY2hhZWwgTWNEZXJtb3R0XG4gKiBDcmVhdGVkIG9uIDcvMjAvMTUuXG4gKi9cblxuYW5ndWxhclxuICAubW9kdWxlKCdjbHVzdGVyZ3JhbScpXG4gIC5mYWN0b3J5KCdkMycsIGQzU2VydmljZSk7XG5cbmZ1bmN0aW9uIGQzU2VydmljZSgpIHtcbiAgLyplc2xpbnQtZGlzYWJsZSAqL1xuICB2YXIgZDMgPSB7XG4gICAgdmVyc2lvbjogXCIzLjUuM1wiXG4gIH07XG4gIGlmICghRGF0ZS5ub3cpIERhdGUubm93ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICtuZXcgRGF0ZSgpO1xuICB9O1xuICB2YXIgZDNfYXJyYXlTbGljZSA9IFtdLnNsaWNlLFxuICAgIGQzX2FycmF5ID0gZnVuY3Rpb24obGlzdCkge1xuICAgICAgcmV0dXJuIGQzX2FycmF5U2xpY2UuY2FsbChsaXN0KTtcbiAgICB9O1xuICB2YXIgZDNfZG9jdW1lbnQgPSBkb2N1bWVudCxcbiAgICBkM19kb2N1bWVudEVsZW1lbnQgPSBkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgZDNfd2luZG93ID0gd2luZG93O1xuICB0cnkge1xuICAgIGQzX2FycmF5KGQzX2RvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzKVswXS5ub2RlVHlwZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGQzX2FycmF5ID0gZnVuY3Rpb24obGlzdCkge1xuICAgICAgdmFyIGkgPSBsaXN0Lmxlbmd0aCxcbiAgICAgICAgYXJyYXkgPSBuZXcgQXJyYXkoaSk7XG4gICAgICB3aGlsZSAoaS0tKSBhcnJheVtpXSA9IGxpc3RbaV07XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcbiAgfVxuICB0cnkge1xuICAgIGQzX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUuc2V0UHJvcGVydHkoXCJvcGFjaXR5XCIsIDAsIFwiXCIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHZhciBkM19lbGVtZW50X3Byb3RvdHlwZSA9IGQzX3dpbmRvdy5FbGVtZW50LnByb3RvdHlwZSxcbiAgICAgIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlID0gZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlLFxuICAgICAgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGVOUyA9IGQzX2VsZW1lbnRfcHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TLFxuICAgICAgZDNfc3R5bGVfcHJvdG90eXBlID0gZDNfd2luZG93LkNTU1N0eWxlRGVjbGFyYXRpb24ucHJvdG90eXBlLFxuICAgICAgZDNfc3R5bGVfc2V0UHJvcGVydHkgPSBkM19zdHlsZV9wcm90b3R5cGUuc2V0UHJvcGVydHk7XG4gICAgZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSwgdmFsdWUgKyBcIlwiKTtcbiAgICB9O1xuICAgIGQzX2VsZW1lbnRfcHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24oc3BhY2UsIGxvY2FsLCB2YWx1ZSkge1xuICAgICAgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGVOUy5jYWxsKHRoaXMsIHNwYWNlLCBsb2NhbCwgdmFsdWUgKyBcIlwiKTtcbiAgICB9O1xuICAgIGQzX3N0eWxlX3Byb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgICAgZDNfc3R5bGVfc2V0UHJvcGVydHkuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSArIFwiXCIsIHByaW9yaXR5KTtcbiAgICB9O1xuICB9XG4gIGQzLmFzY2VuZGluZyA9IGQzX2FzY2VuZGluZztcblxuICBmdW5jdGlvbiBkM19hc2NlbmRpbmcoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgfVxuICBkMy5kZXNjZW5kaW5nID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIDwgYSA/IC0xIDogYiA+IGEgPyAxIDogYiA+PSBhID8gMCA6IE5hTjtcbiAgfTtcbiAgZDMubWluID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGEsIGI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKVxuICAgICAgICBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgICBhID0gYjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pXG4gICAgICAgIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pXG4gICAgICAgIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICAgIGEgPSBiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfTtcbiAgZDMubWF4ID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGEsIGI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKVxuICAgICAgICBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgICBhID0gYjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pXG4gICAgICAgIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pXG4gICAgICAgIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICAgIGEgPSBiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYiA+IGEpIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfTtcbiAgZDMuZXh0ZW50ID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGEsIGIsIGM7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKVxuICAgICAgICBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgICBhID0gYyA9IGI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKVxuICAgICAgICBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChhID4gYikgYSA9IGI7XG4gICAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYiA+PSBiKSB7XG4gICAgICAgICAgYSA9IGMgPSBiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuICAgICAgICAgIGlmIChjIDwgYikgYyA9IGI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFthLCBjXTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19udW1iZXIoeCkge1xuICAgIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG4gIH1cblxuICBmdW5jdGlvbiBkM19udW1lcmljKHgpIHtcbiAgICByZXR1cm4gIWlzTmFOKHgpO1xuICB9XG4gIGQzLnN1bSA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIHMgPSAwLFxuICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGEsIGkgPSAtMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pXG4gICAgICAgIGlmIChkM19udW1lcmljKGEgPSArYXJyYXlbaV0pKSBzICs9IGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKVxuICAgICAgICBpZiAoZDNfbnVtZXJpYyhhID0gK2YuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSkgcyArPSBhO1xuICAgIH1cbiAgICByZXR1cm4gcztcbiAgfTtcbiAgZDMubWVhbiA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIHMgPSAwLFxuICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGEsIGkgPSAtMSxcbiAgICAgIGogPSBuO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihhcnJheVtpXSkpKSBzICs9IGE7XG4gICAgICAgIGVsc2UgLS1qO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSBzICs9IGE7XG4gICAgICAgIGVsc2UgLS1qO1xuICAgIH1cbiAgICBpZiAoaikgcmV0dXJuIHMgLyBqO1xuICB9O1xuICBkMy5xdWFudGlsZSA9IGZ1bmN0aW9uKHZhbHVlcywgcCkge1xuICAgIHZhciBIID0gKHZhbHVlcy5sZW5ndGggLSAxKSAqIHAgKyAxLFxuICAgICAgaCA9IE1hdGguZmxvb3IoSCksXG4gICAgICB2ID0gK3ZhbHVlc1toIC0gMV0sXG4gICAgICBlID0gSCAtIGg7XG4gICAgcmV0dXJuIGUgPyB2ICsgZSAqICh2YWx1ZXNbaF0gLSB2KSA6IHY7XG4gIH07XG4gIGQzLm1lZGlhbiA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIG51bWJlcnMgPSBbXSxcbiAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICBhLCBpID0gLTE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKVxuICAgICAgICBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGFycmF5W2ldKSkpIG51bWJlcnMucHVzaChhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pXG4gICAgICAgIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSkgbnVtYmVyc1xuICAgICAgICAgIC5wdXNoKGEpO1xuICAgIH1cbiAgICBpZiAobnVtYmVycy5sZW5ndGgpIHJldHVybiBkMy5xdWFudGlsZShudW1iZXJzLnNvcnQoZDNfYXNjZW5kaW5nKSwgLjUpO1xuICB9O1xuICBkMy52YXJpYW5jZSA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGEsIGQsIHMgPSAwLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDA7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkge1xuICAgICAgICAgIGQgPSBhIC0gbTtcbiAgICAgICAgICBtICs9IGQgLyArK2o7XG4gICAgICAgICAgcyArPSBkICogKGEgLSBtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSkpIHtcbiAgICAgICAgICBkID0gYSAtIG07XG4gICAgICAgICAgbSArPSBkIC8gKytqO1xuICAgICAgICAgIHMgKz0gZCAqIChhIC0gbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGogPiAxKSByZXR1cm4gcyAvIChqIC0gMSk7XG4gIH07XG4gIGQzLmRldmlhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gZDMudmFyaWFuY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfYmlzZWN0b3IoY29tcGFyZSkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBsbyA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvO1xuICAgICAgfSxcbiAgICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBsbyA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdmFyIGQzX2Jpc2VjdCA9IGQzX2Jpc2VjdG9yKGQzX2FzY2VuZGluZyk7XG4gIGQzLmJpc2VjdExlZnQgPSBkM19iaXNlY3QubGVmdDtcbiAgZDMuYmlzZWN0ID0gZDMuYmlzZWN0UmlnaHQgPSBkM19iaXNlY3QucmlnaHQ7XG4gIGQzLmJpc2VjdG9yID0gZnVuY3Rpb24oZikge1xuICAgIHJldHVybiBkM19iaXNlY3RvcihmLmxlbmd0aCA9PT0gMSA/IGZ1bmN0aW9uKGQsIHgpIHtcbiAgICAgIHJldHVybiBkM19hc2NlbmRpbmcoZihkKSwgeCk7XG4gICAgfSA6IGYpO1xuICB9O1xuICBkMy5zaHVmZmxlID0gZnVuY3Rpb24oYXJyYXksIGkwLCBpMSkge1xuICAgIGlmICgobSA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMykge1xuICAgICAgaTEgPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobSA8IDIpIGkwID0gMDtcbiAgICB9XG4gICAgdmFyIG0gPSBpMSAtIGkwLFxuICAgICAgdCwgaTtcbiAgICB3aGlsZSAobSkge1xuICAgICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgICAgdCA9IGFycmF5W20gKyBpMF0sIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdLCBhcnJheVtpICsgaTBdID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuICBkMy5wZXJtdXRlID0gZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLFxuICAgICAgcGVybXV0ZXMgPSBuZXcgQXJyYXkoaSk7XG4gICAgd2hpbGUgKGktLSkgcGVybXV0ZXNbaV0gPSBhcnJheVtpbmRleGVzW2ldXTtcbiAgICByZXR1cm4gcGVybXV0ZXM7XG4gIH07XG4gIGQzLnBhaXJzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICBuID0gYXJyYXkubGVuZ3RoIC0gMSxcbiAgICAgIHAwLCBwMSA9IGFycmF5WzBdLFxuICAgICAgcGFpcnMgPSBuZXcgQXJyYXkobiA8IDAgPyAwIDogbik7XG4gICAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IFtwMCA9IHAxLCBwMSA9IGFycmF5WysraV1dO1xuICAgIHJldHVybiBwYWlycztcbiAgfTtcbiAgZDMuemlwID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEobiA9IGFyZ3VtZW50cy5sZW5ndGgpKSByZXR1cm4gW107XG4gICAgZm9yICh2YXIgaSA9IC0xLCBtID0gZDMubWluKGFyZ3VtZW50cywgZDNfemlwTGVuZ3RoKSwgemlwcyA9IG5ldyBBcnJheShcbiAgICAgICAgbSk7ICsraSA8IG07KSB7XG4gICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHppcCA9IHppcHNbaV0gPSBuZXcgQXJyYXkobik7ICsraiA8IG47KSB7XG4gICAgICAgIHppcFtqXSA9IGFyZ3VtZW50c1tqXVtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHppcHM7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfemlwTGVuZ3RoKGQpIHtcbiAgICByZXR1cm4gZC5sZW5ndGg7XG4gIH1cbiAgZDMudHJhbnNwb3NlID0gZnVuY3Rpb24obWF0cml4KSB7XG4gICAgcmV0dXJuIGQzLnppcC5hcHBseShkMywgbWF0cml4KTtcbiAgfTtcbiAgZDMua2V5cyA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG4gIGQzLnZhbHVlcyA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB2YWx1ZXMucHVzaChtYXBba2V5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcbiAgZDMuZW50cmllcyA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtcbiAgICAgIGtleToga2V5LFxuICAgICAgdmFsdWU6IG1hcFtrZXldXG4gICAgfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH07XG4gIGQzLm1lcmdlID0gZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgdmFyIG4gPSBhcnJheXMubGVuZ3RoLFxuICAgICAgbSwgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsIGFycmF5O1xuICAgIHdoaWxlICgrK2kgPCBuKSBqICs9IGFycmF5c1tpXS5sZW5ndGg7XG4gICAgbWVyZ2VkID0gbmV3IEFycmF5KGopO1xuICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgICBtID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKC0tbSA+PSAwKSB7XG4gICAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWQ7XG4gIH07XG4gIHZhciBhYnMgPSBNYXRoLmFicztcbiAgZDMucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgc3RlcCA9IDE7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgc3RvcCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXAgPT09IEluZmluaXR5KSB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcImluZmluaXRlIHJhbmdlXCIpO1xuICAgIHZhciByYW5nZSA9IFtdLFxuICAgICAgayA9IGQzX3JhbmdlX2ludGVnZXJTY2FsZShhYnMoc3RlcCkpLFxuICAgICAgaSA9IC0xLFxuICAgICAgajtcbiAgICBzdGFydCAqPSBrLCBzdG9wICo9IGssIHN0ZXAgKj0gaztcbiAgICBpZiAoc3RlcCA8IDApXG4gICAgICB3aGlsZSAoKGogPSBzdGFydCArIHN0ZXAgKiArK2kpID4gc3RvcCkgcmFuZ2UucHVzaChqIC8gayk7XG4gICAgZWxzZVxuICAgICAgd2hpbGUgKChqID0gc3RhcnQgKyBzdGVwICogKytpKSA8IHN0b3ApIHJhbmdlLnB1c2goaiAvIGspO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoeCkge1xuICAgIHZhciBrID0gMTtcbiAgICB3aGlsZSAoeCAqIGsgJSAxKSBrICo9IDEwO1xuICAgIHJldHVybiBrO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfY2xhc3MoY3RvciwgcHJvcGVydGllcykge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3Rvci5wcm90b3R5cGUsIGtleSwge1xuICAgICAgICB2YWx1ZTogcHJvcGVydGllc1trZXldLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGQzLm1hcCA9IGZ1bmN0aW9uKG9iamVjdCwgZikge1xuICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCk7XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIGQzX01hcCkge1xuICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpXG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgICBlbHNlXG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYuY2FsbChvYmplY3QsIG8gPSBvYmplY3RbaV0sIGkpLCBvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19NYXAoKSB7XG4gICAgdGhpcy5fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICB2YXIgZDNfbWFwX3Byb3RvID0gXCJfX3Byb3RvX19cIixcbiAgICBkM19tYXBfemVybyA9IFwiXFx4MDBcIjtcbiAgZDNfY2xhc3MoZDNfTWFwLCB7XG4gICAgaGFzOiBkM19tYXBfaGFzLFxuICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fW2QzX21hcF9lc2NhcGUoa2V5KV07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9bZDNfbWFwX2VzY2FwZShrZXkpXSA9IHZhbHVlO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBkM19tYXBfcmVtb3ZlLFxuICAgIGtleXM6IGQzX21hcF9rZXlzLFxuICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSB2YWx1ZXMucHVzaCh0aGlzLl9ba2V5XSk7XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgZW50cmllcy5wdXNoKHtcbiAgICAgICAga2V5OiBkM19tYXBfdW5lc2NhcGUoa2V5KSxcbiAgICAgICAgdmFsdWU6IHRoaXMuX1trZXldXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgIH0sXG4gICAgc2l6ZTogZDNfbWFwX3NpemUsXG4gICAgZW1wdHk6IGQzX21hcF9lbXB0eSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBmLmNhbGwodGhpcywgZDNfbWFwX3VuZXNjYXBlKGtleSksIHRoaXNcbiAgICAgICAgLl9ba2V5XSk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBkM19tYXBfZXNjYXBlKGtleSkge1xuICAgIHJldHVybiAoa2V5ICs9IFwiXCIpID09PSBkM19tYXBfcHJvdG8gfHwga2V5WzBdID09PSBkM19tYXBfemVybyA/XG4gICAgICBkM19tYXBfemVybyArIGtleSA6IGtleTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX21hcF91bmVzY2FwZShrZXkpIHtcbiAgICByZXR1cm4gKGtleSArPSBcIlwiKVswXSA9PT0gZDNfbWFwX3plcm8gPyBrZXkuc2xpY2UoMSkgOiBrZXk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19tYXBfaGFzKGtleSkge1xuICAgIHJldHVybiBkM19tYXBfZXNjYXBlKGtleSkgaW4gdGhpcy5fO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbWFwX3JlbW92ZShrZXkpIHtcbiAgICByZXR1cm4gKGtleSA9IGQzX21hcF9lc2NhcGUoa2V5KSkgaW4gdGhpcy5fICYmIGRlbGV0ZSB0aGlzLl9ba2V5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX21hcF9rZXlzKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykga2V5cy5wdXNoKGQzX21hcF91bmVzY2FwZShrZXkpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX21hcF9zaXplKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cblxuICBmdW5jdGlvbiBkM19tYXBfZW1wdHkoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGQzLm5lc3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmVzdCA9IHt9LFxuICAgICAga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsIHJvbGx1cDtcblxuICAgIGZ1bmN0aW9uIG1hcChtYXBUeXBlLCBhcnJheSwgZGVwdGgpIHtcbiAgICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHJvbGx1cCA/IHJvbGx1cC5jYWxsKG5lc3QsIGFycmF5KSA6XG4gICAgICAgIHNvcnRWYWx1ZXMgPyBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpIDogYXJyYXk7XG4gICAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSwgb2JqZWN0LCBzZXR0ZXIsIHZhbHVlc0J5S2V5ID0gbmV3IGQzX01hcCgpLFxuICAgICAgICB2YWx1ZXM7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KG9iamVjdCA9IGFycmF5W2ldKSkpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChvYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW29iamVjdF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWFwVHlwZSkge1xuICAgICAgICBvYmplY3QgPSBtYXBUeXBlKCk7XG4gICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGtleVZhbHVlLCB2YWx1ZXMpIHtcbiAgICAgICAgICBvYmplY3Quc2V0KGtleVZhbHVlLCBtYXAobWFwVHlwZSwgdmFsdWVzLCBkZXB0aCkpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0ID0ge307XG4gICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGtleVZhbHVlLCB2YWx1ZXMpIHtcbiAgICAgICAgICBvYmplY3Rba2V5VmFsdWVdID0gbWFwKG1hcFR5cGUsIHZhbHVlcywgZGVwdGgpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFsdWVzQnlLZXkuZm9yRWFjaChzZXR0ZXIpO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICAgIHZhciBhcnJheSA9IFtdLFxuICAgICAgICBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGgrK107XG4gICAgICBtYXAuZm9yRWFjaChmdW5jdGlvbihrZXksIGtleU1hcCkge1xuICAgICAgICBhcnJheS5wdXNoKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZXM6IGVudHJpZXMoa2V5TWFwLCBkZXB0aClcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3J0S2V5ID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7XG4gICAgICB9KSA6IGFycmF5O1xuICAgIH1cbiAgICBuZXN0Lm1hcCA9IGZ1bmN0aW9uKGFycmF5LCBtYXBUeXBlKSB7XG4gICAgICByZXR1cm4gbWFwKG1hcFR5cGUsIGFycmF5LCAwKTtcbiAgICB9O1xuICAgIG5lc3QuZW50cmllcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICByZXR1cm4gZW50cmllcyhtYXAoZDMubWFwLCBhcnJheSwgMCksIDApO1xuICAgIH07XG4gICAgbmVzdC5rZXkgPSBmdW5jdGlvbihkKSB7XG4gICAgICBrZXlzLnB1c2goZCk7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIG5lc3Quc29ydEtleXMgPSBmdW5jdGlvbihvcmRlcikge1xuICAgICAgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyO1xuICAgICAgcmV0dXJuIG5lc3Q7XG4gICAgfTtcbiAgICBuZXN0LnNvcnRWYWx1ZXMgPSBmdW5jdGlvbihvcmRlcikge1xuICAgICAgc29ydFZhbHVlcyA9IG9yZGVyO1xuICAgICAgcmV0dXJuIG5lc3Q7XG4gICAgfTtcbiAgICBuZXN0LnJvbGx1cCA9IGZ1bmN0aW9uKGYpIHtcbiAgICAgIHJvbGx1cCA9IGY7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIHJldHVybiBuZXN0O1xuICB9O1xuICBkMy5zZXQgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBzZXQgPSBuZXcgZDNfU2V0KCk7XG4gICAgaWYgKGFycmF5KVxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGg7IGkgPCBuOyArK2kpIHNldC5hZGQoYXJyYXlbaV0pO1xuICAgIHJldHVybiBzZXQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfU2V0KCkge1xuICAgIHRoaXMuXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgZDNfY2xhc3MoZDNfU2V0LCB7XG4gICAgaGFzOiBkM19tYXBfaGFzLFxuICAgIGFkZDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB0aGlzLl9bZDNfbWFwX2VzY2FwZShrZXkgKz0gXCJcIildID0gdHJ1ZTtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfSxcbiAgICByZW1vdmU6IGQzX21hcF9yZW1vdmUsXG4gICAgdmFsdWVzOiBkM19tYXBfa2V5cyxcbiAgICBzaXplOiBkM19tYXBfc2l6ZSxcbiAgICBlbXB0eTogZDNfbWFwX2VtcHR5LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGYuY2FsbCh0aGlzLCBkM19tYXBfdW5lc2NhcGUoa2V5KSk7XG4gICAgfVxuICB9KTtcbiAgZDMuYmVoYXZpb3IgPSB7fTtcbiAgZDMucmViaW5kID0gZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICB2YXIgaSA9IDEsXG4gICAgICBuID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgIG1ldGhvZDtcbiAgICB3aGlsZSAoKytpIDwgbikgdGFyZ2V0W21ldGhvZCA9IGFyZ3VtZW50c1tpXV0gPSBkM19yZWJpbmQodGFyZ2V0LFxuICAgICAgc291cmNlLCBzb3VyY2VbbWV0aG9kXSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19yZWJpbmQodGFyZ2V0LCBzb3VyY2UsIG1ldGhvZCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG1ldGhvZC5hcHBseShzb3VyY2UsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHNvdXJjZSA/IHRhcmdldCA6IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkM192ZW5kb3JTeW1ib2wob2JqZWN0LCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgaW4gb2JqZWN0KSByZXR1cm4gbmFtZTtcbiAgICBuYW1lID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBkM192ZW5kb3JQcmVmaXhlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBwcmVmaXhOYW1lID0gZDNfdmVuZG9yUHJlZml4ZXNbaV0gKyBuYW1lO1xuICAgICAgaWYgKHByZWZpeE5hbWUgaW4gb2JqZWN0KSByZXR1cm4gcHJlZml4TmFtZTtcbiAgICB9XG4gIH1cbiAgdmFyIGQzX3ZlbmRvclByZWZpeGVzID0gW1wid2Via2l0XCIsIFwibXNcIiwgXCJtb3pcIiwgXCJNb3pcIiwgXCJvXCIsIFwiT1wiXTtcblxuICBmdW5jdGlvbiBkM19ub29wKCkge31cbiAgZDMuZGlzcGF0Y2ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBuZXcgZDNfZGlzcGF0Y2goKSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuICAgIHJldHVybiBkaXNwYXRjaDtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19kaXNwYXRjaCgpIHt9XG4gIGQzX2Rpc3BhdGNoLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGkgPSB0eXBlLmluZGV4T2YoXCIuXCIpLFxuICAgICAgbmFtZSA9IFwiXCI7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgbmFtZSA9IHR5cGUuc2xpY2UoaSArIDEpO1xuICAgICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSk7XG4gICAgfVxuICAgIGlmICh0eXBlKSByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB0aGlzW3R5cGVdLm9uKG5hbWUpIDogdGhpc1tcbiAgICAgIHR5cGVdLm9uKG5hbWUsIGxpc3RlbmVyKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwpXG4gICAgICAgIGZvciAodHlwZSBpbiB0aGlzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkodHlwZSkpIHRoaXNbdHlwZV0ub24obmFtZSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBkM19kaXNwYXRjaF9ldmVudChkaXNwYXRjaCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICAgIGxpc3RlbmVyQnlOYW1lID0gbmV3IGQzX01hcCgpO1xuXG4gICAgZnVuY3Rpb24gZXZlbnQoKSB7XG4gICAgICB2YXIgeiA9IGxpc3RlbmVycyxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gei5sZW5ndGgsXG4gICAgICAgIGw7XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKGwgPSB6W2ldLm9uKSBsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gZGlzcGF0Y2g7XG4gICAgfVxuICAgIGV2ZW50Lm9uID0gZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsID0gbGlzdGVuZXJCeU5hbWUuZ2V0KG5hbWUpLFxuICAgICAgICBpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gbCAmJiBsLm9uO1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgbC5vbiA9IG51bGw7XG4gICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwLCBpID0gbGlzdGVuZXJzLmluZGV4T2YobCkpLmNvbmNhdChcbiAgICAgICAgICBsaXN0ZW5lcnMuc2xpY2UoaSArIDEpKTtcbiAgICAgICAgbGlzdGVuZXJCeU5hbWUucmVtb3ZlKG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGxpc3RlbmVyKSBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lckJ5TmFtZS5zZXQobmFtZSwge1xuICAgICAgICBvbjogbGlzdGVuZXJcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBkaXNwYXRjaDtcbiAgICB9O1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICBkMy5ldmVudCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpIHtcbiAgICBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZXZlbnRTb3VyY2UoKSB7XG4gICAgdmFyIGUgPSBkMy5ldmVudCxcbiAgICAgIHM7XG4gICAgd2hpbGUgKHMgPSBlLnNvdXJjZUV2ZW50KSBlID0gcztcbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2V2ZW50RGlzcGF0Y2godGFyZ2V0KSB7XG4gICAgdmFyIGRpc3BhdGNoID0gbmV3IGQzX2Rpc3BhdGNoKCksXG4gICAgICBpID0gMCxcbiAgICAgIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuICAgIGRpc3BhdGNoLm9mID0gZnVuY3Rpb24odGhpeiwgYXJndW1lbnR6KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZTEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgZTAgPSBlMS5zb3VyY2VFdmVudCA9IGQzLmV2ZW50O1xuICAgICAgICAgIGUxLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICBkMy5ldmVudCA9IGUxO1xuICAgICAgICAgIGRpc3BhdGNoW2UxLnR5cGVdLmFwcGx5KHRoaXosIGFyZ3VtZW50eik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZDMuZXZlbnQgPSBlMDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBkaXNwYXRjaDtcbiAgfVxuICBkMy5yZXF1b3RlID0gZnVuY3Rpb24ocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UoZDNfcmVxdW90ZV9yZSwgXCJcXFxcJCZcIik7XG4gIH07XG4gIHZhciBkM19yZXF1b3RlX3JlID0gL1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO1xuICB2YXIgZDNfc3ViY2xhc3MgPSB7fS5fX3Byb3RvX18gPyBmdW5jdGlvbihvYmplY3QsIHByb3RvdHlwZSkge1xuICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gIH0gOiBmdW5jdGlvbihvYmplY3QsIHByb3RvdHlwZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3RvdHlwZSkgb2JqZWN0W3Byb3BlcnR5XSA9IHByb3RvdHlwZVtwcm9wZXJ0eV07XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uKGdyb3Vwcykge1xuICAgIGQzX3N1YmNsYXNzKGdyb3VwcywgZDNfc2VsZWN0aW9uUHJvdG90eXBlKTtcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG4gIHZhciBkM19zZWxlY3QgPSBmdW5jdGlvbihzLCBuKSB7XG4gICAgICByZXR1cm4gbi5xdWVyeVNlbGVjdG9yKHMpO1xuICAgIH0sXG4gICAgZDNfc2VsZWN0QWxsID0gZnVuY3Rpb24ocywgbikge1xuICAgICAgcmV0dXJuIG4ucXVlcnlTZWxlY3RvckFsbChzKTtcbiAgICB9LFxuICAgIGQzX3NlbGVjdE1hdGNoZXIgPSBkM19kb2N1bWVudEVsZW1lbnQubWF0Y2hlcyB8fCBkM19kb2N1bWVudEVsZW1lbnRbXG4gICAgICBkM192ZW5kb3JTeW1ib2woZDNfZG9jdW1lbnRFbGVtZW50LCBcIm1hdGNoZXNTZWxlY3RvclwiKV0sXG4gICAgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVyLmNhbGwobiwgcyk7XG4gICAgfTtcbiAgaWYgKHR5cGVvZiBTaXp6bGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICAgIHJldHVybiBTaXp6bGUocywgbilbMF0gfHwgbnVsbDtcbiAgICB9O1xuICAgIGQzX3NlbGVjdEFsbCA9IFNpenpsZTtcbiAgICBkM19zZWxlY3RNYXRjaGVzID0gU2l6emxlLm1hdGNoZXNTZWxlY3RvcjtcbiAgfVxuICBkMy5zZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uUm9vdDtcbiAgfTtcbiAgdmFyIGQzX3NlbGVjdGlvblByb3RvdHlwZSA9IGQzLnNlbGVjdGlvbi5wcm90b3R5cGUgPSBbXTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLFxuICAgICAgc3ViZ3JvdXAsIHN1Ym5vZGUsIGdyb3VwLCBub2RlO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKTtcbiAgICAgICAgICBpZiAoc3Vibm9kZSAmJiBcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0b3IgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3Qoc2VsZWN0b3IsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLFxuICAgICAgc3ViZ3JvdXAsIG5vZGU7XG4gICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IGQzX2FycmF5KHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXyxcbiAgICAgICAgICAgIGksIGopKSk7XG4gICAgICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdG9yIDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2VsZWN0QWxsKHNlbGVjdG9yLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIHZhciBkM19uc1ByZWZpeCA9IHtcbiAgICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB4aHRtbDogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXG4gICAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG4gIH07XG4gIGQzLm5zID0ge1xuICAgIHByZWZpeDogZDNfbnNQcmVmaXgsXG4gICAgcXVhbGlmeTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCI6XCIpLFxuICAgICAgICBwcmVmaXggPSBuYW1lO1xuICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICBwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpO1xuICAgICAgICBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZDNfbnNQcmVmaXguaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtcbiAgICAgICAgc3BhY2U6IGQzX25zUHJlZml4W3ByZWZpeF0sXG4gICAgICAgIGxvY2FsOiBuYW1lXG4gICAgICB9IDogbmFtZTtcbiAgICB9XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hdHRyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgICAgICBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lKTtcbiAgICAgICAgcmV0dXJuIG5hbWUubG9jYWwgPyBub2RlLmdldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpIDpcbiAgICAgICAgICBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9hdHRyKHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2F0dHIobmFtZSwgdmFsdWUpKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpO1xuXG4gICAgZnVuY3Rpb24gYXR0ck51bGwoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRyTnVsbE5TKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRyRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoKSB7XG4gICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIHgpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IG5hbWUubG9jYWwgPyBhdHRyTnVsbE5TIDogYXR0ck51bGwgOiB0eXBlb2YgdmFsdWUgPT09XG4gICAgICBcImZ1bmN0aW9uXCIgPyBuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24gOiBuYW1lLmxvY2FsID9cbiAgICAgIGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfY29sbGFwc2Uocykge1xuICAgIHJldHVybiBzLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2xhc3NlZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKSxcbiAgICAgICAgICBuID0gKG5hbWUgPSBkM19zZWxlY3Rpb25fY2xhc3NlcyhuYW1lKSkubGVuZ3RoLFxuICAgICAgICAgIGkgPSAtMTtcbiAgICAgICAgaWYgKHZhbHVlID0gbm9kZS5jbGFzc0xpc3QpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgICAgIGlmICghdmFsdWUuY29udGFpbnMobmFtZVtpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pXG4gICAgICAgICAgICBpZiAoIWQzX3NlbGVjdGlvbl9jbGFzc2VkUmUobmFtZVtpXSkudGVzdCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKHZhbHVlLCBuYW1lW1xuICAgICAgICB2YWx1ZV0pKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKG5hbWUsIHZhbHVlKSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoPzpefFxcXFxzKylcIiArIGQzLnJlcXVvdGUobmFtZSkgKyBcIig/OlxcXFxzK3wkKVwiLCBcImdcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fY2xhc3NlcyhuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jbGFzc2VkKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IGQzX3NlbGVjdGlvbl9jbGFzc2VzKG5hbWUpLm1hcChkM19zZWxlY3Rpb25fY2xhc3NlZE5hbWUpO1xuICAgIHZhciBuID0gbmFtZS5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiBjbGFzc2VkQ29uc3RhbnQoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgdmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbigpIHtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgeCk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGNsYXNzZWRGdW5jdGlvbiA6IGNsYXNzZWRDb25zdGFudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZShuYW1lKSB7XG4gICAgdmFyIHJlID0gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKTtcbiAgICByZXR1cm4gZnVuY3Rpb24obm9kZSwgdmFsdWUpIHtcbiAgICAgIGlmIChjID0gbm9kZS5jbGFzc0xpc3QpIHJldHVybiB2YWx1ZSA/IGMuYWRkKG5hbWUpIDogYy5yZW1vdmUobmFtZSk7XG4gICAgICB2YXIgYyA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIjtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByZS5sYXN0SW5kZXggPSAwO1xuICAgICAgICBpZiAoIXJlLnRlc3QoYykpIG5vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZDNfY29sbGFwc2UoYyArIFwiIFwiICtcbiAgICAgICAgICBuYW1lKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGQzX2NvbGxhcHNlKGMucmVwbGFjZShyZSwgXCIgXCIpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIGZvciAocHJpb3JpdHkgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShwcmlvcml0eSxcbiAgICAgICAgICBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAobiA8IDIpIHJldHVybiBkM193aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5vZGUoKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcbiAgICAgICAgbmFtZSk7XG4gICAgICBwcmlvcml0eSA9IFwiXCI7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICBmdW5jdGlvbiBzdHlsZU51bGwoKSB7XG4gICAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvbigpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgeCwgcHJpb3JpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID9cbiAgICAgIHN0eWxlRnVuY3Rpb24gOiBzdHlsZUNvbnN0YW50O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5wcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHJldHVybiB0aGlzLm5vZGUoKVtuYW1lXTtcbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9wcm9wZXJ0eSh2YWx1ZSwgbmFtZVtcbiAgICAgICAgdmFsdWVdKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fcHJvcGVydHkobmFtZSwgdmFsdWUpKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fcHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU51bGwoKSB7XG4gICAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KCkge1xuICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoeCA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICAgIGVsc2UgdGhpc1tuYW1lXSA9IHg7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gcHJvcGVydHlOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgcHJvcGVydHlGdW5jdGlvbiA6IHByb3BlcnR5Q29uc3RhbnQ7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5lYWNoKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID9cbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICAgIH0gOiB2YWx1ZSA9PSBudWxsID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICB9KSA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICAgIH0gOiB2YWx1ZSA9PSBudWxsID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgIH0pIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY3JlYXRvcihuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChuYW1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiAobmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSkpXG4gICAgICAubG9jYWwgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7XG4gICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHRoaXMubmFtZXNwYWNlVVJJLCBuYW1lKTtcbiAgICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY3JlYXRvcihuYW1lKTtcbiAgICBiZWZvcmUgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3IoYmVmb3JlKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobmFtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBiZWZvcmUuYXBwbHkoXG4gICAgICAgIHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gICAgfSk7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvblJlbW92ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uUmVtb3ZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICBuID0gdGhpcy5sZW5ndGgsXG4gICAgICBncm91cCwgbm9kZTtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhbHVlID0gbmV3IEFycmF5KG4gPSAoZ3JvdXAgPSB0aGlzWzBdKS5sZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHZhbHVlW2ldID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJpbmQoZ3JvdXAsIGdyb3VwRGF0YSkge1xuICAgICAgdmFyIGksIG4gPSBncm91cC5sZW5ndGgsXG4gICAgICAgIG0gPSBncm91cERhdGEubGVuZ3RoLFxuICAgICAgICBuMCA9IE1hdGgubWluKG4sIG0pLFxuICAgICAgICB1cGRhdGVOb2RlcyA9IG5ldyBBcnJheShtKSxcbiAgICAgICAgZW50ZXJOb2RlcyA9IG5ldyBBcnJheShtKSxcbiAgICAgICAgZXhpdE5vZGVzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBub2RlLCBub2RlRGF0YTtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIG5vZGVCeUtleVZhbHVlID0gbmV3IGQzX01hcCgpLFxuICAgICAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBrZXlWYWx1ZTtcbiAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgaWYgKG5vZGVCeUtleVZhbHVlLmhhcyhrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUgPSBncm91cFtpXSxcbiAgICAgICAgICAgICAgbm9kZS5fX2RhdGFfXywgaSkpKSB7XG4gICAgICAgICAgICBleGl0Tm9kZXNbaV0gPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbTspIHtcbiAgICAgICAgICBpZiAoIShub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlID0ga2V5LmNhbGwoZ3JvdXBEYXRhLFxuICAgICAgICAgICAgICBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXSwgaSkpKSkge1xuICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB1cGRhdGVOb2Rlc1tpXSA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLl9fZGF0YV9fID0gbm9kZURhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgaWYgKG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZXNbaV0pICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBleGl0Tm9kZXNbaV0gPSBncm91cFtpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuMDspIHtcbiAgICAgICAgICBub2RlID0gZ3JvdXBbaV07XG4gICAgICAgICAgbm9kZURhdGEgPSBncm91cERhdGFbaV07XG4gICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUuX19kYXRhX18gPSBub2RlRGF0YTtcbiAgICAgICAgICAgIHVwZGF0ZU5vZGVzW2ldID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgbTsgKytpKSB7XG4gICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShncm91cERhdGFbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVudGVyTm9kZXMudXBkYXRlID0gdXBkYXRlTm9kZXM7XG4gICAgICBlbnRlck5vZGVzLnBhcmVudE5vZGUgPSB1cGRhdGVOb2Rlcy5wYXJlbnROb2RlID0gZXhpdE5vZGVzLnBhcmVudE5vZGUgPVxuICAgICAgICBncm91cC5wYXJlbnROb2RlO1xuICAgICAgZW50ZXIucHVzaChlbnRlck5vZGVzKTtcbiAgICAgIHVwZGF0ZS5wdXNoKHVwZGF0ZU5vZGVzKTtcbiAgICAgIGV4aXQucHVzaChleGl0Tm9kZXMpO1xuICAgIH1cbiAgICB2YXIgZW50ZXIgPSBkM19zZWxlY3Rpb25fZW50ZXIoW10pLFxuICAgICAgdXBkYXRlID0gZDNfc2VsZWN0aW9uKFtdKSxcbiAgICAgIGV4aXQgPSBkM19zZWxlY3Rpb24oW10pO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgYmluZChncm91cCA9IHRoaXNbaV0sIHZhbHVlLmNhbGwoZ3JvdXAsIGdyb3VwLnBhcmVudE5vZGUuX19kYXRhX18sXG4gICAgICAgICAgaSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBiaW5kKGdyb3VwID0gdGhpc1tpXSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUuZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbnRlcjtcbiAgICB9O1xuICAgIHVwZGF0ZS5leGl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhpdDtcbiAgICB9O1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19kYXRhX186IGRhdGFcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXR1bSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpIDogdGhpcy5wcm9wZXJ0eShcbiAgICAgIFwiX19kYXRhX19cIik7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sXG4gICAgICBzdWJncm91cCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZDNfc2VsZWN0aW9uX2ZpbHRlcihmaWx0ZXIpO1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZmlsdGVyKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NlbGVjdE1hdGNoZXModGhpcywgc2VsZWN0b3IpO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLm9yZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sXG4gICAgICAgICAgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBub2RlLm5leHRTaWJsaW5nKSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgbm9kZSwgbmV4dCk7XG4gICAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgIGNvbXBhcmF0b3IgPSBkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTspIHRoaXNbal0uc29ydChjb21wYXJhdG9yKTtcbiAgICByZXR1cm4gdGhpcy5vcmRlcigpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9zb3J0Q29tcGFyYXRvcihjb21wYXJhdG9yKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSBjb21wYXJhdG9yID0gZDNfYXNjZW5kaW5nO1xuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyYXRvcihhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VhY2goZ3JvdXBzLCBjYWxsYmFjaykge1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrKG5vZGUsIGksIGopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgYXJncyA9IGQzX2FycmF5KGFyZ3VtZW50cyk7XG4gICAgY2FsbGJhY2suYXBwbHkoYXJnc1swXSA9IHRoaXMsIGFyZ3MpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXRoaXMubm9kZSgpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA9IDA7XG4gICAgZDNfc2VsZWN0aW9uX2VhY2godGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICArK247XG4gICAgfSk7XG4gICAgcmV0dXJuIG47XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VudGVyKHNlbGVjdGlvbikge1xuICAgIGQzX3N1YmNsYXNzKHNlbGVjdGlvbiwgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlKTtcbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9XG4gIHZhciBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUgPSBbXTtcbiAgZDMuc2VsZWN0aW9uLmVudGVyID0gZDNfc2VsZWN0aW9uX2VudGVyO1xuICBkMy5zZWxlY3Rpb24uZW50ZXIucHJvdG90eXBlID0gZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuYXBwZW5kID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmFwcGVuZDtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUubm9kZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2l6ZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5zaXplO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sXG4gICAgICBzdWJncm91cCwgc3Vibm9kZSwgdXBncm91cCwgZ3JvdXAsIG5vZGU7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgICB1cGdyb3VwID0gKGdyb3VwID0gdGhpc1tqXSkudXBkYXRlO1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gZ3JvdXAucGFyZW50Tm9kZTtcbiAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2godXBncm91cFtpXSA9IHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKGdyb3VwLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG4gICAgICAgICAgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG4gIH07XG4gIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGJlZm9yZSA9IGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZShcbiAgICAgIHRoaXMpO1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW5zZXJ0LmNhbGwodGhpcywgbmFtZSwgYmVmb3JlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZW50ZXJJbnNlcnRCZWZvcmUoZW50ZXIpIHtcbiAgICB2YXIgaTAsIGowO1xuICAgIHJldHVybiBmdW5jdGlvbihkLCBpLCBqKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBlbnRlcltqXS51cGRhdGUsXG4gICAgICAgIG4gPSBncm91cC5sZW5ndGgsXG4gICAgICAgIG5vZGU7XG4gICAgICBpZiAoaiAhPSBqMCkgajAgPSBqLCBpMCA9IDA7XG4gICAgICBpZiAoaSA+PSBpMCkgaTAgPSBpICsgMTtcbiAgICAgIHdoaWxlICghKG5vZGUgPSBncm91cFtpMF0pICYmICsraTAgPCBuKTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gIH1cbiAgZDMuc2VsZWN0ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBncm91cCA9IFt0eXBlb2Ygbm9kZSA9PT0gXCJzdHJpbmdcIiA/IGQzX3NlbGVjdChub2RlLCBkM19kb2N1bWVudCkgOlxuICAgICAgbm9kZVxuICAgIF07XG4gICAgZ3JvdXAucGFyZW50Tm9kZSA9IGQzX2RvY3VtZW50RWxlbWVudDtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKFtncm91cF0pO1xuICB9O1xuICBkMy5zZWxlY3RBbGwgPSBmdW5jdGlvbihub2Rlcykge1xuICAgIHZhciBncm91cCA9IGQzX2FycmF5KHR5cGVvZiBub2RlcyA9PT0gXCJzdHJpbmdcIiA/IGQzX3NlbGVjdEFsbChub2RlcyxcbiAgICAgIGQzX2RvY3VtZW50KSA6IG5vZGVzKTtcbiAgICBncm91cC5wYXJlbnROb2RlID0gZDNfZG9jdW1lbnRFbGVtZW50O1xuICAgIHJldHVybiBkM19zZWxlY3Rpb24oW2dyb3VwXSk7XG4gIH07XG4gIHZhciBkM19zZWxlY3Rpb25Sb290ID0gZDMuc2VsZWN0KGQzX2RvY3VtZW50RWxlbWVudCk7XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChuIDwgMykge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChuIDwgMikgbGlzdGVuZXIgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjYXB0dXJlIGluIHR5cGUpIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fb24oY2FwdHVyZSwgdHlwZVtcbiAgICAgICAgICBjYXB0dXJlXSwgbGlzdGVuZXIpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAobiA8IDIpIHJldHVybiAobiA9IHRoaXMubm9kZSgpW1wiX19vblwiICsgdHlwZV0pICYmIG4uXztcbiAgICAgIGNhcHR1cmUgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICB2YXIgbmFtZSA9IFwiX19vblwiICsgdHlwZSxcbiAgICAgIGkgPSB0eXBlLmluZGV4T2YoXCIuXCIpLFxuICAgICAgd3JhcCA9IGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyO1xuICAgIGlmIChpID4gMCkgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSk7XG4gICAgdmFyIGZpbHRlciA9IGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMuZ2V0KHR5cGUpO1xuICAgIGlmIChmaWx0ZXIpIHR5cGUgPSBmaWx0ZXIsIHdyYXAgPSBkM19zZWxlY3Rpb25fb25GaWx0ZXI7XG5cbiAgICBmdW5jdGlvbiBvblJlbW92ZSgpIHtcbiAgICAgIHZhciBsID0gdGhpc1tuYW1lXTtcbiAgICAgIGlmIChsKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsLCBsLiQpO1xuICAgICAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkFkZCgpIHtcbiAgICAgIHZhciBsID0gd3JhcChsaXN0ZW5lciwgZDNfYXJyYXkoYXJndW1lbnRzKSk7XG4gICAgICBvblJlbW92ZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXNbbmFtZV0gPSBsLCBsLiQgPSBjYXB0dXJlKTtcbiAgICAgIGwuXyA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbCgpIHtcbiAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCJeX19vbihbXi5dKylcIiArIGQzLnJlcXVvdGUodHlwZSkgKyBcIiRcIiksXG4gICAgICAgIG1hdGNoO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgIGlmIChtYXRjaCA9IG5hbWUubWF0Y2gocmUpKSB7XG4gICAgICAgICAgdmFyIGwgPSB0aGlzW25hbWVdO1xuICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihtYXRjaFsxXSwgbCwgbC4kKTtcbiAgICAgICAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaSA/IGxpc3RlbmVyID8gb25BZGQgOiBvblJlbW92ZSA6IGxpc3RlbmVyID8gZDNfbm9vcCA6IHJlbW92ZUFsbDtcbiAgfVxuICB2YXIgZDNfc2VsZWN0aW9uX29uRmlsdGVycyA9IGQzLm1hcCh7XG4gICAgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcbiAgICBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJcbiAgfSk7XG4gIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgaWYgKFwib25cIiArIGsgaW4gZDNfZG9jdW1lbnQpIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMucmVtb3ZlKGspO1xuICB9KTtcblxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcihsaXN0ZW5lciwgYXJndW1lbnR6KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBvID0gZDMuZXZlbnQ7XG4gICAgICBkMy5ldmVudCA9IGU7XG4gICAgICBhcmd1bWVudHpbMF0gPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnR6KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzLmV2ZW50ID0gbztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uRmlsdGVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcbiAgICB2YXIgbCA9IGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopO1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgcmVsYXRlZCA9IGUucmVsYXRlZFRhcmdldDtcbiAgICAgIGlmICghcmVsYXRlZCB8fCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKFxuICAgICAgICAgIHRhcmdldCkgJiA4KSkge1xuICAgICAgICBsLmNhbGwodGFyZ2V0LCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBkM19ldmVudF9kcmFnU2VsZWN0ID0gXCJvbnNlbGVjdHN0YXJ0XCIgaW4gZDNfZG9jdW1lbnQgPyBudWxsIDpcbiAgICBkM192ZW5kb3JTeW1ib2woZDNfZG9jdW1lbnRFbGVtZW50LnN0eWxlLCBcInVzZXJTZWxlY3RcIiksXG4gICAgZDNfZXZlbnRfZHJhZ0lkID0gMDtcblxuICBmdW5jdGlvbiBkM19ldmVudF9kcmFnU3VwcHJlc3MoKSB7XG4gICAgdmFyIG5hbWUgPSBcIi5kcmFnc3VwcHJlc3MtXCIgKyArK2QzX2V2ZW50X2RyYWdJZCxcbiAgICAgIGNsaWNrID0gXCJjbGlja1wiICsgbmFtZSxcbiAgICAgIHcgPSBkMy5zZWxlY3QoZDNfd2luZG93KS5vbihcInRvdWNobW92ZVwiICsgbmFtZSxcbiAgICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCkub24oXCJkcmFnc3RhcnRcIiArIG5hbWUsXG4gICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQpLm9uKFwic2VsZWN0c3RhcnRcIiArIG5hbWUsXG4gICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQpO1xuICAgIGlmIChkM19ldmVudF9kcmFnU2VsZWN0KSB7XG4gICAgICB2YXIgc3R5bGUgPSBkM19kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHNlbGVjdCA9IHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdO1xuICAgICAgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN1cHByZXNzQ2xpY2spIHtcbiAgICAgIHcub24obmFtZSwgbnVsbCk7XG4gICAgICBpZiAoZDNfZXZlbnRfZHJhZ1NlbGVjdCkgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBzZWxlY3Q7XG4gICAgICBpZiAoc3VwcHJlc3NDbGljaykge1xuICAgICAgICB2YXIgb2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdy5vbihjbGljaywgbnVsbCk7XG4gICAgICAgIH07XG4gICAgICAgIHcub24oY2xpY2ssIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBvZmYoKTtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQob2ZmLCAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzLm1vdXNlID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCBkM19ldmVudFNvdXJjZSgpKTtcbiAgfTtcbiAgdmFyIGQzX21vdXNlX2J1ZzQ0MDgzID0gL1dlYktpdC8udGVzdChkM193aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAtMSA6XG4gICAgMDtcblxuICBmdW5jdGlvbiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgZSkge1xuICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzKSBlID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICB2YXIgc3ZnID0gY29udGFpbmVyLm93bmVyU1ZHRWxlbWVudCB8fCBjb250YWluZXI7XG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMgPCAwICYmIChkM193aW5kb3cuc2Nyb2xsWCB8fCBkM193aW5kb3cuc2Nyb2xsWSkpIHtcbiAgICAgICAgc3ZnID0gZDMuc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJzdmdcIikuc3R5bGUoe1xuICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgYm9yZGVyOiBcIm5vbmVcIlxuICAgICAgICB9LCBcImltcG9ydGFudFwiKTtcbiAgICAgICAgdmFyIGN0bSA9IHN2Z1swXVswXS5nZXRTY3JlZW5DVE0oKTtcbiAgICAgICAgZDNfbW91c2VfYnVnNDQwODMgPSAhKGN0bS5mIHx8IGN0bS5lKTtcbiAgICAgICAgc3ZnLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGQzX21vdXNlX2J1ZzQ0MDgzKSBwb2ludC54ID0gZS5wYWdlWCwgcG9pbnQueSA9IGUucGFnZVk7XG4gICAgICBlbHNlIHBvaW50LnggPSBlLmNsaWVudFgsXG4gICAgICAgIHBvaW50LnkgPSBlLmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShjb250YWluZXIuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gICAgfVxuICAgIHZhciByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBbZS5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gY29udGFpbmVyLmNsaWVudExlZnQsIGUuY2xpZW50WSAtIHJlY3QudG9wIC1cbiAgICAgIGNvbnRhaW5lci5jbGllbnRUb3BcbiAgICBdO1xuICB9XG4gIGQzLnRvdWNoID0gZnVuY3Rpb24oY29udGFpbmVyLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBpZGVudGlmaWVyID0gdG91Y2hlcywgdG91Y2hlcyA9XG4gICAgICBkM19ldmVudFNvdXJjZSgpLmNoYW5nZWRUb3VjaGVzO1xuICAgIGlmICh0b3VjaGVzKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzLmxlbmd0aCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0b3VjaCA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9O1xuICBkMy5iZWhhdmlvci5kcmFnID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV2ZW50ID0gZDNfZXZlbnREaXNwYXRjaChkcmFnLCBcImRyYWdcIiwgXCJkcmFnc3RhcnRcIiwgXCJkcmFnZW5kXCIpLFxuICAgICAgb3JpZ2luID0gbnVsbCxcbiAgICAgIG1vdXNlZG93biA9IGRyYWdzdGFydChkM19ub29wLCBkMy5tb3VzZSxcbiAgICAgICAgZDNfYmVoYXZpb3JfZHJhZ01vdXNlU3ViamVjdCwgXCJtb3VzZW1vdmVcIiwgXCJtb3VzZXVwXCIpLFxuICAgICAgdG91Y2hzdGFydCA9IGRyYWdzdGFydChkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCwgZDMudG91Y2gsXG4gICAgICAgIGQzX2JlaGF2aW9yX2RyYWdUb3VjaFN1YmplY3QsIFwidG91Y2htb3ZlXCIsIFwidG91Y2hlbmRcIik7XG5cbiAgICBmdW5jdGlvbiBkcmFnKCkge1xuICAgICAgdGhpcy5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bikub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIixcbiAgICAgICAgdG91Y2hzdGFydCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhZ3N0YXJ0KGlkLCBwb3NpdGlvbiwgc3ViamVjdCwgbW92ZSwgZW5kKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICB0YXJnZXQgPSBkMy5ldmVudC50YXJnZXQsXG4gICAgICAgICAgcGFyZW50ID0gdGhhdC5wYXJlbnROb2RlLFxuICAgICAgICAgIGRpc3BhdGNoID0gZXZlbnQub2YodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICBkcmFnZ2VkID0gMCxcbiAgICAgICAgICBkcmFnSWQgPSBpZCgpLFxuICAgICAgICAgIGRyYWdOYW1lID0gXCIuZHJhZ1wiICsgKGRyYWdJZCA9PSBudWxsID8gXCJcIiA6IFwiLVwiICsgZHJhZ0lkKSxcbiAgICAgICAgICBkcmFnT2Zmc2V0LCBkcmFnU3ViamVjdCA9IGQzLnNlbGVjdChzdWJqZWN0KCkpLm9uKG1vdmUgK1xuICAgICAgICAgICAgZHJhZ05hbWUsIG1vdmVkKS5vbihlbmQgKyBkcmFnTmFtZSwgZW5kZWQpLFxuICAgICAgICAgIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKCksXG4gICAgICAgICAgcG9zaXRpb24wID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpO1xuICAgICAgICBpZiAob3JpZ2luKSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IG9yaWdpbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgIGRyYWdPZmZzZXQgPSBbZHJhZ09mZnNldC54IC0gcG9zaXRpb24wWzBdLCBkcmFnT2Zmc2V0LnkgLVxuICAgICAgICAgICAgcG9zaXRpb24wWzFdXG4gICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkcmFnT2Zmc2V0ID0gWzAsIDBdO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBcImRyYWdzdGFydFwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgICAgIHZhciBwb3NpdGlvbjEgPSBwb3NpdGlvbihwYXJlbnQsIGRyYWdJZCksXG4gICAgICAgICAgICBkeCwgZHk7XG4gICAgICAgICAgaWYgKCFwb3NpdGlvbjEpIHJldHVybjtcbiAgICAgICAgICBkeCA9IHBvc2l0aW9uMVswXSAtIHBvc2l0aW9uMFswXTtcbiAgICAgICAgICBkeSA9IHBvc2l0aW9uMVsxXSAtIHBvc2l0aW9uMFsxXTtcbiAgICAgICAgICBkcmFnZ2VkIHw9IGR4IHwgZHk7XG4gICAgICAgICAgcG9zaXRpb24wID0gcG9zaXRpb24xO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ1wiLFxuICAgICAgICAgICAgeDogcG9zaXRpb24xWzBdICsgZHJhZ09mZnNldFswXSxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uMVsxXSArIGRyYWdPZmZzZXRbMV0sXG4gICAgICAgICAgICBkeDogZHgsXG4gICAgICAgICAgICBkeTogZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICAgIGlmICghcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpKSByZXR1cm47XG4gICAgICAgICAgZHJhZ1N1YmplY3Qub24obW92ZSArIGRyYWdOYW1lLCBudWxsKS5vbihlbmQgKyBkcmFnTmFtZSwgbnVsbCk7XG4gICAgICAgICAgZHJhZ1Jlc3RvcmUoZHJhZ2dlZCAmJiBkMy5ldmVudC50YXJnZXQgPT09IHRhcmdldCk7XG4gICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogXCJkcmFnZW5kXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgZHJhZy5vcmlnaW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmlnaW47XG4gICAgICBvcmlnaW4gPSB4O1xuICAgICAgcmV0dXJuIGRyYWc7XG4gICAgfTtcbiAgICByZXR1cm4gZDMucmViaW5kKGRyYWcsIGV2ZW50LCBcIm9uXCIpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2JlaGF2aW9yX2RyYWdUb3VjaElkKCkge1xuICAgIHJldHVybiBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfYmVoYXZpb3JfZHJhZ1RvdWNoU3ViamVjdCgpIHtcbiAgICByZXR1cm4gZDMuZXZlbnQudGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfYmVoYXZpb3JfZHJhZ01vdXNlU3ViamVjdCgpIHtcbiAgICByZXR1cm4gZDNfd2luZG93O1xuICB9XG4gIGQzLnRvdWNoZXMgPSBmdW5jdGlvbihjb250YWluZXIsIHRvdWNoZXMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHRvdWNoZXMgPSBkM19ldmVudFNvdXJjZSgpLnRvdWNoZXM7XG4gICAgcmV0dXJuIHRvdWNoZXMgPyBkM19hcnJheSh0b3VjaGVzKS5tYXAoZnVuY3Rpb24odG91Y2gpIHtcbiAgICAgIHZhciBwb2ludCA9IGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCB0b3VjaCk7XG4gICAgICBwb2ludC5pZGVudGlmaWVyID0gdG91Y2guaWRlbnRpZmllcjtcbiAgICAgIHJldHVybiBwb2ludDtcbiAgICB9KSA6IFtdO1xuICB9O1xuICB2YXIgzrUgPSAxZS02LFxuICAgIM61MiA9IM61ICogzrUsXG4gICAgz4AgPSBNYXRoLlBJLFxuICAgIM+EID0gMiAqIM+ALFxuICAgIM+EzrUgPSDPhCAtIM61LFxuICAgIGhhbGbPgCA9IM+AIC8gMixcbiAgICBkM19yYWRpYW5zID0gz4AgLyAxODAsXG4gICAgZDNfZGVncmVlcyA9IDE4MCAvIM+AO1xuXG4gIGZ1bmN0aW9uIGQzX3Nnbih4KSB7XG4gICAgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfY3Jvc3MyZChhLCBiLCBjKSB7XG4gICAgcmV0dXJuIChiWzBdIC0gYVswXSkgKiAoY1sxXSAtIGFbMV0pIC0gKGJbMV0gLSBhWzFdKSAqIChjWzBdIC0gYVswXSk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19hY29zKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gz4AgOiBNYXRoLmFjb3MoeCk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19hc2luKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyBoYWxmz4AgOiB4IDwgLTEgPyAtaGFsZs+AIDogTWF0aC5hc2luKHgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc2luaCh4KSB7XG4gICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBkM19jb3NoKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RhbmgoeCkge1xuICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfaGF2ZXJzaW4oeCkge1xuICAgIHJldHVybiAoeCA9IE1hdGguc2luKHggLyAyKSkgKiB4O1xuICB9XG4gIHZhciDPgSA9IE1hdGguU1FSVDIsXG4gICAgz4EyID0gMixcbiAgICDPgTQgPSA0O1xuICBkMy5pbnRlcnBvbGF0ZVpvb20gPSBmdW5jdGlvbihwMCwgcDEpIHtcbiAgICB2YXIgdXgwID0gcDBbMF0sXG4gICAgICB1eTAgPSBwMFsxXSxcbiAgICAgIHcwID0gcDBbMl0sXG4gICAgICB1eDEgPSBwMVswXSxcbiAgICAgIHV5MSA9IHAxWzFdLFxuICAgICAgdzEgPSBwMVsyXTtcbiAgICB2YXIgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIM+BNCAqIGQyKSAvICgyICogdzAgKiDPgTIgKiBkMSksXG4gICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIM+BNCAqIGQyKSAvICgyICogdzEgKiDPgTIgKiBkMSksXG4gICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSksXG4gICAgICBkciA9IHIxIC0gcjAsXG4gICAgICBTID0gKGRyIHx8IE1hdGgubG9nKHcxIC8gdzApKSAvIM+BO1xuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUodCkge1xuICAgICAgdmFyIHMgPSB0ICogUztcbiAgICAgIGlmIChkcikge1xuICAgICAgICB2YXIgY29zaHIwID0gZDNfY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKM+BMiAqIGQxKSAqIChjb3NocjAgKiBkM190YW5oKM+BICogcyArIHIwKSAtIGQzX3NpbmgocjApKTtcbiAgICAgICAgcmV0dXJuIFt1eDAgKyB1ICogZHgsIHV5MCArIHUgKiBkeSwgdzAgKiBjb3NocjAgLyBkM19jb3NoKM+BICogcyArXG4gICAgICAgICAgcjApXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbdXgwICsgdCAqIGR4LCB1eTAgKyB0ICogZHksIHcwICogTWF0aC5leHAoz4EgKiBzKV07XG4gICAgfVxuICAgIGludGVycG9sYXRlLmR1cmF0aW9uID0gUyAqIDFlMztcbiAgICByZXR1cm4gaW50ZXJwb2xhdGU7XG4gIH07XG4gIGQzLmJlaGF2aW9yLnpvb20gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlldyA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgazogMVxuICAgICAgfSxcbiAgICAgIHRyYW5zbGF0ZTAsIGNlbnRlcjAsIGNlbnRlciwgc2l6ZSA9IFs5NjAsIDUwMF0sXG4gICAgICBzY2FsZUV4dGVudCA9IGQzX2JlaGF2aW9yX3pvb21JbmZpbml0eSxcbiAgICAgIGR1cmF0aW9uID0gMjUwLFxuICAgICAgem9vbWluZyA9IDAsXG4gICAgICBtb3VzZWRvd24gPSBcIm1vdXNlZG93bi56b29tXCIsXG4gICAgICBtb3VzZW1vdmUgPSBcIm1vdXNlbW92ZS56b29tXCIsXG4gICAgICBtb3VzZXVwID0gXCJtb3VzZXVwLnpvb21cIixcbiAgICAgIG1vdXNld2hlZWxUaW1lciwgdG91Y2hzdGFydCA9IFwidG91Y2hzdGFydC56b29tXCIsXG4gICAgICB0b3VjaHRpbWUsIGV2ZW50ID0gZDNfZXZlbnREaXNwYXRjaCh6b29tLCBcInpvb21zdGFydFwiLCBcInpvb21cIixcbiAgICAgICAgXCJ6b29tZW5kXCIpLFxuICAgICAgeDAsIHgxLCB5MCwgeTE7XG5cbiAgICBmdW5jdGlvbiB6b29tKGcpIHtcbiAgICAgIGcub24obW91c2Vkb3duLCBtb3VzZWRvd25lZCkub24oZDNfYmVoYXZpb3Jfem9vbVdoZWVsICsgXCIuem9vbVwiLFxuICAgICAgICBtb3VzZXdoZWVsZWQpLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKS5vbih0b3VjaHN0YXJ0LFxuICAgICAgICB0b3VjaHN0YXJ0ZWQpO1xuICAgIH1cbiAgICB6b29tLmV2ZW50ID0gZnVuY3Rpb24oZykge1xuICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGlzcGF0Y2ggPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHZpZXcxID0gdmlldztcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmlldyA9IHRoaXMuX19jaGFydF9fIHx8IHtcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgazogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KS50d2VlbihcInpvb206em9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHNpemVbMF0sXG4gICAgICAgICAgICAgIGR5ID0gc2l6ZVsxXSxcbiAgICAgICAgICAgICAgY3ggPSBjZW50ZXIwID8gY2VudGVyMFswXSA6IGR4IC8gMixcbiAgICAgICAgICAgICAgY3kgPSBjZW50ZXIwID8gY2VudGVyMFsxXSA6IGR5IC8gMixcbiAgICAgICAgICAgICAgaSA9IGQzLmludGVycG9sYXRlWm9vbShbKGN4IC0gdmlldy54KSAvIHZpZXcuaywgKFxuICAgICAgICAgICAgICAgIGN5IC0gdmlldy55KSAvIHZpZXcuaywgZHggLyB2aWV3LmtdLCBbKGN4IC1cbiAgICAgICAgICAgICAgICAgIHZpZXcxLngpIC8gdmlldzEuaywgKGN5IC0gdmlldzEueSkgLyB2aWV3MS5rLFxuICAgICAgICAgICAgICAgIGR4IC8gdmlldzEua1xuICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHZhciBsID0gaSh0KSxcbiAgICAgICAgICAgICAgICBrID0gZHggLyBsWzJdO1xuICAgICAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHZpZXcgPSB7XG4gICAgICAgICAgICAgICAgeDogY3ggLSBsWzBdICogayxcbiAgICAgICAgICAgICAgICB5OiBjeSAtIGxbMV0gKiBrLFxuICAgICAgICAgICAgICAgIGs6IGtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkuZWFjaChcImludGVycnVwdC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KS5lYWNoKFwiZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19jaGFydF9fID0gdmlldztcbiAgICAgICAgICB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG4gICAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHpvb20udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW3ZpZXcueCwgdmlldy55XTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6ICtfWzBdLFxuICAgICAgICB5OiArX1sxXSxcbiAgICAgICAgazogdmlldy5rXG4gICAgICB9O1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmlldy5rO1xuICAgICAgdmlldyA9IHtcbiAgICAgICAgeDogdmlldy54LFxuICAgICAgICB5OiB2aWV3LnksXG4gICAgICAgIGs6ICtfXG4gICAgICB9O1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLnNjYWxlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2NhbGVFeHRlbnQ7XG4gICAgICBzY2FsZUV4dGVudCA9IF8gPT0gbnVsbCA/IGQzX2JlaGF2aW9yX3pvb21JbmZpbml0eSA6IFsrX1swXSwgK19bMV1dO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNlbnRlcjtcbiAgICAgIGNlbnRlciA9IF8gJiYgWytfWzBdLCArX1sxXV07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20uc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0gXyAmJiBbK19bMF0sICtfWzFdXTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5kdXJhdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGR1cmF0aW9uO1xuICAgICAgZHVyYXRpb24gPSArXztcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS54ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG4gICAgICB4MSA9IHo7XG4gICAgICB4MCA9IHouY29weSgpO1xuICAgICAgdmlldyA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgazogMVxuICAgICAgfTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS55ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG4gICAgICB5MSA9IHo7XG4gICAgICB5MCA9IHouY29weSgpO1xuICAgICAgdmlldyA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgazogMVxuICAgICAgfTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhdGlvbihwKSB7XG4gICAgICByZXR1cm4gWyhwWzBdIC0gdmlldy54KSAvIHZpZXcuaywgKHBbMV0gLSB2aWV3LnkpIC8gdmlldy5rXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludChsKSB7XG4gICAgICByZXR1cm4gW2xbMF0gKiB2aWV3LmsgKyB2aWV3LngsIGxbMV0gKiB2aWV3LmsgKyB2aWV3LnldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlVG8ocykge1xuICAgICAgdmlldy5rID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCBzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8ocCwgbCkge1xuICAgICAgbCA9IHBvaW50KGwpO1xuICAgICAgdmlldy54ICs9IHBbMF0gLSBsWzBdO1xuICAgICAgdmlldy55ICs9IHBbMV0gLSBsWzFdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHpvb21Ubyh0aGF0LCBwLCBsLCBrKSB7XG4gICAgICB0aGF0Ll9fY2hhcnRfXyA9IHtcbiAgICAgICAgeDogdmlldy54LFxuICAgICAgICB5OiB2aWV3LnksXG4gICAgICAgIGs6IHZpZXcua1xuICAgICAgfTtcbiAgICAgIHNjYWxlVG8oTWF0aC5wb3coMiwgaykpO1xuICAgICAgdHJhbnNsYXRlVG8oY2VudGVyMCA9IHAsIGwpO1xuICAgICAgdGhhdCA9IGQzLnNlbGVjdCh0aGF0KTtcbiAgICAgIGlmIChkdXJhdGlvbiA+IDApIHRoYXQgPSB0aGF0LnRyYW5zaXRpb24oKS5kdXJhdGlvbihkdXJhdGlvbik7XG4gICAgICB0aGF0LmNhbGwoem9vbS5ldmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIGlmICh4MSkgeDEuZG9tYWluKHgwLnJhbmdlKCkubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuICh4IC0gdmlldy54KSAvIHZpZXcuaztcbiAgICAgIH0pLm1hcCh4MC5pbnZlcnQpKTtcbiAgICAgIGlmICh5MSkgeTEuZG9tYWluKHkwLnJhbmdlKCkubWFwKGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgcmV0dXJuICh5IC0gdmlldy55KSAvIHZpZXcuaztcbiAgICAgIH0pLm1hcCh5MC5pbnZlcnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6b29tc3RhcnRlZChkaXNwYXRjaCkge1xuICAgICAgaWYgKCF6b29taW5nKyspIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJ6b29tc3RhcnRcIlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gem9vbWVkKGRpc3BhdGNoKSB7XG4gICAgICByZXNjYWxlKCk7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwiem9vbVwiLFxuICAgICAgICBzY2FsZTogdmlldy5rLFxuICAgICAgICB0cmFuc2xhdGU6IFt2aWV3LngsIHZpZXcueV1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHpvb21lbmRlZChkaXNwYXRjaCkge1xuICAgICAgaWYgKCEtLXpvb21pbmcpIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJ6b29tZW5kXCJcbiAgICAgIH0pO1xuICAgICAgY2VudGVyMCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHRhcmdldCA9IGQzLmV2ZW50LnRhcmdldCxcbiAgICAgICAgZGlzcGF0Y2ggPSBldmVudC5vZih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICBkcmFnZ2VkID0gMCxcbiAgICAgICAgc3ViamVjdCA9IGQzLnNlbGVjdChkM193aW5kb3cpLm9uKG1vdXNlbW92ZSwgbW92ZWQpLm9uKG1vdXNldXAsXG4gICAgICAgICAgZW5kZWQpLFxuICAgICAgICBsb2NhdGlvbjAgPSBsb2NhdGlvbihkMy5tb3VzZSh0aGF0KSksXG4gICAgICAgIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKCk7XG4gICAgICBkM19zZWxlY3Rpb25faW50ZXJydXB0LmNhbGwodGhhdCk7XG4gICAgICB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG5cbiAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgICBkcmFnZ2VkID0gMTtcbiAgICAgICAgdHJhbnNsYXRlVG8oZDMubW91c2UodGhhdCksIGxvY2F0aW9uMCk7XG4gICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBzdWJqZWN0Lm9uKG1vdXNlbW92ZSwgbnVsbCkub24obW91c2V1cCwgbnVsbCk7XG4gICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQgJiYgZDMuZXZlbnQudGFyZ2V0ID09PSB0YXJnZXQpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgZGlzcGF0Y2ggPSBldmVudC5vZih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICBsb2NhdGlvbnMwID0ge30sXG4gICAgICAgIGRpc3RhbmNlMCA9IDAsXG4gICAgICAgIHNjYWxlMCwgem9vbU5hbWUgPSBcIi56b29tLVwiICsgZDMuZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllcixcbiAgICAgICAgdG91Y2htb3ZlID0gXCJ0b3VjaG1vdmVcIiArIHpvb21OYW1lLFxuICAgICAgICB0b3VjaGVuZCA9IFwidG91Y2hlbmRcIiArIHpvb21OYW1lLFxuICAgICAgICB0YXJnZXRzID0gW10sXG4gICAgICAgIHN1YmplY3QgPSBkMy5zZWxlY3QodGhhdCksXG4gICAgICAgIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKCk7XG4gICAgICBzdGFydGVkKCk7XG4gICAgICB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG4gICAgICBzdWJqZWN0Lm9uKG1vdXNlZG93biwgbnVsbCkub24odG91Y2hzdGFydCwgc3RhcnRlZCk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbG9jYXRlKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCk7XG4gICAgICAgIHNjYWxlMCA9IHZpZXcuaztcbiAgICAgICAgdG91Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBpZiAodC5pZGVudGlmaWVyIGluIGxvY2F0aW9uczApIGxvY2F0aW9uczBbdC5pZGVudGlmaWVyXSA9XG4gICAgICAgICAgICBsb2NhdGlvbih0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3VjaGVzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0O1xuICAgICAgICBkMy5zZWxlY3QodGFyZ2V0KS5vbih0b3VjaG1vdmUsIG1vdmVkKS5vbih0b3VjaGVuZCwgZW5kZWQpO1xuICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGFuZ2VkLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGxvY2F0aW9uczBbY2hhbmdlZFtpXS5pZGVudGlmaWVyXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdWNoZXMgPSByZWxvY2F0ZSgpLFxuICAgICAgICAgIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGlmICh0b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChub3cgLSB0b3VjaHRpbWUgPCA1MDApIHtcbiAgICAgICAgICAgIHZhciBwID0gdG91Y2hlc1swXTtcbiAgICAgICAgICAgIHpvb21Ubyh0aGF0LCBwLCBsb2NhdGlvbnMwW3AuaWRlbnRpZmllcl0sIE1hdGguZmxvb3IoTWF0aC5sb2coXG4gICAgICAgICAgICAgIHZpZXcuaykgLyBNYXRoLkxOMikgKyAxKTtcbiAgICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG91Y2h0aW1lID0gbm93O1xuICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBwID0gdG91Y2hlc1swXSxcbiAgICAgICAgICAgIHEgPSB0b3VjaGVzWzFdLFxuICAgICAgICAgICAgZHggPSBwWzBdIC0gcVswXSxcbiAgICAgICAgICAgIGR5ID0gcFsxXSAtIHFbMV07XG4gICAgICAgICAgZGlzdGFuY2UwID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICAgIHZhciB0b3VjaGVzID0gZDMudG91Y2hlcyh0aGF0KSxcbiAgICAgICAgICBwMCwgbDAsIHAxLCBsMTtcbiAgICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoYXQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMubGVuZ3RoOyBpIDwgbjsgKytpLCBsMSA9IG51bGwpIHtcbiAgICAgICAgICBwMSA9IHRvdWNoZXNbaV07XG4gICAgICAgICAgaWYgKGwxID0gbG9jYXRpb25zMFtwMS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgICAgaWYgKGwwKSBicmVhaztcbiAgICAgICAgICAgIHAwID0gcDEsIGwwID0gbDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsMSkge1xuICAgICAgICAgIHZhciBkaXN0YW5jZTEgPSAoZGlzdGFuY2UxID0gcDFbMF0gLSBwMFswXSkgKiBkaXN0YW5jZTEgKyAoXG4gICAgICAgICAgICAgIGRpc3RhbmNlMSA9IHAxWzFdIC0gcDBbMV0pICogZGlzdGFuY2UxLFxuICAgICAgICAgICAgc2NhbGUxID0gZGlzdGFuY2UwICYmIE1hdGguc3FydChkaXN0YW5jZTEgLyBkaXN0YW5jZTApO1xuICAgICAgICAgIHAwID0gWyhwMFswXSArIHAxWzBdKSAvIDIsIChwMFsxXSArIHAxWzFdKSAvIDJdO1xuICAgICAgICAgIGwwID0gWyhsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDJdO1xuICAgICAgICAgIHNjYWxlVG8oc2NhbGUxICogc2NhbGUwKTtcbiAgICAgICAgfVxuICAgICAgICB0b3VjaHRpbWUgPSBudWxsO1xuICAgICAgICB0cmFuc2xhdGVUbyhwMCwgbDApO1xuICAgICAgICB6b29tZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LnRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGNoYW5nZWQgPSBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGNoYW5nZWQubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICBkZWxldGUgbG9jYXRpb25zMFtjaGFuZ2VkW2ldLmlkZW50aWZpZXJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBpZGVudGlmaWVyIGluIGxvY2F0aW9uczApIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIHJlbG9jYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGQzLnNlbGVjdEFsbCh0YXJnZXRzKS5vbih6b29tTmFtZSwgbnVsbCk7XG4gICAgICAgIHN1YmplY3Qub24obW91c2Vkb3duLCBtb3VzZWRvd25lZCkub24odG91Y2hzdGFydCwgdG91Y2hzdGFydGVkKTtcbiAgICAgICAgZHJhZ1Jlc3RvcmUoKTtcbiAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXdoZWVsZWQoKSB7XG4gICAgICB2YXIgZGlzcGF0Y2ggPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKG1vdXNld2hlZWxUaW1lcikgY2xlYXJUaW1lb3V0KG1vdXNld2hlZWxUaW1lcik7XG4gICAgICBlbHNlIHRyYW5zbGF0ZTAgPSBsb2NhdGlvbihjZW50ZXIwID0gY2VudGVyIHx8IGQzLm1vdXNlKHRoaXMpKSxcbiAgICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoaXMpLCB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG4gICAgICBtb3VzZXdoZWVsVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBtb3VzZXdoZWVsVGltZXIgPSBudWxsO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfSwgNTApO1xuICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2NhbGVUbyhNYXRoLnBvdygyLCBkM19iZWhhdmlvcl96b29tRGVsdGEoKSAqIC4wMDIpICogdmlldy5rKTtcbiAgICAgIHRyYW5zbGF0ZVRvKGNlbnRlcjAsIHRyYW5zbGF0ZTApO1xuICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYmxjbGlja2VkKCkge1xuICAgICAgdmFyIHAgPSBkMy5tb3VzZSh0aGlzKSxcbiAgICAgICAgayA9IE1hdGgubG9nKHZpZXcuaykgLyBNYXRoLkxOMjtcbiAgICAgIHpvb21Ubyh0aGlzLCBwLCBsb2NhdGlvbihwKSwgZDMuZXZlbnQuc2hpZnRLZXkgPyBNYXRoLmNlaWwoaykgLSAxIDpcbiAgICAgICAgTWF0aC5mbG9vcihrKSArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZDMucmViaW5kKHpvb20sIGV2ZW50LCBcIm9uXCIpO1xuICB9O1xuICB2YXIgZDNfYmVoYXZpb3Jfem9vbUluZmluaXR5ID0gWzAsIEluZmluaXR5XTtcbiAgdmFyIGQzX2JlaGF2aW9yX3pvb21EZWx0YSwgZDNfYmVoYXZpb3Jfem9vbVdoZWVsID0gXCJvbndoZWVsXCIgaW5cbiAgICBkM19kb2N1bWVudCA/IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAtZDMuZXZlbnQuZGVsdGFZICogKGQzLmV2ZW50LmRlbHRhTW9kZSA/IDEyMCA6IDEpO1xuICAgIH0sIFwid2hlZWxcIikgOiBcIm9ubW91c2V3aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9XG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGQzLmV2ZW50LndoZWVsRGVsdGE7XG4gICAgICB9LCBcIm1vdXNld2hlZWxcIikgOiAoZDNfYmVoYXZpb3Jfem9vbURlbHRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gLWQzLmV2ZW50LmRldGFpbDtcbiAgICB9LCBcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIik7XG4gIGQzLmNvbG9yID0gZDNfY29sb3I7XG5cbiAgZnVuY3Rpb24gZDNfY29sb3IoKSB7fVxuICBkM19jb2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKSArIFwiXCI7XG4gIH07XG4gIGQzLmhzbCA9IGQzX2hzbDtcblxuICBmdW5jdGlvbiBkM19oc2woaCwgcywgbCkge1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfaHNsID8gdm9pZCh0aGlzLmggPSAraCwgdGhpcy5zID0gK3MsIHRoaXMubCA9ICtcbiAgICAgIGwpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBoIGluc3RhbmNlb2YgZDNfaHNsID8gbmV3IGQzX2hzbChoLmgsIGhcbiAgICAgIC5zLCBoLmwpIDogZDNfcmdiX3BhcnNlKFwiXCIgKyBoLCBkM19yZ2JfaHNsLCBkM19oc2wpIDogbmV3IGQzX2hzbChoLFxuICAgICAgcywgbCk7XG4gIH1cbiAgdmFyIGQzX2hzbFByb3RvdHlwZSA9IGQzX2hzbC5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfaHNsUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcbiAgICByZXR1cm4gbmV3IGQzX2hzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sIC8gayk7XG4gIH07XG4gIGQzX2hzbFByb3RvdHlwZS5kYXJrZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuICAgIHJldHVybiBuZXcgZDNfaHNsKHRoaXMuaCwgdGhpcy5zLCBrICogdGhpcy5sKTtcbiAgfTtcbiAgZDNfaHNsUHJvdG90eXBlLnJnYiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19oc2xfcmdiKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2hzbF9yZ2IoaCwgcywgbCkge1xuICAgIHZhciBtMSwgbTI7XG4gICAgaCA9IGlzTmFOKGgpID8gMCA6IChoICU9IDM2MCkgPCAwID8gaCArIDM2MCA6IGg7XG4gICAgcyA9IGlzTmFOKHMpID8gMCA6IHMgPCAwID8gMCA6IHMgPiAxID8gMSA6IHM7XG4gICAgbCA9IGwgPCAwID8gMCA6IGwgPiAxID8gMSA6IGw7XG4gICAgbTIgPSBsIDw9IC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIG0xID0gMiAqIGwgLSBtMjtcblxuICAgIGZ1bmN0aW9uIHYoaCkge1xuICAgICAgaWYgKGggPiAzNjApIGggLT0gMzYwO1xuICAgICAgZWxzZSBpZiAoaCA8IDApIGggKz0gMzYwO1xuICAgICAgaWYgKGggPCA2MCkgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAvIDYwO1xuICAgICAgaWYgKGggPCAxODApIHJldHVybiBtMjtcbiAgICAgIGlmIChoIDwgMjQwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MDtcbiAgICAgIHJldHVybiBtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2dihoKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh2KGgpICogMjU1KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBkM19yZ2IodnYoaCArIDEyMCksIHZ2KGgpLCB2dihoIC0gMTIwKSk7XG4gIH1cbiAgZDMuaGNsID0gZDNfaGNsO1xuXG4gIGZ1bmN0aW9uIGQzX2hjbChoLCBjLCBsKSB7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBkM19oY2wgPyB2b2lkKHRoaXMuaCA9ICtoLCB0aGlzLmMgPSArYywgdGhpcy5sID0gK1xuICAgICAgICBsKSA6IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gaCBpbnN0YW5jZW9mIGQzX2hjbCA/IG5ldyBkM19oY2woaC5oLCBoXG4gICAgICAgIC5jLCBoLmwpIDogaCBpbnN0YW5jZW9mIGQzX2xhYiA/IGQzX2xhYl9oY2woaC5sLCBoLmEsIGguYikgOlxuICAgICAgZDNfbGFiX2hjbCgoaCA9IGQzX3JnYl9sYWIoKGggPSBkMy5yZ2IoaCkpLnIsIGguZywgaC5iKSkubCwgaC5hLCBoLmIpIDpcbiAgICAgIG5ldyBkM19oY2woaCwgYywgbCk7XG4gIH1cbiAgdmFyIGQzX2hjbFByb3RvdHlwZSA9IGQzX2hjbC5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfaGNsUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1pbigxMDAsIHRoaXMubCArIGQzX2xhYl9LICogKFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSkpO1xuICB9O1xuICBkM19oY2xQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSkpKTtcbiAgfTtcbiAgZDNfaGNsUHJvdG90eXBlLnJnYiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19oY2xfbGFiKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwpLnJnYigpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2hjbF9sYWIoaCwgYywgbCkge1xuICAgIGlmIChpc05hTihoKSkgaCA9IDA7XG4gICAgaWYgKGlzTmFOKGMpKSBjID0gMDtcbiAgICByZXR1cm4gbmV3IGQzX2xhYihsLCBNYXRoLmNvcyhoICo9IGQzX3JhZGlhbnMpICogYywgTWF0aC5zaW4oaCkgKiBjKTtcbiAgfVxuICBkMy5sYWIgPSBkM19sYWI7XG5cbiAgZnVuY3Rpb24gZDNfbGFiKGwsIGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2xhYiA/IHZvaWQodGhpcy5sID0gK2wsIHRoaXMuYSA9ICthLCB0aGlzLmIgPSArXG4gICAgICAgIGIpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBsIGluc3RhbmNlb2YgZDNfbGFiID8gbmV3IGQzX2xhYihsLmwsIGxcbiAgICAgICAgLmEsIGwuYikgOiBsIGluc3RhbmNlb2YgZDNfaGNsID8gZDNfaGNsX2xhYihsLmgsIGwuYywgbC5sKSA6XG4gICAgICBkM19yZ2JfbGFiKChsID0gZDNfcmdiKGwpKS5yLCBsLmcsIGwuYikgOiBuZXcgZDNfbGFiKGwsIGEsIGIpO1xuICB9XG4gIHZhciBkM19sYWJfSyA9IDE4O1xuICB2YXIgZDNfbGFiX1ggPSAuOTUwNDcsXG4gICAgZDNfbGFiX1kgPSAxLFxuICAgIGQzX2xhYl9aID0gMS4wODg4MztcbiAgdmFyIGQzX2xhYlByb3RvdHlwZSA9IGQzX2xhYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfbGFiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfbGFiKE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICBrIDogMSkpLCB0aGlzLmEsIHRoaXMuYik7XG4gIH07XG4gIGQzX2xhYlByb3RvdHlwZS5kYXJrZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBkM19sYWIoTWF0aC5tYXgoMCwgdGhpcy5sIC0gZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICBrIDogMSkpLCB0aGlzLmEsIHRoaXMuYik7XG4gIH07XG4gIGQzX2xhYlByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfbGFiX3JnYih0aGlzLmwsIHRoaXMuYSwgdGhpcy5iKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19sYWJfcmdiKGwsIGEsIGIpIHtcbiAgICB2YXIgeSA9IChsICsgMTYpIC8gMTE2LFxuICAgICAgeCA9IHkgKyBhIC8gNTAwLFxuICAgICAgeiA9IHkgLSBiIC8gMjAwO1xuICAgIHggPSBkM19sYWJfeHl6KHgpICogZDNfbGFiX1g7XG4gICAgeSA9IGQzX2xhYl94eXooeSkgKiBkM19sYWJfWTtcbiAgICB6ID0gZDNfbGFiX3h5eih6KSAqIGQzX2xhYl9aO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKGQzX3h5el9yZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAuNDk4NTMxNCAqXG4gICAgICAgIHopLCBkM194eXpfcmdiKC0uOTY5MjY2ICogeCArIDEuODc2MDEwOCAqIHkgKyAuMDQxNTU2ICogeiksXG4gICAgICBkM194eXpfcmdiKC4wNTU2NDM0ICogeCAtIC4yMDQwMjU5ICogeSArIDEuMDU3MjI1MiAqIHopKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xhYl9oY2wobCwgYSwgYikge1xuICAgIHJldHVybiBsID4gMCA/IG5ldyBkM19oY2woTWF0aC5hdGFuMihiLCBhKSAqIGQzX2RlZ3JlZXMsIE1hdGguc3FydChhICpcbiAgICAgIGEgKyBiICogYiksIGwpIDogbmV3IGQzX2hjbChOYU4sIE5hTiwgbCk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYWJfeHl6KHgpIHtcbiAgICByZXR1cm4geCA+IC4yMDY4OTMwMzQgPyB4ICogeCAqIHggOiAoeCAtIDQgLyAyOSkgLyA3Ljc4NzAzNztcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3h5el9sYWIoeCkge1xuICAgIHJldHVybiB4ID4gLjAwODg1NiA/IE1hdGgucG93KHgsIDEgLyAzKSA6IDcuNzg3MDM3ICogeCArIDQgLyAyOTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3h5el9yZ2Iocikge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKDI1NSAqIChyIDw9IC4wMDMwNCA/IDEyLjkyICogciA6IDEuMDU1ICogTWF0aC5wb3cocixcbiAgICAgIDEgLyAyLjQpIC0gLjA1NSkpO1xuICB9XG4gIGQzLnJnYiA9IGQzX3JnYjtcblxuICBmdW5jdGlvbiBkM19yZ2IociwgZywgYikge1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfcmdiID8gdm9pZCh0aGlzLnIgPSB+fnIsIHRoaXMuZyA9IH5+ZywgdGhpcy5iID0gflxuICAgICAgfmIpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyByIGluc3RhbmNlb2YgZDNfcmdiID8gbmV3IGQzX3JnYihyLnIsXG4gICAgICByLmcsIHIuYikgOiBkM19yZ2JfcGFyc2UoXCJcIiArIHIsIGQzX3JnYiwgZDNfaHNsX3JnYikgOiBuZXcgZDNfcmdiKHIsXG4gICAgICBnLCBiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3JnYk51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgZDNfcmdiKHZhbHVlID4+IDE2LCB2YWx1ZSA+PiA4ICYgMjU1LCB2YWx1ZSAmIDI1NSk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19yZ2JTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gZDNfcmdiTnVtYmVyKHZhbHVlKSArIFwiXCI7XG4gIH1cbiAgdmFyIGQzX3JnYlByb3RvdHlwZSA9IGQzX3JnYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfcmdiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcbiAgICB2YXIgciA9IHRoaXMucixcbiAgICAgIGcgPSB0aGlzLmcsXG4gICAgICBiID0gdGhpcy5iLFxuICAgICAgaSA9IDMwO1xuICAgIGlmICghciAmJiAhZyAmJiAhYikgcmV0dXJuIG5ldyBkM19yZ2IoaSwgaSwgaSk7XG4gICAgaWYgKHIgJiYgciA8IGkpIHIgPSBpO1xuICAgIGlmIChnICYmIGcgPCBpKSBnID0gaTtcbiAgICBpZiAoYiAmJiBiIDwgaSkgYiA9IGk7XG4gICAgcmV0dXJuIG5ldyBkM19yZ2IoTWF0aC5taW4oMjU1LCByIC8gayksIE1hdGgubWluKDI1NSwgZyAvIGspLCBNYXRoLm1pbihcbiAgICAgIDI1NSwgYiAvIGspKTtcbiAgfTtcbiAgZDNfcmdiUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgcmV0dXJuIG5ldyBkM19yZ2IoayAqIHRoaXMuciwgayAqIHRoaXMuZywgayAqIHRoaXMuYik7XG4gIH07XG4gIGQzX3JnYlByb3RvdHlwZS5oc2wgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfcmdiX2hzbCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbiAgfTtcbiAgZDNfcmdiUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiI1wiICsgZDNfcmdiX2hleCh0aGlzLnIpICsgZDNfcmdiX2hleCh0aGlzLmcpICsgZDNfcmdiX2hleChcbiAgICAgIHRoaXMuYik7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfcmdiX2hleCh2KSB7XG4gICAgcmV0dXJuIHYgPCAxNiA/IFwiMFwiICsgTWF0aC5tYXgoMCwgdikudG9TdHJpbmcoMTYpIDogTWF0aC5taW4oMjU1LCB2KS50b1N0cmluZyhcbiAgICAgIDE2KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZShmb3JtYXQsIHJnYiwgaHNsKSB7XG4gICAgdmFyIHIgPSAwLFxuICAgICAgZyA9IDAsXG4gICAgICBiID0gMCxcbiAgICAgIG0xLCBtMiwgY29sb3I7XG4gICAgbTEgPSAvKFthLXpdKylcXCgoLiopXFwpL2kuZXhlYyhmb3JtYXQpO1xuICAgIGlmIChtMSkge1xuICAgICAgbTIgPSBtMVsyXS5zcGxpdChcIixcIik7XG4gICAgICBzd2l0Y2ggKG0xWzFdKSB7XG4gICAgICAgIGNhc2UgXCJoc2xcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gaHNsKHBhcnNlRmxvYXQobTJbMF0pLCBwYXJzZUZsb2F0KG0yWzFdKSAvIDEwMCxcbiAgICAgICAgICAgICAgcGFyc2VGbG9hdChtMlsyXSkgLyAxMDApO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFwicmdiXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHJnYihkM19yZ2JfcGFyc2VOdW1iZXIobTJbMF0pLCBkM19yZ2JfcGFyc2VOdW1iZXIobTJbMV0pLFxuICAgICAgICAgICAgICBkM19yZ2JfcGFyc2VOdW1iZXIobTJbMl0pKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb2xvciA9IGQzX3JnYl9uYW1lcy5nZXQoZm9ybWF0KSkgcmV0dXJuIHJnYihjb2xvci5yLCBjb2xvci5nLFxuICAgICAgY29sb3IuYik7XG4gICAgaWYgKGZvcm1hdCAhPSBudWxsICYmIGZvcm1hdC5jaGFyQXQoMCkgPT09IFwiI1wiICYmICFpc05hTihjb2xvciA9XG4gICAgICAgIHBhcnNlSW50KGZvcm1hdC5zbGljZSgxKSwgMTYpKSkge1xuICAgICAgaWYgKGZvcm1hdC5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgciA9IChjb2xvciAmIDM4NDApID4+IDQ7XG4gICAgICAgIHIgPSByID4+IDQgfCByO1xuICAgICAgICBnID0gY29sb3IgJiAyNDA7XG4gICAgICAgIGcgPSBnID4+IDQgfCBnO1xuICAgICAgICBiID0gY29sb3IgJiAxNTtcbiAgICAgICAgYiA9IGIgPDwgNCB8IGI7XG4gICAgICB9IGVsc2UgaWYgKGZvcm1hdC5sZW5ndGggPT09IDcpIHtcbiAgICAgICAgciA9IChjb2xvciAmIDE2NzExNjgwKSA+PiAxNjtcbiAgICAgICAgZyA9IChjb2xvciAmIDY1MjgwKSA+PiA4O1xuICAgICAgICBiID0gY29sb3IgJiAyNTU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZ2IociwgZywgYik7XG4gIH1cblxuICBmdW5jdGlvbiBkM19yZ2JfaHNsKHIsIGcsIGIpIHtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NSksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGQgPSBtYXggLSBtaW4sXG4gICAgICBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuICAgIGlmIChkKSB7XG4gICAgICBzID0gbCA8IC41ID8gZCAvIChtYXggKyBtaW4pIDogZCAvICgyIC0gbWF4IC0gbWluKTtcbiAgICAgIGlmIChyID09IG1heCkgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApO1xuICAgICAgZWxzZSBpZiAoZyA9PSBtYXgpIGggPSAoYiAtIHIpIC8gZCArIDI7XG4gICAgICBlbHNlIGggPSAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gTmFOO1xuICAgICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gICAgfVxuICAgIHJldHVybiBuZXcgZDNfaHNsKGgsIHMsIGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfcmdiX2xhYihyLCBnLCBiKSB7XG4gICAgciA9IGQzX3JnYl94eXoocik7XG4gICAgZyA9IGQzX3JnYl94eXooZyk7XG4gICAgYiA9IGQzX3JnYl94eXooYik7XG4gICAgdmFyIHggPSBkM194eXpfbGFiKCguNDEyNDU2NCAqIHIgKyAuMzU3NTc2MSAqIGcgKyAuMTgwNDM3NSAqIGIpIC9cbiAgICAgICAgZDNfbGFiX1gpLFxuICAgICAgeSA9IGQzX3h5el9sYWIoKC4yMTI2NzI5ICogciArIC43MTUxNTIyICogZyArIC4wNzIxNzUgKiBiKSAvIGQzX2xhYl9ZKSxcbiAgICAgIHogPSBkM194eXpfbGFiKCguMDE5MzMzOSAqIHIgKyAuMTE5MTkyICogZyArIC45NTAzMDQxICogYikgLyBkM19sYWJfWik7XG4gICAgcmV0dXJuIGQzX2xhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geikpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfcmdiX3h5eihyKSB7XG4gICAgcmV0dXJuIChyIC89IDI1NSkgPD0gLjA0MDQ1ID8gciAvIDEyLjkyIDogTWF0aC5wb3coKHIgKyAuMDU1KSAvIDEuMDU1LFxuICAgICAgMi40KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZU51bWJlcihjKSB7XG4gICAgdmFyIGYgPSBwYXJzZUZsb2F0KGMpO1xuICAgIHJldHVybiBjLmNoYXJBdChjLmxlbmd0aCAtIDEpID09PSBcIiVcIiA/IE1hdGgucm91bmQoZiAqIDIuNTUpIDogZjtcbiAgfVxuICB2YXIgZDNfcmdiX25hbWVzID0gZDMubWFwKHtcbiAgICBhbGljZWJsdWU6IDE1NzkyMzgzLFxuICAgIGFudGlxdWV3aGl0ZTogMTY0NDQzNzUsXG4gICAgYXF1YTogNjU1MzUsXG4gICAgYXF1YW1hcmluZTogODM4ODU2NCxcbiAgICBhenVyZTogMTU3OTQxNzUsXG4gICAgYmVpZ2U6IDE2MTE5MjYwLFxuICAgIGJpc3F1ZTogMTY3NzAyNDQsXG4gICAgYmxhY2s6IDAsXG4gICAgYmxhbmNoZWRhbG1vbmQ6IDE2NzcyMDQ1LFxuICAgIGJsdWU6IDI1NSxcbiAgICBibHVldmlvbGV0OiA5MDU1MjAyLFxuICAgIGJyb3duOiAxMDgyNDIzNCxcbiAgICBidXJseXdvb2Q6IDE0NTk2MjMxLFxuICAgIGNhZGV0Ymx1ZTogNjI2NjUyOCxcbiAgICBjaGFydHJldXNlOiA4Mzg4MzUyLFxuICAgIGNob2NvbGF0ZTogMTM3ODk0NzAsXG4gICAgY29yYWw6IDE2NzQ0MjcyLFxuICAgIGNvcm5mbG93ZXJibHVlOiA2NTkxOTgxLFxuICAgIGNvcm5zaWxrOiAxNjc3NTM4OCxcbiAgICBjcmltc29uOiAxNDQyMzEwMCxcbiAgICBjeWFuOiA2NTUzNSxcbiAgICBkYXJrYmx1ZTogMTM5LFxuICAgIGRhcmtjeWFuOiAzNTcyMyxcbiAgICBkYXJrZ29sZGVucm9kOiAxMjA5MjkzOSxcbiAgICBkYXJrZ3JheTogMTExMTkwMTcsXG4gICAgZGFya2dyZWVuOiAyNTYwMCxcbiAgICBkYXJrZ3JleTogMTExMTkwMTcsXG4gICAgZGFya2toYWtpOiAxMjQzMzI1OSxcbiAgICBkYXJrbWFnZW50YTogOTEwOTY0MyxcbiAgICBkYXJrb2xpdmVncmVlbjogNTU5Nzk5OSxcbiAgICBkYXJrb3JhbmdlOiAxNjc0NzUyMCxcbiAgICBkYXJrb3JjaGlkOiAxMDA0MDAxMixcbiAgICBkYXJrcmVkOiA5MTA5NTA0LFxuICAgIGRhcmtzYWxtb246IDE1MzA4NDEwLFxuICAgIGRhcmtzZWFncmVlbjogOTQxOTkxOSxcbiAgICBkYXJrc2xhdGVibHVlOiA0NzM0MzQ3LFxuICAgIGRhcmtzbGF0ZWdyYXk6IDMxMDA0OTUsXG4gICAgZGFya3NsYXRlZ3JleTogMzEwMDQ5NSxcbiAgICBkYXJrdHVycXVvaXNlOiA1Mjk0NSxcbiAgICBkYXJrdmlvbGV0OiA5Njk5NTM5LFxuICAgIGRlZXBwaW5rOiAxNjcxNjk0NyxcbiAgICBkZWVwc2t5Ymx1ZTogNDkxNTEsXG4gICAgZGltZ3JheTogNjkwODI2NSxcbiAgICBkaW1ncmV5OiA2OTA4MjY1LFxuICAgIGRvZGdlcmJsdWU6IDIwMDMxOTksXG4gICAgZmlyZWJyaWNrOiAxMTY3NDE0NixcbiAgICBmbG9yYWx3aGl0ZTogMTY3NzU5MjAsXG4gICAgZm9yZXN0Z3JlZW46IDIyNjM4NDIsXG4gICAgZnVjaHNpYTogMTY3MTE5MzUsXG4gICAgZ2FpbnNib3JvOiAxNDQ3NDQ2MCxcbiAgICBnaG9zdHdoaXRlOiAxNjMxNjY3MSxcbiAgICBnb2xkOiAxNjc2NjcyMCxcbiAgICBnb2xkZW5yb2Q6IDE0MzI5MTIwLFxuICAgIGdyYXk6IDg0MjE1MDQsXG4gICAgZ3JlZW46IDMyNzY4LFxuICAgIGdyZWVueWVsbG93OiAxMTQwMzA1NSxcbiAgICBncmV5OiA4NDIxNTA0LFxuICAgIGhvbmV5ZGV3OiAxNTc5NDE2MCxcbiAgICBob3RwaW5rOiAxNjczODc0MCxcbiAgICBpbmRpYW5yZWQ6IDEzNDU4NTI0LFxuICAgIGluZGlnbzogNDkxNTMzMCxcbiAgICBpdm9yeTogMTY3NzcyMDAsXG4gICAga2hha2k6IDE1Nzg3NjYwLFxuICAgIGxhdmVuZGVyOiAxNTEzMjQxMCxcbiAgICBsYXZlbmRlcmJsdXNoOiAxNjc3MzM2NSxcbiAgICBsYXduZ3JlZW46IDgxOTA5NzYsXG4gICAgbGVtb25jaGlmZm9uOiAxNjc3NTg4NSxcbiAgICBsaWdodGJsdWU6IDExMzkzMjU0LFxuICAgIGxpZ2h0Y29yYWw6IDE1NzYxNTM2LFxuICAgIGxpZ2h0Y3lhbjogMTQ3NDU1OTksXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDE2NDQ4MjEwLFxuICAgIGxpZ2h0Z3JheTogMTM4ODIzMjMsXG4gICAgbGlnaHRncmVlbjogOTQ5ODI1NixcbiAgICBsaWdodGdyZXk6IDEzODgyMzIzLFxuICAgIGxpZ2h0cGluazogMTY3NTg0NjUsXG4gICAgbGlnaHRzYWxtb246IDE2NzUyNzYyLFxuICAgIGxpZ2h0c2VhZ3JlZW46IDIxNDI4OTAsXG4gICAgbGlnaHRza3libHVlOiA4OTAwMzQ2LFxuICAgIGxpZ2h0c2xhdGVncmF5OiA3ODMzNzUzLFxuICAgIGxpZ2h0c2xhdGVncmV5OiA3ODMzNzUzLFxuICAgIGxpZ2h0c3RlZWxibHVlOiAxMTU4NDczNCxcbiAgICBsaWdodHllbGxvdzogMTY3NzcxODQsXG4gICAgbGltZTogNjUyODAsXG4gICAgbGltZWdyZWVuOiAzMzI5MzMwLFxuICAgIGxpbmVuOiAxNjQ0NTY3MCxcbiAgICBtYWdlbnRhOiAxNjcxMTkzNSxcbiAgICBtYXJvb246IDgzODg2MDgsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogNjczNzMyMixcbiAgICBtZWRpdW1ibHVlOiAyMDUsXG4gICAgbWVkaXVtb3JjaGlkOiAxMjIxMTY2NyxcbiAgICBtZWRpdW1wdXJwbGU6IDk2NjI2ODMsXG4gICAgbWVkaXVtc2VhZ3JlZW46IDM5NzgwOTcsXG4gICAgbWVkaXVtc2xhdGVibHVlOiA4MDg3NzkwLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiA2NDE1NCxcbiAgICBtZWRpdW10dXJxdW9pc2U6IDQ3NzIzMDAsXG4gICAgbWVkaXVtdmlvbGV0cmVkOiAxMzA0NzE3MyxcbiAgICBtaWRuaWdodGJsdWU6IDE2NDQ5MTIsXG4gICAgbWludGNyZWFtOiAxNjEyMTg1MCxcbiAgICBtaXN0eXJvc2U6IDE2NzcwMjczLFxuICAgIG1vY2Nhc2luOiAxNjc3MDIyOSxcbiAgICBuYXZham93aGl0ZTogMTY3Njg2ODUsXG4gICAgbmF2eTogMTI4LFxuICAgIG9sZGxhY2U6IDE2NjQzNTU4LFxuICAgIG9saXZlOiA4NDIxMzc2LFxuICAgIG9saXZlZHJhYjogNzA0ODczOSxcbiAgICBvcmFuZ2U6IDE2NzUzOTIwLFxuICAgIG9yYW5nZXJlZDogMTY3MjkzNDQsXG4gICAgb3JjaGlkOiAxNDMxNTczNCxcbiAgICBwYWxlZ29sZGVucm9kOiAxNTY1NzEzMCxcbiAgICBwYWxlZ3JlZW46IDEwMDI1ODgwLFxuICAgIHBhbGV0dXJxdW9pc2U6IDExNTI5OTY2LFxuICAgIHBhbGV2aW9sZXRyZWQ6IDE0MzgxMjAzLFxuICAgIHBhcGF5YXdoaXA6IDE2NzczMDc3LFxuICAgIHBlYWNocHVmZjogMTY3Njc2NzMsXG4gICAgcGVydTogMTM0Njg5OTEsXG4gICAgcGluazogMTY3NjEwMzUsXG4gICAgcGx1bTogMTQ1MjQ2MzcsXG4gICAgcG93ZGVyYmx1ZTogMTE1OTE5MTAsXG4gICAgcHVycGxlOiA4Mzg4NzM2LFxuICAgIHJlZDogMTY3MTE2ODAsXG4gICAgcm9zeWJyb3duOiAxMjM1NzUxOSxcbiAgICByb3lhbGJsdWU6IDQyODY5NDUsXG4gICAgc2FkZGxlYnJvd246IDkxMjcxODcsXG4gICAgc2FsbW9uOiAxNjQxNjg4MixcbiAgICBzYW5keWJyb3duOiAxNjAzMjg2NCxcbiAgICBzZWFncmVlbjogMzA1MDMyNyxcbiAgICBzZWFzaGVsbDogMTY3NzQ2MzgsXG4gICAgc2llbm5hOiAxMDUwNjc5NyxcbiAgICBzaWx2ZXI6IDEyNjMyMjU2LFxuICAgIHNreWJsdWU6IDg5MDAzMzEsXG4gICAgc2xhdGVibHVlOiA2OTcwMDYxLFxuICAgIHNsYXRlZ3JheTogNzM3Mjk0NCxcbiAgICBzbGF0ZWdyZXk6IDczNzI5NDQsXG4gICAgc25vdzogMTY3NzU5MzAsXG4gICAgc3ByaW5nZ3JlZW46IDY1NDA3LFxuICAgIHN0ZWVsYmx1ZTogNDYyMDk4MCxcbiAgICB0YW46IDEzODA4NzgwLFxuICAgIHRlYWw6IDMyODk2LFxuICAgIHRoaXN0bGU6IDE0MjA0ODg4LFxuICAgIHRvbWF0bzogMTY3MzcwOTUsXG4gICAgdHVycXVvaXNlOiA0MjUxODU2LFxuICAgIHZpb2xldDogMTU2MzEwODYsXG4gICAgd2hlYXQ6IDE2MTEzMzMxLFxuICAgIHdoaXRlOiAxNjc3NzIxNSxcbiAgICB3aGl0ZXNtb2tlOiAxNjExOTI4NSxcbiAgICB5ZWxsb3c6IDE2Nzc2OTYwLFxuICAgIHllbGxvd2dyZWVuOiAxMDE0NTA3NFxuICB9KTtcbiAgZDNfcmdiX25hbWVzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGQzX3JnYl9uYW1lcy5zZXQoa2V5LCBkM19yZ2JOdW1iZXIodmFsdWUpKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZDNfZnVuY3Rvcih2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCIgPyB2IDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9O1xuICB9XG4gIGQzLmZ1bmN0b3IgPSBkM19mdW5jdG9yO1xuXG4gIGZ1bmN0aW9uIGQzX2lkZW50aXR5KGQpIHtcbiAgICByZXR1cm4gZDtcbiAgfVxuICBkMy54aHIgPSBkM194aHJUeXBlKGQzX2lkZW50aXR5KTtcblxuICBmdW5jdGlvbiBkM194aHJUeXBlKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHVybCwgbWltZVR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgbWltZVR5cGUgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgY2FsbGJhY2sgPSBtaW1lVHlwZSxcbiAgICAgICAgbWltZVR5cGUgPSBudWxsO1xuICAgICAgcmV0dXJuIGQzX3hocih1cmwsIG1pbWVUeXBlLCByZXNwb25zZSwgY2FsbGJhY2spO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkM194aHIodXJsLCBtaW1lVHlwZSwgcmVzcG9uc2UsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHhociA9IHt9LFxuICAgICAgZGlzcGF0Y2ggPSBkMy5kaXNwYXRjaChcImJlZm9yZXNlbmRcIiwgXCJwcm9ncmVzc1wiLCBcImxvYWRcIiwgXCJlcnJvclwiKSxcbiAgICAgIGhlYWRlcnMgPSB7fSxcbiAgICAgIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgIHJlc3BvbnNlVHlwZSA9IG51bGw7XG4gICAgaWYgKGQzX3dpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKFwid2l0aENyZWRlbnRpYWxzXCIgaW4gcmVxdWVzdCkgJiZcbiAgICAgIC9eKGh0dHAocyk/Oik/XFwvXFwvLy50ZXN0KHVybCkpIHJlcXVlc3QgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICBcIm9ubG9hZFwiIGluIHJlcXVlc3QgPyByZXF1ZXN0Lm9ubG9hZCA9IHJlcXVlc3Qub25lcnJvciA9IHJlc3BvbmQgOlxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVxdWVzdC5yZWFkeVN0YXRlID4gMyAmJiByZXNwb25kKCk7XG4gICAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVzcG9uZCgpIHtcbiAgICAgIHZhciBzdGF0dXMgPSByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgcmVzdWx0O1xuICAgICAgaWYgKCFzdGF0dXMgJiYgZDNfeGhySGFzUmVzcG9uc2UocmVxdWVzdCkgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPFxuICAgICAgICAzMDAgfHwgc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoLmxvYWQuY2FsbCh4aHIsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgbyA9IGQzLmV2ZW50O1xuICAgICAgZDMuZXZlbnQgPSBldmVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpc3BhdGNoLnByb2dyZXNzLmNhbGwoeGhyLCByZXF1ZXN0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzLmV2ZW50ID0gbztcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5oZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgbmFtZSA9IChuYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnNbbmFtZV07XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgICBlbHNlIGhlYWRlcnNbbmFtZV0gPSB2YWx1ZSArIFwiXCI7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgeGhyLm1pbWVUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1pbWVUeXBlO1xuICAgICAgbWltZVR5cGUgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIjtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfTtcbiAgICB4aHIucmVzcG9uc2VUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJlc3BvbnNlVHlwZTtcbiAgICAgIHJlc3BvbnNlVHlwZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5yZXNwb25zZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXNwb25zZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIFtcImdldFwiLCBcInBvc3RcIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHhoclttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB4aHIuc2VuZC5hcHBseSh4aHIsIFttZXRob2RdLmNvbmNhdChkM19hcnJheShhcmd1bWVudHMpKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHhoci5zZW5kID0gZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPVxuICAgICAgICBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiAhKFwiYWNjZXB0XCIgaW4gaGVhZGVycykpIGhlYWRlcnNbXCJhY2NlcHRcIl0gPVxuICAgICAgICBtaW1lVHlwZSArIFwiLCovKlwiO1xuICAgICAgaWYgKHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcilcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIobmFtZSwgaGVhZGVyc1tcbiAgICAgICAgICBuYW1lXSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUpIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShcbiAgICAgICAgbWltZVR5cGUpO1xuICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPSBudWxsKSByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB4aHIub24oXCJlcnJvclwiLCBjYWxsYmFjaykub24oXCJsb2FkXCIsIGZ1bmN0aW9uKFxuICAgICAgICByZXF1ZXN0KSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcXVlc3QpO1xuICAgICAgfSk7XG4gICAgICBkaXNwYXRjaC5iZWZvcmVzZW5kLmNhbGwoeGhyLCByZXF1ZXN0KTtcbiAgICAgIHJlcXVlc3Quc2VuZChkYXRhID09IG51bGwgPyBudWxsIDogZGF0YSk7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgeGhyLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgZDMucmViaW5kKHhociwgZGlzcGF0Y2gsIFwib25cIik7XG4gICAgcmV0dXJuIGNhbGxiYWNrID09IG51bGwgPyB4aHIgOiB4aHIuZ2V0KGQzX3hocl9maXhDYWxsYmFjayhjYWxsYmFjaykpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfeGhyX2ZpeENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmxlbmd0aCA9PT0gMSA/IGZ1bmN0aW9uKGVycm9yLCByZXF1ZXN0KSB7XG4gICAgICBjYWxsYmFjayhlcnJvciA9PSBudWxsID8gcmVxdWVzdCA6IG51bGwpO1xuICAgIH0gOiBjYWxsYmFjaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3hockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICB2YXIgdHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiID8gcmVxdWVzdC5yZXNwb25zZSA6IHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9XG4gIGQzLmRzdiA9IGZ1bmN0aW9uKGRlbGltaXRlciwgbWltZVR5cGUpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKCdbXCInICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLFxuICAgICAgZGVsaW1pdGVyQ29kZSA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gICAgZnVuY3Rpb24gZHN2KHVybCwgcm93LCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICAgIHZhciB4aHIgPSBkM194aHIodXJsLCBtaW1lVHlwZSwgcm93ID09IG51bGwgPyByZXNwb25zZSA6XG4gICAgICAgIHR5cGVkUmVzcG9uc2Uocm93KSwgY2FsbGJhY2spO1xuICAgICAgeGhyLnJvdyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB4aHIucmVzcG9uc2UoKHJvdyA9IF8pID09IG51bGwgP1xuICAgICAgICAgIHJlc3BvbnNlIDogdHlwZWRSZXNwb25zZShfKSkgOiByb3c7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNwb25zZShyZXF1ZXN0KSB7XG4gICAgICByZXR1cm4gZHN2LnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0eXBlZFJlc3BvbnNlKGYpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIGYpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZHN2LnBhcnNlID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIG87XG4gICAgICByZXR1cm4gZHN2LnBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgICAgaWYgKG8pIHJldHVybiBvKHJvdywgaSAtIDEpO1xuICAgICAgICB2YXIgYSA9IG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgcm93Lm1hcChmdW5jdGlvbihcbiAgICAgICAgICBuYW1lLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICAgICAgICBvID0gZiA/IGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgICAgIHJldHVybiBmKGEocm93KSwgaSk7XG4gICAgICAgIH0gOiBhO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBkc3YucGFyc2VSb3dzID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LFxuICAgICAgICBFT0YgPSB7fSxcbiAgICAgICAgcm93cyA9IFtdLFxuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLFxuICAgICAgICBuID0gMCxcbiAgICAgICAgdCwgZW9sO1xuXG4gICAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgICAgaWYgKEkgPj0gTikgcmV0dXJuIEVPRjtcbiAgICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG4gICAgICAgIHZhciBqID0gSTtcbiAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gMzQpIHtcbiAgICAgICAgICB2YXIgaSA9IGo7XG4gICAgICAgICAgd2hpbGUgKGkrKyA8IE4pIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgPT09IDM0KSB7XG4gICAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSArIDEpICE9PSAzNCkgYnJlYWs7XG4gICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgSSA9IGkgKyAyO1xuICAgICAgICAgIHZhciBjID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICBpZiAoYyA9PT0gMTMpIHtcbiAgICAgICAgICAgIGVvbCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAyKSA9PT0gMTApICsrSTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDEwKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSkucmVwbGFjZSgvXCJcIi9nLCAnXCInKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChJKyspLFxuICAgICAgICAgICAgayA9IDE7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlO1xuICAgICAgICAgIGVsc2UgaWYgKGMgPT09IDEzKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gMTApICsrSSwgKytrO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyAhPT0gZGVsaW1pdGVyQ29kZSkgY29udGludWU7XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgSSAtIGspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGopO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikge1xuICAgICAgICAgIGEucHVzaCh0KTtcbiAgICAgICAgICB0ID0gdG9rZW4oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZiAmJiAoYSA9IGYoYSwgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICAgIHJvd3MucHVzaChhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb3dzO1xuICAgIH07XG4gICAgZHN2LmZvcm1hdCA9IGZ1bmN0aW9uKHJvd3MpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvd3NbMF0pKSByZXR1cm4gZHN2LmZvcm1hdFJvd3Mocm93cyk7XG4gICAgICB2YXIgZmllbGRTZXQgPSBuZXcgZDNfU2V0KCksXG4gICAgICAgIGZpZWxkcyA9IFtdO1xuICAgICAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICBmb3IgKHZhciBmaWVsZCBpbiByb3cpIHtcbiAgICAgICAgICBpZiAoIWZpZWxkU2V0LmhhcyhmaWVsZCkpIHtcbiAgICAgICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkU2V0LmFkZChmaWVsZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gW2ZpZWxkcy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHJvd3MubWFwKFxuICAgICAgICBmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgICByZXR1cm4gZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tmaWVsZF0pO1xuICAgICAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBkc3YuZm9ybWF0Um93cyA9IGZ1bmN0aW9uKHJvd3MpIHtcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcbiAgICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodGV4dCkge1xuICAgICAgcmV0dXJuIHJlRm9ybWF0LnRlc3QodGV4dCkgPyAnXCInICsgdGV4dC5yZXBsYWNlKC9cXFwiL2csICdcIlwiJykgKyAnXCInIDpcbiAgICAgICAgdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGRzdjtcbiAgfTtcbiAgZDMuY3N2ID0gZDMuZHN2KFwiLFwiLCBcInRleHQvY3N2XCIpO1xuICBkMy50c3YgPSBkMy5kc3YoXCIgXCIsIFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiKTtcbiAgdmFyIGQzX3RpbWVyX3F1ZXVlSGVhZCwgZDNfdGltZXJfcXVldWVUYWlsLCBkM190aW1lcl9pbnRlcnZhbCxcbiAgICBkM190aW1lcl90aW1lb3V0LCBkM190aW1lcl9hY3RpdmUsIGQzX3RpbWVyX2ZyYW1lID0gZDNfd2luZG93W1xuICAgICAgZDNfdmVuZG9yU3ltYm9sKGQzX3dpbmRvdywgXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIildIHx8IGZ1bmN0aW9uKFxuICAgICAgY2FsbGJhY2spIHtcbiAgICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDE3KTtcbiAgICB9O1xuICBkMy50aW1lciA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGhlbikge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobiA8IDIpIGRlbGF5ID0gMDtcbiAgICBpZiAobiA8IDMpIHRoZW4gPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lID0gdGhlbiArIGRlbGF5LFxuICAgICAgdGltZXIgPSB7XG4gICAgICAgIGM6IGNhbGxiYWNrLFxuICAgICAgICB0OiB0aW1lLFxuICAgICAgICBmOiBmYWxzZSxcbiAgICAgICAgbjogbnVsbFxuICAgICAgfTtcbiAgICBpZiAoZDNfdGltZXJfcXVldWVUYWlsKSBkM190aW1lcl9xdWV1ZVRhaWwubiA9IHRpbWVyO1xuICAgIGVsc2UgZDNfdGltZXJfcXVldWVIZWFkID0gdGltZXI7XG4gICAgZDNfdGltZXJfcXVldWVUYWlsID0gdGltZXI7XG4gICAgaWYgKCFkM190aW1lcl9pbnRlcnZhbCkge1xuICAgICAgZDNfdGltZXJfdGltZW91dCA9IGNsZWFyVGltZW91dChkM190aW1lcl90aW1lb3V0KTtcbiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMTtcbiAgICAgIGQzX3RpbWVyX2ZyYW1lKGQzX3RpbWVyX3N0ZXApO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBkM190aW1lcl9zdGVwKCkge1xuICAgIHZhciBub3cgPSBkM190aW1lcl9tYXJrKCksXG4gICAgICBkZWxheSA9IGQzX3RpbWVyX3N3ZWVwKCkgLSBub3c7XG4gICAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICAgIGlmIChpc0Zpbml0ZShkZWxheSkpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGQzX3RpbWVyX3RpbWVvdXQpO1xuICAgICAgICBkM190aW1lcl90aW1lb3V0ID0gc2V0VGltZW91dChkM190aW1lcl9zdGVwLCBkZWxheSk7XG4gICAgICB9XG4gICAgICBkM190aW1lcl9pbnRlcnZhbCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMTtcbiAgICAgIGQzX3RpbWVyX2ZyYW1lKGQzX3RpbWVyX3N0ZXApO1xuICAgIH1cbiAgfVxuICBkMy50aW1lci5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGQzX3RpbWVyX21hcmsoKTtcbiAgICBkM190aW1lcl9zd2VlcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3RpbWVyX21hcmsoKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgZDNfdGltZXJfYWN0aXZlID0gZDNfdGltZXJfcXVldWVIZWFkO1xuICAgIHdoaWxlIChkM190aW1lcl9hY3RpdmUpIHtcbiAgICAgIGlmIChub3cgPj0gZDNfdGltZXJfYWN0aXZlLnQpIGQzX3RpbWVyX2FjdGl2ZS5mID0gZDNfdGltZXJfYWN0aXZlLmMoXG4gICAgICAgIG5vdyAtIGQzX3RpbWVyX2FjdGl2ZS50KTtcbiAgICAgIGQzX3RpbWVyX2FjdGl2ZSA9IGQzX3RpbWVyX2FjdGl2ZS5uO1xuICAgIH1cbiAgICByZXR1cm4gbm93O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZXJfc3dlZXAoKSB7XG4gICAgdmFyIHQwLCB0MSA9IGQzX3RpbWVyX3F1ZXVlSGVhZCxcbiAgICAgIHRpbWUgPSBJbmZpbml0eTtcbiAgICB3aGlsZSAodDEpIHtcbiAgICAgIGlmICh0MS5mKSB7XG4gICAgICAgIHQxID0gdDAgPyB0MC5uID0gdDEubiA6IGQzX3RpbWVyX3F1ZXVlSGVhZCA9IHQxLm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodDEudCA8IHRpbWUpIHRpbWUgPSB0MS50O1xuICAgICAgICB0MSA9ICh0MCA9IHQxKS5uO1xuICAgICAgfVxuICAgIH1cbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0MDtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2Zvcm1hdF9wcmVjaXNpb24oeCwgcCkge1xuICAgIHJldHVybiBwIC0gKHggPyBNYXRoLmNlaWwoTWF0aC5sb2coeCkgLyBNYXRoLkxOMTApIDogMSk7XG4gIH1cbiAgZDMucm91bmQgPSBmdW5jdGlvbih4LCBuKSB7XG4gICAgcmV0dXJuIG4gPyBNYXRoLnJvdW5kKHggKiAobiA9IE1hdGgucG93KDEwLCBuKSkpIC8gbiA6IE1hdGgucm91bmQoeCk7XG4gIH07XG4gIHZhciBkM19mb3JtYXRQcmVmaXhlcyA9IFtcInlcIiwgXCJ6XCIsIFwiYVwiLCBcImZcIiwgXCJwXCIsIFwiblwiLCBcIsK1XCIsIFwibVwiLCBcIlwiLCBcImtcIixcbiAgICBcIk1cIiwgXCJHXCIsIFwiVFwiLCBcIlBcIiwgXCJFXCIsIFwiWlwiLCBcIllcIlxuICBdLm1hcChkM19mb3JtYXRQcmVmaXgpO1xuICBkMy5mb3JtYXRQcmVmaXggPSBmdW5jdGlvbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgKj0gLTE7XG4gICAgICBpZiAocHJlY2lzaW9uKSB2YWx1ZSA9IGQzLnJvdW5kKHZhbHVlLCBkM19mb3JtYXRfcHJlY2lzaW9uKHZhbHVlLFxuICAgICAgICBwcmVjaXNpb24pKTtcbiAgICAgIGkgPSAxICsgTWF0aC5mbG9vcigxZS0xMiArIE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4xMCk7XG4gICAgICBpID0gTWF0aC5tYXgoLTI0LCBNYXRoLm1pbigyNCwgTWF0aC5mbG9vcigoaSAtIDEpIC8gMykgKiAzKSk7XG4gICAgfVxuICAgIHJldHVybiBkM19mb3JtYXRQcmVmaXhlc1s4ICsgaSAvIDNdO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2Zvcm1hdFByZWZpeChkLCBpKSB7XG4gICAgdmFyIGsgPSBNYXRoLnBvdygxMCwgYWJzKDggLSBpKSAqIDMpO1xuICAgIHJldHVybiB7XG4gICAgICBzY2FsZTogaSA+IDggPyBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkIC8gaztcbiAgICAgIH0gOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkICogaztcbiAgICAgIH0sXG4gICAgICBzeW1ib2w6IGRcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbG9jYWxlX251bWJlckZvcm1hdChsb2NhbGUpIHtcbiAgICB2YXIgbG9jYWxlX2RlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCxcbiAgICAgIGxvY2FsZV90aG91c2FuZHMgPSBsb2NhbGUudGhvdXNhbmRzLFxuICAgICAgbG9jYWxlX2dyb3VwaW5nID0gbG9jYWxlLmdyb3VwaW5nLFxuICAgICAgbG9jYWxlX2N1cnJlbmN5ID0gbG9jYWxlLmN1cnJlbmN5LFxuICAgICAgZm9ybWF0R3JvdXAgPSBsb2NhbGVfZ3JvdXBpbmcgJiYgbG9jYWxlX3Rob3VzYW5kcyA/IGZ1bmN0aW9uKHZhbHVlLFxuICAgICAgICB3aWR0aCkge1xuICAgICAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgICB0ID0gW10sXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgZyA9IGxvY2FsZV9ncm91cGluZ1swXSxcbiAgICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICAgICAgZyA9IGxvY2FsZV9ncm91cGluZ1tqID0gKGogKyAxKSAlIGxvY2FsZV9ncm91cGluZy5sZW5ndGhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKGxvY2FsZV90aG91c2FuZHMpO1xuICAgICAgfSA6IGQzX2lkZW50aXR5O1xuICAgIHJldHVybiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBtYXRjaCA9IGQzX2Zvcm1hdF9yZS5leGVjKHNwZWNpZmllciksXG4gICAgICAgIGZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIixcbiAgICAgICAgYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIixcbiAgICAgICAgc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiLFxuICAgICAgICBzeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiLFxuICAgICAgICB6ZmlsbCA9IG1hdGNoWzVdLFxuICAgICAgICB3aWR0aCA9ICttYXRjaFs2XSxcbiAgICAgICAgY29tbWEgPSBtYXRjaFs3XSxcbiAgICAgICAgcHJlY2lzaW9uID0gbWF0Y2hbOF0sXG4gICAgICAgIHR5cGUgPSBtYXRjaFs5XSxcbiAgICAgICAgc2NhbGUgPSAxLFxuICAgICAgICBwcmVmaXggPSBcIlwiLFxuICAgICAgICBzdWZmaXggPSBcIlwiLFxuICAgICAgICBpbnRlZ2VyID0gZmFsc2UsXG4gICAgICAgIGV4cG9uZW50ID0gdHJ1ZTtcbiAgICAgIGlmIChwcmVjaXNpb24pIHByZWNpc2lvbiA9ICtwcmVjaXNpb24uc3Vic3RyaW5nKDEpO1xuICAgICAgaWYgKHpmaWxsIHx8IGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikge1xuICAgICAgICB6ZmlsbCA9IGZpbGwgPSBcIjBcIjtcbiAgICAgICAgYWxpZ24gPSBcIj1cIjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiblwiOlxuICAgICAgICAgIGNvbW1hID0gdHJ1ZTtcbiAgICAgICAgICB0eXBlID0gXCJnXCI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIiVcIjpcbiAgICAgICAgICBzY2FsZSA9IDEwMDtcbiAgICAgICAgICBzdWZmaXggPSBcIiVcIjtcbiAgICAgICAgICB0eXBlID0gXCJmXCI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInBcIjpcbiAgICAgICAgICBzY2FsZSA9IDEwMDtcbiAgICAgICAgICBzdWZmaXggPSBcIiVcIjtcbiAgICAgICAgICB0eXBlID0gXCJyXCI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImJcIjpcbiAgICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgICBpZiAoc3ltYm9sID09PSBcIiNcIikgcHJlZml4ID0gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICBleHBvbmVudCA9IGZhbHNlO1xuXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgaW50ZWdlciA9IHRydWU7XG4gICAgICAgICAgcHJlY2lzaW9uID0gMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgIHNjYWxlID0gLTE7XG4gICAgICAgICAgdHlwZSA9IFwiclwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHN5bWJvbCA9PT0gXCIkXCIpIHByZWZpeCA9IGxvY2FsZV9jdXJyZW5jeVswXSwgc3VmZml4ID1cbiAgICAgICAgbG9jYWxlX2N1cnJlbmN5WzFdO1xuICAgICAgaWYgKHR5cGUgPT0gXCJyXCIgJiYgIXByZWNpc2lvbikgdHlwZSA9IFwiZ1wiO1xuICAgICAgaWYgKHByZWNpc2lvbiAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlID09IFwiZ1wiKSBwcmVjaXNpb24gPSBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gXCJlXCIgfHwgdHlwZSA9PSBcImZcIikgcHJlY2lzaW9uID0gTWF0aC5tYXgoMCwgTWF0aFxuICAgICAgICAgIC5taW4oMjAsIHByZWNpc2lvbikpO1xuICAgICAgfVxuICAgICAgdHlwZSA9IGQzX2Zvcm1hdF90eXBlcy5nZXQodHlwZSkgfHwgZDNfZm9ybWF0X3R5cGVEZWZhdWx0O1xuICAgICAgdmFyIHpjb21tYSA9IHpmaWxsICYmIGNvbW1hO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBmdWxsU3VmZml4ID0gc3VmZml4O1xuICAgICAgICBpZiAoaW50ZWdlciAmJiB2YWx1ZSAlIDEpIHJldHVybiBcIlwiO1xuICAgICAgICB2YXIgbmVnYXRpdmUgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IChcbiAgICAgICAgICB2YWx1ZSA9IC12YWx1ZSwgXCItXCIpIDogc2lnbiA9PT0gXCItXCIgPyBcIlwiIDogc2lnbjtcbiAgICAgICAgaWYgKHNjYWxlIDwgMCkge1xuICAgICAgICAgIHZhciB1bml0ID0gZDMuZm9ybWF0UHJlZml4KHZhbHVlLCBwcmVjaXNpb24pO1xuICAgICAgICAgIHZhbHVlID0gdW5pdC5zY2FsZSh2YWx1ZSk7XG4gICAgICAgICAgZnVsbFN1ZmZpeCA9IHVuaXQuc3ltYm9sICsgc3VmZml4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlICo9IHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdHlwZSh2YWx1ZSwgcHJlY2lzaW9uKTtcbiAgICAgICAgdmFyIGkgPSB2YWx1ZS5sYXN0SW5kZXhPZihcIi5cIiksXG4gICAgICAgICAgYmVmb3JlLCBhZnRlcjtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgdmFyIGogPSBleHBvbmVudCA/IHZhbHVlLmxhc3RJbmRleE9mKFwiZVwiKSA6IC0xO1xuICAgICAgICAgIGlmIChqIDwgMCkgYmVmb3JlID0gdmFsdWUsIGFmdGVyID0gXCJcIjtcbiAgICAgICAgICBlbHNlIGJlZm9yZSA9IHZhbHVlLnN1YnN0cmluZygwLCBqKSwgYWZ0ZXIgPSB2YWx1ZS5zdWJzdHJpbmcoXG4gICAgICAgICAgICBqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgaSk7XG4gICAgICAgICAgYWZ0ZXIgPSBsb2NhbGVfZGVjaW1hbCArIHZhbHVlLnN1YnN0cmluZyhpICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF6ZmlsbCAmJiBjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAoYmVmb3JlLCBJbmZpbml0eSk7XG4gICAgICAgIHZhciBsZW5ndGggPSBwcmVmaXgubGVuZ3RoICsgYmVmb3JlLmxlbmd0aCArIGFmdGVyLmxlbmd0aCArIChcbiAgICAgICAgICAgIHpjb21tYSA/IDAgOiBuZWdhdGl2ZS5sZW5ndGgpLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheShsZW5ndGggPSB3aWR0aCAtIGxlbmd0aCArXG4gICAgICAgICAgICAxKS5qb2luKGZpbGwpIDogXCJcIjtcbiAgICAgICAgaWYgKHpjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAocGFkZGluZyArIGJlZm9yZSwgcGFkZGluZy5sZW5ndGggP1xuICAgICAgICAgIHdpZHRoIC0gYWZ0ZXIubGVuZ3RoIDogSW5maW5pdHkpO1xuICAgICAgICBuZWdhdGl2ZSArPSBwcmVmaXg7XG4gICAgICAgIHZhbHVlID0gYmVmb3JlICsgYWZ0ZXI7XG4gICAgICAgIHJldHVybiAoYWxpZ24gPT09IFwiPFwiID8gbmVnYXRpdmUgKyB2YWx1ZSArIHBhZGRpbmcgOiBhbGlnbiA9PT1cbiAgICAgICAgICAgIFwiPlwiID8gcGFkZGluZyArIG5lZ2F0aXZlICsgdmFsdWUgOiBhbGlnbiA9PT0gXCJeXCIgPyBwYWRkaW5nLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgMCwgbGVuZ3RoID4+PSAxKSArIG5lZ2F0aXZlICsgdmFsdWUgKyBwYWRkaW5nLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgbGVuZ3RoKSA6IG5lZ2F0aXZlICsgKHpjb21tYSA/IHZhbHVlIDogcGFkZGluZyArIHZhbHVlKSkgK1xuICAgICAgICAgIGZ1bGxTdWZmaXg7XG4gICAgICB9O1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2Zvcm1hdF9yZSA9XG4gICAgLyg/OihbXntdKT8oWzw+PV5dKSk/KFsrXFwtIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuLT9cXGQrKT8oW2EteiVdKT8vaTtcbiAgdmFyIGQzX2Zvcm1hdF90eXBlcyA9IGQzLm1hcCh7XG4gICAgYjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMik7XG4gICAgfSxcbiAgICBjOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICB9LFxuICAgIG86IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4LnRvU3RyaW5nKDgpO1xuICAgIH0sXG4gICAgeDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpO1xuICAgIH0sXG4gICAgWDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcbiAgICBnOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b1ByZWNpc2lvbihwKTtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uKHgsIHApIHtcbiAgICAgIHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b0ZpeGVkKHApO1xuICAgIH0sXG4gICAgcjogZnVuY3Rpb24oeCwgcCkge1xuICAgICAgcmV0dXJuICh4ID0gZDMucm91bmQoeCwgZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSkpLnRvRml4ZWQoXG4gICAgICAgIE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBkM19mb3JtYXRfcHJlY2lzaW9uKHggKiAoMSArIDFlLTE1KSxcbiAgICAgICAgICBwKSkpKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGQzX2Zvcm1hdF90eXBlRGVmYXVsdCh4KSB7XG4gICAgcmV0dXJuIHggKyBcIlwiO1xuICB9XG4gIHZhciBkM190aW1lID0gZDMudGltZSA9IHt9LFxuICAgIGQzX2RhdGUgPSBEYXRlO1xuXG4gIGZ1bmN0aW9uIGQzX2RhdGVfdXRjKCkge1xuICAgIHRoaXMuXyA9IG5ldyBEYXRlKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gRGF0ZS5VVEMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6XG4gICAgICBhcmd1bWVudHNbMF0pO1xuICB9XG4gIGQzX2RhdGVfdXRjLnByb3RvdHlwZSA9IHtcbiAgICBnZXREYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDRGF0ZSgpO1xuICAgIH0sXG4gICAgZ2V0RGF5OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDRGF5KCk7XG4gICAgfSxcbiAgICBnZXRGdWxsWWVhcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgfSxcbiAgICBnZXRIb3VyczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ0hvdXJzKCk7XG4gICAgfSxcbiAgICBnZXRNaWxsaXNlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB9LFxuICAgIGdldE1pbnV0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENNaW51dGVzKCk7XG4gICAgfSxcbiAgICBnZXRNb250aDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01vbnRoKCk7XG4gICAgfSxcbiAgICBnZXRTZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDU2Vjb25kcygpO1xuICAgIH0sXG4gICAgZ2V0VGltZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFRpbWUoKTtcbiAgICB9LFxuICAgIGdldFRpbWV6b25lT2Zmc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLnZhbHVlT2YoKTtcbiAgICB9LFxuICAgIHNldERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDRGF0ZS5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzZXREYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDRGF5LmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldEZ1bGxZZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ0Z1bGxZZWFyLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldEhvdXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ0hvdXJzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldE1pbGxpc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENNaWxsaXNlY29uZHMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TWludXRlczogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENNaW51dGVzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldE1vbnRoOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01vbnRoLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldFNlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDU2Vjb25kcy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFRpbWUuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGQzX3RpbWVfcHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9pbnRlcnZhbChsb2NhbCwgc3RlcCwgbnVtYmVyKSB7XG4gICAgZnVuY3Rpb24gcm91bmQoZGF0ZSkge1xuICAgICAgdmFyIGQwID0gbG9jYWwoZGF0ZSksXG4gICAgICAgIGQxID0gb2Zmc2V0KGQwLCAxKTtcbiAgICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNlaWwoZGF0ZSkge1xuICAgICAgc3RlcChkYXRlID0gbG9jYWwobmV3IGQzX2RhdGUoZGF0ZSAtIDEpKSwgMSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmZzZXQoZGF0ZSwgaykge1xuICAgICAgc3RlcChkYXRlID0gbmV3IGQzX2RhdGUoK2RhdGUpLCBrKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJhbmdlKHQwLCB0MSwgZHQpIHtcbiAgICAgIHZhciB0aW1lID0gY2VpbCh0MCksXG4gICAgICAgIHRpbWVzID0gW107XG4gICAgICBpZiAoZHQgPiAxKSB7XG4gICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHtcbiAgICAgICAgICBpZiAoIShudW1iZXIodGltZSkgJSBkdCkpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKTtcbiAgICAgICAgICBzdGVwKHRpbWUsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAodGltZSA8IHQxKSB0aW1lcy5wdXNoKG5ldyBEYXRlKCt0aW1lKSksIHN0ZXAodGltZSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGltZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmFuZ2VfdXRjKHQwLCB0MSwgZHQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGQzX2RhdGUgPSBkM19kYXRlX3V0YztcbiAgICAgICAgdmFyIHV0YyA9IG5ldyBkM19kYXRlX3V0YygpO1xuICAgICAgICB1dGMuXyA9IHQwO1xuICAgICAgICByZXR1cm4gcmFuZ2UodXRjLCB0MSwgZHQpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIGxvY2FsLmZsb29yID0gbG9jYWw7XG4gICAgbG9jYWwucm91bmQgPSByb3VuZDtcbiAgICBsb2NhbC5jZWlsID0gY2VpbDtcbiAgICBsb2NhbC5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgbG9jYWwucmFuZ2UgPSByYW5nZTtcbiAgICB2YXIgdXRjID0gbG9jYWwudXRjID0gZDNfdGltZV9pbnRlcnZhbF91dGMobG9jYWwpO1xuICAgIHV0Yy5mbG9vciA9IHV0YztcbiAgICB1dGMucm91bmQgPSBkM190aW1lX2ludGVydmFsX3V0Yyhyb3VuZCk7XG4gICAgdXRjLmNlaWwgPSBkM190aW1lX2ludGVydmFsX3V0YyhjZWlsKTtcbiAgICB1dGMub2Zmc2V0ID0gZDNfdGltZV9pbnRlcnZhbF91dGMob2Zmc2V0KTtcbiAgICB1dGMucmFuZ2UgPSByYW5nZV91dGM7XG4gICAgcmV0dXJuIGxvY2FsO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9pbnRlcnZhbF91dGMobWV0aG9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGQzX2RhdGUgPSBkM19kYXRlX3V0YztcbiAgICAgICAgdmFyIHV0YyA9IG5ldyBkM19kYXRlX3V0YygpO1xuICAgICAgICB1dGMuXyA9IGRhdGU7XG4gICAgICAgIHJldHVybiBtZXRob2QodXRjLCBrKS5fO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkM190aW1lLnllYXIgPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBvZmZzZXQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfSk7XG4gIGQzX3RpbWUueWVhcnMgPSBkM190aW1lLnllYXIucmFuZ2U7XG4gIGQzX3RpbWUueWVhcnMudXRjID0gZDNfdGltZS55ZWFyLnV0Yy5yYW5nZTtcbiAgZDNfdGltZS5kYXkgPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZGF5ID0gbmV3IGQzX2RhdGUoMmUzLCAwKTtcbiAgICBkYXkuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpKTtcbiAgICByZXR1cm4gZGF5O1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBvZmZzZXQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbiAgfSk7XG4gIGQzX3RpbWUuZGF5cyA9IGQzX3RpbWUuZGF5LnJhbmdlO1xuICBkM190aW1lLmRheXMudXRjID0gZDNfdGltZS5kYXkudXRjLnJhbmdlO1xuICBkM190aW1lLmRheU9mWWVhciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgeWVhciA9IGQzX3RpbWUueWVhcihkYXRlKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoZGF0ZSAtIHllYXIgLSAoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpIC0geWVhci5nZXRUaW1lem9uZU9mZnNldCgpKSAqXG4gICAgICA2ZTQpIC8gODY0ZTUpO1xuICB9O1xuICBbXCJzdW5kYXlcIiwgXCJtb25kYXlcIiwgXCJ0dWVzZGF5XCIsIFwid2VkbmVzZGF5XCIsIFwidGh1cnNkYXlcIiwgXCJmcmlkYXlcIixcbiAgICBcInNhdHVyZGF5XCJcbiAgXS5mb3JFYWNoKGZ1bmN0aW9uKGRheSwgaSkge1xuICAgIGkgPSA3IC0gaTtcbiAgICB2YXIgaW50ZXJ2YWwgPSBkM190aW1lW2RheV0gPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIChkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSkpLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArXG4gICAgICAgIGkpICUgNyk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvXG4gICAgICAgIDcpIC0gKGRheSAhPT0gaSk7XG4gICAgfSk7XG4gICAgZDNfdGltZVtkYXkgKyBcInNcIl0gPSBpbnRlcnZhbC5yYW5nZTtcbiAgICBkM190aW1lW2RheSArIFwic1wiXS51dGMgPSBpbnRlcnZhbC51dGMucmFuZ2U7XG4gICAgZDNfdGltZVtkYXkgKyBcIk9mWWVhclwiXSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpO1xuICAgIH07XG4gIH0pO1xuICBkM190aW1lLndlZWsgPSBkM190aW1lLnN1bmRheTtcbiAgZDNfdGltZS53ZWVrcyA9IGQzX3RpbWUuc3VuZGF5LnJhbmdlO1xuICBkM190aW1lLndlZWtzLnV0YyA9IGQzX3RpbWUuc3VuZGF5LnV0Yy5yYW5nZTtcbiAgZDNfdGltZS53ZWVrT2ZZZWFyID0gZDNfdGltZS5zdW5kYXlPZlllYXI7XG5cbiAgZnVuY3Rpb24gZDNfbG9jYWxlX3RpbWVGb3JtYXQobG9jYWxlKSB7XG4gICAgdmFyIGxvY2FsZV9kYXRlVGltZSA9IGxvY2FsZS5kYXRlVGltZSxcbiAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgbG9jYWxlX3BlcmlvZHMgPSBsb2NhbGUucGVyaW9kcyxcbiAgICAgIGxvY2FsZV9kYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnREYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gICAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXQodGVtcGxhdGUpIHtcbiAgICAgIHZhciBuID0gdGVtcGxhdGUubGVuZ3RoO1xuXG4gICAgICBmdW5jdGlvbiBmb3JtYXQoZGF0ZSkge1xuICAgICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIGMsIHAsIGY7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgICBzdHJpbmcucHVzaCh0ZW1wbGF0ZS5zbGljZShqLCBpKSk7XG4gICAgICAgICAgICBpZiAoKHAgPSBkM190aW1lX2Zvcm1hdFBhZHNbYyA9IHRlbXBsYXRlLmNoYXJBdCgrK2kpXSkgIT0gbnVsbClcbiAgICAgICAgICAgICAgYyA9IHRlbXBsYXRlLmNoYXJBdCgrK2kpO1xuICAgICAgICAgICAgaWYgKGYgPSBkM190aW1lX2Zvcm1hdHNbY10pIGMgPSBmKGRhdGUsIHAgPT0gbnVsbCA/IGMgPT09IFwiZVwiID9cbiAgICAgICAgICAgICAgXCIgXCIgOiBcIjBcIiA6IHApO1xuICAgICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0cmluZy5wdXNoKHRlbXBsYXRlLnNsaWNlKGosIGkpKTtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgICAgfVxuICAgICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHZhciBkID0ge1xuICAgICAgICAgICAgeTogMTkwMCxcbiAgICAgICAgICAgIG06IDAsXG4gICAgICAgICAgICBkOiAxLFxuICAgICAgICAgICAgSDogMCxcbiAgICAgICAgICAgIE06IDAsXG4gICAgICAgICAgICBTOiAwLFxuICAgICAgICAgICAgTDogMCxcbiAgICAgICAgICAgIFo6IG51bGxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGkgPSBkM190aW1lX3BhcnNlKGQsIHRlbXBsYXRlLCBzdHJpbmcsIDApO1xuICAgICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG4gICAgICAgIHZhciBsb2NhbFogPSBkLlogIT0gbnVsbCAmJiBkM19kYXRlICE9PSBkM19kYXRlX3V0YyxcbiAgICAgICAgICBkYXRlID0gbmV3KGxvY2FsWiA/IGQzX2RhdGVfdXRjIDogZDNfZGF0ZSkoKTtcbiAgICAgICAgaWYgKFwialwiIGluIGQpIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCBkLmopO1xuICAgICAgICBlbHNlIGlmIChcIndcIiBpbiBkICYmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpKSB7XG4gICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIDEpO1xuICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoXG4gICAgICAgICAgICBkYXRlLmdldERheSgpICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXRlLmdldERheSgpICtcbiAgICAgICAgICAgIDYpICUgNyk7XG4gICAgICAgIH0gZWxzZSBkYXRlLnNldEZ1bGxZZWFyKGQueSwgZC5tLCBkLmQpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKGQuSCArIChkLlogLyAxMDAgfCAwKSwgZC5NICsgZC5aICUgMTAwLCBkLlMsIGQuTCk7XG4gICAgICAgIHJldHVybiBsb2NhbFogPyBkYXRlLl8gOiBkYXRlO1xuICAgICAgfTtcbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlKGRhdGUsIHRlbXBsYXRlLCBzdHJpbmcsIGopIHtcbiAgICAgIHZhciBjLCBwLCB0LCBpID0gMCxcbiAgICAgICAgbiA9IHRlbXBsYXRlLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgICBjID0gdGVtcGxhdGUuY2hhckNvZGVBdChpKyspO1xuICAgICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgICB0ID0gdGVtcGxhdGUuY2hhckF0KGkrKyk7XG4gICAgICAgICAgcCA9IGQzX3RpbWVfcGFyc2Vyc1t0IGluIGQzX3RpbWVfZm9ybWF0UGFkcyA/IHRlbXBsYXRlLmNoYXJBdChpKyspIDpcbiAgICAgICAgICAgIHRdO1xuICAgICAgICAgIGlmICghcCB8fCAoaiA9IHAoZGF0ZSwgc3RyaW5nLCBqKSkgPCAwKSByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gajtcbiAgICB9XG4gICAgZDNfdGltZV9mb3JtYXQudXRjID0gZnVuY3Rpb24odGVtcGxhdGUpIHtcbiAgICAgIHZhciBsb2NhbCA9IGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKTtcblxuICAgICAgZnVuY3Rpb24gZm9ybWF0KGRhdGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG4gICAgICAgICAgdmFyIHV0YyA9IG5ldyBkM19kYXRlKCk7XG4gICAgICAgICAgdXRjLl8gPSBkYXRlO1xuICAgICAgICAgIHJldHVybiBsb2NhbCh1dGMpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3JtYXQucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG4gICAgICAgICAgdmFyIGRhdGUgPSBsb2NhbC5wYXJzZShzdHJpbmcpO1xuICAgICAgICAgIHJldHVybiBkYXRlICYmIGRhdGUuXztcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGxvY2FsLnRvU3RyaW5nO1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9O1xuICAgIGQzX3RpbWVfZm9ybWF0Lm11bHRpID0gZDNfdGltZV9mb3JtYXQudXRjLm11bHRpID0gZDNfdGltZV9mb3JtYXRNdWx0aTtcbiAgICB2YXIgZDNfdGltZV9wZXJpb2RMb29rdXAgPSBkMy5tYXAoKSxcbiAgICAgIGQzX3RpbWVfZGF5UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9kYXlzKSxcbiAgICAgIGQzX3RpbWVfZGF5TG9va3VwID0gZDNfdGltZV9mb3JtYXRMb29rdXAobG9jYWxlX2RheXMpLFxuICAgICAgZDNfdGltZV9kYXlBYmJyZXZSZSA9IGQzX3RpbWVfZm9ybWF0UmUobG9jYWxlX3Nob3J0RGF5cyksXG4gICAgICBkM190aW1lX2RheUFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydERheXMpLFxuICAgICAgZDNfdGltZV9tb250aFJlID0gZDNfdGltZV9mb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIGQzX3RpbWVfbW9udGhMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcbiAgICAgIGQzX3RpbWVfbW9udGhBYmJyZXZSZSA9IGQzX3RpbWVfZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIGQzX3RpbWVfbW9udGhBYmJyZXZMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuICAgIGxvY2FsZV9wZXJpb2RzLmZvckVhY2goZnVuY3Rpb24ocCwgaSkge1xuICAgICAgZDNfdGltZV9wZXJpb2RMb29rdXAuc2V0KHAudG9Mb3dlckNhc2UoKSwgaSk7XG4gICAgfSk7XG4gICAgdmFyIGQzX3RpbWVfZm9ybWF0cyA9IHtcbiAgICAgIGE6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZV9zaG9ydERheXNbZC5nZXREYXkoKV07XG4gICAgICB9LFxuICAgICAgQTogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX2RheXNbZC5nZXREYXkoKV07XG4gICAgICB9LFxuICAgICAgYjogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgICB9LFxuICAgICAgQjogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICAgICAgfSxcbiAgICAgIGM6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV9kYXRlVGltZSksXG4gICAgICBkOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgZTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXREYXRlKCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIEg6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgSTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIGo6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKDEgKyBkM190aW1lLmRheU9mWWVhcihkKSwgcCwgMyk7XG4gICAgICB9LFxuICAgICAgTDogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG4gICAgICB9LFxuICAgICAgbTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgTTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHA6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gICAgICB9LFxuICAgICAgUzogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIFU6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQzX3RpbWUuc3VuZGF5T2ZZZWFyKGQpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICB3OiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLmdldERheSgpO1xuICAgICAgfSxcbiAgICAgIFc6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQzX3RpbWUubW9uZGF5T2ZZZWFyKGQpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICB4OiBkM190aW1lX2Zvcm1hdChsb2NhbGVfZGF0ZSksXG4gICAgICBYOiBkM190aW1lX2Zvcm1hdChsb2NhbGVfdGltZSksXG4gICAgICB5OiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIFk6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RnVsbFllYXIoKSAlIDFlNCwgcCwgNCk7XG4gICAgICB9LFxuICAgICAgWjogZDNfdGltZV96b25lLFxuICAgICAgXCIlXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCIlXCI7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgZDNfdGltZV9wYXJzZXJzID0ge1xuICAgICAgYTogZDNfdGltZV9wYXJzZVdlZWtkYXlBYmJyZXYsXG4gICAgICBBOiBkM190aW1lX3BhcnNlV2Vla2RheSxcbiAgICAgIGI6IGQzX3RpbWVfcGFyc2VNb250aEFiYnJldixcbiAgICAgIEI6IGQzX3RpbWVfcGFyc2VNb250aCxcbiAgICAgIGM6IGQzX3RpbWVfcGFyc2VMb2NhbGVGdWxsLFxuICAgICAgZDogZDNfdGltZV9wYXJzZURheSxcbiAgICAgIGU6IGQzX3RpbWVfcGFyc2VEYXksXG4gICAgICBIOiBkM190aW1lX3BhcnNlSG91cjI0LFxuICAgICAgSTogZDNfdGltZV9wYXJzZUhvdXIyNCxcbiAgICAgIGo6IGQzX3RpbWVfcGFyc2VEYXlPZlllYXIsXG4gICAgICBMOiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzLFxuICAgICAgbTogZDNfdGltZV9wYXJzZU1vbnRoTnVtYmVyLFxuICAgICAgTTogZDNfdGltZV9wYXJzZU1pbnV0ZXMsXG4gICAgICBwOiBkM190aW1lX3BhcnNlQW1QbSxcbiAgICAgIFM6IGQzX3RpbWVfcGFyc2VTZWNvbmRzLFxuICAgICAgVTogZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgICB3OiBkM190aW1lX3BhcnNlV2Vla2RheU51bWJlcixcbiAgICAgIFc6IGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgICAgeDogZDNfdGltZV9wYXJzZUxvY2FsZURhdGUsXG4gICAgICBYOiBkM190aW1lX3BhcnNlTG9jYWxlVGltZSxcbiAgICAgIHk6IGQzX3RpbWVfcGFyc2VZZWFyLFxuICAgICAgWTogZDNfdGltZV9wYXJzZUZ1bGxZZWFyLFxuICAgICAgWjogZDNfdGltZV9wYXJzZVpvbmUsXG4gICAgICBcIiVcIjogZDNfdGltZV9wYXJzZUxpdGVyYWxQZXJjZW50XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheUFiYnJldlJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5QWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtkYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICBkM190aW1lX2RheVJlLmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZGF0ZS53ID0gZDNfdGltZV9kYXlMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuW1xuICAgICAgICAwXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9tb250aEFiYnJldlJlLmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfbW9udGhBYmJyZXZSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkYXRlLm0gPSBkM190aW1lX21vbnRoQWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1vbnRoKGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9tb250aFJlLmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkYXRlLm0gPSBkM190aW1lX21vbnRoTG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICtcbiAgICAgICAgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMuYy50b1N0cmluZygpLCBzdHJpbmcsIGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVEYXRlKGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLngudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlVGltZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy5YLnRvU3RyaW5nKCksIHN0cmluZywgaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUFtUG0oZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfcGVyaW9kTG9va3VwLmdldChzdHJpbmcuc2xpY2UoaSwgaSArPSAyKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIHJldHVybiBuID09IG51bGwgPyAtMSA6IChkYXRlLnAgPSBuLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0O1xuICB9XG4gIHZhciBkM190aW1lX2Zvcm1hdFBhZHMgPSB7XG4gICAgICBcIi1cIjogXCJcIixcbiAgICAgIF86IFwiIFwiLFxuICAgICAgXCIwXCI6IFwiMFwiXG4gICAgfSxcbiAgICBkM190aW1lX251bWJlclJlID0gL15cXHMqXFxkKy8sXG4gICAgZDNfdGltZV9wZXJjZW50UmUgPSAvXiUvO1xuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0UGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICAgIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgK1xuICAgICAgc3RyaW5nIDogc3RyaW5nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0UmUobmFtZXMpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChkMy5yZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdExvb2t1cChuYW1lcykge1xuICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCksXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KG5hbWVzW2ldLnRvTG93ZXJDYXNlKCksIGkpO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlV2Vla2RheU51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGRhdGUuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlV2Vla051bWJlck1vbmRheShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUZ1bGxZZWFyKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9IGQzX3RpbWVfZXhwYW5kWWVhcigrblswXSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2Vab25lKGRhdGUsIHN0cmluZywgaSkge1xuICAgIHJldHVybiAvXlsrLV1cXGR7NH0kLy50ZXN0KHN0cmluZyA9IHN0cmluZy5zbGljZShpLCBpICsgNSkpID8gKGRhdGUuWiA9IC1cbiAgICAgIHN0cmluZyxcbiAgICAgIGkgKyA1KSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9leHBhbmRZZWFyKGQpIHtcbiAgICByZXR1cm4gZCArIChkID4gNjggPyAxOTAwIDogMmUzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aE51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VEYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGRhdGUuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRGF5T2ZZZWFyKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLmogPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUhvdXIyNChkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNaW51dGVzKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVNlY29uZHMoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGRhdGUuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV96b25lKGQpIHtcbiAgICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKSxcbiAgICAgIHpzID0geiA+IDAgPyBcIi1cIiA6IFwiK1wiLFxuICAgICAgemggPSBhYnMoeikgLyA2MCB8IDAsXG4gICAgICB6bSA9IGFicyh6KSAlIDYwO1xuICAgIHJldHVybiB6cyArIGQzX3RpbWVfZm9ybWF0UGFkKHpoLCBcIjBcIiwgMikgKyBkM190aW1lX2Zvcm1hdFBhZCh6bSwgXCIwXCIsXG4gICAgICAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMaXRlcmFsUGVyY2VudChkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX3BlcmNlbnRSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9wZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRNdWx0aShmb3JtYXRzKSB7XG4gICAgdmFyIG4gPSBmb3JtYXRzLmxlbmd0aCxcbiAgICAgIGkgPSAtMTtcbiAgICB3aGlsZSAoKytpIDwgbikgZm9ybWF0c1tpXVswXSA9IHRoaXMoZm9ybWF0c1tpXVswXSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgZiA9IGZvcm1hdHNbaV07XG4gICAgICB3aGlsZSAoIWZbMV0oZGF0ZSkpIGYgPSBmb3JtYXRzWysraV07XG4gICAgICByZXR1cm4gZlswXShkYXRlKTtcbiAgICB9O1xuICB9XG4gIGQzLmxvY2FsZSA9IGZ1bmN0aW9uKGxvY2FsZSkge1xuICAgIHJldHVybiB7XG4gICAgICBudW1iZXJGb3JtYXQ6IGQzX2xvY2FsZV9udW1iZXJGb3JtYXQobG9jYWxlKSxcbiAgICAgIHRpbWVGb3JtYXQ6IGQzX2xvY2FsZV90aW1lRm9ybWF0KGxvY2FsZSlcbiAgICB9O1xuICB9O1xuICB2YXIgZDNfbG9jYWxlX2VuVVMgPSBkMy5sb2NhbGUoe1xuICAgIGRlY2ltYWw6IFwiLlwiLFxuICAgIHRob3VzYW5kczogXCIsXCIsXG4gICAgZ3JvdXBpbmc6IFszXSxcbiAgICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXSxcbiAgICBkYXRlVGltZTogXCIlYSAlYiAlZSAlWCAlWVwiLFxuICAgIGRhdGU6IFwiJW0vJWQvJVlcIixcbiAgICB0aW1lOiBcIiVIOiVNOiVTXCIsXG4gICAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIixcbiAgICAgIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIlxuICAgIF0sXG4gICAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gICAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLFxuICAgICAgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsXG4gICAgICBcIkRlY2VtYmVyXCJcbiAgICBdLFxuICAgIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIixcbiAgICAgIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJcbiAgICBdXG4gIH0pO1xuICBkMy5mb3JtYXQgPSBkM19sb2NhbGVfZW5VUy5udW1iZXJGb3JtYXQ7XG4gIGQzLmdlbyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGQzX2FkZGVyKCkge31cbiAgZDNfYWRkZXIucHJvdG90eXBlID0ge1xuICAgIHM6IDAsXG4gICAgdDogMCxcbiAgICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIGQzX2FkZGVyU3VtKHksIHRoaXMudCwgZDNfYWRkZXJUZW1wKTtcbiAgICAgIGQzX2FkZGVyU3VtKGQzX2FkZGVyVGVtcC5zLCB0aGlzLnMsIHRoaXMpO1xuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IGQzX2FkZGVyVGVtcC50O1xuICAgICAgZWxzZSB0aGlzLnMgPSBkM19hZGRlclRlbXAudDtcbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucyA9IHRoaXMudCA9IDA7XG4gICAgfSxcbiAgICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnM7XG4gICAgfVxuICB9O1xuICB2YXIgZDNfYWRkZXJUZW1wID0gbmV3IGQzX2FkZGVyKCk7XG5cbiAgZnVuY3Rpb24gZDNfYWRkZXJTdW0oYSwgYiwgbykge1xuICAgIHZhciB4ID0gby5zID0gYSArIGIsXG4gICAgICBidiA9IHggLSBhLFxuICAgICAgYXYgPSB4IC0gYnY7XG4gICAgby50ID0gYSAtIGF2ICsgKGIgLSBidik7XG4gIH1cbiAgZDMuZ2VvLnN0cmVhbSA9IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICBpZiAob2JqZWN0ICYmIGQzX2dlb19zdHJlYW1PYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKSkge1xuICAgICAgZDNfZ2VvX3N0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgbGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2dlb19zdHJlYW1HZW9tZXRyeShnZW9tZXRyeSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoZ2VvbWV0cnkgJiYgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKSkge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuICB2YXIgZDNfZ2VvX3N0cmVhbU9iamVjdFR5cGUgPSB7XG4gICAgRmVhdHVyZTogZnVuY3Rpb24oZmVhdHVyZSwgbGlzdGVuZXIpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1HZW9tZXRyeShmZWF0dXJlLmdlb21ldHJ5LCBsaXN0ZW5lcik7XG4gICAgfSxcbiAgICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGZlYXR1cmVzW2ldLmdlb21ldHJ5LFxuICAgICAgICBsaXN0ZW5lcik7XG4gICAgfVxuICB9O1xuICB2YXIgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZSA9IHtcbiAgICBTcGhlcmU6IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyLnNwaGVyZSgpO1xuICAgIH0sXG4gICAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICAgIGxpc3RlbmVyLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICAgIH0sXG4gICAgTXVsdGlQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgb2JqZWN0ID0gY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLnBvaW50KG9iamVjdFswXSxcbiAgICAgICAgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICAgIH0sXG4gICAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgZDNfZ2VvX3N0cmVhbUxpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBsaXN0ZW5lciwgMCk7XG4gICAgfSxcbiAgICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcyxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGQzX2dlb19zdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBsaXN0ZW5lciwgMCk7XG4gICAgfSxcbiAgICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICBkM19nZW9fc3RyZWFtUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcyxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGdlb21ldHJpZXNbaV0sIGxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCBjbG9zZWQpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aCAtIGNsb3NlZCxcbiAgICAgIGNvb3JkaW5hdGU7XG4gICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGNvb3JkaW5hdGUgPSBjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIucG9pbnQoY29vcmRpbmF0ZVtcbiAgICAgIDBdLCBjb29yZGluYXRlWzFdLCBjb29yZGluYXRlWzJdKTtcbiAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgbGlzdGVuZXIpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKTtcbiAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLCAxKTtcbiAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gIH1cbiAgZDMuZ2VvLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBkM19nZW9fYXJlYVN1bSA9IDA7XG4gICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGQzX2dlb19hcmVhKTtcbiAgICByZXR1cm4gZDNfZ2VvX2FyZWFTdW07XG4gIH07XG4gIHZhciBkM19nZW9fYXJlYVN1bSwgZDNfZ2VvX2FyZWFSaW5nU3VtID0gbmV3IGQzX2FkZGVyKCk7XG4gIHZhciBkM19nZW9fYXJlYSA9IHtcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2FyZWFTdW0gKz0gNCAqIM+AO1xuICAgIH0sXG4gICAgcG9pbnQ6IGQzX25vb3AsXG4gICAgbGluZVN0YXJ0OiBkM19ub29wLFxuICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19hcmVhUmluZ1N1bS5yZXNldCgpO1xuICAgICAgZDNfZ2VvX2FyZWEubGluZVN0YXJ0ID0gZDNfZ2VvX2FyZWFSaW5nU3RhcnQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmVhID0gMiAqIGQzX2dlb19hcmVhUmluZ1N1bTtcbiAgICAgIGQzX2dlb19hcmVhU3VtICs9IGFyZWEgPCAwID8gNCAqIM+AICsgYXJlYSA6IGFyZWE7XG4gICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQgPSBkM19nZW9fYXJlYS5saW5lRW5kID0gZDNfZ2VvX2FyZWEucG9pbnQgPVxuICAgICAgICBkM19ub29wO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fYXJlYVJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgzrswLCBjb3PPhjAsIHNpbs+GMDtcbiAgICBkM19nZW9fYXJlYS5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgZDNfZ2VvX2FyZWEucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICDOuzAgPSAozrswMCA9IM67KSAqIGQzX3JhZGlhbnMsIGNvc8+GMCA9IE1hdGguY29zKM+GID0gKM+GMDAgPSDPhikgKlxuICAgICAgICAgIGQzX3JhZGlhbnMgLyAyICsgz4AgLyA0KSxcbiAgICAgICAgc2luz4YwID0gTWF0aC5zaW4oz4YpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQozrssIM+GKSB7XG4gICAgICDOuyAqPSBkM19yYWRpYW5zO1xuICAgICAgz4YgPSDPhiAqIGQzX3JhZGlhbnMgLyAyICsgz4AgLyA0O1xuICAgICAgdmFyIGTOuyA9IM67IC0gzrswLFxuICAgICAgICBzZM67ID0gZM67ID49IDAgPyAxIDogLTEsXG4gICAgICAgIGFkzrsgPSBzZM67ICogZM67LFxuICAgICAgICBjb3PPhiA9IE1hdGguY29zKM+GKSxcbiAgICAgICAgc2luz4YgPSBNYXRoLnNpbijPhiksXG4gICAgICAgIGsgPSBzaW7PhjAgKiBzaW7PhixcbiAgICAgICAgdSA9IGNvc8+GMCAqIGNvc8+GICsgayAqIE1hdGguY29zKGFkzrspLFxuICAgICAgICB2ID0gayAqIHNkzrsgKiBNYXRoLnNpbihhZM67KTtcbiAgICAgIGQzX2dlb19hcmVhUmluZ1N1bS5hZGQoTWF0aC5hdGFuMih2LCB1KSk7XG4gICAgICDOuzAgPSDOuywgY29zz4YwID0gY29zz4YsIHNpbs+GMCA9IHNpbs+GO1xuICAgIH1cbiAgICBkM19nZW9fYXJlYS5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBuZXh0UG9pbnQozrswMCwgz4YwMCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gICAgdmFyIM67ID0gc3BoZXJpY2FsWzBdLFxuICAgICAgz4YgPSBzcGhlcmljYWxbMV0sXG4gICAgICBjb3PPhiA9IE1hdGguY29zKM+GKTtcbiAgICByZXR1cm4gW2Nvc8+GICogTWF0aC5jb3MozrspLCBjb3PPhiAqIE1hdGguc2luKM67KSwgTWF0aC5zaW4oz4YpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoYSwgYikge1xuICAgIHJldHVybiBbYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbXG4gICAgICAxXSAtIGFbMV0gKiBiWzBdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5BZGQoYSwgYikge1xuICAgIGFbMF0gKz0gYlswXTtcbiAgICBhWzFdICs9IGJbMV07XG4gICAgYVsyXSArPSBiWzJdO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICAgIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGQpIHtcbiAgICB2YXIgbCA9IE1hdGguc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICAgIGRbMF0gLz0gbDtcbiAgICBkWzFdIC89IGw7XG4gICAgZFsyXSAvPSBsO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3NwaGVyaWNhbChjYXJ0ZXNpYW4pIHtcbiAgICByZXR1cm4gW01hdGguYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pLCBkM19hc2luKGNhcnRlc2lhblsyXSldO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IM61ICYmIGFicyhhWzFdIC0gYlsxXSkgPCDOtTtcbiAgfVxuICBkMy5nZW8uYm91bmRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIM67MCwgz4YwLCDOuzEsIM+GMSwgzrtfLCDOu19fLCDPhl9fLCBwMCwgZM67U3VtLCByYW5nZXMsIHJhbmdlO1xuICAgIHZhciBib3VuZCA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGJvdW5kLnBvaW50ID0gcmluZ1BvaW50O1xuICAgICAgICBib3VuZC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgIGJvdW5kLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICBkzrtTdW0gPSAwO1xuICAgICAgICBkM19nZW9fYXJlYS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgZDNfZ2VvX2FyZWEucG9seWdvbkVuZCgpO1xuICAgICAgICBib3VuZC5wb2ludCA9IHBvaW50O1xuICAgICAgICBib3VuZC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgIGJvdW5kLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBpZiAoZDNfZ2VvX2FyZWFSaW5nU3VtIDwgMCkgzrswID0gLSjOuzEgPSAxODApLCDPhjAgPSAtKM+GMSA9IDkwKTtcbiAgICAgICAgZWxzZSBpZiAoZM67U3VtID4gzrUpIM+GMSA9IDkwO1xuICAgICAgICBlbHNlIGlmIChkzrtTdW0gPCAtzrUpIM+GMCA9IC05MDtcbiAgICAgICAgcmFuZ2VbMF0gPSDOuzAsIHJhbmdlWzFdID0gzrsxO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCjOuywgz4YpIHtcbiAgICAgIHJhbmdlcy5wdXNoKHJhbmdlID0gW867MCA9IM67LCDOuzEgPSDOu10pO1xuICAgICAgaWYgKM+GIDwgz4YwKSDPhjAgPSDPhjtcbiAgICAgIGlmICjPhiA+IM+GMSkgz4YxID0gz4Y7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KM67LCDPhikge1xuICAgICAgdmFyIHAgPSBkM19nZW9fY2FydGVzaWFuKFvOuyAqIGQzX3JhZGlhbnMsIM+GICogZDNfcmFkaWFuc10pO1xuICAgICAgaWYgKHAwKSB7XG4gICAgICAgIHZhciBub3JtYWwgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MocDAsIHApLFxuICAgICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgICBpbmZsZWN0aW9uID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoaW5mbGVjdGlvbik7XG4gICAgICAgIGluZmxlY3Rpb24gPSBkM19nZW9fc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgICAgICB2YXIgZM67ID0gzrsgLSDOu18sXG4gICAgICAgICAgcyA9IGTOuyA+IDAgPyAxIDogLTEsXG4gICAgICAgICAgzrtpID0gaW5mbGVjdGlvblswXSAqIGQzX2RlZ3JlZXMgKiBzLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkzrspID4gMTgwO1xuICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gKHMgKiDOu18gPCDOu2kgJiYgzrtpIDwgcyAqIM67KSkge1xuICAgICAgICAgIHZhciDPhmkgPSBpbmZsZWN0aW9uWzFdICogZDNfZGVncmVlcztcbiAgICAgICAgICBpZiAoz4ZpID4gz4YxKSDPhjEgPSDPhmk7XG4gICAgICAgIH0gZWxzZSBpZiAozrtpID0gKM67aSArIDM2MCkgJSAzNjAgLSAxODAsIGFudGltZXJpZGlhbiBeIChzICogzrtfIDxcbiAgICAgICAgICAgIM67aSAmJiDOu2kgPCBzICogzrspKSB7XG4gICAgICAgICAgdmFyIM+GaSA9IC1pbmZsZWN0aW9uWzFdICogZDNfZGVncmVlcztcbiAgICAgICAgICBpZiAoz4ZpIDwgz4YwKSDPhjAgPSDPhmk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKM+GIDwgz4YwKSDPhjAgPSDPhjtcbiAgICAgICAgICBpZiAoz4YgPiDPhjEpIM+GMSA9IM+GO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbnRpbWVyaWRpYW4pIHtcbiAgICAgICAgICBpZiAozrsgPCDOu18pIHtcbiAgICAgICAgICAgIGlmIChhbmdsZSjOuzAsIM67KSA+IGFuZ2xlKM67MCwgzrsxKSkgzrsxID0gzrs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhbmdsZSjOuywgzrsxKSA+IGFuZ2xlKM67MCwgzrsxKSkgzrswID0gzrs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICjOuzEgPj0gzrswKSB7XG4gICAgICAgICAgICBpZiAozrsgPCDOuzApIM67MCA9IM67O1xuICAgICAgICAgICAgaWYgKM67ID4gzrsxKSDOuzEgPSDOuztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKM67ID4gzrtfKSB7XG4gICAgICAgICAgICAgIGlmIChhbmdsZSjOuzAsIM67KSA+IGFuZ2xlKM67MCwgzrsxKSkgzrsxID0gzrs7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoYW5nbGUozrssIM67MSkgPiBhbmdsZSjOuzAsIM67MSkpIM67MCA9IM67O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9pbnQozrssIM+GKTtcbiAgICAgIH1cbiAgICAgIHAwID0gcCwgzrtfID0gzrs7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgYm91bmQucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIGJvdW5kLnBvaW50ID0gcG9pbnQ7XG4gICAgICBwMCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1BvaW50KM67LCDPhikge1xuICAgICAgaWYgKHAwKSB7XG4gICAgICAgIHZhciBkzrsgPSDOuyAtIM67XztcbiAgICAgICAgZM67U3VtICs9IGFicyhkzrspID4gMTgwID8gZM67ICsgKGTOuyA+IDAgPyAzNjAgOiAtMzYwKSA6IGTOuztcbiAgICAgIH0gZWxzZSDOu19fID0gzrssIM+GX18gPSDPhjtcbiAgICAgIGQzX2dlb19hcmVhLnBvaW50KM67LCDPhik7XG4gICAgICBsaW5lUG9pbnQozrssIM+GKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmluZ1BvaW50KM67X18sIM+GX18pO1xuICAgICAgZDNfZ2VvX2FyZWEubGluZUVuZCgpO1xuICAgICAgaWYgKGFicyhkzrtTdW0pID4gzrUpIM67MCA9IC0ozrsxID0gMTgwKTtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIHAwID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhbmdsZSjOuzAsIM67MSkge1xuICAgICAgcmV0dXJuICjOuzEgLT0gzrswKSA8IDAgPyDOuzEgKyAzNjAgOiDOuzE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGFyZVJhbmdlcyhhLCBiKSB7XG4gICAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2l0aGluUmFuZ2UoeCwgcmFuZ2UpIHtcbiAgICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPFxuICAgICAgICByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICDPhjEgPSDOuzEgPSAtKM67MCA9IM+GMCA9IEluZmluaXR5KTtcbiAgICAgIHJhbmdlcyA9IFtdO1xuICAgICAgZDMuZ2VvLnN0cmVhbShmZWF0dXJlLCBib3VuZCk7XG4gICAgICB2YXIgbiA9IHJhbmdlcy5sZW5ndGg7XG4gICAgICBpZiAobikge1xuICAgICAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGEgPSByYW5nZXNbMF0sIGIsIG1lcmdlZCA9IFthXTsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICAgICAgaWYgKHdpdGhpblJhbmdlKGJbMF0sIGEpIHx8IHdpdGhpblJhbmdlKGJbMV0sIGEpKSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUoYVswXSwgYlsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVsxXSA9IGJbMV07XG4gICAgICAgICAgICBpZiAoYW5nbGUoYlswXSwgYVsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVswXSA9IGJbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lcmdlZC5wdXNoKGEgPSBiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJlc3QgPSAtSW5maW5pdHksXG4gICAgICAgICAgZM67O1xuICAgICAgICBmb3IgKHZhciBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dLCBiOyBpIDw9IG47IGEgPVxuICAgICAgICAgIGIsICsraSkge1xuICAgICAgICAgIGIgPSBtZXJnZWRbaV07XG4gICAgICAgICAgaWYgKChkzrsgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBiZXN0KSBiZXN0ID0gZM67LCDOuzAgPSBiWzBdLCDOuzEgPVxuICAgICAgICAgICAgYVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmFuZ2VzID0gcmFuZ2UgPSBudWxsO1xuICAgICAgcmV0dXJuIM67MCA9PT0gSW5maW5pdHkgfHwgz4YwID09PSBJbmZpbml0eSA/IFtcbiAgICAgICAgW05hTiwgTmFOXSxcbiAgICAgICAgW05hTiwgTmFOXVxuICAgICAgXSA6IFtcbiAgICAgICAgW867MCwgz4YwXSxcbiAgICAgICAgW867MSwgz4YxXVxuICAgICAgXTtcbiAgICB9O1xuICB9KCk7XG4gIGQzLmdlby5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19jZW50cm9pZFcwID0gZDNfZ2VvX2NlbnRyb2lkVzEgPSBkM19nZW9fY2VudHJvaWRYMCA9XG4gICAgICBkM19nZW9fY2VudHJvaWRZMCA9IGQzX2dlb19jZW50cm9pZFowID0gZDNfZ2VvX2NlbnRyb2lkWDEgPVxuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgPSBkM19nZW9fY2VudHJvaWRaMSA9IGQzX2dlb19jZW50cm9pZFgyID1cbiAgICAgIGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBkM19nZW9fY2VudHJvaWQpO1xuICAgIHZhciB4ID0gZDNfZ2VvX2NlbnRyb2lkWDIsXG4gICAgICB5ID0gZDNfZ2VvX2NlbnRyb2lkWTIsXG4gICAgICB6ID0gZDNfZ2VvX2NlbnRyb2lkWjIsXG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIGlmIChtIDwgzrUyKSB7XG4gICAgICB4ID0gZDNfZ2VvX2NlbnRyb2lkWDEsIHkgPSBkM19nZW9fY2VudHJvaWRZMSwgeiA9IGQzX2dlb19jZW50cm9pZFoxO1xuICAgICAgaWYgKGQzX2dlb19jZW50cm9pZFcxIDwgzrUpIHggPSBkM19nZW9fY2VudHJvaWRYMCwgeSA9XG4gICAgICAgIGQzX2dlb19jZW50cm9pZFkwLCB6ID0gZDNfZ2VvX2NlbnRyb2lkWjA7XG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgICAgaWYgKG0gPCDOtTIpIHJldHVybiBbTmFOLCBOYU5dO1xuICAgIH1cbiAgICByZXR1cm4gW01hdGguYXRhbjIoeSwgeCkgKiBkM19kZWdyZWVzLCBkM19hc2luKHogLyBNYXRoLnNxcnQobSkpICpcbiAgICAgIGQzX2RlZ3JlZXNcbiAgICBdO1xuICB9O1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkVzAsIGQzX2dlb19jZW50cm9pZFcxLCBkM19nZW9fY2VudHJvaWRYMCxcbiAgICBkM19nZW9fY2VudHJvaWRZMCwgZDNfZ2VvX2NlbnRyb2lkWjAsIGQzX2dlb19jZW50cm9pZFgxLFxuICAgIGQzX2dlb19jZW50cm9pZFkxLCBkM19nZW9fY2VudHJvaWRaMSwgZDNfZ2VvX2NlbnRyb2lkWDIsXG4gICAgZDNfZ2VvX2NlbnRyb2lkWTIsIGQzX2dlb19jZW50cm9pZFoyO1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkID0ge1xuICAgIHNwaGVyZTogZDNfbm9vcCxcbiAgICBwb2ludDogZDNfZ2VvX2NlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZFJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZExpbmVTdGFydDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NlbnRyb2lkUG9pbnQozrssIM+GKSB7XG4gICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcbiAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWihjb3PPhiAqIE1hdGguY29zKM67KSwgY29zz4YgKiBNYXRoLnNpbijOuyksIE1hdGguc2luKFxuICAgICAgz4YpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgsIHksIHopIHtcbiAgICArK2QzX2dlb19jZW50cm9pZFcwO1xuICAgIGQzX2dlb19jZW50cm9pZFgwICs9ICh4IC0gZDNfZ2VvX2NlbnRyb2lkWDApIC8gZDNfZ2VvX2NlbnRyb2lkVzA7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWTAgKz0gKHkgLSBkM19nZW9fY2VudHJvaWRZMCkgLyBkM19nZW9fY2VudHJvaWRXMDtcbiAgICBkM19nZW9fY2VudHJvaWRaMCArPSAoeiAtIGQzX2dlb19jZW50cm9pZFowKSAvIGQzX2dlb19jZW50cm9pZFcwO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NlbnRyb2lkTGluZVN0YXJ0KCkge1xuICAgIHZhciB4MCwgeTAsIHowO1xuICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpO1xuICAgICAgeDAgPSBjb3PPhiAqIE1hdGguY29zKM67KTtcbiAgICAgIHkwID0gY29zz4YgKiBNYXRoLnNpbijOuyk7XG4gICAgICB6MCA9IE1hdGguc2luKM+GKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQozrssIM+GKSB7XG4gICAgICDOuyAqPSBkM19yYWRpYW5zO1xuICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyksXG4gICAgICAgIHggPSBjb3PPhiAqIE1hdGguY29zKM67KSxcbiAgICAgICAgeSA9IGNvc8+GICogTWF0aC5zaW4ozrspLFxuICAgICAgICB6ID0gTWF0aC5zaW4oz4YpLFxuICAgICAgICB3ID0gTWF0aC5hdGFuMihNYXRoLnNxcnQoKHcgPSB5MCAqIHogLSB6MCAqIHkpICogdyArICh3ID0gejAgKiB4IC1cbiAgICAgICAgICAgIHgwICogeikgKiB3ICsgKHcgPSB4MCAqIHkgLSB5MCAqIHgpICogdyksIHgwICogeCArIHkwICogeSArIHowICpcbiAgICAgICAgICB6KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFcxICs9IHc7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NlbnRyb2lkUmluZ1N0YXJ0KCkge1xuICAgIHZhciDOuzAwLCDPhjAwLCB4MCwgeTAsIHowO1xuICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgzrswMCA9IM67LCDPhjAwID0gz4Y7XG4gICAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICDOuyAqPSBkM19yYWRpYW5zO1xuICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyk7XG4gICAgICB4MCA9IGNvc8+GICogTWF0aC5jb3MozrspO1xuICAgICAgeTAgPSBjb3PPhiAqIE1hdGguc2luKM67KTtcbiAgICAgIHowID0gTWF0aC5zaW4oz4YpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooeDAsIHkwLCB6MCk7XG4gICAgfTtcbiAgICBkM19nZW9fY2VudHJvaWQubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgbmV4dFBvaW50KM67MDAsIM+GMDApO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVFbmQgPSBkM19nZW9fY2VudHJvaWRMaW5lRW5kO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLnBvaW50ID0gZDNfZ2VvX2NlbnRyb2lkUG9pbnQ7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKSxcbiAgICAgICAgeCA9IGNvc8+GICogTWF0aC5jb3MozrspLFxuICAgICAgICB5ID0gY29zz4YgKiBNYXRoLnNpbijOuyksXG4gICAgICAgIHogPSBNYXRoLnNpbijPhiksXG4gICAgICAgIGN4ID0geTAgKiB6IC0gejAgKiB5LFxuICAgICAgICBjeSA9IHowICogeCAtIHgwICogeixcbiAgICAgICAgY3ogPSB4MCAqIHkgLSB5MCAqIHgsXG4gICAgICAgIG0gPSBNYXRoLnNxcnQoY3ggKiBjeCArIGN5ICogY3kgKyBjeiAqIGN6KSxcbiAgICAgICAgdSA9IHgwICogeCArIHkwICogeSArIHowICogeixcbiAgICAgICAgdiA9IG0gJiYgLWQzX2Fjb3ModSkgLyBtLFxuICAgICAgICB3ID0gTWF0aC5hdGFuMihtLCB1KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFgyICs9IHYgKiBjeDtcbiAgICAgIGQzX2dlb19jZW50cm9pZFkyICs9IHYgKiBjeTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoyICs9IHYgKiBjejtcbiAgICAgIGQzX2dlb19jZW50cm9pZFcxICs9IHc7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY29tcG9zZShhLCBiKSB7XG4gICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gICAgfVxuICAgIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2U7XG4gIH1cblxuICBmdW5jdGlvbiBkM190cnVlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlLCBjbGlwU3RhcnRJbnNpZGUsXG4gICAgaW50ZXJwb2xhdGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHN1YmplY3QgPSBbXSxcbiAgICAgIGNsaXAgPSBbXTtcbiAgICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICAgIGlmICgobiA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPD0gMCkgcmV0dXJuO1xuICAgICAgdmFyIG4sIHAwID0gc2VnbWVudFswXSxcbiAgICAgICAgcDEgPSBzZWdtZW50W25dO1xuICAgICAgaWYgKGQzX2dlb19zcGhlcmljYWxFcXVhbChwMCwgcDEpKSB7XG4gICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgbGlzdGVuZXIucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sXG4gICAgICAgICAgcDBbMV0pO1xuICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCxcbiAgICAgICAgICB0cnVlKSxcbiAgICAgICAgYiA9IG5ldyBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocDAsIG51bGwsIGEsIGZhbHNlKTtcbiAgICAgIGEubyA9IGI7XG4gICAgICBzdWJqZWN0LnB1c2goYSk7XG4gICAgICBjbGlwLnB1c2goYik7XG4gICAgICBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMSwgc2VnbWVudCwgbnVsbCwgZmFsc2UpO1xuICAgICAgYiA9IG5ldyBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocDEsIG51bGwsIGEsIHRydWUpO1xuICAgICAgYS5vID0gYjtcbiAgICAgIHN1YmplY3QucHVzaChhKTtcbiAgICAgIGNsaXAucHVzaChiKTtcbiAgICB9KTtcbiAgICBjbGlwLnNvcnQoY29tcGFyZSk7XG4gICAgZDNfZ2VvX2NsaXBQb2x5Z29uTGlua0NpcmN1bGFyKHN1YmplY3QpO1xuICAgIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihjbGlwKTtcbiAgICBpZiAoIXN1YmplY3QubGVuZ3RoKSByZXR1cm47XG4gICAgZm9yICh2YXIgaSA9IDAsIGVudHJ5ID0gY2xpcFN0YXJ0SW5zaWRlLCBuID0gY2xpcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNsaXBbaV0uZSA9IGVudHJ5ID0gIWVudHJ5O1xuICAgIH1cbiAgICB2YXIgc3RhcnQgPSBzdWJqZWN0WzBdLFxuICAgICAgcG9pbnRzLCBwb2ludDtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydCxcbiAgICAgICAgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChjdXJyZW50LnYpXG4gICAgICAgIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgoXG4gICAgICAgICAgICAgIHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBsaXN0ZW5lcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBsaXN0ZW5lci5wb2ludCgoXG4gICAgICAgICAgICAgIHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQucC54LCAtMSwgbGlzdGVuZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihhcnJheSkge1xuICAgIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gICAgdmFyIG4sIGkgPSAwLFxuICAgICAgYSA9IGFycmF5WzBdLFxuICAgICAgYjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgICAgYi5wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XG4gICAgYi5wID0gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwb2ludCwgcG9pbnRzLCBvdGhlciwgZW50cnkpIHtcbiAgICB0aGlzLnggPSBwb2ludDtcbiAgICB0aGlzLnogPSBwb2ludHM7XG4gICAgdGhpcy5vID0gb3RoZXI7XG4gICAgdGhpcy5lID0gZW50cnk7XG4gICAgdGhpcy52ID0gZmFsc2U7XG4gICAgdGhpcy5uID0gdGhpcy5wID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBjbGlwU3RhcnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ocm90YXRlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpbmUgPSBjbGlwTGluZShsaXN0ZW5lciksXG4gICAgICAgIHJvdGF0ZWRDbGlwU3RhcnQgPSByb3RhdGUuaW52ZXJ0KGNsaXBTdGFydFswXSwgY2xpcFN0YXJ0WzFdKTtcbiAgICAgIHZhciBjbGlwID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludFJpbmc7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICAgIGNsaXAubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgICAgc2VnbWVudHMgPSBkMy5tZXJnZShzZWdtZW50cyk7XG4gICAgICAgICAgdmFyIGNsaXBTdGFydEluc2lkZSA9IGQzX2dlb19wb2ludEluUG9seWdvbihcbiAgICAgICAgICAgIHJvdGF0ZWRDbGlwU3RhcnQsIHBvbHlnb24pO1xuICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLFxuICAgICAgICAgICAgICBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGQzX2dlb19jbGlwU29ydCxcbiAgICAgICAgICAgICAgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpcFN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKSxcbiAgICAgICAgICAgICAgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9XG4gICAgICAgICAgICBmYWxzZTtcbiAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgbGlzdGVuZXIucG9seWdvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBwb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG4gICAgICAgIGlmIChwb2ludFZpc2libGUozrsgPSBwb2ludFswXSwgz4YgPSBwb2ludFsxXSkpIGxpc3RlbmVyLnBvaW50KM67LCDPhik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50TGluZSjOuywgz4YpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG4gICAgICAgIGxpbmUucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgICAgICBsaW5lLmxpbmVTdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgdmFyIGJ1ZmZlciA9IGQzX2dlb19jbGlwQnVmZmVyTGlzdGVuZXIoKSxcbiAgICAgICAgcmluZ0xpc3RlbmVyID0gY2xpcExpbmUoYnVmZmVyKSxcbiAgICAgICAgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSxcbiAgICAgICAgcG9seWdvbiwgcmluZztcblxuICAgICAgZnVuY3Rpb24gcG9pbnRSaW5nKM67LCDPhikge1xuICAgICAgICByaW5nLnB1c2goW867LCDPhl0pO1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUozrssIM+GKTtcbiAgICAgICAgcmluZ0xpc3RlbmVyLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgICAgcmluZ0xpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICByaW5nID0gW107XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICAgIHBvaW50UmluZyhyaW5nWzBdWzBdLCByaW5nWzBdWzFdKTtcbiAgICAgICAgcmluZ0xpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgdmFyIGNsZWFuID0gcmluZ0xpc3RlbmVyLmNsZWFuKCksXG4gICAgICAgICAgcmluZ1NlZ21lbnRzID0gYnVmZmVyLmJ1ZmZlcigpLFxuICAgICAgICAgIHNlZ21lbnQsIG4gPSByaW5nU2VnbWVudHMubGVuZ3RoO1xuICAgICAgICByaW5nLnBvcCgpO1xuICAgICAgICBwb2x5Z29uLnB1c2gocmluZyk7XG4gICAgICAgIHJpbmcgPSBudWxsO1xuICAgICAgICBpZiAoIW4pIHJldHVybjtcbiAgICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICAgIHNlZ21lbnQgPSByaW5nU2VnbWVudHNbMF07XG4gICAgICAgICAgdmFyIG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEsXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICBwb2ludDtcbiAgICAgICAgICBpZiAobiA+IDApIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9XG4gICAgICAgICAgICAgIHRydWU7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbXG4gICAgICAgICAgICAgIDFdKTtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQoXG4gICAgICAgICAgcmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcbiAgICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKGQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGlwO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFNlZ21lbnRMZW5ndGgxKHNlZ21lbnQpIHtcbiAgICByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpIHtcbiAgICB2YXIgbGluZXMgPSBbXSxcbiAgICAgIGxpbmU7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxpbmVzLnB1c2gobGluZSA9IFtdKTtcbiAgICAgIH0sXG4gICAgICBwb2ludDogZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICAgIGxpbmUucHVzaChbzrssIM+GXSk7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICAgIGJ1ZmZlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSBsaW5lcztcbiAgICAgICAgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICB9LFxuICAgICAgcmVqb2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIGxpbmVzLnB1c2gobGluZXMucG9wKCkuY29uY2F0KGxpbmVzLnNoaWZ0KCkpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBTb3J0KGEsIGIpIHtcbiAgICByZXR1cm4gKChhID0gYS54KVswXSA8IDAgPyBhWzFdIC0gaGFsZs+AIC0gzrUgOiBoYWxmz4AgLSBhWzFdKSAtICgoYiA9IGIueClbXG4gICAgICAwXSA8IDAgPyBiWzFdIC0gaGFsZs+AIC0gzrUgOiBoYWxmz4AgLSBiWzFdKTtcbiAgfVxuICB2YXIgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4gPSBkM19nZW9fY2xpcChkM190cnVlLFxuICAgIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuTGluZSwgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSwgWy3PgCwgLVxuICAgICAgz4AgLyAyXG4gICAgXSk7XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5MaW5lKGxpc3RlbmVyKSB7XG4gICAgdmFyIM67MCA9IE5hTixcbiAgICAgIM+GMCA9IE5hTixcbiAgICAgIHPOuzAgPSBOYU4sXG4gICAgICBjbGVhbjtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgIGNsZWFuID0gMTtcbiAgICAgIH0sXG4gICAgICBwb2ludDogZnVuY3Rpb24ozrsxLCDPhjEpIHtcbiAgICAgICAgdmFyIHPOuzEgPSDOuzEgPiAwID8gz4AgOiAtz4AsXG4gICAgICAgICAgZM67ID0gYWJzKM67MSAtIM67MCk7XG4gICAgICAgIGlmIChhYnMoZM67IC0gz4ApIDwgzrUpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzAsIM+GMCA9ICjPhjAgKyDPhjEpIC8gMiA+IDAgPyBoYWxmz4AgOiAtaGFsZs+AKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrswLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrsxLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KM67MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc867MCAhPT0gc867MSAmJiBkzrsgPj0gz4ApIHtcbiAgICAgICAgICBpZiAoYWJzKM67MCAtIHPOuzApIDwgzrUpIM67MCAtPSBzzrswICogzrU7XG4gICAgICAgICAgaWYgKGFicyjOuzEgLSBzzrsxKSA8IM61KSDOuzEgLT0gc867MSAqIM61O1xuICAgICAgICAgIM+GMCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KM67MCwgz4YwLCDOuzEsIM+GMSk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MCwgz4YwKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXIucG9pbnQozrswID0gzrsxLCDPhjAgPSDPhjEpO1xuICAgICAgICBzzrswID0gc867MTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICDOuzAgPSDPhjAgPSBOYU47XG4gICAgICB9LFxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMiAtIGNsZWFuO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCjOuzAsIM+GMCwgzrsxLCDPhjEpIHtcbiAgICB2YXIgY29zz4YwLCBjb3PPhjEsIHNpbs67MF/OuzEgPSBNYXRoLnNpbijOuzAgLSDOuzEpO1xuICAgIHJldHVybiBhYnMoc2luzrswX867MSkgPiDOtSA/IE1hdGguYXRhbigoTWF0aC5zaW4oz4YwKSAqIChjb3PPhjEgPSBNYXRoLmNvcyhcbiAgICAgICAgz4YxKSkgKiBNYXRoLnNpbijOuzEpIC0gTWF0aC5zaW4oz4YxKSAqIChjb3PPhjAgPSBNYXRoLmNvcyjPhjApKSAqXG4gICAgICBNYXRoLnNpbijOuzApKSAvIChjb3PPhjAgKiBjb3PPhjEgKiBzaW7OuzBfzrsxKSkgOiAoz4YwICsgz4YxKSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG4gICAgdmFyIM+GO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogaGFsZs+AO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCjPgCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIDApO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIC3Phik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAwKTtcbiAgICAgIGxpc3RlbmVyLnBvaW50KC3PgCwgz4YpO1xuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiDOtSkge1xuICAgICAgdmFyIHMgPSBmcm9tWzBdIDwgdG9bMF0gPyDPgCA6IC3PgDtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogcyAvIDI7XG4gICAgICBsaXN0ZW5lci5wb2ludCgtcywgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoMCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQocywgz4YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0ZW5lci5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19wb2ludEluUG9seWdvbihwb2ludCwgcG9seWdvbikge1xuICAgIHZhciBtZXJpZGlhbiA9IHBvaW50WzBdLFxuICAgICAgcGFyYWxsZWwgPSBwb2ludFsxXSxcbiAgICAgIG1lcmlkaWFuTm9ybWFsID0gW01hdGguc2luKG1lcmlkaWFuKSwgLU1hdGguY29zKG1lcmlkaWFuKSwgMF0sXG4gICAgICBwb2xhckFuZ2xlID0gMCxcbiAgICAgIHdpbmRpbmcgPSAwO1xuICAgIGQzX2dlb19hcmVhUmluZ1N1bS5yZXNldCgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciByaW5nID0gcG9seWdvbltpXSxcbiAgICAgICAgbSA9IHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKCFtKSBjb250aW51ZTtcbiAgICAgIHZhciBwb2ludDAgPSByaW5nWzBdLFxuICAgICAgICDOuzAgPSBwb2ludDBbMF0sXG4gICAgICAgIM+GMCA9IHBvaW50MFsxXSAvIDIgKyDPgCAvIDQsXG4gICAgICAgIHNpbs+GMCA9IE1hdGguc2luKM+GMCksXG4gICAgICAgIGNvc8+GMCA9IE1hdGguY29zKM+GMCksXG4gICAgICAgIGogPSAxO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGogPT09IG0pIGogPSAwO1xuICAgICAgICBwb2ludCA9IHJpbmdbal07XG4gICAgICAgIHZhciDOuyA9IHBvaW50WzBdLFxuICAgICAgICAgIM+GID0gcG9pbnRbMV0gLyAyICsgz4AgLyA0LFxuICAgICAgICAgIHNpbs+GID0gTWF0aC5zaW4oz4YpLFxuICAgICAgICAgIGNvc8+GID0gTWF0aC5jb3Moz4YpLFxuICAgICAgICAgIGTOuyA9IM67IC0gzrswLFxuICAgICAgICAgIHNkzrsgPSBkzrsgPj0gMCA/IDEgOiAtMSxcbiAgICAgICAgICBhZM67ID0gc2TOuyAqIGTOuyxcbiAgICAgICAgICBhbnRpbWVyaWRpYW4gPSBhZM67ID4gz4AsXG4gICAgICAgICAgayA9IHNpbs+GMCAqIHNpbs+GO1xuICAgICAgICBkM19nZW9fYXJlYVJpbmdTdW0uYWRkKE1hdGguYXRhbjIoayAqIHNkzrsgKiBNYXRoLnNpbihhZM67KSwgY29zz4YwICpcbiAgICAgICAgICBjb3PPhiArIGsgKiBNYXRoLmNvcyhhZM67KSkpO1xuICAgICAgICBwb2xhckFuZ2xlICs9IGFudGltZXJpZGlhbiA/IGTOuyArIHNkzrsgKiDPhCA6IGTOuztcbiAgICAgICAgaWYgKGFudGltZXJpZGlhbiBeIM67MCA+PSBtZXJpZGlhbiBeIM67ID49IG1lcmlkaWFuKSB7XG4gICAgICAgICAgdmFyIGFyYyA9IGQzX2dlb19jYXJ0ZXNpYW5Dcm9zcyhkM19nZW9fY2FydGVzaWFuKHBvaW50MCksXG4gICAgICAgICAgICBkM19nZW9fY2FydGVzaWFuKHBvaW50KSk7XG4gICAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShhcmMpO1xuICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MobWVyaWRpYW5Ob3JtYWwsIGFyYyk7XG4gICAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShpbnRlcnNlY3Rpb24pO1xuICAgICAgICAgIHZhciDPhmFyYyA9IChhbnRpbWVyaWRpYW4gXiBkzrsgPj0gMCA/IC0xIDogMSkgKiBkM19hc2luKFxuICAgICAgICAgICAgaW50ZXJzZWN0aW9uWzJdKTtcbiAgICAgICAgICBpZiAocGFyYWxsZWwgPiDPhmFyYyB8fCBwYXJhbGxlbCA9PT0gz4ZhcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgICB3aW5kaW5nICs9IGFudGltZXJpZGlhbiBeIGTOuyA+PSAwID8gMSA6IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWorKykgYnJlYWs7XG4gICAgICAgIM67MCA9IM67LCBzaW7PhjAgPSBzaW7PhiwgY29zz4YwID0gY29zz4YsIHBvaW50MCA9IHBvaW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKHBvbGFyQW5nbGUgPCAtzrUgfHwgcG9sYXJBbmdsZSA8IM61ICYmIGQzX2dlb19hcmVhUmluZ1N1bSA8IDApIF5cbiAgICAgIHdpbmRpbmcgJiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBDaXJjbGUocmFkaXVzKSB7XG4gICAgdmFyIGNyID0gTWF0aC5jb3MocmFkaXVzKSxcbiAgICAgIHNtYWxsUmFkaXVzID0gY3IgPiAwLFxuICAgICAgbm90SGVtaXNwaGVyZSA9IGFicyhjcikgPiDOtSxcbiAgICAgIGludGVycG9sYXRlID0gZDNfZ2VvX2NpcmNsZUludGVycG9sYXRlKHJhZGl1cywgNiAqIGQzX3JhZGlhbnMpO1xuICAgIHJldHVybiBkM19nZW9fY2xpcCh2aXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHNtYWxsUmFkaXVzID8gWzAsIC1cbiAgICAgIHJhZGl1c1xuICAgIF0gOiBbLc+ALCByYWRpdXMgLSDPgF0pO1xuXG4gICAgZnVuY3Rpb24gdmlzaWJsZSjOuywgz4YpIHtcbiAgICAgIHJldHVybiBNYXRoLmNvcyjOuykgKiBNYXRoLmNvcyjPhikgPiBjcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGlwTGluZShsaXN0ZW5lcikge1xuICAgICAgdmFyIHBvaW50MCwgYzAsIHYwLCB2MDAsIGNsZWFuO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICAgIGNsZWFuID0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgICAgIHZhciBwb2ludDEgPSBbzrssIM+GXSxcbiAgICAgICAgICAgIHBvaW50MiwgdiA9IHZpc2libGUozrssIM+GKSxcbiAgICAgICAgICAgIGMgPSBzbWFsbFJhZGl1cyA/IHYgPyAwIDogY29kZSjOuywgz4YpIDogdiA/IGNvZGUozrsgKyAozrsgPCAwID9cbiAgICAgICAgICAgICAgz4AgOiAtz4ApLCDPhikgOiAwO1xuICAgICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICBpZiAoZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fFxuICAgICAgICAgICAgICBkM19nZW9fc3BoZXJpY2FsRXF1YWwocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgICAgICAgIHBvaW50MVswXSArPSDOtTtcbiAgICAgICAgICAgICAgcG9pbnQxWzFdICs9IM61O1xuICAgICAgICAgICAgICB2ID0gdmlzaWJsZShwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm90SGVtaXNwaGVyZSAmJiBwb2ludDAgJiYgc21hbGxSYWRpdXMgXiB2KSB7XG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICAgIGlmIChzbWFsbFJhZGl1cykge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgJiYgKCFwb2ludDAgfHwgIWQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh2MCkgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gY2xlYW4gfCAodjAwICYmIHYwKSA8PCAxO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICAgIHZhciBwYSA9IGQzX2dlb19jYXJ0ZXNpYW4oYSksXG4gICAgICAgIHBiID0gZDNfZ2VvX2NhcnRlc2lhbihiKTtcbiAgICAgIHZhciBuMSA9IFsxLCAwLCAwXSxcbiAgICAgICAgbjIgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MocGEsIHBiKSxcbiAgICAgICAgbjJuMiA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QobjIsIG4yKSxcbiAgICAgICAgbjFuMiA9IG4yWzBdLFxuICAgICAgICBkZXRlcm1pbmFudCA9IG4ybjIgLSBuMW4yICogbjFuMjtcbiAgICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG4gICAgICB2YXIgYzEgPSBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIG4xeG4yID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG4xLCBuMiksXG4gICAgICAgIEEgPSBkM19nZW9fY2FydGVzaWFuU2NhbGUobjEsIGMxKSxcbiAgICAgICAgQiA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgICAgZDNfZ2VvX2NhcnRlc2lhbkFkZChBLCBCKTtcbiAgICAgIHZhciB1ID0gbjF4bjIsXG4gICAgICAgIHcgPSBkM19nZW9fY2FydGVzaWFuRG90KEEsIHUpLFxuICAgICAgICB1dSA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QodSwgdSksXG4gICAgICAgIHQyID0gdyAqIHcgLSB1dSAqIChkM19nZW9fY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG4gICAgICBpZiAodDIgPCAwKSByZXR1cm47XG4gICAgICB2YXIgdCA9IE1hdGguc3FydCh0MiksXG4gICAgICAgIHEgPSBkM19nZW9fY2FydGVzaWFuU2NhbGUodSwgKC13IC0gdCkgLyB1dSk7XG4gICAgICBkM19nZW9fY2FydGVzaWFuQWRkKHEsIEEpO1xuICAgICAgcSA9IGQzX2dlb19zcGhlcmljYWwocSk7XG4gICAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG4gICAgICB2YXIgzrswID0gYVswXSxcbiAgICAgICAgzrsxID0gYlswXSxcbiAgICAgICAgz4YwID0gYVsxXSxcbiAgICAgICAgz4YxID0gYlsxXSxcbiAgICAgICAgejtcbiAgICAgIGlmICjOuzEgPCDOuzApIHogPSDOuzAsIM67MCA9IM67MSwgzrsxID0gejtcbiAgICAgIHZhciDOtM67ID0gzrsxIC0gzrswLFxuICAgICAgICBwb2xhciA9IGFicyjOtM67IC0gz4ApIDwgzrUsXG4gICAgICAgIG1lcmlkaWFuID0gcG9sYXIgfHwgzrTOuyA8IM61O1xuICAgICAgaWYgKCFwb2xhciAmJiDPhjEgPCDPhjApIHogPSDPhjAsIM+GMCA9IM+GMSwgz4YxID0gejtcbiAgICAgIGlmIChtZXJpZGlhbiA/IHBvbGFyID8gz4YwICsgz4YxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSDOuzApIDwgzrUgPyDPhjAgOlxuICAgICAgICAgIM+GMSkgOiDPhjAgPD0gcVsxXSAmJiBxWzFdIDw9IM+GMSA6IM60zrsgPiDPgCBeICjOuzAgPD0gcVswXSAmJiBxWzBdIDw9XG4gICAgICAgICAgzrsxKSkge1xuICAgICAgICB2YXIgcTEgPSBkM19nZW9fY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5BZGQocTEsIEEpO1xuICAgICAgICByZXR1cm4gW3EsIGQzX2dlb19zcGhlcmljYWwocTEpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2RlKM67LCDPhikge1xuICAgICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IM+AIC0gcmFkaXVzLFxuICAgICAgICBjb2RlID0gMDtcbiAgICAgIGlmICjOuyA8IC1yKSBjb2RlIHw9IDE7XG4gICAgICBlbHNlIGlmICjOuyA+IHIpIGNvZGUgfD0gMjtcbiAgICAgIGlmICjPhiA8IC1yKSBjb2RlIHw9IDQ7XG4gICAgICBlbHNlIGlmICjPhiA+IHIpIGNvZGUgfD0gODtcbiAgICAgIHJldHVybiBjb2RlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb21fY2xpcExpbmUoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIGEgPSBsaW5lLmEsXG4gICAgICAgIGIgPSBsaW5lLmIsXG4gICAgICAgIGF4ID0gYS54LFxuICAgICAgICBheSA9IGEueSxcbiAgICAgICAgYnggPSBiLngsXG4gICAgICAgIGJ5ID0gYi55LFxuICAgICAgICB0MCA9IDAsXG4gICAgICAgIHQxID0gMSxcbiAgICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICAgIHI7XG4gICAgICByID0geDAgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geDEgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICByID0geTAgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geTEgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICBpZiAodDAgPiAwKSBsaW5lLmEgPSB7XG4gICAgICAgIHg6IGF4ICsgdDAgKiBkeCxcbiAgICAgICAgeTogYXkgKyB0MCAqIGR5XG4gICAgICB9O1xuICAgICAgaWYgKHQxIDwgMSkgbGluZS5iID0ge1xuICAgICAgICB4OiBheCArIHQxICogZHgsXG4gICAgICAgIHk6IGF5ICsgdDEgKiBkeVxuICAgICAgfTtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2dlb19jbGlwRXh0ZW50TUFYID0gMWU5O1xuICBkMy5nZW8uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4MCwgeTAsIHgxLCB5MSwgc3RyZWFtLCBjbGlwLCBjbGlwRXh0ZW50ID0ge1xuICAgICAgc3RyZWFtOiBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHN0cmVhbSA9IGNsaXAob3V0cHV0KTtcbiAgICAgICAgc3RyZWFtLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1xuICAgICAgICAgIFt4MCwgeTBdLFxuICAgICAgICAgIFt4MSwgeTFdXG4gICAgICAgIF07XG4gICAgICAgIGNsaXAgPSBkM19nZW9fY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtcbiAgICAgICAgICBfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKTtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2UsIHN0cmVhbSA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbGlwRXh0ZW50O1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGNsaXBFeHRlbnQuZXh0ZW50KFtcbiAgICAgIFswLCAwXSxcbiAgICAgIFs5NjAsIDUwMF1cbiAgICBdKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fY2xpcEV4dGVudCh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHJldHVybiBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3RlbmVyXyA9IGxpc3RlbmVyLFxuICAgICAgICBidWZmZXJMaXN0ZW5lciA9IGQzX2dlb19jbGlwQnVmZmVyTGlzdGVuZXIoKSxcbiAgICAgICAgY2xpcExpbmUgPSBkM19nZW9tX2NsaXBMaW5lKHgwLCB5MCwgeDEsIHkxKSxcbiAgICAgICAgc2VnbWVudHMsIHBvbHlnb24sIHJpbmc7XG4gICAgICB2YXIgY2xpcCA9IHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsaXN0ZW5lciA9IGJ1ZmZlckxpc3RlbmVyO1xuICAgICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgICAgIGNsZWFuID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lcl87XG4gICAgICAgICAgc2VnbWVudHMgPSBkMy5tZXJnZShzZWdtZW50cyk7XG4gICAgICAgICAgdmFyIGNsaXBTdGFydEluc2lkZSA9IGluc2lkZVBvbHlnb24oW3gwLCB5MV0pLFxuICAgICAgICAgICAgaW5zaWRlID0gY2xlYW4gJiYgY2xpcFN0YXJ0SW5zaWRlLFxuICAgICAgICAgICAgdmlzaWJsZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoaW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgICAgaWYgKGluc2lkZSkge1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmUsIGNsaXBTdGFydEluc2lkZSxcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdGVuZXIucG9seWdvbkVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gaW5zaWRlUG9seWdvbihwKSB7XG4gICAgICAgIHZhciB3biA9IDAsXG4gICAgICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgICAgIHkgPSBwWzFdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAxLCB2ID0gcG9seWdvbltpXSwgbSA9IHYubGVuZ3RoLCBhID0gdlswXSwgYjsgaiA8XG4gICAgICAgICAgICBtOyArK2opIHtcbiAgICAgICAgICAgIGIgPSB2W2pdO1xuICAgICAgICAgICAgaWYgKGFbMV0gPD0geSkge1xuICAgICAgICAgICAgICBpZiAoYlsxXSA+IHkgJiYgZDNfY3Jvc3MyZChhLCBiLCBwKSA+IDApICsrd247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoYlsxXSA8PSB5ICYmIGQzX2Nyb3NzMmQoYSwgYiwgcCkgPCAwKSAtLXduO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSA9IGI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3biAhPT0gMDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGEgPSAwLFxuICAgICAgICAgIGExID0gMDtcbiAgICAgICAgaWYgKGZyb20gPT0gbnVsbCB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID1cbiAgICAgICAgICAgIGNvcm5lcih0bywgZGlyZWN0aW9uKSkgfHwgY29tcGFyZVBvaW50cyhmcm9tLCB0bykgPCAwIF5cbiAgICAgICAgICBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgICAgICB9IHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9pbnRWaXNpYmxlKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgICAgaWYgKHBvaW50VmlzaWJsZSh4LCB5KSkgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICB9XG4gICAgICB2YXIgeF9fLCB5X18sIHZfXywgeF8sIHlfLCB2XywgZmlyc3QsIGNsZWFuO1xuXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgICB2XyA9IGZhbHNlO1xuICAgICAgICB4XyA9IHlfID0gTmFOO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBpZiAoc2VnbWVudHMpIHtcbiAgICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlckxpc3RlbmVyLnJlam9pbigpO1xuICAgICAgICAgIHNlZ21lbnRzLnB1c2goYnVmZmVyTGlzdGVuZXIuYnVmZmVyKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgICAgaWYgKHZfKSBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICAgIHggPSBNYXRoLm1heCgtZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIE1hdGgubWluKGQzX2dlb19jbGlwRXh0ZW50TUFYLFxuICAgICAgICAgIHgpKTtcbiAgICAgICAgeSA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsXG4gICAgICAgICAgeSkpO1xuICAgICAgICB2YXIgdiA9IHBvaW50VmlzaWJsZSh4LCB5KTtcbiAgICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2ICYmIHZfKSBsaXN0ZW5lci5wb2ludCh4LCB5KTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBsID0ge1xuICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgeDogeF8sXG4gICAgICAgICAgICAgICAgeTogeV9cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYjoge1xuICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgeTogeVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGNsaXBMaW5lKGwpKSB7XG4gICAgICAgICAgICAgIGlmICghdl8pIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludChsLmEueCwgbC5hLnkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KGwuYi54LCBsLmIueSk7XG4gICAgICAgICAgICAgIGlmICghdikgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2KSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh4LCB5KTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGlwO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYWJzKHBbMF0gLSB4MCkgPCDOtSA/IGRpcmVjdGlvbiA+IDAgPyAwIDogMyA6IGFicyhwWzBdIC0geDEpIDxcbiAgICAgICAgzrUgPyBkaXJlY3Rpb24gPiAwID8gMiA6IDEgOiBhYnMocFsxXSAtIHkwKSA8IM61ID8gZGlyZWN0aW9uID4gMCA/IDEgOlxuICAgICAgICAwIDogZGlyZWN0aW9uID4gMCA/IDMgOiAyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludHMoYS54LCBiLngpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVQb2ludHMoYSwgYikge1xuICAgICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICAgIHJldHVybiBjYSAhPT0gY2IgPyBjYSAtIGNiIDogY2EgPT09IDAgPyBiWzFdIC0gYVsxXSA6IGNhID09PSAxID8gYVswXSAtXG4gICAgICAgIGJbMF0gOiBjYSA9PT0gMiA/IGFbMV0gLSBiWzFdIDogYlswXSAtIGFbMF07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljKHByb2plY3RBdCkge1xuICAgIHZhciDPhjAgPSAwLFxuICAgICAgz4YxID0gz4AgLyAzLFxuICAgICAgbSA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxuICAgICAgcCA9IG0oz4YwLCDPhjEpO1xuICAgIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW8+GMCAvIM+AICogMTgwLCDPhjEgLyDPgCAqIDE4MF07XG4gICAgICByZXR1cm4gbSjPhjAgPSBfWzBdICogz4AgLyAxODAsIM+GMSA9IF9bMV0gKiDPgCAvIDE4MCk7XG4gICAgfTtcbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0VxdWFsQXJlYSjPhjAsIM+GMSkge1xuICAgIHZhciBzaW7PhjAgPSBNYXRoLnNpbijPhjApLFxuICAgICAgbiA9IChzaW7PhjAgKyBNYXRoLnNpbijPhjEpKSAvIDIsXG4gICAgICBDID0gMSArIHNpbs+GMCAqICgyICogbiAtIHNpbs+GMCksXG4gICAgICDPgTAgPSBNYXRoLnNxcnQoQykgLyBuO1xuXG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydChDIC0gMiAqIG4gKiBNYXRoLnNpbijPhikpIC8gbjtcbiAgICAgIHJldHVybiBbz4EgKiBNYXRoLnNpbijOuyAqPSBuKSwgz4EwIC0gz4EgKiBNYXRoLmNvcyjOuyldO1xuICAgIH1cbiAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgTBfeSA9IM+BMCAtIHk7XG4gICAgICByZXR1cm4gW01hdGguYXRhbjIoeCwgz4EwX3kpIC8gbiwgZDNfYXNpbigoQyAtICh4ICogeCArIM+BMF95ICogz4EwX3kpICpcbiAgICAgICAgbiAqIG4pIC8gKDIgKiBuKSldO1xuICAgIH07XG4gICAgcmV0dXJuIGZvcndhcmQ7XG4gIH1cbiAgKGQzLmdlby5jb25pY0VxdWFsQXJlYSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fY29uaWMoZDNfZ2VvX2NvbmljRXF1YWxBcmVhKTtcbiAgfSkucmF3ID0gZDNfZ2VvX2NvbmljRXF1YWxBcmVhO1xuICBkMy5nZW8uYWxiZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLmdlby5jb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbOTYsIDBdKS5jZW50ZXIoWy0uNiwgMzguN10pLnBhcmFsbGVscyhcbiAgICAgIFsyOS41LCA0NS41XSkuc2NhbGUoMTA3MCk7XG4gIH07XG4gIGQzLmdlby5hbGJlcnNVc2EgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbG93ZXI0OCA9IGQzLmdlby5hbGJlcnMoKTtcbiAgICB2YXIgYWxhc2thID0gZDMuZ2VvLmNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTQsIDBdKS5jZW50ZXIoWy0yLFxuICAgICAgNTguNVxuICAgIF0pLnBhcmFsbGVscyhbNTUsIDY1XSk7XG4gICAgdmFyIGhhd2FpaSA9IGQzLmdlby5jb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU3LCAwXSkuY2VudGVyKFstMyxcbiAgICAgIDE5LjlcbiAgICBdKS5wYXJhbGxlbHMoWzgsIDE4XSk7XG4gICAgdmFyIHBvaW50LCBwb2ludFN0cmVhbSA9IHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICBwb2ludCA9IFt4LCB5XTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxvd2VyNDhQb2ludCwgYWxhc2thUG9pbnQsIGhhd2FpaVBvaW50O1xuXG4gICAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLFxuICAgICAgICB5ID0gY29vcmRpbmF0ZXNbMV07XG4gICAgICBwb2ludCA9IG51bGw7XG4gICAgICAobG93ZXI0OFBvaW50KHgsIHkpLCBwb2ludCkgfHwgKGFsYXNrYVBvaW50KHgsIHkpLCBwb2ludCkgfHxcbiAgICAgIGhhd2FpaVBvaW50KHgsIHkpO1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cbiAgICBhbGJlcnNVc2EuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gayxcbiAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICAgIHJldHVybiAoeSA+PSAuMTIgJiYgeSA8IC4yMzQgJiYgeCA+PSAtLjQyNSAmJiB4IDwgLS4yMTQgPyBhbGFza2EgOlxuICAgICAgICB5ID49IC4xNjYgJiYgeSA8IC4yMzQgJiYgeCA+PSAtLjIxNCAmJiB4IDwgLS4xMTUgPyBoYXdhaWkgOlxuICAgICAgICBsb3dlcjQ4KS5pbnZlcnQoY29vcmRpbmF0ZXMpO1xuICAgIH07XG4gICAgYWxiZXJzVXNhLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgdmFyIGxvd2VyNDhTdHJlYW0gPSBsb3dlcjQ4LnN0cmVhbShzdHJlYW0pLFxuICAgICAgICBhbGFza2FTdHJlYW0gPSBhbGFza2Euc3RyZWFtKHN0cmVhbSksXG4gICAgICAgIGhhd2FpaVN0cmVhbSA9IGhhd2FpaS5zdHJlYW0oc3RyZWFtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICBhbGFza2FTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICB9LFxuICAgICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0uc3BoZXJlKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnNwaGVyZSgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5zcGhlcmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsb3dlcjQ4U3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgICAgbG93ZXI0OC5wcmVjaXNpb24oXyk7XG4gICAgICBhbGFza2EucHJlY2lzaW9uKF8pO1xuICAgICAgaGF3YWlpLnByZWNpc2lvbihfKTtcbiAgICAgIHJldHVybiBhbGJlcnNVc2E7XG4gICAgfTtcbiAgICBhbGJlcnNVc2Euc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgICBsb3dlcjQ4LnNjYWxlKF8pO1xuICAgICAgYWxhc2thLnNjYWxlKF8gKiAuMzUpO1xuICAgICAgaGF3YWlpLnNjYWxlKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYS50cmFuc2xhdGUobG93ZXI0OC50cmFuc2xhdGUoKSk7XG4gICAgfTtcbiAgICBhbGJlcnNVc2EudHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICB4ID0gK19bMF0sXG4gICAgICAgIHkgPSArX1sxXTtcbiAgICAgIGxvd2VyNDhQb2ludCA9IGxvd2VyNDgudHJhbnNsYXRlKF8pLmNsaXBFeHRlbnQoW1xuICAgICAgICBbeCAtIC40NTUgKiBrLCB5IC0gLjIzOCAqIGtdLFxuICAgICAgICBbeCArIC40NTUgKiBrLCB5ICsgLjIzOCAqIGtdXG4gICAgICBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuICAgICAgYWxhc2thUG9pbnQgPSBhbGFza2EudHJhbnNsYXRlKFt4IC0gLjMwNyAqIGssIHkgKyAuMjAxICoga10pLmNsaXBFeHRlbnQoXG4gICAgICAgIFtcbiAgICAgICAgICBbeCAtIC40MjUgKiBrICsgzrUsIHkgKyAuMTIgKiBrICsgzrVdLFxuICAgICAgICAgIFt4IC0gLjIxNCAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrVdXG4gICAgICAgIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaS50cmFuc2xhdGUoW3ggLSAuMjA1ICogaywgeSArIC4yMTIgKiBrXSkuY2xpcEV4dGVudChcbiAgICAgICAgW1xuICAgICAgICAgIFt4IC0gLjIxNCAqIGsgKyDOtSwgeSArIC4xNjYgKiBrICsgzrVdLFxuICAgICAgICAgIFt4IC0gLjExNSAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrVdXG4gICAgICAgIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICByZXR1cm4gYWxiZXJzVXNhO1xuICAgIH07XG4gICAgcmV0dXJuIGFsYmVyc1VzYS5zY2FsZSgxMDcwKTtcbiAgfTtcbiAgdmFyIGQzX2dlb19wYXRoQXJlYVN1bSwgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiwgZDNfZ2VvX3BhdGhBcmVhID0ge1xuICAgIHBvaW50OiBkM19ub29wLFxuICAgIGxpbmVTdGFydDogZDNfbm9vcCxcbiAgICBsaW5lRW5kOiBkM19ub29wLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aEFyZWFQb2x5Z29uID0gMDtcbiAgICAgIGQzX2dlb19wYXRoQXJlYS5saW5lU3RhcnQgPSBkM19nZW9fcGF0aEFyZWFSaW5nU3RhcnQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYS5saW5lU3RhcnQgPSBkM19nZW9fcGF0aEFyZWEubGluZUVuZCA9XG4gICAgICAgIGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IGQzX25vb3A7XG4gICAgICBkM19nZW9fcGF0aEFyZWFTdW0gKz0gYWJzKGQzX2dlb19wYXRoQXJlYVBvbHlnb24gLyAyKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhBcmVhUmluZ1N0YXJ0KCkge1xuICAgIHZhciB4MDAsIHkwMCwgeDAsIHkwO1xuICAgIGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiArPSB5MCAqIHggLSB4MCAqIHk7XG4gICAgICB4MCA9IHgsIHkwID0geTtcbiAgICB9XG4gICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZ2VvX3BhdGhCb3VuZHNYMCwgZDNfZ2VvX3BhdGhCb3VuZHNZMCwgZDNfZ2VvX3BhdGhCb3VuZHNYMSxcbiAgICBkM19nZW9fcGF0aEJvdW5kc1kxO1xuICB2YXIgZDNfZ2VvX3BhdGhCb3VuZHMgPSB7XG4gICAgcG9pbnQ6IGQzX2dlb19wYXRoQm91bmRzUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19ub29wLFxuICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgcG9seWdvblN0YXJ0OiBkM19ub29wLFxuICAgIHBvbHlnb25FbmQ6IGQzX25vb3BcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fcGF0aEJvdW5kc1BvaW50KHgsIHkpIHtcbiAgICBpZiAoeCA8IGQzX2dlb19wYXRoQm91bmRzWDApIGQzX2dlb19wYXRoQm91bmRzWDAgPSB4O1xuICAgIGlmICh4ID4gZDNfZ2VvX3BhdGhCb3VuZHNYMSkgZDNfZ2VvX3BhdGhCb3VuZHNYMSA9IHg7XG4gICAgaWYgKHkgPCBkM19nZW9fcGF0aEJvdW5kc1kwKSBkM19nZW9fcGF0aEJvdW5kc1kwID0geTtcbiAgICBpZiAoeSA+IGQzX2dlb19wYXRoQm91bmRzWTEpIGQzX2dlb19wYXRoQm91bmRzWTEgPSB5O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhCdWZmZXIoKSB7XG4gICAgdmFyIHBvaW50Q2lyY2xlID0gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUoNC41KSxcbiAgICAgIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBzdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmVTdGFydDtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kUG9seWdvbjtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIH0sXG4gICAgICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgICAgICBwb2ludENpcmNsZSA9IGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKF8pO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSxcbiAgICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgYnVmZmVyLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCBwb2ludENpcmNsZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lU3RhcnQoeCwgeSkge1xuICAgICAgYnVmZmVyLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgYnVmZmVyLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZFBvbHlnb24oKSB7XG4gICAgICBidWZmZXIucHVzaChcIlpcIik7XG4gICAgfVxuICAgIHJldHVybiBzdHJlYW07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fcGF0aEJ1ZmZlckNpcmNsZShyYWRpdXMpIHtcbiAgICByZXR1cm4gXCJtMCxcIiArIHJhZGl1cyArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKlxuICAgICAgcmFkaXVzICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAyICogcmFkaXVzICsgXCJ6XCI7XG4gIH1cbiAgdmFyIGQzX2dlb19wYXRoQ2VudHJvaWQgPSB7XG4gICAgcG9pbnQ6IGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCxcbiAgICBsaW5lU3RhcnQ6IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVFbmQsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhDZW50cm9pZFJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludDtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydDtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQubGluZUVuZCA9IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeCwgeSkge1xuICAgIGQzX2dlb19jZW50cm9pZFgwICs9IHg7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWTAgKz0geTtcbiAgICArK2QzX2dlb19jZW50cm9pZFowO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwO1xuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KHgsIHkpIHtcbiAgICAgIHZhciBkeCA9IHggLSB4MCxcbiAgICAgICAgZHkgPSB5IC0geTAsXG4gICAgICAgIHogPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDEgKz0geiAqICh4MCArIHgpIC8gMjtcbiAgICAgIGQzX2dlb19jZW50cm9pZFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gICAgICBkM19nZW9fY2VudHJvaWRaMSArPSB6O1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fcGF0aENlbnRyb2lkTGluZUVuZCgpIHtcbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgeDAwLCB5MDAsIHgwLCB5MDtcbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG5leHRQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgZHggPSB4IC0geDAsXG4gICAgICAgIGR5ID0geSAtIHkwLFxuICAgICAgICB6ID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gejtcbiAgICAgIHogPSB5MCAqIHggLSB4MCAqIHk7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMiArPSB6ICogKHgwICsgeCk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMiArPSB6ICogKHkwICsgeSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRaMiArPSB6ICogMztcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG4gICAgfVxuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgbmV4dFBvaW50KHgwMCwgeTAwKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDb250ZXh0KGNvbnRleHQpIHtcbiAgICB2YXIgcG9pbnRSYWRpdXMgPSA0LjU7XG4gICAgdmFyIHN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgfSxcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHBvaW50UmFkaXVzID0gXztcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICByZXN1bHQ6IGQzX25vb3BcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oeCArIHBvaW50UmFkaXVzLCB5KTtcbiAgICAgIGNvbnRleHQuYXJjKHgsIHksIHBvaW50UmFkaXVzLCAwLCDPhCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lU3RhcnQoeCwgeSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lKHgsIHkpIHtcbiAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHJlYW07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fcmVzYW1wbGUocHJvamVjdCkge1xuICAgIHZhciDOtDIgPSAuNSxcbiAgICAgIGNvc01pbkRpc3RhbmNlID0gTWF0aC5jb3MoMzAgKiBkM19yYWRpYW5zKSxcbiAgICAgIG1heERlcHRoID0gMTY7XG5cbiAgICBmdW5jdGlvbiByZXNhbXBsZShzdHJlYW0pIHtcbiAgICAgIHJldHVybiAobWF4RGVwdGggPyByZXNhbXBsZVJlY3Vyc2l2ZSA6IHJlc2FtcGxlTm9uZSkoc3RyZWFtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNhbXBsZU5vbmUoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvX3RyYW5zZm9ybVBvaW50KHN0cmVhbSwgZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzYW1wbGVSZWN1cnNpdmUoc3RyZWFtKSB7XG4gICAgICB2YXIgzrswMCwgz4YwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIM67MCwgeDAsIHkwLCBhMCwgYjAsIGMwO1xuICAgICAgdmFyIHJlc2FtcGxlID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICByZXNhbXBsZS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgcmVzYW1wbGUubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgeDAgPSBOYU47XG4gICAgICAgIHJlc2FtcGxlLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIGMgPSBkM19nZW9fY2FydGVzaWFuKFvOuywgz4ZdKSxcbiAgICAgICAgICBwID0gcHJvamVjdCjOuywgz4YpO1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIM67MCA9IM67LFxuICAgICAgICAgIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBwb2ludDtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICBsaW5lU3RhcnQoKTtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICAgIHJlc2FtcGxlLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nUG9pbnQozrssIM+GKSB7XG4gICAgICAgIGxpbmVQb2ludCjOuzAwID0gzrssIM+GMDAgPSDPhiksIHgwMCA9IHgwLCB5MDAgPSB5MCwgYTAwID0gYTAsIGIwMCA9IGIwLFxuICAgICAgICAgIGMwMCA9IGMwO1xuICAgICAgICByZXNhbXBsZS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCDOuzAwLCBhMDAsIGIwMCwgYzAwLFxuICAgICAgICAgIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgICByZXNhbXBsZS5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgbGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc2FtcGxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgzrswLCBhMCwgYjAsIGMwLCB4MSwgeTEsIM67MSwgYTEsIGIxLCBjMSxcbiAgICAgIGRlcHRoLCBzdHJlYW0pIHtcbiAgICAgIHZhciBkeCA9IHgxIC0geDAsXG4gICAgICAgIGR5ID0geTEgLSB5MCxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGlmIChkMiA+IDQgKiDOtDIgJiYgZGVwdGgtLSkge1xuICAgICAgICB2YXIgYSA9IGEwICsgYTEsXG4gICAgICAgICAgYiA9IGIwICsgYjEsXG4gICAgICAgICAgYyA9IGMwICsgYzEsXG4gICAgICAgICAgbSA9IE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpLFxuICAgICAgICAgIM+GMiA9IE1hdGguYXNpbihjIC89IG0pLFxuICAgICAgICAgIM67MiA9IGFicyhhYnMoYykgLSAxKSA8IM61IHx8IGFicyjOuzAgLSDOuzEpIDwgzrUgPyAozrswICsgzrsxKSAvIDIgOlxuICAgICAgICAgIE1hdGguYXRhbjIoYiwgYSksXG4gICAgICAgICAgcCA9IHByb2plY3QozrsyLCDPhjIpLFxuICAgICAgICAgIHgyID0gcFswXSxcbiAgICAgICAgICB5MiA9IHBbMV0sXG4gICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxuICAgICAgICAgIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5MjtcbiAgICAgICAgaWYgKGR6ICogZHogLyBkMiA+IM60MiB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAuNSkgPiAuMyB8fFxuICAgICAgICAgIGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgzrsyLCBhIC89IG0sIGIgLz0gbSxcbiAgICAgICAgICAgIGMsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICAgIHN0cmVhbS5wb2ludCh4MiwgeTIpO1xuICAgICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgzrsyLCBhLCBiLCBjLCB4MSwgeTEsIM67MSwgYTEsIGIxLCBjMSwgZGVwdGgsXG4gICAgICAgICAgICBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlc2FtcGxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCjOtDIpO1xuICAgICAgbWF4RGVwdGggPSAozrQyID0gXyAqIF8pID4gMCAmJiAxNjtcbiAgICAgIHJldHVybiByZXNhbXBsZTtcbiAgICB9O1xuICAgIHJldHVybiByZXNhbXBsZTtcbiAgfVxuICBkMy5nZW8ucGF0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNSxcbiAgICAgIHByb2plY3Rpb24sIGNvbnRleHQsIHByb2plY3RTdHJlYW0sIGNvbnRleHRTdHJlYW0sIGNhY2hlU3RyZWFtO1xuXG4gICAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtcbiAgICAgICAgICBwb2ludFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgaWYgKCFjYWNoZVN0cmVhbSB8fCAhY2FjaGVTdHJlYW0udmFsaWQpIGNhY2hlU3RyZWFtID1cbiAgICAgICAgICBwcm9qZWN0U3RyZWFtKGNvbnRleHRTdHJlYW0pO1xuICAgICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgY2FjaGVTdHJlYW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XG4gICAgfVxuICAgIHBhdGguYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhU3VtID0gMDtcbiAgICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBwcm9qZWN0U3RyZWFtKGQzX2dlb19wYXRoQXJlYSkpO1xuICAgICAgcmV0dXJuIGQzX2dlb19wYXRoQXJlYVN1bTtcbiAgICB9O1xuICAgIHBhdGguY2VudHJvaWQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGQzX2dlb19jZW50cm9pZFgwID0gZDNfZ2VvX2NlbnRyb2lkWTAgPSBkM19nZW9fY2VudHJvaWRaMCA9XG4gICAgICAgIGQzX2dlb19jZW50cm9pZFgxID0gZDNfZ2VvX2NlbnRyb2lkWTEgPSBkM19nZW9fY2VudHJvaWRaMSA9XG4gICAgICAgIGQzX2dlb19jZW50cm9pZFgyID0gZDNfZ2VvX2NlbnRyb2lkWTIgPSBkM19nZW9fY2VudHJvaWRaMiA9IDA7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aENlbnRyb2lkKSk7XG4gICAgICByZXR1cm4gZDNfZ2VvX2NlbnRyb2lkWjIgPyBbZDNfZ2VvX2NlbnRyb2lkWDIgLyBkM19nZW9fY2VudHJvaWRaMixcbiAgICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgLyBkM19nZW9fY2VudHJvaWRaMlxuICAgICAgXSA6IGQzX2dlb19jZW50cm9pZFoxID8gW2QzX2dlb19jZW50cm9pZFgxIC8gZDNfZ2VvX2NlbnRyb2lkWjEsXG4gICAgICAgIGQzX2dlb19jZW50cm9pZFkxIC8gZDNfZ2VvX2NlbnRyb2lkWjFcbiAgICAgIF0gOiBkM19nZW9fY2VudHJvaWRaMCA/IFtkM19nZW9fY2VudHJvaWRYMCAvIGQzX2dlb19jZW50cm9pZFowLFxuICAgICAgICBkM19nZW9fY2VudHJvaWRZMCAvIGQzX2dlb19jZW50cm9pZFowXG4gICAgICBdIDogW05hTiwgTmFOXTtcbiAgICB9O1xuICAgIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fcGF0aEJvdW5kc1gxID0gZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IC0oZDNfZ2VvX3BhdGhCb3VuZHNYMCA9XG4gICAgICAgIGQzX2dlb19wYXRoQm91bmRzWTAgPSBJbmZpbml0eSk7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEJvdW5kcykpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgW2QzX2dlb19wYXRoQm91bmRzWDAsIGQzX2dlb19wYXRoQm91bmRzWTBdLFxuICAgICAgICBbZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMV1cbiAgICAgIF07XG4gICAgfTtcbiAgICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuICAgICAgcHJvamVjdFN0cmVhbSA9IChwcm9qZWN0aW9uID0gXykgPyBfLnN0cmVhbSB8fFxuICAgICAgICBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0oXykgOiBkM19pZGVudGl0eTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICAgIGNvbnRleHRTdHJlYW0gPSAoY29udGV4dCA9IF8pID09IG51bGwgPyBuZXcgZDNfZ2VvX3BhdGhCdWZmZXIoKSA6XG4gICAgICAgIG5ldyBkM19nZW9fcGF0aENvbnRleHQoXyk7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoXG4gICAgICAgIHBvaW50UmFkaXVzKTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcGF0aC5wb2ludFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuICAgICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtcbiAgICAgICAgXyksICtfKTtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5wcm9qZWN0aW9uKGQzLmdlby5hbGJlcnNVc2EoKSkuY29udGV4dChudWxsKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0ocHJvamVjdCkge1xuICAgIHZhciByZXNhbXBsZSA9IGQzX2dlb19yZXNhbXBsZShmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4gcHJvamVjdChbeCAqIGQzX2RlZ3JlZXMsIHkgKiBkM19kZWdyZWVzXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uUmFkaWFucyhyZXNhbXBsZShzdHJlYW0pKTtcbiAgICB9O1xuICB9XG4gIGQzLmdlby50cmFuc2Zvcm0gPSBmdW5jdGlvbihtZXRob2RzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBuZXcgZDNfZ2VvX3RyYW5zZm9ybShzdHJlYW0pO1xuICAgICAgICBmb3IgKHZhciBrIGluIG1ldGhvZHMpIHRyYW5zZm9ybVtrXSA9IG1ldGhvZHNba107XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtKHN0cmVhbSkge1xuICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICB9XG4gIGQzX2dlb190cmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5zcGhlcmUoKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHJlYW0ubGluZUVuZCgpO1xuICAgIH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2dlb190cmFuc2Zvcm1Qb2ludChzdHJlYW0sIHBvaW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5zcGhlcmUoKTtcbiAgICAgIH0sXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICB9LFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZDMuZ2VvLnByb2plY3Rpb24gPSBkM19nZW9fcHJvamVjdGlvbjtcbiAgZDMuZ2VvLnByb2plY3Rpb25NdXRhdG9yID0gZDNfZ2VvX3Byb2plY3Rpb25NdXRhdG9yO1xuXG4gIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHByb2plY3Q7XG4gICAgfSkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgICB2YXIgcHJvamVjdCwgcm90YXRlLCBwcm9qZWN0Um90YXRlLCBwcm9qZWN0UmVzYW1wbGUgPSBkM19nZW9fcmVzYW1wbGUoXG4gICAgICAgIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgICByZXR1cm4gW3hbMF0gKiBrICsgzrR4LCDOtHkgLSB4WzFdICoga107XG4gICAgICAgIH0pLFxuICAgICAgayA9IDE1MCxcbiAgICAgIHggPSA0ODAsXG4gICAgICB5ID0gMjUwLFxuICAgICAgzrsgPSAwLFxuICAgICAgz4YgPSAwLFxuICAgICAgzrTOuyA9IDAsXG4gICAgICDOtM+GID0gMCxcbiAgICAgIM60zrMgPSAwLFxuICAgICAgzrR4LCDOtHksIHByZWNsaXAgPSBkM19nZW9fY2xpcEFudGltZXJpZGlhbixcbiAgICAgIHBvc3RjbGlwID0gZDNfaWRlbnRpdHksXG4gICAgICBjbGlwQW5nbGUgPSBudWxsLFxuICAgICAgY2xpcEV4dGVudCA9IG51bGwsXG4gICAgICBzdHJlYW07XG5cbiAgICBmdW5jdGlvbiBwcm9qZWN0aW9uKHBvaW50KSB7XG4gICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUocG9pbnRbMF0gKiBkM19yYWRpYW5zLCBwb2ludFsxXSAqIGQzX3JhZGlhbnMpO1xuICAgICAgcmV0dXJuIFtwb2ludFswXSAqIGsgKyDOtHgsIM60eSAtIHBvaW50WzFdICoga107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG4gICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUuaW52ZXJ0KChwb2ludFswXSAtIM60eCkgLyBrLCAozrR5IC0gcG9pbnRbMV0pIC8gayk7XG4gICAgICByZXR1cm4gcG9pbnQgJiYgW3BvaW50WzBdICogZDNfZGVncmVlcywgcG9pbnRbMV0gKiBkM19kZWdyZWVzXTtcbiAgICB9XG4gICAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtID0gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHByZWNsaXAocm90YXRlLCBwcm9qZWN0UmVzYW1wbGUoXG4gICAgICAgIHBvc3RjbGlwKG91dHB1dCkpKSk7XG4gICAgICBzdHJlYW0udmFsaWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9O1xuICAgIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEFuZ2xlO1xuICAgICAgcHJlY2xpcCA9IF8gPT0gbnVsbCA/IChjbGlwQW5nbGUgPSBfLCBkM19nZW9fY2xpcEFudGltZXJpZGlhbikgOlxuICAgICAgICBkM19nZW9fY2xpcENpcmNsZSgoY2xpcEFuZ2xlID0gK18pICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gaW52YWxpZGF0ZSgpO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEV4dGVudDtcbiAgICAgIGNsaXBFeHRlbnQgPSBfO1xuICAgICAgcG9zdGNsaXAgPSBfID8gZDNfZ2VvX2NsaXBFeHRlbnQoX1swXVswXSwgX1swXVsxXSwgX1sxXVswXSwgX1sxXVsxXSkgOlxuICAgICAgICBkM19pZGVudGl0eTtcbiAgICAgIHJldHVybiBpbnZhbGlkYXRlKCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaztcbiAgICAgIGsgPSArXztcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbeCwgeV07XG4gICAgICB4ID0gK19bMF07XG4gICAgICB5ID0gK19bMV07XG4gICAgICByZXR1cm4gcmVzZXQoKTtcbiAgICB9O1xuICAgIHByb2plY3Rpb24uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW867ICogZDNfZGVncmVlcywgz4YgKiBkM19kZWdyZWVzXTtcbiAgICAgIM67ID0gX1swXSAlIDM2MCAqIGQzX3JhZGlhbnM7XG4gICAgICDPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFvOtM67ICogZDNfZGVncmVlcywgzrTPhiAqIGQzX2RlZ3JlZXMsIM60zrMgKlxuICAgICAgICBkM19kZWdyZWVzXG4gICAgICBdO1xuICAgICAgzrTOuyA9IF9bMF0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTOsyA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiBkM19yYWRpYW5zIDogMDtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgZDMucmViaW5kKHByb2plY3Rpb24sIHByb2plY3RSZXNhbXBsZSwgXCJwcmVjaXNpb25cIik7XG5cbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHByb2plY3RSb3RhdGUgPSBkM19nZW9fY29tcG9zZShyb3RhdGUgPSBkM19nZW9fcm90YXRpb24ozrTOuywgzrTPhiwgzrTOsyksXG4gICAgICAgIHByb2plY3QpO1xuICAgICAgdmFyIGNlbnRlciA9IHByb2plY3QozrssIM+GKTtcbiAgICAgIM60eCA9IHggLSBjZW50ZXJbMF0gKiBrO1xuICAgICAgzrR5ID0geSArIGNlbnRlclsxXSAqIGs7XG4gICAgICByZXR1cm4gaW52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgICBpZiAoc3RyZWFtKSBzdHJlYW0udmFsaWQgPSBmYWxzZSwgc3RyZWFtID0gbnVsbDtcbiAgICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBwcm9qZWN0aW9uLmludmVydCA9IHByb2plY3QuaW52ZXJ0ICYmIGludmVydDtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fcHJvamVjdGlvblJhZGlhbnMoc3RyZWFtKSB7XG4gICAgcmV0dXJuIGQzX2dlb190cmFuc2Zvcm1Qb2ludChzdHJlYW0sIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHN0cmVhbS5wb2ludCh4ICogZDNfcmFkaWFucywgeSAqIGQzX3JhZGlhbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcijOuywgz4YpIHtcbiAgICByZXR1cm4gW867LCDPhl07XG4gIH1cbiAgKGQzLmdlby5lcXVpcmVjdGFuZ3VsYXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcik7XG4gIH0pLnJhdyA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIuaW52ZXJ0ID0gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcjtcbiAgZDMuZ2VvLnJvdGF0aW9uID0gZnVuY3Rpb24ocm90YXRlKSB7XG4gICAgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKHJvdGF0ZVswXSAlIDM2MCAqIGQzX3JhZGlhbnMsIHJvdGF0ZVsxXSAqXG4gICAgICBkM19yYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIGQzX3JhZGlhbnMgOiAwKTtcblxuICAgIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKlxuICAgICAgICBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLFxuICAgICAgICBjb29yZGluYXRlcztcbiAgICB9XG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucyxcbiAgICAgICAgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLFxuICAgICAgICBjb29yZGluYXRlcztcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2dlb19pZGVudGl0eVJvdGF0aW9uKM67LCDPhikge1xuICAgIHJldHVybiBbzrsgPiDPgCA/IM67IC0gz4QgOiDOuyA8IC3PgCA/IM67ICsgz4QgOiDOuywgz4ZdO1xuICB9XG4gIGQzX2dlb19pZGVudGl0eVJvdGF0aW9uLmludmVydCA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX3JvdGF0aW9uKM60zrssIM60z4YsIM60zrMpIHtcbiAgICByZXR1cm4gzrTOuyA/IM60z4YgfHwgzrTOsyA/IGQzX2dlb19jb21wb3NlKGQzX2dlb19yb3RhdGlvbs67KM60zrspLFxuICAgICAgICBkM19nZW9fcm90YXRpb27Phs6zKM60z4YsIM60zrMpKSA6IGQzX2dlb19yb3RhdGlvbs67KM60zrspIDogzrTPhiB8fCDOtM6zID9cbiAgICAgIGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykgOiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19mb3J3YXJkUm90YXRpb27OuyjOtM67KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgcmV0dXJuIM67ICs9IM60zrssIFvOuyA+IM+AID8gzrsgLSDPhCA6IM67IDwgLc+AID8gzrsgKyDPhCA6IM67LCDPhl07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbs67KM60zrspIHtcbiAgICB2YXIgcm90YXRpb24gPSBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsozrTOuyk7XG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67KC3OtM67KTtcbiAgICByZXR1cm4gcm90YXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb27Phs6zKM60z4YsIM60zrMpIHtcbiAgICB2YXIgY29zzrTPhiA9IE1hdGguY29zKM60z4YpLFxuICAgICAgc2luzrTPhiA9IE1hdGguc2luKM60z4YpLFxuICAgICAgY29zzrTOsyA9IE1hdGguY29zKM60zrMpLFxuICAgICAgc2luzrTOsyA9IE1hdGguc2luKM60zrMpO1xuXG4gICAgZnVuY3Rpb24gcm90YXRpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksXG4gICAgICAgIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhixcbiAgICAgICAgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLFxuICAgICAgICB6ID0gTWF0aC5zaW4oz4YpLFxuICAgICAgICBrID0geiAqIGNvc860z4YgKyB4ICogc2luzrTPhjtcbiAgICAgIHJldHVybiBbTWF0aC5hdGFuMih5ICogY29zzrTOsyAtIGsgKiBzaW7OtM6zLCB4ICogY29zzrTPhiAtIHogKiBzaW7OtM+GKSxcbiAgICAgICAgZDNfYXNpbihrICogY29zzrTOsyArIHkgKiBzaW7OtM6zKVxuICAgICAgXTtcbiAgICB9XG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksXG4gICAgICAgIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhixcbiAgICAgICAgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLFxuICAgICAgICB6ID0gTWF0aC5zaW4oz4YpLFxuICAgICAgICBrID0geiAqIGNvc860zrMgLSB5ICogc2luzrTOsztcbiAgICAgIHJldHVybiBbTWF0aC5hdGFuMih5ICogY29zzrTOsyArIHogKiBzaW7OtM6zLCB4ICogY29zzrTPhiArIGsgKiBzaW7OtM+GKSxcbiAgICAgICAgZDNfYXNpbihrICogY29zzrTPhiAtIHggKiBzaW7OtM+GKVxuICAgICAgXTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuICBkMy5nZW8uY2lyY2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9yaWdpbiA9IFswLCAwXSxcbiAgICAgIGFuZ2xlLCBwcmVjaXNpb24gPSA2LFxuICAgICAgaW50ZXJwb2xhdGU7XG5cbiAgICBmdW5jdGlvbiBjaXJjbGUoKSB7XG4gICAgICB2YXIgY2VudGVyID0gdHlwZW9mIG9yaWdpbiA9PT0gXCJmdW5jdGlvblwiID8gb3JpZ2luLmFwcGx5KHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzKSA6IG9yaWdpbixcbiAgICAgICAgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKC1jZW50ZXJbMF0gKiBkM19yYWRpYW5zLCAtY2VudGVyWzFdICpcbiAgICAgICAgICBkM19yYWRpYW5zLCAwKS5pbnZlcnQsXG4gICAgICAgIHJpbmcgPSBbXTtcbiAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgICAgICAgeFswXSAqPSBkM19kZWdyZWVzLCB4WzFdICo9IGQzX2RlZ3JlZXM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbcmluZ11cbiAgICAgIH07XG4gICAgfVxuICAgIGNpcmNsZS5vcmlnaW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmlnaW47XG4gICAgICBvcmlnaW4gPSB4O1xuICAgICAgcmV0dXJuIGNpcmNsZTtcbiAgICB9O1xuICAgIGNpcmNsZS5hbmdsZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGFuZ2xlO1xuICAgICAgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUoKGFuZ2xlID0gK3gpICogZDNfcmFkaWFucyxcbiAgICAgICAgcHJlY2lzaW9uICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcbiAgICAgIGludGVycG9sYXRlID0gZDNfZ2VvX2NpcmNsZUludGVycG9sYXRlKGFuZ2xlICogZDNfcmFkaWFucywgKFxuICAgICAgICBwcmVjaXNpb24gPSArXykgKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjaXJjbGU7XG4gICAgfTtcbiAgICByZXR1cm4gY2lyY2xlLmFuZ2xlKDkwKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUocmFkaXVzLCBwcmVjaXNpb24pIHtcbiAgICB2YXIgY3IgPSBNYXRoLmNvcyhyYWRpdXMpLFxuICAgICAgc3IgPSBNYXRoLnNpbihyYWRpdXMpO1xuICAgIHJldHVybiBmdW5jdGlvbihmcm9tLCB0bywgZGlyZWN0aW9uLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIHN0ZXAgPSBkaXJlY3Rpb24gKiBwcmVjaXNpb247XG4gICAgICBpZiAoZnJvbSAhPSBudWxsKSB7XG4gICAgICAgIGZyb20gPSBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIGZyb20pO1xuICAgICAgICB0byA9IGQzX2dlb19jaXJjbGVBbmdsZShjciwgdG8pO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID4gMCA/IGZyb20gPCB0byA6IGZyb20gPiB0bykgZnJvbSArPSBkaXJlY3Rpb24gKiDPhDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyb20gPSByYWRpdXMgKyBkaXJlY3Rpb24gKiDPhDtcbiAgICAgICAgdG8gPSByYWRpdXMgLSAuNSAqIHN0ZXA7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBwb2ludCwgdCA9IGZyb207IGRpcmVjdGlvbiA+IDAgPyB0ID4gdG8gOiB0IDwgdG87IHQgLT1cbiAgICAgICAgc3RlcCkge1xuICAgICAgICBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBkM19nZW9fc3BoZXJpY2FsKFtjciwgLXNyICogTWF0aC5jb3ModCksIC1cbiAgICAgICAgICBzciAqIE1hdGguc2luKHQpXG4gICAgICAgIF0pKVswXSwgcG9pbnRbMV0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHBvaW50KSB7XG4gICAgdmFyIGEgPSBkM19nZW9fY2FydGVzaWFuKHBvaW50KTtcbiAgICBhWzBdIC09IGNyO1xuICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYSk7XG4gICAgdmFyIGFuZ2xlID0gZDNfYWNvcygtYVsxXSk7XG4gICAgcmV0dXJuICgoLWFbMl0gPCAwID8gLWFuZ2xlIDogYW5nbGUpICsgMiAqIE1hdGguUEkgLSDOtSkgJSAoMiAqIE1hdGguUEkpO1xuICB9XG4gIGQzLmdlby5kaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgzpTOuyA9IChiWzBdIC0gYVswXSkgKiBkM19yYWRpYW5zLFxuICAgICAgz4YwID0gYVsxXSAqIGQzX3JhZGlhbnMsXG4gICAgICDPhjEgPSBiWzFdICogZDNfcmFkaWFucyxcbiAgICAgIHNpbs6UzrsgPSBNYXRoLnNpbijOlM67KSxcbiAgICAgIGNvc86UzrsgPSBNYXRoLmNvcyjOlM67KSxcbiAgICAgIHNpbs+GMCA9IE1hdGguc2luKM+GMCksXG4gICAgICBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLFxuICAgICAgc2luz4YxID0gTWF0aC5zaW4oz4YxKSxcbiAgICAgIGNvc8+GMSA9IE1hdGguY29zKM+GMSksXG4gICAgICB0O1xuICAgIHJldHVybiBNYXRoLmF0YW4yKE1hdGguc3FydCgodCA9IGNvc8+GMSAqIHNpbs6UzrspICogdCArICh0ID0gY29zz4YwICpcbiAgICAgICAgc2luz4YxIC0gc2luz4YwICogY29zz4YxICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YxICsgY29zz4YwICpcbiAgICAgIGNvc8+GMSAqIGNvc86UzrspO1xuICB9O1xuICBkMy5nZW8uZ3JhdGljdWxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHgxLCB4MCwgWDEsIFgwLCB5MSwgeTAsIFkxLCBZMCwgZHggPSAxMCxcbiAgICAgIGR5ID0gZHgsXG4gICAgICBEWCA9IDkwLFxuICAgICAgRFkgPSAzNjAsXG4gICAgICB4LCB5LCBYLCBZLCBwcmVjaXNpb24gPSAyLjU7XG5cbiAgICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIk11bHRpTGluZVN0cmluZ1wiLFxuICAgICAgICBjb29yZGluYXRlczogbGluZXMoKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoWDAgLyBEWCkgKiBEWCwgWDEsIERYKS5tYXAoWCkuY29uY2F0KGQzLnJhbmdlKFxuICAgICAgICBNYXRoLmNlaWwoWTAgLyBEWSkgKiBEWSwgWTEsIERZKS5tYXAoWSkpLmNvbmNhdChkMy5yYW5nZShNYXRoLmNlaWwoXG4gICAgICAgIHgwIC8gZHgpICogZHgsIHgxLCBkeCkuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIGFicyh4ICUgRFgpID4gzrU7XG4gICAgICB9KS5tYXAoeCkpLmNvbmNhdChkMy5yYW5nZShNYXRoLmNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoXG4gICAgICAgIGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgICByZXR1cm4gYWJzKHkgJSBEWSkgPiDOtTtcbiAgICAgICAgfSkubWFwKHkpKTtcbiAgICB9XG4gICAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbGluZXMoKS5tYXAoZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcIkxpbmVTdHJpbmdcIixcbiAgICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgICBjb29yZGluYXRlczogW1goWDApLmNvbmNhdChZKFkxKS5zbGljZSgxKSwgWChYMSkucmV2ZXJzZSgpLnNsaWNlKFxuICAgICAgICAgIDEpLCBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpXVxuICAgICAgfTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUubWlub3JFeHRlbnQoKTtcbiAgICAgIHJldHVybiBncmF0aWN1bGUubWFqb3JFeHRlbnQoXykubWlub3JFeHRlbnQoXyk7XG4gICAgfTtcbiAgICBncmF0aWN1bGUubWFqb3JFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbXG4gICAgICAgIFtYMCwgWTBdLFxuICAgICAgICBbWDEsIFkxXVxuICAgICAgXTtcbiAgICAgIFgwID0gK19bMF1bMF0sIFgxID0gK19bMV1bMF07XG4gICAgICBZMCA9ICtfWzBdWzFdLCBZMSA9ICtfWzFdWzFdO1xuICAgICAgaWYgKFgwID4gWDEpIF8gPSBYMCwgWDAgPSBYMSwgWDEgPSBfO1xuICAgICAgaWYgKFkwID4gWTEpIF8gPSBZMCwgWTAgPSBZMSwgWTEgPSBfO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5taW5vckV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtcbiAgICAgICAgW3gwLCB5MF0sXG4gICAgICAgIFt4MSwgeTFdXG4gICAgICBdO1xuICAgICAgeDAgPSArX1swXVswXSwgeDEgPSArX1sxXVswXTtcbiAgICAgIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV07XG4gICAgICBpZiAoeDAgPiB4MSkgXyA9IHgwLCB4MCA9IHgxLCB4MSA9IF87XG4gICAgICBpZiAoeTAgPiB5MSkgXyA9IHkwLCB5MCA9IHkxLCB5MSA9IF87XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLnN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUubWlub3JTdGVwKCk7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yU3RlcChfKS5taW5vclN0ZXAoXyk7XG4gICAgfTtcbiAgICBncmF0aWN1bGUubWFqb3JTdGVwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW0RYLCBEWV07XG4gICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5taW5vclN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICAgIGR4ID0gK19bMF0sIGR5ID0gK19bMV07XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcbiAgICAgIHByZWNpc2lvbiA9ICtfO1xuICAgICAgeCA9IGQzX2dlb19ncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuICAgICAgeSA9IGQzX2dlb19ncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcbiAgICAgIFggPSBkM19nZW9fZ3JhdGljdWxlWChZMCwgWTEsIDkwKTtcbiAgICAgIFkgPSBkM19nZW9fZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvckV4dGVudChbXG4gICAgICBbLTE4MCwgLTkwICsgzrVdLFxuICAgICAgWzE4MCwgOTAgLSDOtV1cbiAgICBdKS5taW5vckV4dGVudChbXG4gICAgICBbLTE4MCwgLTgwIC0gzrVdLFxuICAgICAgWzE4MCwgODAgKyDOtV1cbiAgICBdKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gICAgdmFyIHkgPSBkMy5yYW5nZSh5MCwgeTEgLSDOtSwgZHkpLmNvbmNhdCh5MSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7XG4gICAgICAgIHJldHVybiBbeCwgeV07XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuICAgIHZhciB4ID0gZDMucmFuZ2UoeDAsIHgxIC0gzrUsIGR4KS5jb25jYXQoeDEpO1xuICAgIHJldHVybiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gW3gsIHldO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NvdXJjZShkKSB7XG4gICAgcmV0dXJuIGQuc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdGFyZ2V0KGQpIHtcbiAgICByZXR1cm4gZC50YXJnZXQ7XG4gIH1cbiAgZDMuZ2VvLmdyZWF0QXJjID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvdXJjZSA9IGQzX3NvdXJjZSxcbiAgICAgIHNvdXJjZV8sIHRhcmdldCA9IGQzX3RhcmdldCxcbiAgICAgIHRhcmdldF87XG5cbiAgICBmdW5jdGlvbiBncmVhdEFyYygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICBjb29yZGluYXRlczogW3NvdXJjZV8gfHwgc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRhcmdldF8gfHxcbiAgICAgICAgICB0YXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICBdXG4gICAgICB9O1xuICAgIH1cbiAgICBncmVhdEFyYy5kaXN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzLmdlby5kaXN0YW5jZShzb3VyY2VfIHx8IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0YXJnZXRfIHx8IHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICAgIGdyZWF0QXJjLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvdXJjZTtcbiAgICAgIHNvdXJjZSA9IF8sIHNvdXJjZV8gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gbnVsbCA6IF87XG4gICAgICByZXR1cm4gZ3JlYXRBcmM7XG4gICAgfTtcbiAgICBncmVhdEFyYy50YXJnZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0YXJnZXQ7XG4gICAgICB0YXJnZXQgPSBfLCB0YXJnZXRfID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IG51bGwgOiBfO1xuICAgICAgcmV0dXJuIGdyZWF0QXJjO1xuICAgIH07XG4gICAgZ3JlYXRBcmMucHJlY2lzaW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGdyZWF0QXJjIDogMDtcbiAgICB9O1xuICAgIHJldHVybiBncmVhdEFyYztcbiAgfTtcbiAgZDMuZ2VvLmludGVycG9sYXRlID0gZnVuY3Rpb24oc291cmNlLCB0YXJnZXQpIHtcbiAgICByZXR1cm4gZDNfZ2VvX2ludGVycG9sYXRlKHNvdXJjZVswXSAqIGQzX3JhZGlhbnMsIHNvdXJjZVsxXSAqXG4gICAgICBkM19yYWRpYW5zLCB0YXJnZXRbMF0gKiBkM19yYWRpYW5zLCB0YXJnZXRbMV0gKiBkM19yYWRpYW5zKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9faW50ZXJwb2xhdGUoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgY3kwID0gTWF0aC5jb3MoeTApLFxuICAgICAgc3kwID0gTWF0aC5zaW4oeTApLFxuICAgICAgY3kxID0gTWF0aC5jb3MoeTEpLFxuICAgICAgc3kxID0gTWF0aC5zaW4oeTEpLFxuICAgICAga3gwID0gY3kwICogTWF0aC5jb3MoeDApLFxuICAgICAga3kwID0gY3kwICogTWF0aC5zaW4oeDApLFxuICAgICAga3gxID0gY3kxICogTWF0aC5jb3MoeDEpLFxuICAgICAga3kxID0gY3kxICogTWF0aC5zaW4oeDEpLFxuICAgICAgZCA9IDIgKiBNYXRoLmFzaW4oTWF0aC5zcXJ0KGQzX2hhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICpcbiAgICAgICAgZDNfaGF2ZXJzaW4oeDEgLSB4MCkpKSxcbiAgICAgIGsgPSAxIC8gTWF0aC5zaW4oZCk7XG4gICAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBCID0gTWF0aC5zaW4odCAqPSBkKSAqIGssXG4gICAgICAgIEEgPSBNYXRoLnNpbihkIC0gdCkgKiBrLFxuICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgIHkgPSBBICoga3kwICsgQiAqIGt5MSxcbiAgICAgICAgeiA9IEEgKiBzeTAgKyBCICogc3kxO1xuICAgICAgcmV0dXJuIFtNYXRoLmF0YW4yKHksIHgpICogZDNfZGVncmVlcywgTWF0aC5hdGFuMih6LCBNYXRoLnNxcnQoeCAqXG4gICAgICAgIHggKyB5ICogeSkpICogZDNfZGVncmVlc107XG4gICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFt4MCAqIGQzX2RlZ3JlZXMsIHkwICogZDNfZGVncmVlc107XG4gICAgfTtcbiAgICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XG4gICAgcmV0dXJuIGludGVycG9sYXRlO1xuICB9XG4gIGQzLmdlby5sZW5ndGggPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBkM19nZW9fbGVuZ3RoU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2xlbmd0aCk7XG4gICAgcmV0dXJuIGQzX2dlb19sZW5ndGhTdW07XG4gIH07XG4gIHZhciBkM19nZW9fbGVuZ3RoU3VtO1xuICB2YXIgZDNfZ2VvX2xlbmd0aCA9IHtcbiAgICBzcGhlcmU6IGQzX25vb3AsXG4gICAgcG9pbnQ6IGQzX25vb3AsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fbGVuZ3RoTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgcG9seWdvblN0YXJ0OiBkM19ub29wLFxuICAgIHBvbHlnb25FbmQ6IGQzX25vb3BcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fbGVuZ3RoTGluZVN0YXJ0KCkge1xuICAgIHZhciDOuzAsIHNpbs+GMCwgY29zz4YwO1xuICAgIGQzX2dlb19sZW5ndGgucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67MCA9IM67ICogZDNfcmFkaWFucywgc2luz4YwID0gTWF0aC5zaW4oz4YgKj0gZDNfcmFkaWFucyksIGNvc8+GMCA9XG4gICAgICAgIE1hdGguY29zKM+GKTtcbiAgICAgIGQzX2dlb19sZW5ndGgucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgfTtcbiAgICBkM19nZW9fbGVuZ3RoLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19sZW5ndGgucG9pbnQgPSBkM19nZW9fbGVuZ3RoLmxpbmVFbmQgPSBkM19ub29wO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQozrssIM+GKSB7XG4gICAgICB2YXIgc2luz4YgPSBNYXRoLnNpbijPhiAqPSBkM19yYWRpYW5zKSxcbiAgICAgICAgY29zz4YgPSBNYXRoLmNvcyjPhiksXG4gICAgICAgIHQgPSBhYnMoKM67ICo9IGQzX3JhZGlhbnMpIC0gzrswKSxcbiAgICAgICAgY29zzpTOuyA9IE1hdGguY29zKHQpO1xuICAgICAgZDNfZ2VvX2xlbmd0aFN1bSArPSBNYXRoLmF0YW4yKE1hdGguc3FydCgodCA9IGNvc8+GICogTWF0aC5zaW4odCkpICogdCArXG4gICAgICAgICAgKHQgPSBjb3PPhjAgKiBzaW7PhiAtIHNpbs+GMCAqIGNvc8+GICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YgK1xuICAgICAgICBjb3PPhjAgKiBjb3PPhiAqIGNvc86UzrspO1xuICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9fYXppbXV0aGFsKHNjYWxlLCBhbmdsZSkge1xuICAgIGZ1bmN0aW9uIGF6aW11dGhhbCjOuywgz4YpIHtcbiAgICAgIHZhciBjb3POuyA9IE1hdGguY29zKM67KSxcbiAgICAgICAgY29zz4YgPSBNYXRoLmNvcyjPhiksXG4gICAgICAgIGsgPSBzY2FsZShjb3POuyAqIGNvc8+GKTtcbiAgICAgIHJldHVybiBbayAqIGNvc8+GICogTWF0aC5zaW4ozrspLCBrICogTWF0aC5zaW4oz4YpXTtcbiAgICB9XG4gICAgYXppbXV0aGFsLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgYyA9IGFuZ2xlKM+BKSxcbiAgICAgICAgc2luYyA9IE1hdGguc2luKGMpLFxuICAgICAgICBjb3NjID0gTWF0aC5jb3MoYyk7XG4gICAgICByZXR1cm4gW01hdGguYXRhbjIoeCAqIHNpbmMsIM+BICogY29zYyksIE1hdGguYXNpbijPgSAmJiB5ICogc2luYyAvIM+BKV07XG4gICAgfTtcbiAgICByZXR1cm4gYXppbXV0aGFsO1xuICB9XG4gIHZhciBkM19nZW9fYXppbXV0aGFsRXF1YWxBcmVhID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgyIC8gKDEgKyBjb3POu2Nvc8+GKSk7XG4gIH0sIGZ1bmN0aW9uKM+BKSB7XG4gICAgcmV0dXJuIDIgKiBNYXRoLmFzaW4oz4EgLyAyKTtcbiAgfSk7XG4gIChkMy5nZW8uYXppbXV0aGFsRXF1YWxBcmVhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWEpO1xuICB9KS5yYXcgPSBkM19nZW9fYXppbXV0aGFsRXF1YWxBcmVhO1xuICB2YXIgZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50ID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgdmFyIGMgPSBNYXRoLmFjb3MoY29zzrtjb3PPhik7XG4gICAgcmV0dXJuIGMgJiYgYyAvIE1hdGguc2luKGMpO1xuICB9LCBkM19pZGVudGl0eSk7XG4gIChkMy5nZW8uYXppbXV0aGFsRXF1aWRpc3RhbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50KTtcbiAgfSkucmF3ID0gZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50O1xuXG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0NvbmZvcm1hbCjPhjAsIM+GMSkge1xuICAgIHZhciBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLFxuICAgICAgdCA9IGZ1bmN0aW9uKM+GKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpO1xuICAgICAgfSxcbiAgICAgIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiBNYXRoLmxvZyhjb3PPhjAgLyBNYXRoLmNvcyjPhjEpKSAvIE1hdGgubG9nKFxuICAgICAgICB0KM+GMSkgLyB0KM+GMCkpLFxuICAgICAgRiA9IGNvc8+GMCAqIE1hdGgucG93KHQoz4YwKSwgbikgLyBuO1xuICAgIGlmICghbikgcmV0dXJuIGQzX2dlb19tZXJjYXRvcjtcblxuICAgIGZ1bmN0aW9uIGZvcndhcmQozrssIM+GKSB7XG4gICAgICBpZiAoRiA+IDApIHtcbiAgICAgICAgaWYgKM+GIDwgLWhhbGbPgCArIM61KSDPhiA9IC1oYWxmz4AgKyDOtTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICjPhiA+IGhhbGbPgCAtIM61KSDPhiA9IGhhbGbPgCAtIM61O1xuICAgICAgfVxuICAgICAgdmFyIM+BID0gRiAvIE1hdGgucG93KHQoz4YpLCBuKTtcbiAgICAgIHJldHVybiBbz4EgKiBNYXRoLnNpbihuICogzrspLCBGIC0gz4EgKiBNYXRoLmNvcyhuICogzrspXTtcbiAgICB9XG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgz4EwX3kgPSBGIC0geSxcbiAgICAgICAgz4EgPSBkM19zZ24obikgKiBNYXRoLnNxcnQoeCAqIHggKyDPgTBfeSAqIM+BMF95KTtcbiAgICAgIHJldHVybiBbTWF0aC5hdGFuMih4LCDPgTBfeSkgLyBuLCAyICogTWF0aC5hdGFuKE1hdGgucG93KEYgLyDPgSwgMSAvXG4gICAgICAgIG4pKSAtIGhhbGbPgF07XG4gICAgfTtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuICAoZDMuZ2VvLmNvbmljQ29uZm9ybWFsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNDb25mb3JtYWwpO1xuICB9KS5yYXcgPSBkM19nZW9fY29uaWNDb25mb3JtYWw7XG5cbiAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljRXF1aWRpc3RhbnQoz4YwLCDPhjEpIHtcbiAgICB2YXIgY29zz4YwID0gTWF0aC5jb3Moz4YwKSxcbiAgICAgIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiAoY29zz4YwIC0gTWF0aC5jb3Moz4YxKSkgLyAoz4YxIC0gz4YwKSxcbiAgICAgIEcgPSBjb3PPhjAgLyBuICsgz4YwO1xuICAgIGlmIChhYnMobikgPCDOtSkgcmV0dXJuIGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG5cbiAgICBmdW5jdGlvbiBmb3J3YXJkKM67LCDPhikge1xuICAgICAgdmFyIM+BID0gRyAtIM+GO1xuICAgICAgcmV0dXJuIFvPgSAqIE1hdGguc2luKG4gKiDOuyksIEcgLSDPgSAqIE1hdGguY29zKG4gKiDOuyldO1xuICAgIH1cbiAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgTBfeSA9IEcgLSB5O1xuICAgICAgcmV0dXJuIFtNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIEcgLSBkM19zZ24obikgKiBNYXRoLnNxcnQoeCAqIHggK1xuICAgICAgICDPgTBfeSAqIM+BMF95KV07XG4gICAgfTtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuICAoZDMuZ2VvLmNvbmljRXF1aWRpc3RhbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX2NvbmljKGQzX2dlb19jb25pY0VxdWlkaXN0YW50KTtcbiAgfSkucmF3ID0gZDNfZ2VvX2NvbmljRXF1aWRpc3RhbnQ7XG4gIHZhciBkM19nZW9fZ25vbW9uaWMgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcbiAgICByZXR1cm4gMSAvIGNvc867Y29zz4Y7XG4gIH0sIE1hdGguYXRhbik7XG4gIChkMy5nZW8uZ25vbW9uaWMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2dub21vbmljKTtcbiAgfSkucmF3ID0gZDNfZ2VvX2dub21vbmljO1xuXG4gIGZ1bmN0aW9uIGQzX2dlb19tZXJjYXRvcijOuywgz4YpIHtcbiAgICByZXR1cm4gW867LCBNYXRoLmxvZyhNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpKV07XG4gIH1cbiAgZDNfZ2VvX21lcmNhdG9yLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW3gsIDIgKiBNYXRoLmF0YW4oTWF0aC5leHAoeSkpIC0gaGFsZs+AXTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgICB2YXIgbSA9IGQzX2dlb19wcm9qZWN0aW9uKHByb2plY3QpLFxuICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsXG4gICAgICBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LFxuICAgICAgY2xpcEF1dG87XG4gICAgbS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSBzY2FsZS5hcHBseShtLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHYgPT09IG0gPyBjbGlwQXV0byA/IG0uY2xpcEV4dGVudChudWxsKSA6IG0gOiB2O1xuICAgIH07XG4gICAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdHJhbnNsYXRlLmFwcGx5KG0sIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdiA9PT0gbSA/IGNsaXBBdXRvID8gbS5jbGlwRXh0ZW50KG51bGwpIDogbSA6IHY7XG4gICAgfTtcbiAgICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgdiA9IGNsaXBFeHRlbnQuYXBwbHkobSwgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2ID09PSBtKSB7XG4gICAgICAgIGlmIChjbGlwQXV0byA9IF8gPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBrID0gz4AgKiBzY2FsZSgpLFxuICAgICAgICAgICAgdCA9IHRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGNsaXBFeHRlbnQoW1xuICAgICAgICAgICAgW3RbMF0gLSBrLCB0WzFdIC0ga10sXG4gICAgICAgICAgICBbdFswXSArIGssIHRbMV0gKyBrXVxuICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNsaXBBdXRvKSB7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbiAgICByZXR1cm4gbS5jbGlwRXh0ZW50KG51bGwpO1xuICB9XG4gIChkMy5nZW8ubWVyY2F0b3IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihkM19nZW9fbWVyY2F0b3IpO1xuICB9KS5yYXcgPSBkM19nZW9fbWVyY2F0b3I7XG4gIHZhciBkM19nZW9fb3J0aG9ncmFwaGljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gMTtcbiAgfSwgTWF0aC5hc2luKTtcbiAgKGQzLmdlby5vcnRob2dyYXBoaWMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX29ydGhvZ3JhcGhpYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19vcnRob2dyYXBoaWM7XG4gIHZhciBkM19nZW9fc3RlcmVvZ3JhcGhpYyA9IGQzX2dlb19hemltdXRoYWwoZnVuY3Rpb24oY29zzrtjb3PPhikge1xuICAgIHJldHVybiAxIC8gKDEgKyBjb3POu2Nvc8+GKTtcbiAgfSwgZnVuY3Rpb24oz4EpIHtcbiAgICByZXR1cm4gMiAqIE1hdGguYXRhbijPgSk7XG4gIH0pO1xuICAoZDMuZ2VvLnN0ZXJlb2dyYXBoaWMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX3N0ZXJlb2dyYXBoaWMpO1xuICB9KS5yYXcgPSBkM19nZW9fc3RlcmVvZ3JhcGhpYztcblxuICBmdW5jdGlvbiBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yKM67LCDPhikge1xuICAgIHJldHVybiBbTWF0aC5sb2coTWF0aC50YW4oz4AgLyA0ICsgz4YgLyAyKSksIC3Ou107XG4gIH1cbiAgZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvci5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsteSwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh4KSkgLSBoYWxmz4BdO1xuICB9O1xuICAoZDMuZ2VvLnRyYW5zdmVyc2VNZXJjYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcm9qZWN0aW9uID0gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yKSxcbiAgICAgIGNlbnRlciA9IHByb2plY3Rpb24uY2VudGVyLFxuICAgICAgcm90YXRlID0gcHJvamVjdGlvbi5yb3RhdGU7XG4gICAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gXyA/IGNlbnRlcihbLV9bMV0sIF9bMF1dKSA6IChfID0gY2VudGVyKCksIFtfWzFdLCAtX1swXV0pO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gXyA/IHJvdGF0ZShbX1swXSwgX1sxXSwgXy5sZW5ndGggPiAyID8gX1syXSArIDkwIDogOTBdKSA6XG4gICAgICAgIChfID0gcm90YXRlKCksIFtfWzBdLCBfWzFdLCBfWzJdIC0gOTBdKTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGUoWzAsIDAsIDkwXSk7XG4gIH0pLnJhdyA9IGQzX2dlb190cmFuc3ZlcnNlTWVyY2F0b3I7XG4gIGQzLmdlb20gPSB7fTtcblxuICBmdW5jdGlvbiBkM19nZW9tX3BvaW50WChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3BvaW50WShkKSB7XG4gICAgcmV0dXJuIGRbMV07XG4gIH1cbiAgZDMuZ2VvbS5odWxsID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICB2YXIgeCA9IGQzX2dlb21fcG9pbnRYLFxuICAgICAgeSA9IGQzX2dlb21fcG9pbnRZO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaHVsbCh2ZXJ0aWNlcyk7XG5cbiAgICBmdW5jdGlvbiBodWxsKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLmxlbmd0aCA8IDMpIHJldHVybiBbXTtcbiAgICAgIHZhciBmeCA9IGQzX2Z1bmN0b3IoeCksXG4gICAgICAgIGZ5ID0gZDNfZnVuY3Rvcih5KSxcbiAgICAgICAgaSwgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBwb2ludHMgPSBbXSxcbiAgICAgICAgZmxpcHBlZFBvaW50cyA9IFtdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBwb2ludHMucHVzaChbK2Z4LmNhbGwodGhpcywgZGF0YVtpXSwgaSksICtmeS5jYWxsKHRoaXMsIGRhdGFbaV0sXG4gICAgICAgICAgaSksIGldKTtcbiAgICAgIH1cbiAgICAgIHBvaW50cy5zb3J0KGQzX2dlb21faHVsbE9yZGVyKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGZsaXBwZWRQb2ludHMucHVzaChbcG9pbnRzW2ldWzBdLCAtcG9pbnRzW2ldXG4gICAgICAgIFsxXVxuICAgICAgXSk7XG4gICAgICB2YXIgdXBwZXIgPSBkM19nZW9tX2h1bGxVcHBlcihwb2ludHMpLFxuICAgICAgICBsb3dlciA9IGQzX2dlb21faHVsbFVwcGVyKGZsaXBwZWRQb2ludHMpO1xuICAgICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJbMF0gPT09IHVwcGVyWzBdLFxuICAgICAgICBza2lwUmlnaHQgPSBsb3dlcltsb3dlci5sZW5ndGggLSAxXSA9PT0gdXBwZXJbdXBwZXIubGVuZ3RoIC0gMV0sXG4gICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgIGZvciAoaSA9IHVwcGVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBwb2x5Z29uLnB1c2goZGF0YVtwb2ludHNbXG4gICAgICAgIHVwcGVyW2ldXVsyXV0pO1xuICAgICAgZm9yIChpID0gK3NraXBMZWZ0OyBpIDwgbG93ZXIubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIHBvbHlnb24ucHVzaChcbiAgICAgICAgZGF0YVtwb2ludHNbbG93ZXJbaV1dWzJdXSk7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9XG4gICAgaHVsbC54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IF8sIGh1bGwpIDogeDtcbiAgICB9O1xuICAgIGh1bGwueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSBfLCBodWxsKSA6IHk7XG4gICAgfTtcbiAgICByZXR1cm4gaHVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9tX2h1bGxVcHBlcihwb2ludHMpIHtcbiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBodWxsID0gWzAsIDFdLFxuICAgICAgaHMgPSAyO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgbjsgaSsrKSB7XG4gICAgICB3aGlsZSAoaHMgPiAxICYmIGQzX2Nyb3NzMmQocG9pbnRzW2h1bGxbaHMgLSAyXV0sIHBvaW50c1todWxsW2hzIC0gMV1dLFxuICAgICAgICAgIHBvaW50c1tpXSkgPD0gMCkgLS1ocztcbiAgICAgIGh1bGxbaHMrK10gPSBpO1xuICAgIH1cbiAgICByZXR1cm4gaHVsbC5zbGljZSgwLCBocyk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX2h1bGxPcmRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gLSBiWzBdIHx8IGFbMV0gLSBiWzFdO1xuICB9XG4gIGQzLmdlb20ucG9seWdvbiA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG4gICAgZDNfc3ViY2xhc3MoY29vcmRpbmF0ZXMsIGQzX2dlb21fcG9seWdvblByb3RvdHlwZSk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzO1xuICB9O1xuICB2YXIgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlID0gZDMuZ2VvbS5wb2x5Z29uLnByb3RvdHlwZSA9IFtdO1xuICBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUuYXJlYSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICBuID0gdGhpcy5sZW5ndGgsXG4gICAgICBhLCBiID0gdGhpc1tuIC0gMV0sXG4gICAgICBhcmVhID0gMDtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gdGhpc1tpXTtcbiAgICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZWEgKiAuNTtcbiAgfTtcbiAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmNlbnRyb2lkID0gZnVuY3Rpb24oaykge1xuICAgIHZhciBpID0gLTEsXG4gICAgICBuID0gdGhpcy5sZW5ndGgsXG4gICAgICB4ID0gMCxcbiAgICAgIHkgPSAwLFxuICAgICAgYSwgYiA9IHRoaXNbbiAtIDFdLFxuICAgICAgYztcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGsgPSAtMSAvICg2ICogdGhpcy5hcmVhKCkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0aGlzW2ldO1xuICAgICAgYyA9IGFbMF0gKiBiWzFdIC0gYlswXSAqIGFbMV07XG4gICAgICB4ICs9IChhWzBdICsgYlswXSkgKiBjO1xuICAgICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgICB9XG4gICAgcmV0dXJuIFt4ICogaywgeSAqIGtdO1xuICB9O1xuICBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUuY2xpcCA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcbiAgICB2YXIgaW5wdXQsIGNsb3NlZCA9IGQzX2dlb21fcG9seWdvbkNsb3NlZChzdWJqZWN0KSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSB0aGlzLmxlbmd0aCAtIGQzX2dlb21fcG9seWdvbkNsb3NlZCh0aGlzKSxcbiAgICAgIGosIG0sIGEgPSB0aGlzW24gLSAxXSxcbiAgICAgIGIsIGMsIGQ7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlucHV0ID0gc3ViamVjdC5zbGljZSgpO1xuICAgICAgc3ViamVjdC5sZW5ndGggPSAwO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBjID0gaW5wdXRbKG0gPSBpbnB1dC5sZW5ndGggLSBjbG9zZWQpIC0gMV07XG4gICAgICBqID0gLTE7XG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICBkID0gaW5wdXRbal07XG4gICAgICAgIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoZCwgYSwgYikpIHtcbiAgICAgICAgICBpZiAoIWQzX2dlb21fcG9seWdvbkluc2lkZShjLCBhLCBiKSkge1xuICAgICAgICAgICAgc3ViamVjdC5wdXNoKGQzX2dlb21fcG9seWdvbkludGVyc2VjdChjLCBkLCBhLCBiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1YmplY3QucHVzaChkKTtcbiAgICAgICAgfSBlbHNlIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoYywgYSwgYikpIHtcbiAgICAgICAgICBzdWJqZWN0LnB1c2goZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpKTtcbiAgICAgICAgfVxuICAgICAgICBjID0gZDtcbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZWQpIHN1YmplY3QucHVzaChzdWJqZWN0WzBdKTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gc3ViamVjdDtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25JbnNpZGUocCwgYSwgYikge1xuICAgIHJldHVybiAoYlswXSAtIGFbMF0pICogKHBbMV0gLSBhWzFdKSA8IChiWzFdIC0gYVsxXSkgKiAocFswXSAtIGFbMF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpIHtcbiAgICB2YXIgeDEgPSBjWzBdLFxuICAgICAgeDMgPSBhWzBdLFxuICAgICAgeDIxID0gZFswXSAtIHgxLFxuICAgICAgeDQzID0gYlswXSAtIHgzLFxuICAgICAgeTEgPSBjWzFdLFxuICAgICAgeTMgPSBhWzFdLFxuICAgICAgeTIxID0gZFsxXSAtIHkxLFxuICAgICAgeTQzID0gYlsxXSAtIHkzLFxuICAgICAgdWEgPSAoeDQzICogKHkxIC0geTMpIC0geTQzICogKHgxIC0geDMpKSAvICh5NDMgKiB4MjEgLSB4NDMgKiB5MjEpO1xuICAgIHJldHVybiBbeDEgKyB1YSAqIHgyMSwgeTEgKyB1YSAqIHkyMV07XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25DbG9zZWQoY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgYSA9IGNvb3JkaW5hdGVzWzBdLFxuICAgICAgYiA9IGNvb3JkaW5hdGVzW2Nvb3JkaW5hdGVzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiAhKGFbMF0gLSBiWzBdIHx8IGFbMV0gLSBiWzFdKTtcbiAgfVxuICB2YXIgZDNfZ2VvbV92b3Jvbm9pRWRnZXMsIGQzX2dlb21fdm9yb25vaUNlbGxzLCBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLFxuICAgIGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbCA9IFtdLFxuICAgIGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlLCBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLFxuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZVBvb2wgPSBbXTtcblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lCZWFjaCgpIHtcbiAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUodGhpcyk7XG4gICAgdGhpcy5lZGdlID0gdGhpcy5zaXRlID0gdGhpcy5jaXJjbGUgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2goc2l0ZSkge1xuICAgIHZhciBiZWFjaCA9IGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbC5wb3AoKSB8fCBuZXcgZDNfZ2VvbV92b3Jvbm9pQmVhY2goKTtcbiAgICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgICByZXR1cm4gYmVhY2g7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChiZWFjaCkge1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShiZWFjaCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5yZW1vdmUoYmVhY2gpO1xuICAgIGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUoYmVhY2gpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goYmVhY2gpIHtcbiAgICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLFxuICAgICAgeCA9IGNpcmNsZS54LFxuICAgICAgeSA9IGNpcmNsZS5jeSxcbiAgICAgIHZlcnRleCA9IHtcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSxcbiAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcbiAgICAgIG5leHQgPSBiZWFjaC5OLFxuICAgICAgZGlzYXBwZWFyaW5nID0gW2JlYWNoXTtcbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChiZWFjaCk7XG4gICAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgICB3aGlsZSAobEFyYy5jaXJjbGUgJiYgYWJzKHggLSBsQXJjLmNpcmNsZS54KSA8IM61ICYmIGFicyh5IC0gbEFyYy5jaXJjbGVcbiAgICAgICAgLmN5KSA8IM61KSB7XG4gICAgICBwcmV2aW91cyA9IGxBcmMuUDtcbiAgICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2gobEFyYyk7XG4gICAgICBsQXJjID0gcHJldmlvdXM7XG4gICAgfVxuICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShsQXJjKTtcbiAgICB2YXIgckFyYyA9IG5leHQ7XG4gICAgd2hpbGUgKHJBcmMuY2lyY2xlICYmIGFicyh4IC0gckFyYy5jaXJjbGUueCkgPCDOtSAmJiBhYnMoeSAtIHJBcmMuY2lyY2xlXG4gICAgICAgIC5jeSkgPCDOtSkge1xuICAgICAgbmV4dCA9IHJBcmMuTjtcbiAgICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2gockFyYyk7XG4gICAgICByQXJjID0gbmV4dDtcbiAgICB9XG4gICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsXG4gICAgICBpQXJjO1xuICAgIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuICAgICAgbEFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjIC0gMV07XG4gICAgICBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gICAgfVxuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tuQXJjcyAtIDFdO1xuICAgIHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsXG4gICAgICB2ZXJ0ZXgpO1xuICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUockFyYyk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKSB7XG4gICAgdmFyIHggPSBzaXRlLngsXG4gICAgICBkaXJlY3RyaXggPSBzaXRlLnksXG4gICAgICBsQXJjLCByQXJjLCBkeGwsIGR4ciwgbm9kZSA9IGQzX2dlb21fdm9yb25vaUJlYWNoZXMuXztcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgZHhsID0gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG4gICAgICBpZiAoZHhsID4gzrUpIG5vZGUgPSBub2RlLkw7XG4gICAgICBlbHNlIHtcbiAgICAgICAgZHhyID0geCAtIGQzX2dlb21fdm9yb25vaVJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgICBpZiAoZHhyID4gzrUpIHtcbiAgICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZSA9IG5vZGUuUjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZHhsID4gLc61KSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuICAgICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeHIgPiAtzrUpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgbmV3QXJjID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2goc2l0ZSk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5pbnNlcnQobEFyYywgbmV3QXJjKTtcbiAgICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcbiAgICBpZiAobEFyYyA9PT0gckFyYykge1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgICAgckFyYyA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLmluc2VydChuZXdBcmMsIHJBcmMpO1xuICAgICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjXG4gICAgICAgIC5zaXRlKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShsQXJjKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShyQXJjKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFyQXJjKSB7XG4gICAgICBuZXdBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShsQXJjKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUockFyYyk7XG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgYXggPSBsU2l0ZS54LFxuICAgICAgYXkgPSBsU2l0ZS55LFxuICAgICAgYnggPSBzaXRlLnggLSBheCxcbiAgICAgIGJ5ID0gc2l0ZS55IC0gYXksXG4gICAgICByU2l0ZSA9IHJBcmMuc2l0ZSxcbiAgICAgIGN4ID0gclNpdGUueCAtIGF4LFxuICAgICAgY3kgPSByU2l0ZS55IC0gYXksXG4gICAgICBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksXG4gICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgIHZlcnRleCA9IHtcbiAgICAgICAgeDogKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCxcbiAgICAgICAgeTogKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheVxuICAgICAgfTtcbiAgICBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICAgIG5ld0FyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsU2l0ZSwgc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICByQXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUockFyYyk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGUsXG4gICAgICByZm9jeCA9IHNpdGUueCxcbiAgICAgIHJmb2N5ID0gc2l0ZS55LFxuICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuICAgIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuICAgIHZhciBsQXJjID0gYXJjLlA7XG4gICAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuICAgIHNpdGUgPSBsQXJjLnNpdGU7XG4gICAgdmFyIGxmb2N4ID0gc2l0ZS54LFxuICAgICAgbGZvY3kgPSBzaXRlLnksXG4gICAgICBwbGJ5MiA9IGxmb2N5IC0gZGlyZWN0cml4O1xuICAgIGlmICghcGxieTIpIHJldHVybiBsZm9jeDtcbiAgICB2YXIgaGwgPSBsZm9jeCAtIHJmb2N4LFxuICAgICAgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLFxuICAgICAgYiA9IGhsIC8gcGxieTI7XG4gICAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICpcbiAgICAgIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcbiAgICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciByQXJjID0gYXJjLk47XG4gICAgaWYgKHJBcmMpIHJldHVybiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChyQXJjLCBkaXJlY3RyaXgpO1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGU7XG4gICAgcmV0dXJuIHNpdGUueSA9PT0gZGlyZWN0cml4ID8gc2l0ZS54IDogSW5maW5pdHk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDZWxsKHNpdGUpIHtcbiAgICB0aGlzLnNpdGUgPSBzaXRlO1xuICAgIHRoaXMuZWRnZXMgPSBbXTtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lDZWxsLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhhbGZFZGdlcyA9IHRoaXMuZWRnZXMsXG4gICAgICBpSGFsZkVkZ2UgPSBoYWxmRWRnZXMubGVuZ3RoLFxuICAgICAgZWRnZTtcbiAgICB3aGlsZSAoaUhhbGZFZGdlLS0pIHtcbiAgICAgIGVkZ2UgPSBoYWxmRWRnZXNbaUhhbGZFZGdlXS5lZGdlO1xuICAgICAgaWYgKCFlZGdlLmIgfHwgIWVkZ2UuYSkgaGFsZkVkZ2VzLnNwbGljZShpSGFsZkVkZ2UsIDEpO1xuICAgIH1cbiAgICBoYWxmRWRnZXMuc29ydChkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyKTtcbiAgICByZXR1cm4gaGFsZkVkZ2VzLmxlbmd0aDtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDbG9zZUNlbGxzKGV4dGVudCkge1xuICAgIHZhciB4MCA9IGV4dGVudFswXVswXSxcbiAgICAgIHgxID0gZXh0ZW50WzFdWzBdLFxuICAgICAgeTAgPSBleHRlbnRbMF1bMV0sXG4gICAgICB5MSA9IGV4dGVudFsxXVsxXSxcbiAgICAgIHgyLCB5MiwgeDMsIHkzLCBjZWxscyA9IGQzX2dlb21fdm9yb25vaUNlbGxzLFxuICAgICAgaUNlbGwgPSBjZWxscy5sZW5ndGgsXG4gICAgICBjZWxsLCBpSGFsZkVkZ2UsIGhhbGZFZGdlcywgbkhhbGZFZGdlcywgc3RhcnQsIGVuZDtcbiAgICB3aGlsZSAoaUNlbGwtLSkge1xuICAgICAgY2VsbCA9IGNlbGxzW2lDZWxsXTtcbiAgICAgIGlmICghY2VsbCB8fCAhY2VsbC5wcmVwYXJlKCkpIGNvbnRpbnVlO1xuICAgICAgaGFsZkVkZ2VzID0gY2VsbC5lZGdlcztcbiAgICAgIG5IYWxmRWRnZXMgPSBoYWxmRWRnZXMubGVuZ3RoO1xuICAgICAgaUhhbGZFZGdlID0gMDtcbiAgICAgIHdoaWxlIChpSGFsZkVkZ2UgPCBuSGFsZkVkZ2VzKSB7XG4gICAgICAgIGVuZCA9IGhhbGZFZGdlc1tpSGFsZkVkZ2VdLmVuZCgpLCB4MyA9IGVuZC54LCB5MyA9IGVuZC55O1xuICAgICAgICBzdGFydCA9IGhhbGZFZGdlc1srK2lIYWxmRWRnZSAlIG5IYWxmRWRnZXNdLnN0YXJ0KCksIHgyID0gc3RhcnQueCxcbiAgICAgICAgICB5MiA9IHN0YXJ0Lnk7XG4gICAgICAgIGlmIChhYnMoeDMgLSB4MikgPiDOtSB8fCBhYnMoeTMgLSB5MikgPiDOtSkge1xuICAgICAgICAgIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAwLCBuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoXG4gICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lDcmVhdGVCb3JkZXJFZGdlKGNlbGwuc2l0ZSwgZW5kLCBhYnMoeDMgLSB4MCkgPFxuICAgICAgICAgICAgICDOtSAmJiB5MSAtIHkzID4gzrUgPyB7XG4gICAgICAgICAgICAgICAgeDogeDAsXG4gICAgICAgICAgICAgICAgeTogYWJzKHgyIC0geDApIDwgzrUgPyB5MiA6IHkxXG4gICAgICAgICAgICAgIH0gOiBhYnMoeTMgLSB5MSkgPCDOtSAmJiB4MSAtIHgzID4gzrUgPyB7XG4gICAgICAgICAgICAgICAgeDogYWJzKHkyIC0geTEpIDwgzrUgPyB4MiA6IHgxLFxuICAgICAgICAgICAgICAgIHk6IHkxXG4gICAgICAgICAgICAgIH0gOiBhYnMoeDMgLSB4MSkgPCDOtSAmJiB5MyAtIHkwID4gzrUgPyB7XG4gICAgICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICAgICAgeTogYWJzKHgyIC0geDEpIDwgzrUgPyB5MiA6IHkwXG4gICAgICAgICAgICAgIH0gOiBhYnMoeTMgLSB5MCkgPCDOtSAmJiB4MyAtIHgwID4gzrUgPyB7XG4gICAgICAgICAgICAgICAgeDogYWJzKHkyIC0geTApIDwgzrUgPyB4MiA6IHgwLFxuICAgICAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgICAgIH0gOiBudWxsKSwgY2VsbC5zaXRlLCBudWxsKSk7XG4gICAgICAgICAgKytuSGFsZkVkZ2VzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGIuYW5nbGUgLSBhLmFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlKCkge1xuICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLmFyYyA9IHRoaXMuc2l0ZSA9IHRoaXMuY3kgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGFyYykge1xuICAgIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICByQXJjID0gYXJjLk47XG4gICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuICAgIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcbiAgICB2YXIgYnggPSBjU2l0ZS54LFxuICAgICAgYnkgPSBjU2l0ZS55LFxuICAgICAgYXggPSBsU2l0ZS54IC0gYngsXG4gICAgICBheSA9IGxTaXRlLnkgLSBieSxcbiAgICAgIGN4ID0gclNpdGUueCAtIGJ4LFxuICAgICAgY3kgPSByU2l0ZS55IC0gYnk7XG4gICAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgICBpZiAoZCA+PSAtzrUyKSByZXR1cm47XG4gICAgdmFyIGhhID0gYXggKiBheCArIGF5ICogYXksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLFxuICAgICAgeSA9IChheCAqIGhjIC0gY3ggKiBoYSkgLyBkLFxuICAgICAgY3kgPSB5ICsgYnk7XG4gICAgdmFyIGNpcmNsZSA9IGQzX2dlb21fdm9yb25vaUNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IGQzX2dlb21fdm9yb25vaUNpcmNsZSgpO1xuICAgIGNpcmNsZS5hcmMgPSBhcmM7XG4gICAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgICBjaXJjbGUueCA9IHggKyBieDtcbiAgICBjaXJjbGUueSA9IGN5ICsgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgIGNpcmNsZS5jeSA9IGN5O1xuICAgIGFyYy5jaXJjbGUgPSBjaXJjbGU7XG4gICAgdmFyIGJlZm9yZSA9IG51bGwsXG4gICAgICBub2RlID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5fO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgY2lyY2xlLnkgPT09IG5vZGUueSAmJiBjaXJjbGUueCA8PSBub2RlLngpIHtcbiAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gbm9kZS5QO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgICBpZiAoIWJlZm9yZSkgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUgPSBjaXJjbGU7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gICAgaWYgKGNpcmNsZSkge1xuICAgICAgaWYgKCFjaXJjbGUuUCkgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2xpcEVkZ2VzKGV4dGVudCkge1xuICAgIHZhciBlZGdlcyA9IGQzX2dlb21fdm9yb25vaUVkZ2VzLFxuICAgICAgY2xpcCA9IGQzX2dlb21fY2xpcExpbmUoZXh0ZW50WzBdWzBdLCBleHRlbnRbMF1bMV0sIGV4dGVudFsxXVswXSxcbiAgICAgICAgZXh0ZW50WzFdWzFdKSxcbiAgICAgIGkgPSBlZGdlcy5sZW5ndGgsXG4gICAgICBlO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGUgPSBlZGdlc1tpXTtcbiAgICAgIGlmICghZDNfZ2VvbV92b3Jvbm9pQ29ubmVjdEVkZ2UoZSwgZXh0ZW50KSB8fCAhY2xpcChlKSB8fCBhYnMoZS5hLnggLVxuICAgICAgICAgIGUuYi54KSA8IM61ICYmIGFicyhlLmEueSAtIGUuYi55KSA8IM61KSB7XG4gICAgICAgIGUuYSA9IGUuYiA9IG51bGw7XG4gICAgICAgIGVkZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZShlZGdlLCBleHRlbnQpIHtcbiAgICB2YXIgdmIgPSBlZGdlLmI7XG4gICAgaWYgKHZiKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgdmEgPSBlZGdlLmEsXG4gICAgICB4MCA9IGV4dGVudFswXVswXSxcbiAgICAgIHgxID0gZXh0ZW50WzFdWzBdLFxuICAgICAgeTAgPSBleHRlbnRbMF1bMV0sXG4gICAgICB5MSA9IGV4dGVudFsxXVsxXSxcbiAgICAgIGxTaXRlID0gZWRnZS5sLFxuICAgICAgclNpdGUgPSBlZGdlLnIsXG4gICAgICBseCA9IGxTaXRlLngsXG4gICAgICBseSA9IGxTaXRlLnksXG4gICAgICByeCA9IHJTaXRlLngsXG4gICAgICByeSA9IHJTaXRlLnksXG4gICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICBmeSA9IChseSArIHJ5KSAvIDIsXG4gICAgICBmbSwgZmI7XG4gICAgaWYgKHJ5ID09PSBseSkge1xuICAgICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkwXG4gICAgICAgIH07XG4gICAgICAgIGVsc2UgaWYgKHZhLnkgPj0geTEpIHJldHVybjtcbiAgICAgICAgdmIgPSB7XG4gICAgICAgICAgeDogZngsXG4gICAgICAgICAgeTogeTFcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkxXG4gICAgICAgIH07XG4gICAgICAgIGVsc2UgaWYgKHZhLnkgPCB5MCkgcmV0dXJuO1xuICAgICAgICB2YiA9IHtcbiAgICAgICAgICB4OiBmeCxcbiAgICAgICAgICB5OiB5MFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgICAgaWYgKGZtIDwgLTEgfHwgZm0gPiAxKSB7XG4gICAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfTtcbiAgICAgICAgICBlbHNlIGlmICh2YS55ID49IHkxKSByZXR1cm47XG4gICAgICAgICAgdmIgPSB7XG4gICAgICAgICAgICB4OiAoeTEgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkxXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcbiAgICAgICAgICAgIHg6ICh5MSAtIGZiKSAvIGZtLFxuICAgICAgICAgICAgeTogeTFcbiAgICAgICAgICB9O1xuICAgICAgICAgIGVsc2UgaWYgKHZhLnkgPCB5MCkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogKHkwIC0gZmIpIC8gZm0sXG4gICAgICAgICAgICB5OiB5MFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiB4MCxcbiAgICAgICAgICAgIHk6IGZtICogeDAgKyBmYlxuICAgICAgICAgIH07XG4gICAgICAgICAgZWxzZSBpZiAodmEueCA+PSB4MSkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9O1xuICAgICAgICAgIGVsc2UgaWYgKHZhLnggPCB4MCkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogeDAsXG4gICAgICAgICAgICB5OiBmbSAqIHgwICsgZmJcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVkZ2UuYSA9IHZhO1xuICAgIGVkZ2UuYiA9IHZiO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgclNpdGUpIHtcbiAgICB0aGlzLmwgPSBsU2l0ZTtcbiAgICB0aGlzLnIgPSByU2l0ZTtcbiAgICB0aGlzLmEgPSB0aGlzLmIgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsU2l0ZSwgclNpdGUsIHZhLCB2Yikge1xuICAgIHZhciBlZGdlID0gbmV3IGQzX2dlb21fdm9yb25vaUVkZ2UobFNpdGUsIHJTaXRlKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lFZGdlcy5wdXNoKGVkZ2UpO1xuICAgIGlmICh2YSkgZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZChlZGdlLCBsU2l0ZSwgclNpdGUsIHZhKTtcbiAgICBpZiAodmIpIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgclNpdGUsIGxTaXRlLCB2Yik7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbbFNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoXG4gICAgICBlZGdlLCBsU2l0ZSwgclNpdGUpKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lDZWxsc1tyU2l0ZS5pXS5lZGdlcy5wdXNoKG5ldyBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZShcbiAgICAgIGVkZ2UsIHJTaXRlLCBsU2l0ZSkpO1xuICAgIHJldHVybiBlZGdlO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShsU2l0ZSwgdmEsIHZiKSB7XG4gICAgdmFyIGVkZ2UgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgbnVsbCk7XG4gICAgZWRnZS5hID0gdmE7XG4gICAgZWRnZS5iID0gdmI7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRWRnZXMucHVzaChlZGdlKTtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpIHtcbiAgICBpZiAoIWVkZ2UuYSAmJiAhZWRnZS5iKSB7XG4gICAgICBlZGdlLmEgPSB2ZXJ0ZXg7XG4gICAgICBlZGdlLmwgPSBsU2l0ZTtcbiAgICAgIGVkZ2UuciA9IHJTaXRlO1xuICAgIH0gZWxzZSBpZiAoZWRnZS5sID09PSByU2l0ZSkge1xuICAgICAgZWRnZS5iID0gdmVydGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBlZGdlLmEgPSB2ZXJ0ZXg7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgbFNpdGUsIHJTaXRlKSB7XG4gICAgdmFyIHZhID0gZWRnZS5hLFxuICAgICAgdmIgPSBlZGdlLmI7XG4gICAgdGhpcy5lZGdlID0gZWRnZTtcbiAgICB0aGlzLnNpdGUgPSBsU2l0ZTtcbiAgICB0aGlzLmFuZ2xlID0gclNpdGUgPyBNYXRoLmF0YW4yKHJTaXRlLnkgLSBsU2l0ZS55LCByU2l0ZS54IC0gbFNpdGUueCkgOlxuICAgICAgZWRnZS5sID09PSBsU2l0ZSA/IE1hdGguYXRhbjIodmIueCAtIHZhLngsIHZhLnkgLSB2Yi55KSA6IE1hdGguYXRhbjIoXG4gICAgICAgIHZhLnggLSB2Yi54LCB2Yi55IC0gdmEueSk7XG4gIH1cbiAgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UucHJvdG90eXBlID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVkZ2UubCA9PT0gdGhpcy5zaXRlID8gdGhpcy5lZGdlLmEgOiB0aGlzLmVkZ2UuYjtcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGdlLmwgPT09IHRoaXMuc2l0ZSA/IHRoaXMuZWRnZS5iIDogdGhpcy5lZGdlLmE7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpIHtcbiAgICB0aGlzLl8gPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tOb2RlKG5vZGUpIHtcbiAgICBub2RlLlUgPSBub2RlLkMgPSBub2RlLkwgPSBub2RlLlIgPSBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuICB9XG4gIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gICAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XG4gICAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgICAgbm9kZS5QID0gYWZ0ZXI7XG4gICAgICAgIG5vZGUuTiA9IGFmdGVyLk47XG4gICAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xuICAgICAgICBhZnRlci5OID0gbm9kZTtcbiAgICAgICAgaWYgKGFmdGVyLlIpIHtcbiAgICAgICAgICBhZnRlciA9IGFmdGVyLlI7XG4gICAgICAgICAgd2hpbGUgKGFmdGVyLkwpIGFmdGVyID0gYWZ0ZXIuTDtcbiAgICAgICAgICBhZnRlci5MID0gbm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZnRlci5SID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fKSB7XG4gICAgICAgIGFmdGVyID0gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tGaXJzdCh0aGlzLl8pO1xuICAgICAgICBub2RlLlAgPSBudWxsO1xuICAgICAgICBub2RlLk4gPSBhZnRlcjtcbiAgICAgICAgYWZ0ZXIuUCA9IGFmdGVyLkwgPSBub2RlO1xuICAgICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gICAgICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgICAgIHBhcmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xuICAgICAgbm9kZS5VID0gcGFyZW50O1xuICAgICAgbm9kZS5DID0gdHJ1ZTtcbiAgICAgIGFmdGVyID0gbm9kZTtcbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgICAgZ3JhbmRwYSA9IHBhcmVudC5VO1xuICAgICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLkw7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICB9XG4gICAgICB0aGlzLl8uQyA9IGZhbHNlO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcbiAgICAgIGlmIChub2RlLlApIG5vZGUuUC5OID0gbm9kZS5OO1xuICAgICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgIHNpYmxpbmcsIGxlZnQgPSBub2RlLkwsXG4gICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICBuZXh0LCByZWQ7XG4gICAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcbiAgICAgIGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7XG4gICAgICBlbHNlIG5leHQgPSBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KHJpZ2h0KTtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICAgIH1cbiAgICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICAgIHJlZCA9IG5leHQuQztcbiAgICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgICBsZWZ0LlUgPSBuZXh0O1xuICAgICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgICAgbmV4dC5VID0gbm9kZS5VO1xuICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICAgIG5leHQuUiA9IHJpZ2h0O1xuICAgICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQuVSA9IHBhcmVudDtcbiAgICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICB9XG4gICAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgICAgaWYgKHJlZCkgcmV0dXJuO1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZS5DKSB7XG4gICAgICAgIG5vZGUuQyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLl8pIGJyZWFrO1xuICAgICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQyB8fCBzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5SIHx8ICFzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMgfHwgc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBpZiAoIXNpYmxpbmcuTCB8fCAhc2libGluZy5MLkMpIHtcbiAgICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LlU7XG4gICAgICB9IHdoaWxlICghbm9kZS5DKTtcbiAgICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5SLFxuICAgICAgcGFyZW50ID0gcC5VO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuUiA9IHEuTDtcbiAgICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gICAgcS5MID0gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICAgIHZhciBwID0gbm9kZSxcbiAgICAgIHEgPSBub2RlLkwsXG4gICAgICBwYXJlbnQgPSBwLlU7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZS5fID0gcTtcbiAgICB9XG4gICAgcS5VID0gcGFyZW50O1xuICAgIHAuVSA9IHE7XG4gICAgcC5MID0gcS5SO1xuICAgIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgICBxLlIgPSBwO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaShzaXRlcywgYmJveCkge1xuICAgIHZhciBzaXRlID0gc2l0ZXMuc29ydChkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcikucG9wKCksXG4gICAgICB4MCwgeTAsIGNpcmNsZTtcbiAgICBkM19nZW9tX3Zvcm9ub2lFZGdlcyA9IFtdO1xuICAgIGQzX2dlb21fdm9yb25vaUNlbGxzID0gbmV3IEFycmF5KHNpdGVzLmxlbmd0aCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyA9IG5ldyBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzID0gbmV3IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjaXJjbGUgPSBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZTtcbiAgICAgIGlmIChzaXRlICYmICghY2lyY2xlIHx8IHNpdGUueSA8IGNpcmNsZS55IHx8IHNpdGUueSA9PT0gY2lyY2xlLnkgJiZcbiAgICAgICAgICBzaXRlLnggPCBjaXJjbGUueCkpIHtcbiAgICAgICAgaWYgKHNpdGUueCAhPT0geDAgfHwgc2l0ZS55ICE9PSB5MCkge1xuICAgICAgICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW3NpdGUuaV0gPSBuZXcgZDNfZ2VvbV92b3Jvbm9pQ2VsbChzaXRlKTtcbiAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKTtcbiAgICAgICAgICB4MCA9IHNpdGUueCwgeTAgPSBzaXRlLnk7XG4gICAgICAgIH1cbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJib3gpIGQzX2dlb21fdm9yb25vaUNsaXBFZGdlcyhiYm94KSwgZDNfZ2VvbV92b3Jvbm9pQ2xvc2VDZWxscyhcbiAgICAgIGJib3gpO1xuICAgIHZhciBkaWFncmFtID0ge1xuICAgICAgY2VsbHM6IGQzX2dlb21fdm9yb25vaUNlbGxzLFxuICAgICAgZWRnZXM6IGQzX2dlb21fdm9yb25vaUVkZ2VzXG4gICAgfTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcyA9IGQzX2dlb21fdm9yb25vaUVkZ2VzID1cbiAgICAgIGQzX2dlb21fdm9yb25vaUNlbGxzID0gbnVsbDtcbiAgICByZXR1cm4gZGlhZ3JhbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVZlcnRleE9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYi55IC0gYS55IHx8IGIueCAtIGEueDtcbiAgfVxuICBkMy5nZW9tLnZvcm9ub2kgPSBmdW5jdGlvbihwb2ludHMpIHtcbiAgICB2YXIgeCA9IGQzX2dlb21fcG9pbnRYLFxuICAgICAgeSA9IGQzX2dlb21fcG9pbnRZLFxuICAgICAgZnggPSB4LFxuICAgICAgZnkgPSB5LFxuICAgICAgY2xpcEV4dGVudCA9IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQ7XG4gICAgaWYgKHBvaW50cykgcmV0dXJuIHZvcm9ub2kocG9pbnRzKTtcblxuICAgIGZ1bmN0aW9uIHZvcm9ub2koZGF0YSkge1xuICAgICAgdmFyIHBvbHlnb25zID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKSxcbiAgICAgICAgeDAgPSBjbGlwRXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9IGNsaXBFeHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gY2xpcEV4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSBjbGlwRXh0ZW50WzFdWzFdO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpLCBjbGlwRXh0ZW50KS5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKFxuICAgICAgICBjZWxsLCBpKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IGNlbGwuZWRnZXMsXG4gICAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgICBwb2x5Z29uID0gcG9seWdvbnNbaV0gPSBlZGdlcy5sZW5ndGggPyBlZGdlcy5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHMgPSBlLnN0YXJ0KCk7XG4gICAgICAgICAgICByZXR1cm4gW3MueCwgcy55XTtcbiAgICAgICAgICB9KSA6IHNpdGUueCA+PSB4MCAmJiBzaXRlLnggPD0geDEgJiYgc2l0ZS55ID49IHkwICYmIHNpdGUueSA8PVxuICAgICAgICAgIHkxID8gW1xuICAgICAgICAgICAgW3gwLCB5MV0sXG4gICAgICAgICAgICBbeDEsIHkxXSxcbiAgICAgICAgICAgIFt4MSwgeTBdLFxuICAgICAgICAgICAgW3gwLCB5MF1cbiAgICAgICAgICBdIDogW107XG4gICAgICAgIHBvbHlnb24ucG9pbnQgPSBkYXRhW2ldO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcG9seWdvbnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2l0ZXMoZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBNYXRoLnJvdW5kKGZ4KGQsIGkpIC8gzrUpICogzrUsXG4gICAgICAgICAgeTogTWF0aC5yb3VuZChmeShkLCBpKSAvIM61KSAqIM61LFxuICAgICAgICAgIGk6IGlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSkuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgICAgcmV0dXJuIGVkZ2UubCAmJiBlZGdlLnI7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogZGF0YVtlZGdlLmwuaV0sXG4gICAgICAgICAgdGFyZ2V0OiBkYXRhW2VkZ2Uuci5pXVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnRyaWFuZ2xlcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciB0cmlhbmdsZXMgPSBbXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGVkZ2VzID0gY2VsbC5lZGdlcy5zb3J0KGQzX2dlb21fdm9yb25vaUhhbGZFZGdlT3JkZXIpLFxuICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICBtID0gZWRnZXMubGVuZ3RoLFxuICAgICAgICAgIGUwLCBzMCwgZTEgPSBlZGdlc1ttIC0gMV0uZWRnZSxcbiAgICAgICAgICBzMSA9IGUxLmwgPT09IHNpdGUgPyBlMS5yIDogZTEubDtcbiAgICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgICBlMCA9IGUxO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgZTEgPSBlZGdlc1tqXS5lZGdlO1xuICAgICAgICAgIHMxID0gZTEubCA9PT0gc2l0ZSA/IGUxLnIgOiBlMS5sO1xuICAgICAgICAgIGlmIChpIDwgczAuaSAmJiBpIDwgczEuaSAmJiBkM19nZW9tX3Zvcm9ub2lUcmlhbmdsZUFyZWEoXG4gICAgICAgICAgICAgIHNpdGUsIHMwLCBzMSkgPCAwKSB7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChbZGF0YVtpXSwgZGF0YVtzMC5pXSwgZGF0YVtzMS5pXV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJpYW5nbGVzO1xuICAgIH07XG4gICAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZnggPSBkM19mdW5jdG9yKHggPSBfKSwgdm9yb25vaSkgOiB4O1xuICAgIH07XG4gICAgdm9yb25vaS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZnkgPSBkM19mdW5jdG9yKHkgPSBfKSwgdm9yb25vaSkgOiB5O1xuICAgIH07XG4gICAgdm9yb25vaS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEV4dGVudCA9PT1cbiAgICAgICAgZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA/IG51bGwgOiBjbGlwRXh0ZW50O1xuICAgICAgY2xpcEV4dGVudCA9IF8gPT0gbnVsbCA/IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgOiBfO1xuICAgICAgcmV0dXJuIHZvcm9ub2k7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50ID09PVxuICAgICAgICBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID8gbnVsbCA6IGNsaXBFeHRlbnQgJiYgY2xpcEV4dGVudFsxXTtcbiAgICAgIHJldHVybiB2b3Jvbm9pLmNsaXBFeHRlbnQoXyAmJiBbXG4gICAgICAgIFswLCAwXSwgX1xuICAgICAgXSk7XG4gICAgfTtcbiAgICByZXR1cm4gdm9yb25vaTtcbiAgfTtcbiAgdmFyIGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPSBbXG4gICAgWy0xZTYsIC0xZTZdLFxuICAgIFsxZTYsIDFlNl1cbiAgXTtcblxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lUcmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICAgIHJldHVybiAoYS54IC0gYy54KSAqIChiLnkgLSBhLnkpIC0gKGEueCAtIGIueCkgKiAoYy55IC0gYS55KTtcbiAgfVxuICBkMy5nZW9tLmRlbGF1bmF5ID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICByZXR1cm4gZDMuZ2VvbS52b3Jvbm9pKCkudHJpYW5nbGVzKHZlcnRpY2VzKTtcbiAgfTtcbiAgZDMuZ2VvbS5xdWFkdHJlZSA9IGZ1bmN0aW9uKHBvaW50cywgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICB2YXIgeCA9IGQzX2dlb21fcG9pbnRYLFxuICAgICAgeSA9IGQzX2dlb21fcG9pbnRZLFxuICAgICAgY29tcGF0O1xuICAgIGlmIChjb21wYXQgPSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB4ID0gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFg7XG4gICAgICB5ID0gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFk7XG4gICAgICBpZiAoY29tcGF0ID09PSAzKSB7XG4gICAgICAgIHkyID0geTE7XG4gICAgICAgIHgyID0geDE7XG4gICAgICAgIHkxID0geDEgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHF1YWR0cmVlKHBvaW50cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcXVhZHRyZWUoZGF0YSkge1xuICAgICAgdmFyIGQsIGZ4ID0gZDNfZnVuY3Rvcih4KSxcbiAgICAgICAgZnkgPSBkM19mdW5jdG9yKHkpLFxuICAgICAgICB4cywgeXMsIGksIG4sIHgxXywgeTFfLCB4Ml8sIHkyXztcbiAgICAgIGlmICh4MSAhPSBudWxsKSB7XG4gICAgICAgIHgxXyA9IHgxLCB5MV8gPSB5MSwgeDJfID0geDIsIHkyXyA9IHkyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDJfID0geTJfID0gLSh4MV8gPSB5MV8gPSBJbmZpbml0eSk7XG4gICAgICAgIHhzID0gW10sIHlzID0gW107XG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvbXBhdClcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICBkID0gZGF0YVtpXTtcbiAgICAgICAgICAgIGlmIChkLnggPCB4MV8pIHgxXyA9IGQueDtcbiAgICAgICAgICAgIGlmIChkLnkgPCB5MV8pIHkxXyA9IGQueTtcbiAgICAgICAgICAgIGlmIChkLnggPiB4Ml8pIHgyXyA9IGQueDtcbiAgICAgICAgICAgIGlmIChkLnkgPiB5Ml8pIHkyXyA9IGQueTtcbiAgICAgICAgICAgIHhzLnB1c2goZC54KTtcbiAgICAgICAgICAgIHlzLnB1c2goZC55KTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgICAgdmFyIHhfID0gK2Z4KGQgPSBkYXRhW2ldLCBpKSxcbiAgICAgICAgICAgICAgICB5XyA9ICtmeShkLCBpKTtcbiAgICAgICAgICAgICAgaWYgKHhfIDwgeDFfKSB4MV8gPSB4XztcbiAgICAgICAgICAgICAgaWYgKHlfIDwgeTFfKSB5MV8gPSB5XztcbiAgICAgICAgICAgICAgaWYgKHhfID4geDJfKSB4Ml8gPSB4XztcbiAgICAgICAgICAgICAgaWYgKHlfID4geTJfKSB5Ml8gPSB5XztcbiAgICAgICAgICAgICAgeHMucHVzaCh4Xyk7XG4gICAgICAgICAgICAgIHlzLnB1c2goeV8pO1xuICAgICAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGR4ID0geDJfIC0geDFfLFxuICAgICAgICBkeSA9IHkyXyAtIHkxXztcbiAgICAgIGlmIChkeCA+IGR5KSB5Ml8gPSB5MV8gKyBkeDtcbiAgICAgIGVsc2UgeDJfID0geDFfICsgZHk7XG5cbiAgICAgIGZ1bmN0aW9uIGluc2VydChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybjtcbiAgICAgICAgaWYgKG4ubGVhZikge1xuICAgICAgICAgIHZhciBueCA9IG4ueCxcbiAgICAgICAgICAgIG55ID0gbi55O1xuICAgICAgICAgIGlmIChueCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoYWJzKG54IC0geCkgKyBhYnMobnkgLSB5KSA8IC4wMSkge1xuICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgblBvaW50ID0gbi5wb2ludDtcbiAgICAgICAgICAgICAgbi54ID0gbi55ID0gbi5wb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIG5Qb2ludCwgbngsIG55LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbi54ID0geCwgbi55ID0geSwgbi5wb2ludCA9IGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICB2YXIgeG0gPSAoeDEgKyB4MikgKiAuNSxcbiAgICAgICAgICB5bSA9ICh5MSArIHkyKSAqIC41LFxuICAgICAgICAgIHJpZ2h0ID0geCA+PSB4bSxcbiAgICAgICAgICBiZWxvdyA9IHkgPj0geW0sXG4gICAgICAgICAgaSA9IGJlbG93IDw8IDEgfCByaWdodDtcbiAgICAgICAgbi5sZWFmID0gZmFsc2U7XG4gICAgICAgIG4gPSBuLm5vZGVzW2ldIHx8IChuLm5vZGVzW2ldID0gZDNfZ2VvbV9xdWFkdHJlZU5vZGUoKSk7XG4gICAgICAgIGlmIChyaWdodCkgeDEgPSB4bTtcbiAgICAgICAgZWxzZSB4MiA9IHhtO1xuICAgICAgICBpZiAoYmVsb3cpIHkxID0geW07XG4gICAgICAgIGVsc2UgeTIgPSB5bTtcbiAgICAgICAgaW5zZXJ0KG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgIH1cbiAgICAgIHZhciByb290ID0gZDNfZ2VvbV9xdWFkdHJlZU5vZGUoKTtcbiAgICAgIHJvb3QuYWRkID0gZnVuY3Rpb24oZCkge1xuICAgICAgICBpbnNlcnQocm9vdCwgZCwgK2Z4KGQsICsraSksICtmeShkLCBpKSwgeDFfLCB5MV8sIHgyXywgeTJfKTtcbiAgICAgIH07XG4gICAgICByb290LnZpc2l0ID0gZnVuY3Rpb24oZikge1xuICAgICAgICBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgcm9vdCwgeDFfLCB5MV8sIHgyXywgeTJfKTtcbiAgICAgIH07XG4gICAgICByb290LmZpbmQgPSBmdW5jdGlvbihwb2ludCkge1xuICAgICAgICByZXR1cm4gZDNfZ2VvbV9xdWFkdHJlZUZpbmQocm9vdCwgcG9pbnRbMF0sIHBvaW50WzFdLCB4MV8sIHkxXyxcbiAgICAgICAgICB4Ml8sIHkyXyk7XG4gICAgICB9O1xuICAgICAgaSA9IC0xO1xuICAgICAgaWYgKHgxID09IG51bGwpIHtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpbnNlcnQocm9vdCwgZGF0YVtpXSwgeHNbaV0sIHlzW2ldLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgICB9XG4gICAgICAgIC0taTtcbiAgICAgIH0gZWxzZSBkYXRhLmZvckVhY2gocm9vdC5hZGQpO1xuICAgICAgeHMgPSB5cyA9IGRhdGEgPSBkID0gbnVsbDtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICBxdWFkdHJlZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IF8sIHF1YWR0cmVlKSA6IHg7XG4gICAgfTtcbiAgICBxdWFkdHJlZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IF8sIHF1YWR0cmVlKSA6IHk7XG4gICAgfTtcbiAgICBxdWFkdHJlZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFtcbiAgICAgICAgW3gxLCB5MV0sXG4gICAgICAgIFt4MiwgeTJdXG4gICAgICBdO1xuICAgICAgaWYgKF8gPT0gbnVsbCkgeDEgPSB5MSA9IHgyID0geTIgPSBudWxsO1xuICAgICAgZWxzZSB4MSA9ICtfWzBdWzBdLCB5MSA9ICtfWzBdWzFdLCB4MiA9ICtfWzFdWzBdLFxuICAgICAgICB5MiA9ICtfWzFdWzFdO1xuICAgICAgcmV0dXJuIHF1YWR0cmVlO1xuICAgIH07XG4gICAgcXVhZHRyZWUuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxID09IG51bGwgPyBudWxsIDogW3gyIC0geDEsIHkyIC1cbiAgICAgICAgeTFcbiAgICAgIF07XG4gICAgICBpZiAoXyA9PSBudWxsKSB4MSA9IHkxID0geDIgPSB5MiA9IG51bGw7XG4gICAgICBlbHNlIHgxID0geTEgPSAwLCB4MiA9ICtfWzBdLCB5MiA9ICtfWzFdO1xuICAgICAgcmV0dXJuIHF1YWR0cmVlO1xuICAgIH07XG4gICAgcmV0dXJuIHF1YWR0cmVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVDb21wYXRYKGQpIHtcbiAgICByZXR1cm4gZC54O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFkoZCkge1xuICAgIHJldHVybiBkLnk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlTm9kZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVhZjogdHJ1ZSxcbiAgICAgIG5vZGVzOiBbXSxcbiAgICAgIHBvaW50OiBudWxsLFxuICAgICAgeDogbnVsbCxcbiAgICAgIHk6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIG5vZGUsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgaWYgKCFmKG5vZGUsIHgxLCB5MSwgeDIsIHkyKSkge1xuICAgICAgdmFyIHN4ID0gKHgxICsgeDIpICogLjUsXG4gICAgICAgIHN5ID0gKHkxICsgeTIpICogLjUsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5ub2RlcztcbiAgICAgIGlmIChjaGlsZHJlblswXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzBdLCB4MSwgeTEsIHN4LCBzeSk7XG4gICAgICBpZiAoY2hpbGRyZW5bMV0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblsxXSwgc3gsIHkxLCB4Miwgc3kpO1xuICAgICAgaWYgKGNoaWxkcmVuWzJdKSBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgY2hpbGRyZW5bMl0sIHgxLCBzeSwgc3gsIHkyKTtcbiAgICAgIGlmIChjaGlsZHJlblszXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzNdLCBzeCwgc3ksIHgyLCB5Mik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZUZpbmQocm9vdCwgeCwgeSwgeDAsIHkwLCB4MywgeTMpIHtcbiAgICB2YXIgbWluRGlzdGFuY2UyID0gSW5maW5pdHksXG4gICAgICBjbG9zZXN0UG9pbnQ7XG4gICAgKGZ1bmN0aW9uIGZpbmQobm9kZSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgIGlmICh4MSA+IHgzIHx8IHkxID4geTMgfHwgeDIgPCB4MCB8fCB5MiA8IHkwKSByZXR1cm47XG4gICAgICBpZiAocG9pbnQgPSBub2RlLnBvaW50KSB7XG4gICAgICAgIHZhciBwb2ludCwgZHggPSB4IC0gcG9pbnRbMF0sXG4gICAgICAgICAgZHkgPSB5IC0gcG9pbnRbMV0sXG4gICAgICAgICAgZGlzdGFuY2UyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkaXN0YW5jZTIgPCBtaW5EaXN0YW5jZTIpIHtcbiAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQobWluRGlzdGFuY2UyID0gZGlzdGFuY2UyKTtcbiAgICAgICAgICB4MCA9IHggLSBkaXN0YW5jZSwgeTAgPSB5IC0gZGlzdGFuY2U7XG4gICAgICAgICAgeDMgPSB4ICsgZGlzdGFuY2UsIHkzID0geSArIGRpc3RhbmNlO1xuICAgICAgICAgIGNsb3Nlc3RQb2ludCA9IHBvaW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLm5vZGVzLFxuICAgICAgICB4bSA9ICh4MSArIHgyKSAqIC41LFxuICAgICAgICB5bSA9ICh5MSArIHkyKSAqIC41LFxuICAgICAgICByaWdodCA9IHggPj0geG0sXG4gICAgICAgIGJlbG93ID0geSA+PSB5bTtcbiAgICAgIGZvciAodmFyIGkgPSBiZWxvdyA8PCAxIHwgcmlnaHQsIGogPSBpICsgNDsgaSA8IGo7ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGNoaWxkcmVuW2kgJiAzXSkgc3dpdGNoIChpICYgMykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGZpbmQobm9kZSwgeDEsIHkxLCB4bSwgeW0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBmaW5kKG5vZGUsIHhtLCB5MSwgeDIsIHltKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgZmluZChub2RlLCB4MSwgeW0sIHhtLCB5Mik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGZpbmQobm9kZSwgeG0sIHltLCB4MiwgeTIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KShyb290LCB4MCwgeTAsIHgzLCB5Myk7XG4gICAgcmV0dXJuIGNsb3Nlc3RQb2ludDtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJnYiA9IGQzX2ludGVycG9sYXRlUmdiO1xuXG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlUmdiKGEsIGIpIHtcbiAgICBhID0gZDMucmdiKGEpO1xuICAgIGIgPSBkMy5yZ2IoYik7XG4gICAgdmFyIGFyID0gYS5yLFxuICAgICAgYWcgPSBhLmcsXG4gICAgICBhYiA9IGEuYixcbiAgICAgIGJyID0gYi5yIC0gYXIsXG4gICAgICBiZyA9IGIuZyAtIGFnLFxuICAgICAgYmIgPSBiLmIgLSBhYjtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFwiI1wiICsgZDNfcmdiX2hleChNYXRoLnJvdW5kKGFyICsgYnIgKiB0KSkgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoXG4gICAgICAgIGFnICsgYmcgKiB0KSkgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoYWIgKyBiYiAqIHQpKTtcbiAgICB9O1xuICB9XG4gIGQzLmludGVycG9sYXRlT2JqZWN0ID0gZDNfaW50ZXJwb2xhdGVPYmplY3Q7XG5cbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVPYmplY3QoYSwgYikge1xuICAgIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuICAgIGZvciAoayBpbiBhKSB7XG4gICAgICBpZiAoayBpbiBiKSB7XG4gICAgICAgIGlba10gPSBkM19pbnRlcnBvbGF0ZShhW2tdLCBiW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNba10gPSBhW2tdO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgaW4gYikge1xuICAgICAgaWYgKCEoayBpbiBhKSkge1xuICAgICAgICBjW2tdID0gYltrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVOdW1iZXIgPSBkM19pbnRlcnBvbGF0ZU51bWJlcjtcblxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZU51bWJlcihhLCBiKSB7XG4gICAgYSA9ICthLCBiID0gK2I7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVTdHJpbmcgPSBkM19pbnRlcnBvbGF0ZVN0cmluZztcblxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVN0cmluZyhhLCBiKSB7XG4gICAgdmFyIGJpID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5sYXN0SW5kZXggPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJCLmxhc3RJbmRleCA9XG4gICAgICAwLFxuICAgICAgYW0sIGJtLCBicywgaSA9IC0xLFxuICAgICAgcyA9IFtdLFxuICAgICAgcSA9IFtdO1xuICAgIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuICAgIHdoaWxlICgoYW0gPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJBLmV4ZWMoYSkpICYmIChibSA9XG4gICAgICAgIGQzX2ludGVycG9sYXRlX251bWJlckIuZXhlYyhiKSkpIHtcbiAgICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkge1xuICAgICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7XG4gICAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgICB9XG4gICAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHtcbiAgICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07XG4gICAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzWysraV0gPSBudWxsO1xuICAgICAgICBxLnB1c2goe1xuICAgICAgICAgIGk6IGksXG4gICAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoYW0sIGJtKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGJpID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQi5sYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7XG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICByZXR1cm4gcy5sZW5ndGggPCAyID8gcVswXSA/IChiID0gcVswXS54LCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gICAgfSkgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQSA9XG4gICAgL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIGQzX2ludGVycG9sYXRlX251bWJlckIgPSBuZXcgUmVnRXhwKGQzX2ludGVycG9sYXRlX251bWJlckEuc291cmNlLCBcImdcIik7XG4gIGQzLmludGVycG9sYXRlID0gZDNfaW50ZXJwb2xhdGU7XG5cbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIHZhciBpID0gZDMuaW50ZXJwb2xhdG9ycy5sZW5ndGgsXG4gICAgICBmO1xuICAgIHdoaWxlICgtLWkgPj0gMCAmJiAhKGYgPSBkMy5pbnRlcnBvbGF0b3JzW2ldKGEsIGIpKSk7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgZDMuaW50ZXJwb2xhdG9ycyA9IFtmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgYjtcbiAgICByZXR1cm4gKHQgPT09IFwic3RyaW5nXCIgPyBkM19yZ2JfbmFtZXMuaGFzKGIpIHx8IC9eKCN8cmdiXFwofGhzbFxcKCkvLnRlc3QoXG4gICAgICAgIGIpID8gZDNfaW50ZXJwb2xhdGVSZ2IgOiBkM19pbnRlcnBvbGF0ZVN0cmluZyA6IGIgaW5zdGFuY2VvZiBkM19jb2xvciA/XG4gICAgICBkM19pbnRlcnBvbGF0ZVJnYiA6IEFycmF5LmlzQXJyYXkoYikgPyBkM19pbnRlcnBvbGF0ZUFycmF5IDogdCA9PT1cbiAgICAgIFwib2JqZWN0XCIgJiYgaXNOYU4oYikgPyBkM19pbnRlcnBvbGF0ZU9iamVjdCA6XG4gICAgICBkM19pbnRlcnBvbGF0ZU51bWJlcikoYSwgYik7XG4gIH1dO1xuICBkMy5pbnRlcnBvbGF0ZUFycmF5ID0gZDNfaW50ZXJwb2xhdGVBcnJheTtcblxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUFycmF5KGEsIGIpIHtcbiAgICB2YXIgeCA9IFtdLFxuICAgICAgYyA9IFtdLFxuICAgICAgbmEgPSBhLmxlbmd0aCxcbiAgICAgIG5iID0gYi5sZW5ndGgsXG4gICAgICBuMCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCksXG4gICAgICBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSB4LnB1c2goZDNfaW50ZXJwb2xhdGUoYVtpXSwgYltpXSkpO1xuICAgIGZvciAoOyBpIDwgbmE7ICsraSkgY1tpXSA9IGFbaV07XG4gICAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG4wOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZWFzZV9kZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2lkZW50aXR5O1xuICB9O1xuICB2YXIgZDNfZWFzZSA9IGQzLm1hcCh7XG4gICAgbGluZWFyOiBkM19lYXNlX2RlZmF1bHQsXG4gICAgcG9seTogZDNfZWFzZV9wb2x5LFxuICAgIHF1YWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfcXVhZDtcbiAgICB9LFxuICAgIGN1YmljOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2N1YmljO1xuICAgIH0sXG4gICAgc2luOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX3NpbjtcbiAgICB9LFxuICAgIGV4cDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9leHA7XG4gICAgfSxcbiAgICBjaXJjbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfY2lyY2xlO1xuICAgIH0sXG4gICAgZWxhc3RpYzogZDNfZWFzZV9lbGFzdGljLFxuICAgIGJhY2s6IGQzX2Vhc2VfYmFjayxcbiAgICBib3VuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfYm91bmNlO1xuICAgIH1cbiAgfSk7XG4gIHZhciBkM19lYXNlX21vZGUgPSBkMy5tYXAoe1xuICAgIFwiaW5cIjogZDNfaWRlbnRpdHksXG4gICAgb3V0OiBkM19lYXNlX3JldmVyc2UsXG4gICAgXCJpbi1vdXRcIjogZDNfZWFzZV9yZWZsZWN0LFxuICAgIFwib3V0LWluXCI6IGZ1bmN0aW9uKGYpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX3JlZmxlY3QoZDNfZWFzZV9yZXZlcnNlKGYpKTtcbiAgICB9XG4gIH0pO1xuICBkMy5lYXNlID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gbmFtZS5pbmRleE9mKFwiLVwiKSxcbiAgICAgIHQgPSBpID49IDAgPyBuYW1lLnNsaWNlKDAsIGkpIDogbmFtZSxcbiAgICAgIG0gPSBpID49IDAgPyBuYW1lLnNsaWNlKGkgKyAxKSA6IFwiaW5cIjtcbiAgICB0ID0gZDNfZWFzZS5nZXQodCkgfHwgZDNfZWFzZV9kZWZhdWx0O1xuICAgIG0gPSBkM19lYXNlX21vZGUuZ2V0KG0pIHx8IGQzX2lkZW50aXR5O1xuICAgIHJldHVybiBkM19lYXNlX2NsYW1wKG0odC5hcHBseShudWxsLCBkM19hcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19lYXNlX2NsYW1wKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQgPD0gMCA/IDAgOiB0ID49IDEgPyAxIDogZih0KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZWFzZV9yZXZlcnNlKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIDEgLSBmKDEgLSB0KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZWFzZV9yZWZsZWN0KGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIC41ICogKHQgPCAuNSA/IGYoMiAqIHQpIDogMiAtIGYoMiAtIDIgKiB0KSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcXVhZCh0KSB7XG4gICAgcmV0dXJuIHQgKiB0O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZWFzZV9jdWJpYyh0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY3ViaWNJbk91dCh0KSB7XG4gICAgaWYgKHQgPD0gMCkgcmV0dXJuIDA7XG4gICAgaWYgKHQgPj0gMSkgcmV0dXJuIDE7XG4gICAgdmFyIHQyID0gdCAqIHQsXG4gICAgICB0MyA9IHQyICogdDtcbiAgICByZXR1cm4gNCAqICh0IDwgLjUgPyB0MyA6IDMgKiAodCAtIHQyKSArIHQzIC0gLjc1KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcG9seShlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfZWFzZV9zaW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGbPgCk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19lYXNlX2V4cCh0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19lYXNlX2NpcmNsZSh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2Vhc2VfZWxhc3RpYyhhLCBwKSB7XG4gICAgdmFyIHM7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwID0gLjQ1O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSBzID0gcCAvIM+EICogTWF0aC5hc2luKDEgLyBhKTtcbiAgICBlbHNlIGEgPSAxLCBzID0gcCAvIDQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiAxICsgYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqIM+EIC8gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2Vhc2VfYmFjayhzKSB7XG4gICAgaWYgKCFzKSBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2Vhc2VfYm91bmNlKHQpIHtcbiAgICByZXR1cm4gdCA8IDEgLyAyLjc1ID8gNy41NjI1ICogdCAqIHQgOiB0IDwgMiAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPVxuICAgICAgICAxLjUgLyAyLjc1KSAqIHQgKyAuNzUgOiB0IDwgMi41IC8gMi43NSA/IDcuNTYyNSAqICh0IC09IDIuMjUgLyAyLjc1KSAqXG4gICAgICB0ICsgLjkzNzUgOiA3LjU2MjUgKiAodCAtPSAyLjYyNSAvIDIuNzUpICogdCArIC45ODQzNzU7XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVIY2wgPSBkM19pbnRlcnBvbGF0ZUhjbDtcblxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhjbChhLCBiKSB7XG4gICAgYSA9IGQzLmhjbChhKTtcbiAgICBiID0gZDMuaGNsKGIpO1xuICAgIHZhciBhaCA9IGEuaCxcbiAgICAgIGFjID0gYS5jLFxuICAgICAgYWwgPSBhLmwsXG4gICAgICBiaCA9IGIuaCAtIGFoLFxuICAgICAgYmMgPSBiLmMgLSBhYyxcbiAgICAgIGJsID0gYi5sIC0gYWw7XG4gICAgaWYgKGlzTmFOKGJjKSkgYmMgPSAwLCBhYyA9IGlzTmFOKGFjKSA/IGIuYyA6IGFjO1xuICAgIGlmIChpc05hTihiaCkpIGJoID0gMCwgYWggPSBpc05hTihhaCkgPyBiLmggOiBhaDtcbiAgICBlbHNlIGlmIChiaCA+IDE4MCkgYmggLT0gMzYwO1xuICAgIGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfaGNsX2xhYihhaCArIGJoICogdCwgYWMgKyBiYyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUhzbCA9IGQzX2ludGVycG9sYXRlSHNsO1xuXG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlSHNsKGEsIGIpIHtcbiAgICBhID0gZDMuaHNsKGEpO1xuICAgIGIgPSBkMy5oc2woYik7XG4gICAgdmFyIGFoID0gYS5oLFxuICAgICAgYXMgPSBhLnMsXG4gICAgICBhbCA9IGEubCxcbiAgICAgIGJoID0gYi5oIC0gYWgsXG4gICAgICBicyA9IGIucyAtIGFzLFxuICAgICAgYmwgPSBiLmwgLSBhbDtcbiAgICBpZiAoaXNOYU4oYnMpKSBicyA9IDAsIGFzID0gaXNOYU4oYXMpID8gYi5zIDogYXM7XG4gICAgaWYgKGlzTmFOKGJoKSkgYmggPSAwLCBhaCA9IGlzTmFOKGFoKSA/IGIuaCA6IGFoO1xuICAgIGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7XG4gICAgZWxzZSBpZiAoYmggPCAtMTgwKSBiaCArPSAzNjA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBkM19oc2xfcmdiKGFoICsgYmggKiB0LCBhcyArIGJzICogdCwgYWwgKyBibCAqIHQpICsgXCJcIjtcbiAgICB9O1xuICB9XG4gIGQzLmludGVycG9sYXRlTGFiID0gZDNfaW50ZXJwb2xhdGVMYWI7XG5cbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVMYWIoYSwgYikge1xuICAgIGEgPSBkMy5sYWIoYSk7XG4gICAgYiA9IGQzLmxhYihiKTtcbiAgICB2YXIgYWwgPSBhLmwsXG4gICAgICBhYSA9IGEuYSxcbiAgICAgIGFiID0gYS5iLFxuICAgICAgYmwgPSBiLmwgLSBhbCxcbiAgICAgIGJhID0gYi5hIC0gYWEsXG4gICAgICBiYiA9IGIuYiAtIGFiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfbGFiX3JnYihhbCArIGJsICogdCwgYWEgKyBiYSAqIHQsIGFiICsgYmIgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJvdW5kID0gZDNfaW50ZXJwb2xhdGVSb3VuZDtcblxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVJvdW5kKGEsIGIpIHtcbiAgICBiIC09IGE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKyBiICogdCk7XG4gICAgfTtcbiAgfVxuICBkMy50cmFuc2Zvcm0gPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgZyA9IGQzX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhkMy5ucy5wcmVmaXguc3ZnLCBcImdcIik7XG4gICAgcmV0dXJuIChkMy50cmFuc2Zvcm0gPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlmIChzdHJpbmcgIT0gbnVsbCkge1xuICAgICAgICBnLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdHJpbmcpO1xuICAgICAgICB2YXIgdCA9IGcudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgZDNfdHJhbnNmb3JtKHQgPyB0Lm1hdHJpeCA6IGQzX3RyYW5zZm9ybUlkZW50aXR5KTtcbiAgICB9KShzdHJpbmcpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybShtKSB7XG4gICAgdmFyIHIwID0gW20uYSwgbS5iXSxcbiAgICAgIHIxID0gW20uYywgbS5kXSxcbiAgICAgIGt4ID0gZDNfdHJhbnNmb3JtTm9ybWFsaXplKHIwKSxcbiAgICAgIGt6ID0gZDNfdHJhbnNmb3JtRG90KHIwLCByMSksXG4gICAgICBreSA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShkM190cmFuc2Zvcm1Db21iaW5lKHIxLCByMCwgLWt6KSkgfHwgMDtcbiAgICBpZiAocjBbMF0gKiByMVsxXSA8IHIxWzBdICogcjBbMV0pIHtcbiAgICAgIHIwWzBdICo9IC0xO1xuICAgICAgcjBbMV0gKj0gLTE7XG4gICAgICBreCAqPSAtMTtcbiAgICAgIGt6ICo9IC0xO1xuICAgIH1cbiAgICB0aGlzLnJvdGF0ZSA9IChreCA/IE1hdGguYXRhbjIocjBbMV0sIHIwWzBdKSA6IE1hdGguYXRhbjIoLXIxWzBdLCByMVsxXSkpICpcbiAgICAgIGQzX2RlZ3JlZXM7XG4gICAgdGhpcy50cmFuc2xhdGUgPSBbbS5lLCBtLmZdO1xuICAgIHRoaXMuc2NhbGUgPSBba3gsIGt5XTtcbiAgICB0aGlzLnNrZXcgPSBreSA/IE1hdGguYXRhbjIoa3osIGt5KSAqIGQzX2RlZ3JlZXMgOiAwO1xuICB9XG4gIGQzX3RyYW5zZm9ybS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnRyYW5zbGF0ZSArIFwiKXJvdGF0ZShcIiArIHRoaXMucm90YXRlICtcbiAgICAgIFwiKXNrZXdYKFwiICsgdGhpcy5za2V3ICsgXCIpc2NhbGUoXCIgKyB0aGlzLnNjYWxlICsgXCIpXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtRG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShhKSB7XG4gICAgdmFyIGsgPSBNYXRoLnNxcnQoZDNfdHJhbnNmb3JtRG90KGEsIGEpKTtcbiAgICBpZiAoaykge1xuICAgICAgYVswXSAvPSBrO1xuICAgICAgYVsxXSAvPSBrO1xuICAgIH1cbiAgICByZXR1cm4gaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybUNvbWJpbmUoYSwgYiwgaykge1xuICAgIGFbMF0gKz0gayAqIGJbMF07XG4gICAgYVsxXSArPSBrICogYlsxXTtcbiAgICByZXR1cm4gYTtcbiAgfVxuICB2YXIgZDNfdHJhbnNmb3JtSWRlbnRpdHkgPSB7XG4gICAgYTogMSxcbiAgICBiOiAwLFxuICAgIGM6IDAsXG4gICAgZDogMSxcbiAgICBlOiAwLFxuICAgIGY6IDBcbiAgfTtcbiAgZDMuaW50ZXJwb2xhdGVUcmFuc2Zvcm0gPSBkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybTtcblxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybShhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSxcbiAgICAgIHEgPSBbXSxcbiAgICAgIG4sIEEgPSBkMy50cmFuc2Zvcm0oYSksXG4gICAgICBCID0gZDMudHJhbnNmb3JtKGIpLFxuICAgICAgdGEgPSBBLnRyYW5zbGF0ZSxcbiAgICAgIHRiID0gQi50cmFuc2xhdGUsXG4gICAgICByYSA9IEEucm90YXRlLFxuICAgICAgcmIgPSBCLnJvdGF0ZSxcbiAgICAgIHdhID0gQS5za2V3LFxuICAgICAgd2IgPSBCLnNrZXcsXG4gICAgICBrYSA9IEEuc2NhbGUsXG4gICAgICBrYiA9IEIuc2NhbGU7XG4gICAgaWYgKHRhWzBdICE9IHRiWzBdIHx8IHRhWzFdICE9IHRiWzFdKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiAxLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVswXSwgdGJbMF0pXG4gICAgICB9LCB7XG4gICAgICAgIGk6IDMsXG4gICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKHRhWzFdLCB0YlsxXSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGJbMF0gfHwgdGJbMV0pIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHRiICsgXCIpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzLnB1c2goXCJcIik7XG4gICAgfVxuICAgIGlmIChyYSAhPSByYikge1xuICAgICAgaWYgKHJhIC0gcmIgPiAxODApIHJiICs9IDM2MDtcbiAgICAgIGVsc2UgaWYgKHJiIC0gcmEgPiAxODApIHJhICs9IDM2MDtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IHMucHVzaChzLnBvcCgpICsgXCJyb3RhdGUoXCIsIG51bGwsIFwiKVwiKSAtIDIsXG4gICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKHJhLCByYilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmIpIHtcbiAgICAgIHMucHVzaChzLnBvcCgpICsgXCJyb3RhdGUoXCIgKyByYiArIFwiKVwiKTtcbiAgICB9XG4gICAgaWYgKHdhICE9IHdiKSB7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiBzLnB1c2gocy5wb3AoKSArIFwic2tld1goXCIsIG51bGwsIFwiKVwiKSAtIDIsXG4gICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKHdhLCB3YilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAod2IpIHtcbiAgICAgIHMucHVzaChzLnBvcCgpICsgXCJza2V3WChcIiArIHdiICsgXCIpXCIpO1xuICAgIH1cbiAgICBpZiAoa2FbMF0gIT0ga2JbMF0gfHwga2FbMV0gIT0ga2JbMV0pIHtcbiAgICAgIG4gPSBzLnB1c2gocy5wb3AoKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiBuIC0gNCxcbiAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoa2FbMF0sIGtiWzBdKVxuICAgICAgfSwge1xuICAgICAgICBpOiBuIC0gMixcbiAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoa2FbMV0sIGtiWzFdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChrYlswXSAhPSAxIHx8IGtiWzFdICE9IDEpIHtcbiAgICAgIHMucHVzaChzLnBvcCgpICsgXCJzY2FsZShcIiArIGtiICsgXCIpXCIpO1xuICAgIH1cbiAgICBuID0gcS5sZW5ndGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZU51bWJlcihhLCBiKSB7XG4gICAgYiA9IChiIC09IGEgPSArYSkgfHwgMSAvIGI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiAoeCAtIGEpIC8gYjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wKGEsIGIpIHtcbiAgICBiID0gKGIgLT0gYSA9ICthKSB8fCAxIC8gYjtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsICh4IC0gYSkgLyBiKSk7XG4gICAgfTtcbiAgfVxuICBkMy5sYXlvdXQgPSB7fTtcbiAgZDMubGF5b3V0LmJ1bmRsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihsaW5rcykge1xuICAgICAgdmFyIHBhdGhzID0gW10sXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IGxpbmtzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBwYXRocy5wdXNoKGQzX2xheW91dF9idW5kbGVQYXRoKGxpbmtzW2ldKSk7XG4gICAgICByZXR1cm4gcGF0aHM7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19sYXlvdXRfYnVuZGxlUGF0aChsaW5rKSB7XG4gICAgdmFyIHN0YXJ0ID0gbGluay5zb3VyY2UsXG4gICAgICBlbmQgPSBsaW5rLnRhcmdldCxcbiAgICAgIGxjYSA9IGQzX2xheW91dF9idW5kbGVMZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgcG9pbnRzID0gW3N0YXJ0XTtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGxjYSkge1xuICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgICBwb2ludHMucHVzaChzdGFydCk7XG4gICAgfVxuICAgIHZhciBrID0gcG9pbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoZW5kICE9PSBsY2EpIHtcbiAgICAgIHBvaW50cy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfYnVuZGxlQW5jZXN0b3JzKG5vZGUpIHtcbiAgICB2YXIgYW5jZXN0b3JzID0gW10sXG4gICAgICBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgIHJldHVybiBhbmNlc3RvcnM7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfYnVuZGxlTGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICAgIHZhciBhTm9kZXMgPSBkM19sYXlvdXRfYnVuZGxlQW5jZXN0b3JzKGEpLFxuICAgICAgYk5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhiKSxcbiAgICAgIGFOb2RlID0gYU5vZGVzLnBvcCgpLFxuICAgICAgYk5vZGUgPSBiTm9kZXMucG9wKCksXG4gICAgICBzaGFyZWROb2RlID0gbnVsbDtcbiAgICB3aGlsZSAoYU5vZGUgPT09IGJOb2RlKSB7XG4gICAgICBzaGFyZWROb2RlID0gYU5vZGU7XG4gICAgICBhTm9kZSA9IGFOb2Rlcy5wb3AoKTtcbiAgICAgIGJOb2RlID0gYk5vZGVzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcmVkTm9kZTtcbiAgfVxuICBkMy5sYXlvdXQuY2hvcmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hvcmQgPSB7fSxcbiAgICAgIGNob3JkcywgZ3JvdXBzLCBtYXRyaXgsIG4sIHBhZGRpbmcgPSAwLFxuICAgICAgc29ydEdyb3Vwcywgc29ydFN1Ymdyb3Vwcywgc29ydENob3JkcztcblxuICAgIGZ1bmN0aW9uIHJlbGF5b3V0KCkge1xuICAgICAgdmFyIHN1Ymdyb3VwcyA9IHt9LFxuICAgICAgICBncm91cFN1bXMgPSBbXSxcbiAgICAgICAgZ3JvdXBJbmRleCA9IGQzLnJhbmdlKG4pLFxuICAgICAgICBzdWJncm91cEluZGV4ID0gW10sXG4gICAgICAgIGssIHgsIHgwLCBpLCBqO1xuICAgICAgY2hvcmRzID0gW107XG4gICAgICBncm91cHMgPSBbXTtcbiAgICAgIGsgPSAwLCBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICB4ID0gMCwgaiA9IC0xO1xuICAgICAgICB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHggKz0gbWF0cml4W2ldW2pdO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuICAgICAgICBzdWJncm91cEluZGV4LnB1c2goZDMucmFuZ2UobikpO1xuICAgICAgICBrICs9IHg7XG4gICAgICB9XG4gICAgICBpZiAoc29ydEdyb3Vwcykge1xuICAgICAgICBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc29ydFN1Ymdyb3Vwcykge1xuICAgICAgICBzdWJncm91cEluZGV4LmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gc29ydFN1Ymdyb3VwcyhtYXRyaXhbaV1bYV0sIG1hdHJpeFtpXVtiXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgayA9ICjPhCAtIHBhZGRpbmcgKiBuKSAvIGs7XG4gICAgICB4ID0gMCwgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgeDAgPSB4LCBqID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgdmFyIGRpID0gZ3JvdXBJbmRleFtpXSxcbiAgICAgICAgICAgIGRqID0gc3ViZ3JvdXBJbmRleFtkaV1bal0sXG4gICAgICAgICAgICB2ID0gbWF0cml4W2RpXVtkal0sXG4gICAgICAgICAgICBhMCA9IHgsXG4gICAgICAgICAgICBhMSA9IHggKz0gdiAqIGs7XG4gICAgICAgICAgc3ViZ3JvdXBzW2RpICsgXCItXCIgKyBkal0gPSB7XG4gICAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgICBzdWJpbmRleDogZGosXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICAgIHZhbHVlOiB2XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBncm91cHNbZGldID0ge1xuICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgICBlbmRBbmdsZTogeCxcbiAgICAgICAgICB2YWx1ZTogKHggLSB4MCkgLyBrXG4gICAgICAgIH07XG4gICAgICAgIHggKz0gcGFkZGluZztcbiAgICAgIH1cbiAgICAgIGkgPSAtMTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGogPSBpIC0gMTtcbiAgICAgICAgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc3ViZ3JvdXBzW2kgKyBcIi1cIiArIGpdLFxuICAgICAgICAgICAgdGFyZ2V0ID0gc3ViZ3JvdXBzW2ogKyBcIi1cIiArIGldO1xuICAgICAgICAgIGlmIChzb3VyY2UudmFsdWUgfHwgdGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgICBjaG9yZHMucHVzaChzb3VyY2UudmFsdWUgPCB0YXJnZXQudmFsdWUgPyB7XG4gICAgICAgICAgICAgIHNvdXJjZTogdGFyZ2V0LFxuICAgICAgICAgICAgICB0YXJnZXQ6IHNvdXJjZVxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzb3J0Q2hvcmRzKSByZXNvcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvcnQoKSB7XG4gICAgICBjaG9yZHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0Q2hvcmRzKChhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlKSAvIDIsIChiLnNvdXJjZVxuICAgICAgICAgIC52YWx1ZSArIGIudGFyZ2V0LnZhbHVlKSAvIDIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNob3JkLm1hdHJpeCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1hdHJpeDtcbiAgICAgIG4gPSAobWF0cml4ID0geCkgJiYgbWF0cml4Lmxlbmd0aDtcbiAgICAgIGNob3JkcyA9IGdyb3VwcyA9IG51bGw7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcbiAgICAgIHBhZGRpbmcgPSB4O1xuICAgICAgY2hvcmRzID0gZ3JvdXBzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0R3JvdXBzO1xuICAgICAgc29ydEdyb3VwcyA9IHg7XG4gICAgICBjaG9yZHMgPSBncm91cHMgPSBudWxsO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnRTdWJncm91cHM7XG4gICAgICBzb3J0U3ViZ3JvdXBzID0geDtcbiAgICAgIGNob3JkcyA9IG51bGw7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydENob3JkcztcbiAgICAgIHNvcnRDaG9yZHMgPSB4O1xuICAgICAgaWYgKGNob3JkcykgcmVzb3J0KCk7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5jaG9yZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghY2hvcmRzKSByZWxheW91dCgpO1xuICAgICAgcmV0dXJuIGNob3JkcztcbiAgICB9O1xuICAgIGNob3JkLmdyb3VwcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFncm91cHMpIHJlbGF5b3V0KCk7XG4gICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH07XG4gICAgcmV0dXJuIGNob3JkO1xuICB9O1xuICBkMy5sYXlvdXQuZm9yY2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9yY2UgPSB7fSxcbiAgICAgIGV2ZW50ID0gZDMuZGlzcGF0Y2goXCJzdGFydFwiLCBcInRpY2tcIiwgXCJlbmRcIiksXG4gICAgICBzaXplID0gWzEsIDFdLFxuICAgICAgZHJhZywgYWxwaGEsIGZyaWN0aW9uID0gLjksXG4gICAgICBsaW5rRGlzdGFuY2UgPSBkM19sYXlvdXRfZm9yY2VMaW5rRGlzdGFuY2UsXG4gICAgICBsaW5rU3RyZW5ndGggPSBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGgsXG4gICAgICBjaGFyZ2UgPSAtMzAsXG4gICAgICBjaGFyZ2VEaXN0YW5jZTIgPSBkM19sYXlvdXRfZm9yY2VDaGFyZ2VEaXN0YW5jZTIsXG4gICAgICBncmF2aXR5ID0gLjEsXG4gICAgICB0aGV0YTIgPSAuNjQsXG4gICAgICBub2RlcyA9IFtdLFxuICAgICAgbGlua3MgPSBbXSxcbiAgICAgIGRpc3RhbmNlcywgc3RyZW5ndGhzLCBjaGFyZ2VzO1xuXG4gICAgZnVuY3Rpb24gcmVwdWxzZShub2RlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgICAgIGlmIChxdWFkLnBvaW50ICE9PSBub2RlKSB7XG4gICAgICAgICAgdmFyIGR4ID0gcXVhZC5jeCAtIG5vZGUueCxcbiAgICAgICAgICAgIGR5ID0gcXVhZC5jeSAtIG5vZGUueSxcbiAgICAgICAgICAgIGR3ID0geDIgLSB4MSxcbiAgICAgICAgICAgIGRuID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGR3ICogZHcgLyB0aGV0YTIgPCBkbikge1xuICAgICAgICAgICAgaWYgKGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcXVhZC5jaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgICAgbm9kZS5weCAtPSBkeCAqIGs7XG4gICAgICAgICAgICAgIG5vZGUucHkgLT0gZHkgKiBrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChxdWFkLnBvaW50ICYmIGRuICYmIGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICB2YXIgayA9IHF1YWQucG9pbnRDaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgIG5vZGUucHggLT0gZHggKiBrO1xuICAgICAgICAgICAgbm9kZS5weSAtPSBkeSAqIGs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcXVhZC5jaGFyZ2U7XG4gICAgICB9O1xuICAgIH1cbiAgICBmb3JjZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGFscGhhICo9IC45OSkgPCAuMDA1KSB7XG4gICAgICAgIGV2ZW50LmVuZCh7XG4gICAgICAgICAgdHlwZTogXCJlbmRcIixcbiAgICAgICAgICBhbHBoYTogYWxwaGEgPSAwXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBtID0gbGlua3MubGVuZ3RoLFxuICAgICAgICBxLCBpLCBvLCBzLCB0LCBsLCBrLCB4LCB5O1xuICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuICAgICAgICBvID0gbGlua3NbaV07XG4gICAgICAgIHMgPSBvLnNvdXJjZTtcbiAgICAgICAgdCA9IG8udGFyZ2V0O1xuICAgICAgICB4ID0gdC54IC0gcy54O1xuICAgICAgICB5ID0gdC55IC0gcy55O1xuICAgICAgICBpZiAobCA9IHggKiB4ICsgeSAqIHkpIHtcbiAgICAgICAgICBsID0gYWxwaGEgKiBzdHJlbmd0aHNbaV0gKiAoKGwgPSBNYXRoLnNxcnQobCkpIC0gZGlzdGFuY2VzW2ldKSAvXG4gICAgICAgICAgICBsO1xuICAgICAgICAgIHggKj0gbDtcbiAgICAgICAgICB5ICo9IGw7XG4gICAgICAgICAgdC54IC09IHggKiAoayA9IHMud2VpZ2h0IC8gKHQud2VpZ2h0ICsgcy53ZWlnaHQpKTtcbiAgICAgICAgICB0LnkgLT0geSAqIGs7XG4gICAgICAgICAgcy54ICs9IHggKiAoayA9IDEgLSBrKTtcbiAgICAgICAgICBzLnkgKz0geSAqIGs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChrID0gYWxwaGEgKiBncmF2aXR5KSB7XG4gICAgICAgIHggPSBzaXplWzBdIC8gMjtcbiAgICAgICAgeSA9IHNpemVbMV0gLyAyO1xuICAgICAgICBpID0gLTE7XG4gICAgICAgIGlmIChrKVxuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgICAgICBvLnggKz0gKHggLSBvLngpICogaztcbiAgICAgICAgICAgIG8ueSArPSAoeSAtIG8ueSkgKiBrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFyZ2UpIHtcbiAgICAgICAgZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZShxID0gZDMuZ2VvbS5xdWFkdHJlZShub2RlcyksIGFscGhhLFxuICAgICAgICAgIGNoYXJnZXMpO1xuICAgICAgICBpID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgaWYgKCEobyA9IG5vZGVzW2ldKS5maXhlZCkge1xuICAgICAgICAgICAgcS52aXNpdChyZXB1bHNlKG8pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkgPSAtMTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIG8gPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG8uZml4ZWQpIHtcbiAgICAgICAgICBvLnggPSBvLnB4O1xuICAgICAgICAgIG8ueSA9IG8ucHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgby54IC09IChvLnB4IC0gKG8ucHggPSBvLngpKSAqIGZyaWN0aW9uO1xuICAgICAgICAgIG8ueSAtPSAoby5weSAtIChvLnB5ID0gby55KSkgKiBmcmljdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZXZlbnQudGljayh7XG4gICAgICAgIHR5cGU6IFwidGlja1wiLFxuICAgICAgICBhbHBoYTogYWxwaGFcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZm9yY2Uubm9kZXMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlcztcbiAgICAgIG5vZGVzID0geDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmxpbmtzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbGlua3M7XG4gICAgICBsaW5rcyA9IHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UubGlua0Rpc3RhbmNlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbGlua0Rpc3RhbmNlO1xuICAgICAgbGlua0Rpc3RhbmNlID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAreDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmRpc3RhbmNlID0gZm9yY2UubGlua0Rpc3RhbmNlO1xuICAgIGZvcmNlLmxpbmtTdHJlbmd0aCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtTdHJlbmd0aDtcbiAgICAgIGxpbmtTdHJlbmd0aCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5mcmljdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGZyaWN0aW9uO1xuICAgICAgZnJpY3Rpb24gPSAreDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmNoYXJnZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNoYXJnZTtcbiAgICAgIGNoYXJnZSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5jaGFyZ2VEaXN0YW5jZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydChjaGFyZ2VEaXN0YW5jZTIpO1xuICAgICAgY2hhcmdlRGlzdGFuY2UyID0geCAqIHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5ncmF2aXR5ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3Jhdml0eTtcbiAgICAgIGdyYXZpdHkgPSAreDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLnRoZXRhID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gTWF0aC5zcXJ0KHRoZXRhMik7XG4gICAgICB0aGV0YTIgPSB4ICogeDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmFscGhhID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYWxwaGE7XG4gICAgICB4ID0gK3g7XG4gICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgaWYgKHggPiAwKSBhbHBoYSA9IHg7XG4gICAgICAgIGVsc2UgYWxwaGEgPSAwO1xuICAgICAgfSBlbHNlIGlmICh4ID4gMCkge1xuICAgICAgICBldmVudC5zdGFydCh7XG4gICAgICAgICAgdHlwZTogXCJzdGFydFwiLFxuICAgICAgICAgIGFscGhhOiBhbHBoYSA9IHhcbiAgICAgICAgfSk7XG4gICAgICAgIGQzLnRpbWVyKGZvcmNlLnRpY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2Uuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBtID0gbGlua3MubGVuZ3RoLFxuICAgICAgICB3ID0gc2l6ZVswXSxcbiAgICAgICAgaCA9IHNpemVbMV0sXG4gICAgICAgIG5laWdoYm9ycywgbztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgKG8gPSBub2Rlc1tpXSkuaW5kZXggPSBpO1xuICAgICAgICBvLndlaWdodCA9IDA7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSB7XG4gICAgICAgIG8gPSBsaW5rc1tpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBvLnNvdXJjZSA9PSBcIm51bWJlclwiKSBvLnNvdXJjZSA9IG5vZGVzW28uc291cmNlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBvLnRhcmdldCA9PSBcIm51bWJlclwiKSBvLnRhcmdldCA9IG5vZGVzW28udGFyZ2V0XTtcbiAgICAgICAgKytvLnNvdXJjZS53ZWlnaHQ7XG4gICAgICAgICsrby50YXJnZXQud2VpZ2h0O1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChpc05hTihvLngpKSBvLnggPSBwb3NpdGlvbihcInhcIiwgdyk7XG4gICAgICAgIGlmIChpc05hTihvLnkpKSBvLnkgPSBwb3NpdGlvbihcInlcIiwgaCk7XG4gICAgICAgIGlmIChpc05hTihvLnB4KSkgby5weCA9IG8ueDtcbiAgICAgICAgaWYgKGlzTmFOKG8ucHkpKSBvLnB5ID0gby55O1xuICAgICAgfVxuICAgICAgZGlzdGFuY2VzID0gW107XG4gICAgICBpZiAodHlwZW9mIGxpbmtEaXN0YW5jZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBkaXN0YW5jZXNbaV0gPSArbGlua0Rpc3RhbmNlLmNhbGwodGhpcyxcbiAgICAgICAgICBsaW5rc1tpXSwgaSk7XG4gICAgICBlbHNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIGRpc3RhbmNlc1tpXSA9IGxpbmtEaXN0YW5jZTtcbiAgICAgIHN0cmVuZ3RocyA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rU3RyZW5ndGggPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc3RyZW5ndGhzW2ldID0gK2xpbmtTdHJlbmd0aC5jYWxsKHRoaXMsXG4gICAgICAgICAgbGlua3NbaV0sIGkpO1xuICAgICAgZWxzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBzdHJlbmd0aHNbaV0gPSBsaW5rU3RyZW5ndGg7XG4gICAgICBjaGFyZ2VzID0gW107XG4gICAgICBpZiAodHlwZW9mIGNoYXJnZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGFyZ2VzW2ldID0gK2NoYXJnZS5jYWxsKHRoaXMsIG5vZGVzW2ldLFxuICAgICAgICAgIGkpO1xuICAgICAgZWxzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGFyZ2VzW2ldID0gY2hhcmdlO1xuXG4gICAgICBmdW5jdGlvbiBwb3NpdGlvbihkaW1lbnNpb24sIHNpemUpIHtcbiAgICAgICAgaWYgKCFuZWlnaGJvcnMpIHtcbiAgICAgICAgICBuZWlnaGJvcnMgPSBuZXcgQXJyYXkobik7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IG47ICsraikge1xuICAgICAgICAgICAgbmVpZ2hib3JzW2pdID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgICAgIHZhciBvID0gbGlua3Nbal07XG4gICAgICAgICAgICBuZWlnaGJvcnNbby5zb3VyY2UuaW5kZXhdLnB1c2goby50YXJnZXQpO1xuICAgICAgICAgICAgbmVpZ2hib3JzW28udGFyZ2V0LmluZGV4XS5wdXNoKG8uc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbmRpZGF0ZXMgPSBuZWlnaGJvcnNbaV0sXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG0gPSBjYW5kaWRhdGVzLmxlbmd0aCxcbiAgICAgICAgICB4O1xuICAgICAgICB3aGlsZSAoKytqIDwgbSlcbiAgICAgICAgICBpZiAoIWlzTmFOKHggPSBjYW5kaWRhdGVzW2pdW2RpbWVuc2lvbl0pKSByZXR1cm4geDtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiBzaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcmNlLnJlc3VtZSgpO1xuICAgIH07XG4gICAgZm9yY2UucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm9yY2UuYWxwaGEoLjEpO1xuICAgIH07XG4gICAgZm9yY2Uuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcmNlLmFscGhhKDApO1xuICAgIH07XG4gICAgZm9yY2UuZHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFkcmFnKSBkcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpLm9yaWdpbihkM19pZGVudGl0eSkub24oXG4gICAgICAgIFwiZHJhZ3N0YXJ0LmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZURyYWdzdGFydCkub24oXCJkcmFnLmZvcmNlXCIsXG4gICAgICAgIGRyYWdtb3ZlKS5vbihcImRyYWdlbmQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZCk7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkcmFnO1xuICAgICAgdGhpcy5vbihcIm1vdXNlb3Zlci5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VNb3VzZW92ZXIpLm9uKFxuICAgICAgICBcIm1vdXNlb3V0LmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZU1vdXNlb3V0KS5jYWxsKGRyYWcpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBkcmFnbW92ZShkKSB7XG4gICAgICBkLnB4ID0gZDMuZXZlbnQueCwgZC5weSA9IGQzLmV2ZW50Lnk7XG4gICAgICBmb3JjZS5yZXN1bWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzLnJlYmluZChmb3JjZSwgZXZlbnQsIFwib25cIik7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KGQpIHtcbiAgICBkLmZpeGVkIHw9IDI7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VEcmFnZW5kKGQpIHtcbiAgICBkLmZpeGVkICY9IH42O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlTW91c2VvdmVyKGQpIHtcbiAgICBkLmZpeGVkIHw9IDQ7XG4gICAgZC5weCA9IGQueCwgZC5weSA9IGQueTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZU1vdXNlb3V0KGQpIHtcbiAgICBkLmZpeGVkICY9IH40O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZShxdWFkLCBhbHBoYSwgY2hhcmdlcykge1xuICAgIHZhciBjeCA9IDAsXG4gICAgICBjeSA9IDA7XG4gICAgcXVhZC5jaGFyZ2UgPSAwO1xuICAgIGlmICghcXVhZC5sZWFmKSB7XG4gICAgICB2YXIgbm9kZXMgPSBxdWFkLm5vZGVzLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIGM7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBjID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChjID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKGMsIGFscGhhLCBjaGFyZ2VzKTtcbiAgICAgICAgcXVhZC5jaGFyZ2UgKz0gYy5jaGFyZ2U7XG4gICAgICAgIGN4ICs9IGMuY2hhcmdlICogYy5jeDtcbiAgICAgICAgY3kgKz0gYy5jaGFyZ2UgKiBjLmN5O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVhZC5wb2ludCkge1xuICAgICAgaWYgKCFxdWFkLmxlYWYpIHtcbiAgICAgICAgcXVhZC5wb2ludC54ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgICAgcXVhZC5wb2ludC55ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgIH1cbiAgICAgIHZhciBrID0gYWxwaGEgKiBjaGFyZ2VzW3F1YWQucG9pbnQuaW5kZXhdO1xuICAgICAgcXVhZC5jaGFyZ2UgKz0gcXVhZC5wb2ludENoYXJnZSA9IGs7XG4gICAgICBjeCArPSBrICogcXVhZC5wb2ludC54O1xuICAgICAgY3kgKz0gayAqIHF1YWQucG9pbnQueTtcbiAgICB9XG4gICAgcXVhZC5jeCA9IGN4IC8gcXVhZC5jaGFyZ2U7XG4gICAgcXVhZC5jeSA9IGN5IC8gcXVhZC5jaGFyZ2U7XG4gIH1cbiAgdmFyIGQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSA9IDIwLFxuICAgIGQzX2xheW91dF9mb3JjZUxpbmtTdHJlbmd0aCA9IDEsXG4gICAgZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyID0gSW5maW5pdHk7XG4gIGQzLmxheW91dC5oaWVyYXJjaHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc29ydCA9IGQzX2xheW91dF9oaWVyYXJjaHlTb3J0LFxuICAgICAgY2hpbGRyZW4gPSBkM19sYXlvdXRfaGllcmFyY2h5Q2hpbGRyZW4sXG4gICAgICB2YWx1ZSA9IGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZTtcblxuICAgIGZ1bmN0aW9uIGhpZXJhcmNoeShyb290KSB7XG4gICAgICB2YXIgc3RhY2sgPSBbcm9vdF0sXG4gICAgICAgIG5vZGVzID0gW10sXG4gICAgICAgIG5vZGU7XG4gICAgICByb290LmRlcHRoID0gMDtcbiAgICAgIHdoaWxlICgobm9kZSA9IHN0YWNrLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4uY2FsbChoaWVyYXJjaHksIG5vZGUsIG5vZGUuZGVwdGgpKSAmJiAobiA9XG4gICAgICAgICAgICBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgICAgIHZhciBuLCBjaGlsZHMsIGNoaWxkO1xuICAgICAgICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChjaGlsZCA9IGNoaWxkc1tuXSk7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlKSBub2RlLnZhbHVlID0gMDtcbiAgICAgICAgICBub2RlLmNoaWxkcmVuID0gY2hpbGRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWx1ZSkgbm9kZS52YWx1ZSA9ICt2YWx1ZS5jYWxsKGhpZXJhcmNoeSwgbm9kZSwgbm9kZS5kZXB0aCkgfHxcbiAgICAgICAgICAgIDA7XG4gICAgICAgICAgZGVsZXRlIG5vZGUuY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcywgcGFyZW50O1xuICAgICAgICBpZiAoc29ydCAmJiAoY2hpbGRzID0gbm9kZS5jaGlsZHJlbikpIGNoaWxkcy5zb3J0KHNvcnQpO1xuICAgICAgICBpZiAodmFsdWUgJiYgKHBhcmVudCA9IG5vZGUucGFyZW50KSkgcGFyZW50LnZhbHVlICs9IG5vZGUudmFsdWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgaGllcmFyY2h5LnNvcnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0O1xuICAgICAgc29ydCA9IHg7XG4gICAgICByZXR1cm4gaGllcmFyY2h5O1xuICAgIH07XG4gICAgaGllcmFyY2h5LmNoaWxkcmVuID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2hpbGRyZW47XG4gICAgICBjaGlsZHJlbiA9IHg7XG4gICAgICByZXR1cm4gaGllcmFyY2h5O1xuICAgIH07XG4gICAgaGllcmFyY2h5LnZhbHVlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWU7XG4gICAgICB2YWx1ZSA9IHg7XG4gICAgICByZXR1cm4gaGllcmFyY2h5O1xuICAgIH07XG4gICAgaGllcmFyY2h5LnJldmFsdWUgPSBmdW5jdGlvbihyb290KSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKHJvb3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikgbm9kZS52YWx1ZSA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgdmFyIHBhcmVudDtcbiAgICAgICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIG5vZGUudmFsdWUgPSArdmFsdWUuY2FsbChoaWVyYXJjaHksXG4gICAgICAgICAgICBub2RlLCBub2RlLmRlcHRoKSB8fCAwO1xuICAgICAgICAgIGlmIChwYXJlbnQgPSBub2RlLnBhcmVudCkgcGFyZW50LnZhbHVlICs9IG5vZGUudmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfTtcbiAgICByZXR1cm4gaGllcmFyY2h5O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQob2JqZWN0LCBoaWVyYXJjaHkpIHtcbiAgICBkMy5yZWJpbmQob2JqZWN0LCBoaWVyYXJjaHksIFwic29ydFwiLCBcImNoaWxkcmVuXCIsIFwidmFsdWVcIik7XG4gICAgb2JqZWN0Lm5vZGVzID0gb2JqZWN0O1xuICAgIG9iamVjdC5saW5rcyA9IGQzX2xheW91dF9oaWVyYXJjaHlMaW5rcztcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKG5vZGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGVzID0gW25vZGVdO1xuICAgIHdoaWxlICgobm9kZSA9IG5vZGVzLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIGlmICgoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIG4sIGNoaWxkcmVuO1xuICAgICAgICB3aGlsZSAoLS1uID49IDApIG5vZGVzLnB1c2goY2hpbGRyZW5bbl0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKG5vZGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGVzID0gW25vZGVdLFxuICAgICAgbm9kZXMyID0gW107XG4gICAgd2hpbGUgKChub2RlID0gbm9kZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIG5vZGVzMi5wdXNoKG5vZGUpO1xuICAgICAgaWYgKChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG4sIGNoaWxkcmVuO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlICgobm9kZSA9IG5vZGVzMi5wb3AoKSkgIT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuKGQpIHtcbiAgICByZXR1cm4gZC5jaGlsZHJlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZShkKSB7XG4gICAgcmV0dXJuIGQudmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5U29ydChhLCBiKSB7XG4gICAgcmV0dXJuIGIudmFsdWUgLSBhLnZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeUxpbmtzKG5vZGVzKSB7XG4gICAgcmV0dXJuIGQzLm1lcmdlKG5vZGVzLm1hcChmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgIHJldHVybiAocGFyZW50LmNoaWxkcmVuIHx8IFtdKS5tYXAoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHBhcmVudCxcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH1cbiAgZDMubGF5b3V0LnBhcnRpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCksXG4gICAgICBzaXplID0gWzEsIDFdO1xuXG4gICAgZnVuY3Rpb24gcG9zaXRpb24obm9kZSwgeCwgZHgsIGR5KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgbm9kZS54ID0geDtcbiAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBkeTtcbiAgICAgIG5vZGUuZHggPSBkeDtcbiAgICAgIG5vZGUuZHkgPSBkeTtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgICBuLCBjLCBkO1xuICAgICAgICBkeCA9IG5vZGUudmFsdWUgPyBkeCAvIG5vZGUudmFsdWUgOiAwO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHBvc2l0aW9uKGMgPSBjaGlsZHJlbltpXSwgeCwgZCA9IGMudmFsdWUgKiBkeCwgZHkpO1xuICAgICAgICAgIHggKz0gZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHRoKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGQgPSAwO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG47XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSBkID0gTWF0aC5tYXgoZCwgZGVwdGgoY2hpbGRyZW5baV0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxICsgZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJ0aXRpb24oZCwgaSkge1xuICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSk7XG4gICAgICBwb3NpdGlvbihub2Rlc1swXSwgMCwgc2l6ZVswXSwgc2l6ZVsxXSAvIGRlcHRoKG5vZGVzWzBdKSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIHBhcnRpdGlvbi5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSB4O1xuICAgICAgcmV0dXJuIHBhcnRpdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHBhcnRpdGlvbiwgaGllcmFyY2h5KTtcbiAgfTtcbiAgZDMubGF5b3V0LnBpZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IE51bWJlcixcbiAgICAgIHNvcnQgPSBkM19sYXlvdXRfcGllU29ydEJ5VmFsdWUsXG4gICAgICBzdGFydEFuZ2xlID0gMCxcbiAgICAgIGVuZEFuZ2xlID0gz4QsXG4gICAgICBwYWRBbmdsZSA9IDA7XG5cbiAgICBmdW5jdGlvbiBwaWUoZGF0YSkge1xuICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgdmFsdWVzID0gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgIHJldHVybiArdmFsdWUuY2FsbChwaWUsIGQsIGkpO1xuICAgICAgICB9KSxcbiAgICAgICAgYSA9ICsodHlwZW9mIHN0YXJ0QW5nbGUgPT09IFwiZnVuY3Rpb25cIiA/IHN0YXJ0QW5nbGUuYXBwbHkodGhpcyxcbiAgICAgICAgICBhcmd1bWVudHMpIDogc3RhcnRBbmdsZSksXG4gICAgICAgIGRhID0gKHR5cGVvZiBlbmRBbmdsZSA9PT0gXCJmdW5jdGlvblwiID8gZW5kQW5nbGUuYXBwbHkodGhpcyxcbiAgICAgICAgICBhcmd1bWVudHMpIDogZW5kQW5nbGUpIC0gYSxcbiAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sICsodHlwZW9mIHBhZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgICAgIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwYWRBbmdsZSkpLFxuICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgayA9IChkYSAtIG4gKiBwYSkgLyBkMy5zdW0odmFsdWVzKSxcbiAgICAgICAgaW5kZXggPSBkMy5yYW5nZShuKSxcbiAgICAgICAgYXJjcyA9IFtdLFxuICAgICAgICB2O1xuICAgICAgaWYgKHNvcnQgIT0gbnVsbCkgaW5kZXguc29ydChzb3J0ID09PSBkM19sYXlvdXRfcGllU29ydEJ5VmFsdWUgP1xuICAgICAgICBmdW5jdGlvbihpLCBqKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlc1tqXSAtIHZhbHVlc1tpXTtcbiAgICAgICAgfSA6IGZ1bmN0aW9uKGksIGopIHtcbiAgICAgICAgICByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTtcbiAgICAgICAgfSk7XG4gICAgICBpbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgYXJjc1tpXSA9IHtcbiAgICAgICAgICBkYXRhOiBkYXRhW2ldLFxuICAgICAgICAgIHZhbHVlOiB2ID0gdmFsdWVzW2ldLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEsXG4gICAgICAgICAgZW5kQW5nbGU6IGEgKz0gdiAqIGsgKyBwYSxcbiAgICAgICAgICBwYWRBbmdsZTogcFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYXJjcztcbiAgICB9XG4gICAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWU7XG4gICAgICB2YWx1ZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0O1xuICAgICAgc29ydCA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuICAgICAgc3RhcnRBbmdsZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZW5kQW5nbGU7XG4gICAgICBlbmRBbmdsZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkQW5nbGU7XG4gICAgICBwYWRBbmdsZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcmV0dXJuIHBpZTtcbiAgfTtcbiAgdmFyIGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSA9IHt9O1xuICBkMy5sYXlvdXQuc3RhY2sgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gZDNfaWRlbnRpdHksXG4gICAgICBvcmRlciA9IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdCxcbiAgICAgIG9mZnNldCA9IGQzX2xheW91dF9zdGFja09mZnNldFplcm8sXG4gICAgICBvdXQgPSBkM19sYXlvdXRfc3RhY2tPdXQsXG4gICAgICB4ID0gZDNfbGF5b3V0X3N0YWNrWCxcbiAgICAgIHkgPSBkM19sYXlvdXRfc3RhY2tZO1xuXG4gICAgZnVuY3Rpb24gc3RhY2soZGF0YSwgaW5kZXgpIHtcbiAgICAgIGlmICghKG4gPSBkYXRhLmxlbmd0aCkpIHJldHVybiBkYXRhO1xuICAgICAgdmFyIHNlcmllcyA9IGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5jYWxsKHN0YWNrLCBkLCBpKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHBvaW50cyA9IHNlcmllcy5tYXAoZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZC5tYXAoZnVuY3Rpb24odiwgaSkge1xuICAgICAgICAgIHJldHVybiBbeC5jYWxsKHN0YWNrLCB2LCBpKSwgeS5jYWxsKHN0YWNrLCB2LCBpKV07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgb3JkZXJzID0gb3JkZXIuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICBzZXJpZXMgPSBkMy5wZXJtdXRlKHNlcmllcywgb3JkZXJzKTtcbiAgICAgIHBvaW50cyA9IGQzLnBlcm11dGUocG9pbnRzLCBvcmRlcnMpO1xuICAgICAgdmFyIG9mZnNldHMgPSBvZmZzZXQuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICB2YXIgbSA9IHNlcmllc1swXS5sZW5ndGgsXG4gICAgICAgIG4sIGksIGosIG87XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIG91dC5jYWxsKHN0YWNrLCBzZXJpZXNbMF1bal0sIG8gPSBvZmZzZXRzW2pdLCBwb2ludHNbMF1bal1bMV0pO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgb3V0LmNhbGwoc3RhY2ssIHNlcmllc1tpXVtqXSwgbyArPSBwb2ludHNbaSAtIDFdW2pdWzFdLCBwb2ludHNbXG4gICAgICAgICAgICBpXVtqXVsxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBzdGFjay52YWx1ZXMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZXM7XG4gICAgICB2YWx1ZXMgPSB4O1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgc3RhY2sub3JkZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmRlcjtcbiAgICAgIG9yZGVyID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBkM19sYXlvdXRfc3RhY2tPcmRlcnMuZ2V0KHgpIHx8XG4gICAgICAgIGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdDtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9mZnNldDtcbiAgICAgIG9mZnNldCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogZDNfbGF5b3V0X3N0YWNrT2Zmc2V0cy5nZXQoXG4gICAgICAgIHgpIHx8IGQzX2xheW91dF9zdGFja09mZnNldFplcm87XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay54ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcbiAgICAgIHggPSB6O1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgc3RhY2sueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gejtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm91dCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dDtcbiAgICAgIG91dCA9IHo7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrWChkKSB7XG4gICAgcmV0dXJuIGQueDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1koZCkge1xuICAgIHJldHVybiBkLnk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPdXQoZCwgeTAsIHkpIHtcbiAgICBkLnkwID0geTA7XG4gICAgZC55ID0geTtcbiAgfVxuICB2YXIgZDNfbGF5b3V0X3N0YWNrT3JkZXJzID0gZDMubWFwKHtcbiAgICBcImluc2lkZS1vdXRcIjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgaSwgaiwgbWF4ID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgpLFxuICAgICAgICBzdW1zID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKSxcbiAgICAgICAgaW5kZXggPSBkMy5yYW5nZShuKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gbWF4W2FdIC0gbWF4W2JdO1xuICAgICAgICB9KSxcbiAgICAgICAgdG9wID0gMCxcbiAgICAgICAgYm90dG9tID0gMCxcbiAgICAgICAgdG9wcyA9IFtdLFxuICAgICAgICBib3R0b21zID0gW107XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGogPSBpbmRleFtpXTtcbiAgICAgICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgICAgIHRvcCArPSBzdW1zW2pdO1xuICAgICAgICAgIHRvcHMucHVzaChqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3R0b20gKz0gc3Vtc1tqXTtcbiAgICAgICAgICBib3R0b21zLnB1c2goaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoZGF0YS5sZW5ndGgpLnJldmVyc2UoKTtcbiAgICB9LFxuICAgIFwiZGVmYXVsdFwiOiBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHRcbiAgfSk7XG4gIHZhciBkM19sYXlvdXRfc3RhY2tPZmZzZXRzID0gZDMubWFwKHtcbiAgICBzaWxob3VldHRlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBtID0gZGF0YVswXS5sZW5ndGgsXG4gICAgICAgIHN1bXMgPSBbXSxcbiAgICAgICAgbWF4ID0gMCxcbiAgICAgICAgaSwgaiwgbywgeTAgPSBbXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBuOyBpKyspIG8gKz0gZGF0YVtpXVtqXVsxXTtcbiAgICAgICAgaWYgKG8gPiBtYXgpIG1heCA9IG87XG4gICAgICAgIHN1bXMucHVzaChvKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgeTBbal0gPSAobWF4IC0gc3Vtc1tqXSkgLyAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHkwO1xuICAgIH0sXG4gICAgd2lnZ2xlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICB4ID0gZGF0YVswXSxcbiAgICAgICAgbSA9IHgubGVuZ3RoLFxuICAgICAgICBpLCBqLCBrLCBzMSwgczIsIHMzLCBkeCwgbywgbzAsIHkwID0gW107XG4gICAgICB5MFswXSA9IG8gPSBvMCA9IDA7XG4gICAgICBmb3IgKGogPSAxOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIHMxID0gMDsgaSA8IG47ICsraSkgczEgKz0gZGF0YVtpXVtqXVsxXTtcbiAgICAgICAgZm9yIChpID0gMCwgczIgPSAwLCBkeCA9IHhbal1bMF0gLSB4W2ogLSAxXVswXTsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGZvciAoayA9IDAsIHMzID0gKGRhdGFbaV1bal1bMV0gLSBkYXRhW2ldW2ogLSAxXVsxXSkgLyAoMiAqXG4gICAgICAgICAgICAgIGR4KTsgayA8IGk7ICsraykge1xuICAgICAgICAgICAgczMgKz0gKGRhdGFba11bal1bMV0gLSBkYXRhW2tdW2ogLSAxXVsxXSkgLyBkeDtcbiAgICAgICAgICB9XG4gICAgICAgICAgczIgKz0gczMgKiBkYXRhW2ldW2pdWzFdO1xuICAgICAgICB9XG4gICAgICAgIHkwW2pdID0gbyAtPSBzMSA/IHMyIC8gczEgKiBkeCA6IDA7XG4gICAgICAgIGlmIChvIDwgbzApIG8wID0gbztcbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHkwW2pdIC09IG8wO1xuICAgICAgcmV0dXJuIHkwO1xuICAgIH0sXG4gICAgZXhwYW5kOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBtID0gZGF0YVswXS5sZW5ndGgsXG4gICAgICAgIGsgPSAxIC8gbixcbiAgICAgICAgaSwgaiwgbywgeTAgPSBbXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBuOyBpKyspIG8gKz0gZGF0YVtpXVtqXVsxXTtcbiAgICAgICAgaWYgKG8pXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZGF0YVtpXVtqXVsxXSAvPSBvO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZGF0YVtpXVtqXVsxXSA9IGs7XG4gICAgICB9XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB5MFtqXSA9IDA7XG4gICAgICByZXR1cm4geTA7XG4gICAgfSxcbiAgICB6ZXJvOiBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdChkYXRhKSB7XG4gICAgcmV0dXJuIGQzLnJhbmdlKGRhdGEubGVuZ3RoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja09mZnNldFplcm8oZGF0YSkge1xuICAgIHZhciBqID0gLTEsXG4gICAgICBtID0gZGF0YVswXS5sZW5ndGgsXG4gICAgICB5MCA9IFtdO1xuICAgIHdoaWxlICgrK2ogPCBtKSB5MFtqXSA9IDA7XG4gICAgcmV0dXJuIHkwO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgoYXJyYXkpIHtcbiAgICB2YXIgaSA9IDEsXG4gICAgICBqID0gMCxcbiAgICAgIHYgPSBhcnJheVswXVsxXSxcbiAgICAgIGssIG4gPSBhcnJheS5sZW5ndGg7XG4gICAgZm9yICg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoayA9IGFycmF5W2ldWzFdKSA+IHYpIHtcbiAgICAgICAgaiA9IGk7XG4gICAgICAgIHYgPSBrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1JlZHVjZVN1bShkKSB7XG4gICAgcmV0dXJuIGQucmVkdWNlKGQzX2xheW91dF9zdGFja1N1bSwgMCk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tTdW0ocCwgZCkge1xuICAgIHJldHVybiBwICsgZFsxXTtcbiAgfVxuICBkMy5sYXlvdXQuaGlzdG9ncmFtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZyZXF1ZW5jeSA9IHRydWUsXG4gICAgICB2YWx1ZXIgPSBOdW1iZXIsXG4gICAgICByYW5nZXIgPSBkM19sYXlvdXRfaGlzdG9ncmFtUmFuZ2UsXG4gICAgICBiaW5uZXIgPSBkM19sYXlvdXRfaGlzdG9ncmFtQmluU3R1cmdlcztcblxuICAgIGZ1bmN0aW9uIGhpc3RvZ3JhbShkYXRhLCBpKSB7XG4gICAgICB2YXIgYmlucyA9IFtdLFxuICAgICAgICB2YWx1ZXMgPSBkYXRhLm1hcCh2YWx1ZXIsIHRoaXMpLFxuICAgICAgICByYW5nZSA9IHJhbmdlci5jYWxsKHRoaXMsIHZhbHVlcywgaSksXG4gICAgICAgIHRocmVzaG9sZHMgPSBiaW5uZXIuY2FsbCh0aGlzLCByYW5nZSwgdmFsdWVzLCBpKSxcbiAgICAgICAgYmluLCBpID0gLTEsXG4gICAgICAgIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBtID0gdGhyZXNob2xkcy5sZW5ndGggLSAxLFxuICAgICAgICBrID0gZnJlcXVlbmN5ID8gMSA6IDEgLyBuLFxuICAgICAgICB4O1xuICAgICAgd2hpbGUgKCsraSA8IG0pIHtcbiAgICAgICAgYmluID0gYmluc1tpXSA9IFtdO1xuICAgICAgICBiaW4uZHggPSB0aHJlc2hvbGRzW2kgKyAxXSAtIChiaW4ueCA9IHRocmVzaG9sZHNbaV0pO1xuICAgICAgICBiaW4ueSA9IDA7XG4gICAgICB9XG4gICAgICBpZiAobSA+IDApIHtcbiAgICAgICAgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHggPSB2YWx1ZXNbaV07XG4gICAgICAgICAgaWYgKHggPj0gcmFuZ2VbMF0gJiYgeCA8PSByYW5nZVsxXSkge1xuICAgICAgICAgICAgYmluID0gYmluc1tkMy5iaXNlY3QodGhyZXNob2xkcywgeCwgMSwgbSkgLSAxXTtcbiAgICAgICAgICAgIGJpbi55ICs9IGs7XG4gICAgICAgICAgICBiaW4ucHVzaChkYXRhW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiaW5zO1xuICAgIH1cbiAgICBoaXN0b2dyYW0udmFsdWUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZXI7XG4gICAgICB2YWx1ZXIgPSB4O1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIGhpc3RvZ3JhbS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlcjtcbiAgICAgIHJhbmdlciA9IGQzX2Z1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gaGlzdG9ncmFtO1xuICAgIH07XG4gICAgaGlzdG9ncmFtLmJpbnMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBiaW5uZXI7XG4gICAgICBiaW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIHgpO1xuICAgICAgfSA6IGQzX2Z1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gaGlzdG9ncmFtO1xuICAgIH07XG4gICAgaGlzdG9ncmFtLmZyZXF1ZW5jeSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGZyZXF1ZW5jeTtcbiAgICAgIGZyZXF1ZW5jeSA9ICEheDtcbiAgICAgIHJldHVybiBoaXN0b2dyYW07XG4gICAgfTtcbiAgICByZXR1cm4gaGlzdG9ncmFtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1CaW5TdHVyZ2VzKHJhbmdlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkKHJhbmdlLCBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgL1xuICAgICAgTWF0aC5MTjIgKyAxKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIG4pIHtcbiAgICB2YXIgeCA9IC0xLFxuICAgICAgYiA9ICtyYW5nZVswXSxcbiAgICAgIG0gPSAocmFuZ2VbMV0gLSBiKSAvIG4sXG4gICAgICBmID0gW107XG4gICAgd2hpbGUgKCsreCA8PSBuKSBmW3hdID0gbSAqIHggKyBiO1xuICAgIHJldHVybiBmO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlKHZhbHVlcykge1xuICAgIHJldHVybiBbZDMubWluKHZhbHVlcyksIGQzLm1heCh2YWx1ZXMpXTtcbiAgfVxuICBkMy5sYXlvdXQucGFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChkM19sYXlvdXRfcGFja1NvcnQpLFxuICAgICAgcGFkZGluZyA9IDAsXG4gICAgICBzaXplID0gWzEsIDFdLFxuICAgICAgcmFkaXVzO1xuXG4gICAgZnVuY3Rpb24gcGFjayhkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSxcbiAgICAgICAgcm9vdCA9IG5vZGVzWzBdLFxuICAgICAgICB3ID0gc2l6ZVswXSxcbiAgICAgICAgaCA9IHNpemVbMV0sXG4gICAgICAgIHIgPSByYWRpdXMgPT0gbnVsbCA/IE1hdGguc3FydCA6IHR5cGVvZiByYWRpdXMgPT09IFwiZnVuY3Rpb25cIiA/XG4gICAgICAgIHJhZGl1cyA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiByYWRpdXM7XG4gICAgICAgIH07XG4gICAgICByb290LnggPSByb290LnkgPSAwO1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24oZCkge1xuICAgICAgICBkLnIgPSArcihkLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyk7XG4gICAgICBpZiAocGFkZGluZykge1xuICAgICAgICB2YXIgZHIgPSBwYWRkaW5nICogKHJhZGl1cyA/IDEgOiBNYXRoLm1heCgyICogcm9vdC5yIC8gdywgMiAqXG4gICAgICAgICAgcm9vdC5yIC8gaCkpIC8gMjtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGQuciArPSBkcjtcbiAgICAgICAgfSk7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGQzX2xheW91dF9wYWNrU2libGluZ3MpO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgZC5yIC09IGRyO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKHJvb3QsIHcgLyAyLCBoIC8gMiwgcmFkaXVzID8gMSA6IDEgLyBNYXRoLm1heChcbiAgICAgICAgMiAqIHJvb3QuciAvIHcsIDIgKiByb290LnIgLyBoKSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIHBhY2suc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0gXztcbiAgICAgIHJldHVybiBwYWNrO1xuICAgIH07XG4gICAgcGFjay5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYWRpdXM7XG4gICAgICByYWRpdXMgPSBfID09IG51bGwgfHwgdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiArXztcbiAgICAgIHJldHVybiBwYWNrO1xuICAgIH07XG4gICAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcbiAgICAgIHBhZGRpbmcgPSArXztcbiAgICAgIHJldHVybiBwYWNrO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQocGFjaywgaGllcmFyY2h5KTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NvcnQoYSwgYikge1xuICAgIHJldHVybiBhLnZhbHVlIC0gYi52YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGIpIHtcbiAgICB2YXIgYyA9IGEuX3BhY2tfbmV4dDtcbiAgICBhLl9wYWNrX25leHQgPSBiO1xuICAgIGIuX3BhY2tfcHJldiA9IGE7XG4gICAgYi5fcGFja19uZXh0ID0gYztcbiAgICBjLl9wYWNrX3ByZXYgPSBiO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tTcGxpY2UoYSwgYikge1xuICAgIGEuX3BhY2tfbmV4dCA9IGI7XG4gICAgYi5fcGFja19wcmV2ID0gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhhLCBiKSB7XG4gICAgdmFyIGR4ID0gYi54IC0gYS54LFxuICAgICAgZHkgPSBiLnkgLSBhLnksXG4gICAgICBkciA9IGEuciArIGIucjtcbiAgICByZXR1cm4gLjk5OSAqIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU2libGluZ3Mobm9kZSkge1xuICAgIGlmICghKG5vZGVzID0gbm9kZS5jaGlsZHJlbikgfHwgIShuID0gbm9kZXMubGVuZ3RoKSkgcmV0dXJuO1xuICAgIHZhciBub2RlcywgeE1pbiA9IEluZmluaXR5LFxuICAgICAgeE1heCA9IC1JbmZpbml0eSxcbiAgICAgIHlNaW4gPSBJbmZpbml0eSxcbiAgICAgIHlNYXggPSAtSW5maW5pdHksXG4gICAgICBhLCBiLCBjLCBpLCBqLCBrLCBuO1xuXG4gICAgZnVuY3Rpb24gYm91bmQobm9kZSkge1xuICAgICAgeE1pbiA9IE1hdGgubWluKG5vZGUueCAtIG5vZGUuciwgeE1pbik7XG4gICAgICB4TWF4ID0gTWF0aC5tYXgobm9kZS54ICsgbm9kZS5yLCB4TWF4KTtcbiAgICAgIHlNaW4gPSBNYXRoLm1pbihub2RlLnkgLSBub2RlLnIsIHlNaW4pO1xuICAgICAgeU1heCA9IE1hdGgubWF4KG5vZGUueSArIG5vZGUuciwgeU1heCk7XG4gICAgfVxuICAgIG5vZGVzLmZvckVhY2goZDNfbGF5b3V0X3BhY2tMaW5rKTtcbiAgICBhID0gbm9kZXNbMF07XG4gICAgYS54ID0gLWEucjtcbiAgICBhLnkgPSAwO1xuICAgIGJvdW5kKGEpO1xuICAgIGlmIChuID4gMSkge1xuICAgICAgYiA9IG5vZGVzWzFdO1xuICAgICAgYi54ID0gYi5yO1xuICAgICAgYi55ID0gMDtcbiAgICAgIGJvdW5kKGIpO1xuICAgICAgaWYgKG4gPiAyKSB7XG4gICAgICAgIGMgPSBub2Rlc1syXTtcbiAgICAgICAgZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjKTtcbiAgICAgICAgYm91bmQoYyk7XG4gICAgICAgIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGMpO1xuICAgICAgICBhLl9wYWNrX3ByZXYgPSBjO1xuICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChjLCBiKTtcbiAgICAgICAgYiA9IGEuX3BhY2tfbmV4dDtcbiAgICAgICAgZm9yIChpID0gMzsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGQzX2xheW91dF9wYWNrUGxhY2UoYSwgYiwgYyA9IG5vZGVzW2ldKTtcbiAgICAgICAgICB2YXIgaXNlY3QgPSAwLFxuICAgICAgICAgICAgczEgPSAxLFxuICAgICAgICAgICAgczIgPSAxO1xuICAgICAgICAgIGZvciAoaiA9IGIuX3BhY2tfbmV4dDsgaiAhPT0gYjsgaiA9IGouX3BhY2tfbmV4dCwgczErKykge1xuICAgICAgICAgICAgaWYgKGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhqLCBjKSkge1xuICAgICAgICAgICAgICBpc2VjdCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNlY3QgPT0gMSkge1xuICAgICAgICAgICAgZm9yIChrID0gYS5fcGFja19wcmV2OyBrICE9PSBqLl9wYWNrX3ByZXY7IGsgPSBrLl9wYWNrX3ByZXYsIHMyKyspIHtcbiAgICAgICAgICAgICAgaWYgKGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhrLCBjKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc2VjdCkge1xuICAgICAgICAgICAgaWYgKHMxIDwgczIgfHwgczEgPT0gczIgJiYgYi5yIDwgYS5yKSBkM19sYXlvdXRfcGFja1NwbGljZShhLCBiID1cbiAgICAgICAgICAgICAgaik7XG4gICAgICAgICAgICBlbHNlIGQzX2xheW91dF9wYWNrU3BsaWNlKGEgPSBrLCBiKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZDNfbGF5b3V0X3BhY2tJbnNlcnQoYSwgYyk7XG4gICAgICAgICAgICBiID0gYztcbiAgICAgICAgICAgIGJvdW5kKGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY3ggPSAoeE1pbiArIHhNYXgpIC8gMixcbiAgICAgIGN5ID0gKHlNaW4gKyB5TWF4KSAvIDIsXG4gICAgICBjciA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgYyA9IG5vZGVzW2ldO1xuICAgICAgYy54IC09IGN4O1xuICAgICAgYy55IC09IGN5O1xuICAgICAgY3IgPSBNYXRoLm1heChjciwgYy5yICsgTWF0aC5zcXJ0KGMueCAqIGMueCArIGMueSAqIGMueSkpO1xuICAgIH1cbiAgICBub2RlLnIgPSBjcjtcbiAgICBub2Rlcy5mb3JFYWNoKGQzX2xheW91dF9wYWNrVW5saW5rKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrTGluayhub2RlKSB7XG4gICAgbm9kZS5fcGFja19uZXh0ID0gbm9kZS5fcGFja19wcmV2ID0gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrVW5saW5rKG5vZGUpIHtcbiAgICBkZWxldGUgbm9kZS5fcGFja19uZXh0O1xuICAgIGRlbGV0ZSBub2RlLl9wYWNrX3ByZXY7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1RyYW5zZm9ybShub2RlLCB4LCB5LCBrKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBub2RlLnggPSB4ICs9IGsgKiBub2RlLng7XG4gICAgbm9kZS55ID0geSArPSBrICogbm9kZS55O1xuICAgIG5vZGUuciAqPSBrO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19sYXlvdXRfcGFja1RyYW5zZm9ybShjaGlsZHJlbltpXSwgeCwgeSwgayk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjKSB7XG4gICAgdmFyIGRiID0gYS5yICsgYy5yLFxuICAgICAgZHggPSBiLnggLSBhLngsXG4gICAgICBkeSA9IGIueSAtIGEueTtcbiAgICBpZiAoZGIgJiYgKGR4IHx8IGR5KSkge1xuICAgICAgdmFyIGRhID0gYi5yICsgYy5yLFxuICAgICAgICBkYyA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgZGEgKj0gZGE7XG4gICAgICBkYiAqPSBkYjtcbiAgICAgIHZhciB4ID0gLjUgKyAoZGIgLSBkYSkgLyAoMiAqIGRjKSxcbiAgICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCAyICogZGEgKiAoZGIgKyBkYykgLSAoZGIgLT0gZGMpICogZGIgLSBkYSAqXG4gICAgICAgICAgZGEpKSAvICgyICogZGMpO1xuICAgICAgYy54ID0gYS54ICsgeCAqIGR4ICsgeSAqIGR5O1xuICAgICAgYy55ID0gYS55ICsgeCAqIGR5IC0geSAqIGR4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjLnggPSBhLnggKyBkYjtcbiAgICAgIGMueSA9IGEueTtcbiAgICB9XG4gIH1cbiAgZDMubGF5b3V0LnRyZWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLnNvcnQobnVsbCkudmFsdWUobnVsbCksXG4gICAgICBzZXBhcmF0aW9uID0gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uLFxuICAgICAgc2l6ZSA9IFsxLCAxXSxcbiAgICAgIG5vZGVTaXplID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHRyZWUoZCwgaSkge1xuICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksXG4gICAgICAgIHJvb3QwID0gbm9kZXNbMF0sXG4gICAgICAgIHJvb3QxID0gd3JhcFRyZWUocm9vdDApO1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdDEsIGZpcnN0V2FsayksIHJvb3QxLnBhcmVudC5tID0gLVxuICAgICAgICByb290MS56O1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKHJvb3QxLCBzZWNvbmRXYWxrKTtcbiAgICAgIGlmIChub2RlU2l6ZSkgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKHJvb3QwLCBzaXplTm9kZSk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIGxlZnQgPSByb290MCxcbiAgICAgICAgICByaWdodCA9IHJvb3QwLFxuICAgICAgICAgIGJvdHRvbSA9IHJvb3QwO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcbiAgICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHR4ID0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyIC0gbGVmdC54LFxuICAgICAgICAgIGt4ID0gc2l6ZVswXSAvIChyaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyICsgdHgpLFxuICAgICAgICAgIGt5ID0gc2l6ZVsxXSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcbiAgICAgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICoga3k7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBUcmVlKHJvb3QwKSB7XG4gICAgICB2YXIgcm9vdDEgPSB7XG4gICAgICAgICAgQTogbnVsbCxcbiAgICAgICAgICBjaGlsZHJlbjogW3Jvb3QwXVxuICAgICAgICB9LFxuICAgICAgICBxdWV1ZSA9IFtyb290MV0sXG4gICAgICAgIG5vZGUxO1xuICAgICAgd2hpbGUgKChub2RlMSA9IHF1ZXVlLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gbm9kZTEuY2hpbGRyZW4sIGNoaWxkLCBpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8XG4gICAgICAgICAgbjsgKytpKSB7XG4gICAgICAgICAgcXVldWUucHVzaCgoY2hpbGRyZW5baV0gPSBjaGlsZCA9IHtcbiAgICAgICAgICAgIF86IGNoaWxkcmVuW2ldLFxuICAgICAgICAgICAgcGFyZW50OiBub2RlMSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiAoY2hpbGQgPSBjaGlsZHJlbltpXS5jaGlsZHJlbikgJiYgY2hpbGQuc2xpY2UoKSB8fCBbXSxcbiAgICAgICAgICAgIEE6IG51bGwsXG4gICAgICAgICAgICBhOiBudWxsLFxuICAgICAgICAgICAgejogMCxcbiAgICAgICAgICAgIG06IDAsXG4gICAgICAgICAgICBjOiAwLFxuICAgICAgICAgICAgczogMCxcbiAgICAgICAgICAgIHQ6IG51bGwsXG4gICAgICAgICAgICBpOiBpXG4gICAgICAgICAgfSkuYSA9IGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJvb3QxLmNoaWxkcmVuWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgICBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLFxuICAgICAgICB3ID0gdi5pID8gc2libGluZ3Nbdi5pIC0gMV0gOiBudWxsO1xuICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBkM19sYXlvdXRfdHJlZVNoaWZ0KHYpO1xuICAgICAgICB2YXIgbWlkcG9pbnQgPSAoY2hpbGRyZW5bMF0ueiArIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnopIC9cbiAgICAgICAgICAyO1xuICAgICAgICBpZiAodykge1xuICAgICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICB9XG4gICAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuICAgICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuICAgICAgdi5tICs9IHYucGFyZW50Lm07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwb3J0aW9uKHYsIHcsIGFuY2VzdG9yKSB7XG4gICAgICBpZiAodykge1xuICAgICAgICB2YXIgdmlwID0gdixcbiAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgIHZpbSA9IHcsXG4gICAgICAgICAgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSxcbiAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICBzb3AgPSB2b3AubSxcbiAgICAgICAgICBzaW0gPSB2aW0ubSxcbiAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICBzaGlmdDtcbiAgICAgICAgd2hpbGUgKHZpbSA9IGQzX2xheW91dF90cmVlUmlnaHQodmltKSwgdmlwID0gZDNfbGF5b3V0X3RyZWVMZWZ0KFxuICAgICAgICAgICAgdmlwKSwgdmltICYmIHZpcCkge1xuICAgICAgICAgIHZvbSA9IGQzX2xheW91dF90cmVlTGVmdCh2b20pO1xuICAgICAgICAgIHZvcCA9IGQzX2xheW91dF90cmVlUmlnaHQodm9wKTtcbiAgICAgICAgICB2b3AuYSA9IHY7XG4gICAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICAgIGQzX2xheW91dF90cmVlTW92ZShkM19sYXlvdXRfdHJlZUFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLFxuICAgICAgICAgICAgICB2LCBzaGlmdCk7XG4gICAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmltICYmICFkM19sYXlvdXRfdHJlZVJpZ2h0KHZvcCkpIHtcbiAgICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpcCAmJiAhZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSkpIHtcbiAgICAgICAgICB2b20udCA9IHZpcDtcbiAgICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG4gICAgICAgICAgYW5jZXN0b3IgPSB2O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYW5jZXN0b3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgICAgbm9kZS54ICo9IHNpemVbMF07XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogc2l6ZVsxXTtcbiAgICB9XG4gICAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2VwYXJhdGlvbjtcbiAgICAgIHNlcGFyYXRpb24gPSB4O1xuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfTtcbiAgICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IG51bGwgOiBzaXplO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBzaXplTm9kZSA6IG51bGw7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IHNpemUgOiBudWxsO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBudWxsIDogc2l6ZU5vZGU7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWUsIGhpZXJhcmNoeSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXJlbnQgPT0gYi5wYXJlbnQgPyAxIDogMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlTGVmdCh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW4ubGVuZ3RoID8gY2hpbGRyZW5bMF0gOiB2LnQ7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVJpZ2h0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgbjtcbiAgICByZXR1cm4gKG4gPSBjaGlsZHJlbi5sZW5ndGgpID8gY2hpbGRyZW5bbiAtIDFdIDogdi50O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVNb3ZlKHdtLCB3cCwgc2hpZnQpIHtcbiAgICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICAgIHdwLmMgLT0gY2hhbmdlO1xuICAgIHdwLnMgKz0gc2hpZnQ7XG4gICAgd20uYyArPSBjaGFuZ2U7XG4gICAgd3AueiArPSBzaGlmdDtcbiAgICB3cC5tICs9IHNoaWZ0O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVTaGlmdCh2KSB7XG4gICAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgIHcgPSBjaGlsZHJlbltpXTtcbiAgICAgIHcueiArPSBzaGlmdDtcbiAgICAgIHcubSArPSBzaGlmdDtcbiAgICAgIHNoaWZ0ICs9IHcucyArIChjaGFuZ2UgKz0gdy5jKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZUFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpIHtcbiAgICByZXR1cm4gdmltLmEucGFyZW50ID09PSB2LnBhcmVudCA/IHZpbS5hIDogYW5jZXN0b3I7XG4gIH1cbiAgZDMubGF5b3V0LmNsdXN0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLnNvcnQobnVsbCkudmFsdWUobnVsbCksXG4gICAgICBzZXBhcmF0aW9uID0gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uLFxuICAgICAgc2l6ZSA9IFsxLCAxXSxcbiAgICAgIG5vZGVTaXplID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjbHVzdGVyKGQsIGkpIHtcbiAgICAgIHZhciBub2RlcyA9IGhpZXJhcmNoeS5jYWxsKHRoaXMsIGQsIGkpLFxuICAgICAgICByb290ID0gbm9kZXNbMF0sXG4gICAgICAgIHByZXZpb3VzTm9kZSwgeCA9IDA7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICBub2RlLnggPSBkM19sYXlvdXRfY2x1c3RlclgoY2hpbGRyZW4pO1xuICAgICAgICAgIG5vZGUueSA9IGQzX2xheW91dF9jbHVzdGVyWShjaGlsZHJlbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS54ID0gcHJldmlvdXNOb2RlID8geCArPSBzZXBhcmF0aW9uKG5vZGUsIHByZXZpb3VzTm9kZSkgOlxuICAgICAgICAgICAgMDtcbiAgICAgICAgICBub2RlLnkgPSAwO1xuICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGxlZnQgPSBkM19sYXlvdXRfY2x1c3RlckxlZnQocm9vdCksXG4gICAgICAgIHJpZ2h0ID0gZDNfbGF5b3V0X2NsdXN0ZXJSaWdodChyb290KSxcbiAgICAgICAgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0gcm9vdC54KSAqIHNpemVbMF07XG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogc2l6ZVsxXTtcbiAgICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggLSB4MCkgLyAoeDEgLSB4MCkgKiBzaXplWzBdO1xuICAgICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBzaXplWzFdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNlcGFyYXRpb247XG4gICAgICBzZXBhcmF0aW9uID0geDtcbiAgICAgIHJldHVybiBjbHVzdGVyO1xuICAgIH07XG4gICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBudWxsIDogc2l6ZTtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSA9PSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBzaXplIDogbnVsbDtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSAhPSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChjbHVzdGVyLCBoaWVyYXJjaHkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyWShjaGlsZHJlbikge1xuICAgIHJldHVybiAxICsgZDMubWF4KGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclgoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uKHgsIGNoaWxkKSB7XG4gICAgICByZXR1cm4geCArIGNoaWxkLng7XG4gICAgfSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlckxlZnQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA/IGQzX2xheW91dF9jbHVzdGVyTGVmdChjaGlsZHJlblswXSkgOlxuICAgICAgbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyUmlnaHQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICBuO1xuICAgIHJldHVybiBjaGlsZHJlbiAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkgPyBkM19sYXlvdXRfY2x1c3RlclJpZ2h0KFxuICAgICAgY2hpbGRyZW5bbiAtIDFdKSA6IG5vZGU7XG4gIH1cbiAgZDMubGF5b3V0LnRyZWVtYXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLFxuICAgICAgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgc2l6ZSA9IFsxLCAxXSxcbiAgICAgIHBhZGRpbmcgPSBudWxsLFxuICAgICAgcGFkID0gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsLFxuICAgICAgc3RpY2t5ID0gZmFsc2UsXG4gICAgICBzdGlja2llcywgbW9kZSA9IFwic3F1YXJpZnlcIixcbiAgICAgIHJhdGlvID0gLjUgKiAoMSArIE1hdGguc3FydCg1KSk7XG5cbiAgICBmdW5jdGlvbiBzY2FsZShjaGlsZHJlbiwgaykge1xuICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgY2hpbGQsIGFyZWE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBhcmVhID0gKGNoaWxkID0gY2hpbGRyZW5baV0pLnZhbHVlICogKGsgPCAwID8gMCA6IGspO1xuICAgICAgICBjaGlsZC5hcmVhID0gaXNOYU4oYXJlYSkgfHwgYXJlYSA8PSAwID8gMCA6IGFyZWE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3F1YXJpZnkobm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksXG4gICAgICAgICAgcm93ID0gW10sXG4gICAgICAgICAgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSxcbiAgICAgICAgICBjaGlsZCwgYmVzdCA9IEluZmluaXR5LFxuICAgICAgICAgIHNjb3JlLCB1ID0gbW9kZSA9PT0gXCJzbGljZVwiID8gcmVjdC5keCA6IG1vZGUgPT09IFwiZGljZVwiID8gcmVjdC5keSA6XG4gICAgICAgICAgbW9kZSA9PT0gXCJzbGljZS1kaWNlXCIgPyBub2RlLmRlcHRoICYgMSA/IHJlY3QuZHkgOiByZWN0LmR4IDpcbiAgICAgICAgICBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KSxcbiAgICAgICAgICBuO1xuICAgICAgICBzY2FsZShyZW1haW5pbmcsIHJlY3QuZHggKiByZWN0LmR5IC8gbm9kZS52YWx1ZSk7XG4gICAgICAgIHJvdy5hcmVhID0gMDtcbiAgICAgICAgd2hpbGUgKChuID0gcmVtYWluaW5nLmxlbmd0aCkgPiAwKSB7XG4gICAgICAgICAgcm93LnB1c2goY2hpbGQgPSByZW1haW5pbmdbbiAtIDFdKTtcbiAgICAgICAgICByb3cuYXJlYSArPSBjaGlsZC5hcmVhO1xuICAgICAgICAgIGlmIChtb2RlICE9PSBcInNxdWFyaWZ5XCIgfHwgKHNjb3JlID0gd29yc3Qocm93LCB1KSkgPD0gYmVzdCkge1xuICAgICAgICAgICAgcmVtYWluaW5nLnBvcCgpO1xuICAgICAgICAgICAgYmVzdCA9IHNjb3JlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb3cuYXJlYSAtPSByb3cucG9wKCkuYXJlYTtcbiAgICAgICAgICAgIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgZmFsc2UpO1xuICAgICAgICAgICAgdSA9IE1hdGgubWluKHJlY3QuZHgsIHJlY3QuZHkpO1xuICAgICAgICAgICAgcm93Lmxlbmd0aCA9IHJvdy5hcmVhID0gMDtcbiAgICAgICAgICAgIGJlc3QgPSBJbmZpbml0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdy5sZW5ndGgpIHtcbiAgICAgICAgICBwb3NpdGlvbihyb3csIHUsIHJlY3QsIHRydWUpO1xuICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChzcXVhcmlmeSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RpY2tpZnkobm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksXG4gICAgICAgICAgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSxcbiAgICAgICAgICBjaGlsZCwgcm93ID0gW107XG4gICAgICAgIHNjYWxlKHJlbWFpbmluZywgcmVjdC5keCAqIHJlY3QuZHkgLyBub2RlLnZhbHVlKTtcbiAgICAgICAgcm93LmFyZWEgPSAwO1xuICAgICAgICB3aGlsZSAoY2hpbGQgPSByZW1haW5pbmcucG9wKCkpIHtcbiAgICAgICAgICByb3cucHVzaChjaGlsZCk7XG4gICAgICAgICAgcm93LmFyZWEgKz0gY2hpbGQuYXJlYTtcbiAgICAgICAgICBpZiAoY2hpbGQueiAhPSBudWxsKSB7XG4gICAgICAgICAgICBwb3NpdGlvbihyb3csIGNoaWxkLnogPyByZWN0LmR4IDogcmVjdC5keSwgcmVjdCwgIXJlbWFpbmluZy5sZW5ndGgpO1xuICAgICAgICAgICAgcm93Lmxlbmd0aCA9IHJvdy5hcmVhID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChzdGlja2lmeSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd29yc3Qocm93LCB1KSB7XG4gICAgICB2YXIgcyA9IHJvdy5hcmVhLFxuICAgICAgICByLCBybWF4ID0gMCxcbiAgICAgICAgcm1pbiA9IEluZmluaXR5LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSByb3cubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKCEociA9IHJvd1tpXS5hcmVhKSkgY29udGludWU7XG4gICAgICAgIGlmIChyIDwgcm1pbikgcm1pbiA9IHI7XG4gICAgICAgIGlmIChyID4gcm1heCkgcm1heCA9IHI7XG4gICAgICB9XG4gICAgICBzICo9IHM7XG4gICAgICB1ICo9IHU7XG4gICAgICByZXR1cm4gcyA/IE1hdGgubWF4KHUgKiBybWF4ICogcmF0aW8gLyBzLCBzIC8gKHUgKiBybWluICogcmF0aW8pKSA6XG4gICAgICAgIEluZmluaXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgZmx1c2gpIHtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSByb3cubGVuZ3RoLFxuICAgICAgICB4ID0gcmVjdC54LFxuICAgICAgICB5ID0gcmVjdC55LFxuICAgICAgICB2ID0gdSA/IHJvdW5kKHJvdy5hcmVhIC8gdSkgOiAwLFxuICAgICAgICBvO1xuICAgICAgaWYgKHUgPT0gcmVjdC5keCkge1xuICAgICAgICBpZiAoZmx1c2ggfHwgdiA+IHJlY3QuZHkpIHYgPSByZWN0LmR5O1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIG8gPSByb3dbaV07XG4gICAgICAgICAgby54ID0geDtcbiAgICAgICAgICBvLnkgPSB5O1xuICAgICAgICAgIG8uZHkgPSB2O1xuICAgICAgICAgIHggKz0gby5keCA9IE1hdGgubWluKHJlY3QueCArIHJlY3QuZHggLSB4LCB2ID8gcm91bmQoby5hcmVhIC8gdikgOlxuICAgICAgICAgICAgMCk7XG4gICAgICAgIH1cbiAgICAgICAgby56ID0gdHJ1ZTtcbiAgICAgICAgby5keCArPSByZWN0LnggKyByZWN0LmR4IC0geDtcbiAgICAgICAgcmVjdC55ICs9IHY7XG4gICAgICAgIHJlY3QuZHkgLT0gdjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmbHVzaCB8fCB2ID4gcmVjdC5keCkgdiA9IHJlY3QuZHg7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgbyA9IHJvd1tpXTtcbiAgICAgICAgICBvLnggPSB4O1xuICAgICAgICAgIG8ueSA9IHk7XG4gICAgICAgICAgby5keCA9IHY7XG4gICAgICAgICAgeSArPSBvLmR5ID0gTWF0aC5taW4ocmVjdC55ICsgcmVjdC5keSAtIHksIHYgPyByb3VuZChvLmFyZWEgLyB2KSA6XG4gICAgICAgICAgICAwKTtcbiAgICAgICAgfVxuICAgICAgICBvLnogPSBmYWxzZTtcbiAgICAgICAgby5keSArPSByZWN0LnkgKyByZWN0LmR5IC0geTtcbiAgICAgICAgcmVjdC54ICs9IHY7XG4gICAgICAgIHJlY3QuZHggLT0gdjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmVlbWFwKGQpIHtcbiAgICAgIHZhciBub2RlcyA9IHN0aWNraWVzIHx8IGhpZXJhcmNoeShkKSxcbiAgICAgICAgcm9vdCA9IG5vZGVzWzBdO1xuICAgICAgcm9vdC54ID0gMDtcbiAgICAgIHJvb3QueSA9IDA7XG4gICAgICByb290LmR4ID0gc2l6ZVswXTtcbiAgICAgIHJvb3QuZHkgPSBzaXplWzFdO1xuICAgICAgaWYgKHN0aWNraWVzKSBoaWVyYXJjaHkucmV2YWx1ZShyb290KTtcbiAgICAgIHNjYWxlKFtyb290XSwgcm9vdC5keCAqIHJvb3QuZHkgLyByb290LnZhbHVlKTtcbiAgICAgIChzdGlja2llcyA/IHN0aWNraWZ5IDogc3F1YXJpZnkpKHJvb3QpO1xuICAgICAgaWYgKHN0aWNreSkgc3RpY2tpZXMgPSBub2RlcztcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSB4O1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nO1xuXG4gICAgICBmdW5jdGlvbiBwYWRGdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBwID0geC5jYWxsKHRyZWVtYXAsIG5vZGUsIG5vZGUuZGVwdGgpO1xuICAgICAgICByZXR1cm4gcCA9PSBudWxsID8gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsKG5vZGUpIDpcbiAgICAgICAgICBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB0eXBlb2YgcCA9PT0gXCJudW1iZXJcIiA/IFtwLCBwLCBwLFxuICAgICAgICAgICAgcFxuICAgICAgICAgIF0gOiBwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFkQ29uc3RhbnQobm9kZSkge1xuICAgICAgICByZXR1cm4gZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgeCk7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZTtcbiAgICAgIHBhZCA9IChwYWRkaW5nID0geCkgPT0gbnVsbCA/IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCA6ICh0eXBlID1cbiAgICAgICAgICB0eXBlb2YgeCkgPT09IFwiZnVuY3Rpb25cIiA/IHBhZEZ1bmN0aW9uIDogdHlwZSA9PT0gXCJudW1iZXJcIiA/XG4gICAgICAgICh4ID0gW3gsIHgsIHgsIHhdLFxuICAgICAgICAgIHBhZENvbnN0YW50KSA6IHBhZENvbnN0YW50O1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcm91bmQgIT0gTnVtYmVyO1xuICAgICAgcm91bmQgPSB4ID8gTWF0aC5yb3VuZCA6IE51bWJlcjtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5zdGlja3kgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGlja3k7XG4gICAgICBzdGlja3kgPSB4O1xuICAgICAgc3RpY2tpZXMgPSBudWxsO1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmF0aW87XG4gICAgICByYXRpbyA9IHg7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAubW9kZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1vZGU7XG4gICAgICBtb2RlID0geCArIFwiXCI7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWVtYXAsIGhpZXJhcmNoeSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsKG5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogbm9kZS54LFxuICAgICAgeTogbm9kZS55LFxuICAgICAgZHg6IG5vZGUuZHgsXG4gICAgICBkeTogbm9kZS5keVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCBwYWRkaW5nKSB7XG4gICAgdmFyIHggPSBub2RlLnggKyBwYWRkaW5nWzNdLFxuICAgICAgeSA9IG5vZGUueSArIHBhZGRpbmdbMF0sXG4gICAgICBkeCA9IG5vZGUuZHggLSBwYWRkaW5nWzFdIC0gcGFkZGluZ1szXSxcbiAgICAgIGR5ID0gbm9kZS5keSAtIHBhZGRpbmdbMF0gLSBwYWRkaW5nWzJdO1xuICAgIGlmIChkeCA8IDApIHtcbiAgICAgIHggKz0gZHggLyAyO1xuICAgICAgZHggPSAwO1xuICAgIH1cbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICB5ICs9IGR5IC8gMjtcbiAgICAgIGR5ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5LFxuICAgICAgZHg6IGR4LFxuICAgICAgZHk6IGR5XG4gICAgfTtcbiAgfVxuICBkMy5yYW5kb20gPSB7XG4gICAgbm9ybWFsOiBmdW5jdGlvbijCtSwgz4MpIHtcbiAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmIChuIDwgMikgz4MgPSAxO1xuICAgICAgaWYgKG4gPCAxKSDCtSA9IDA7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB4LCB5LCByO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICAgICAgICB5ID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xuICAgICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG4gICAgICAgIHJldHVybiDCtSArIM+DICogeCAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgICB9O1xuICAgIH0sXG4gICAgbG9nTm9ybWFsOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByYW5kb20gPSBkMy5yYW5kb20ubm9ybWFsLmFwcGx5KGQzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5leHAocmFuZG9tKCkpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGJhdGVzOiBmdW5jdGlvbihtKSB7XG4gICAgICB2YXIgcmFuZG9tID0gZDMucmFuZG9tLmlyd2luSGFsbChtKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJhbmRvbSgpIC8gbTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBpcndpbkhhbGw6IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgcyA9IDAsIGogPSAwOyBqIDwgbTsgaisrKSBzICs9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBzO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIGQzLnNjYWxlID0ge307XG5cbiAgZnVuY3Rpb24gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSB7XG4gICAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHN0YXJ0IDwgc3RvcCA/IFtzdGFydCwgc3RvcF0gOiBbc3RvcCwgc3RhcnRdO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc2NhbGVSYW5nZShzY2FsZSkge1xuICAgIHJldHVybiBzY2FsZS5yYW5nZUV4dGVudCA/IHNjYWxlLnJhbmdlRXh0ZW50KCkgOiBkM19zY2FsZUV4dGVudChzY2FsZS5yYW5nZSgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2JpbGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSB7XG4gICAgdmFyIHUgPSB1bmludGVycG9sYXRlKGRvbWFpblswXSwgZG9tYWluWzFdKSxcbiAgICAgIGkgPSBpbnRlcnBvbGF0ZShyYW5nZVswXSwgcmFuZ2VbMV0pO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gaSh1KHgpKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbmljZShkb21haW4sIG5pY2UpIHtcbiAgICB2YXIgaTAgPSAwLFxuICAgICAgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSxcbiAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgIHgxID0gZG9tYWluW2kxXSxcbiAgICAgIGR4O1xuICAgIGlmICh4MSA8IHgwKSB7XG4gICAgICBkeCA9IGkwLCBpMCA9IGkxLCBpMSA9IGR4O1xuICAgICAgZHggPSB4MCwgeDAgPSB4MSwgeDEgPSBkeDtcbiAgICB9XG4gICAgZG9tYWluW2kwXSA9IG5pY2UuZmxvb3IoeDApO1xuICAgIGRvbWFpbltpMV0gPSBuaWNlLmNlaWwoeDEpO1xuICAgIHJldHVybiBkb21haW47XG4gIH1cblxuICBmdW5jdGlvbiBkM19zY2FsZV9uaWNlU3RlcChzdGVwKSB7XG4gICAgcmV0dXJuIHN0ZXAgPyB7XG4gICAgICBmbG9vcjogZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih4IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgfSxcbiAgICAgIGNlaWw6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh4IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgfVxuICAgIH0gOiBkM19zY2FsZV9uaWNlSWRlbnRpdHk7XG4gIH1cbiAgdmFyIGQzX3NjYWxlX25pY2VJZGVudGl0eSA9IHtcbiAgICBmbG9vcjogZDNfaWRlbnRpdHksXG4gICAgY2VpbDogZDNfaWRlbnRpdHlcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zY2FsZV9wb2x5bGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSB7XG4gICAgdmFyIHUgPSBbXSxcbiAgICAgIGkgPSBbXSxcbiAgICAgIGogPSAwLFxuICAgICAgayA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxO1xuICAgIGlmIChkb21haW5ba10gPCBkb21haW5bMF0pIHtcbiAgICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHdoaWxlICgrK2ogPD0gaykge1xuICAgICAgdS5wdXNoKHVuaW50ZXJwb2xhdGUoZG9tYWluW2ogLSAxXSwgZG9tYWluW2pdKSk7XG4gICAgICBpLnB1c2goaW50ZXJwb2xhdGUocmFuZ2VbaiAtIDFdLCByYW5nZVtqXSkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgdmFyIGogPSBkMy5iaXNlY3QoZG9tYWluLCB4LCAxLCBrKSAtIDE7XG4gICAgICByZXR1cm4gaVtqXSh1W2pdKHgpKTtcbiAgICB9O1xuICB9XG4gIGQzLnNjYWxlLmxpbmVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9saW5lYXIoWzAsIDFdLCBbMCwgMV0sIGQzX2ludGVycG9sYXRlLCBmYWxzZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlLCBjbGFtcCkge1xuICAgIHZhciBvdXRwdXQsIGlucHV0O1xuXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHZhciBsaW5lYXIgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/XG4gICAgICAgIGQzX3NjYWxlX3BvbHlsaW5lYXIgOiBkM19zY2FsZV9iaWxpbmVhcixcbiAgICAgICAgdW5pbnRlcnBvbGF0ZSA9IGNsYW1wID8gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wIDpcbiAgICAgICAgZDNfdW5pbnRlcnBvbGF0ZU51bWJlcjtcbiAgICAgIG91dHB1dCA9IGxpbmVhcihkb21haW4sIHJhbmdlLCB1bmludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSk7XG4gICAgICBpbnB1dCA9IGxpbmVhcihyYW5nZSwgZG9tYWluLCB1bmludGVycG9sYXRlLCBkM19pbnRlcnBvbGF0ZSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIG91dHB1dCh4KTtcbiAgICB9XG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIGlucHV0KHkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0geC5tYXAoTnVtYmVyKTtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuICAgICAgcmFuZ2UgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gc2NhbGUucmFuZ2UoeCkuaW50ZXJwb2xhdGUoZDNfaW50ZXJwb2xhdGVSb3VuZCk7XG4gICAgfTtcbiAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsYW1wO1xuICAgICAgY2xhbXAgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGU7XG4gICAgICBpbnRlcnBvbGF0ZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSwgZm9ybWF0KTtcbiAgICB9O1xuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihtKSB7XG4gICAgICBkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApO1xuICAgIH07XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKSB7XG4gICAgcmV0dXJuIGQzLnJlYmluZChzY2FsZSwgbGluZWFyLCBcInJhbmdlXCIsIFwicmFuZ2VSb3VuZFwiLCBcImludGVycG9sYXRlXCIsXG4gICAgICBcImNsYW1wXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyTmljZShkb21haW4sIG0pIHtcbiAgICByZXR1cm4gZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShcbiAgICAgIGRvbWFpbiwgbSlbMl0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pIHtcbiAgICBpZiAobSA9PSBudWxsKSBtID0gMTA7XG4gICAgdmFyIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksXG4gICAgICBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLFxuICAgICAgc3RlcCA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHNwYW4gLyBtKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyID0gbSAvIHNwYW4gKiBzdGVwO1xuICAgIGlmIChlcnIgPD0gLjE1KSBzdGVwICo9IDEwO1xuICAgIGVsc2UgaWYgKGVyciA8PSAuMzUpIHN0ZXAgKj0gNTtcbiAgICBlbHNlIGlmIChlcnIgPD0gLjc1KSBzdGVwICo9IDI7XG4gICAgZXh0ZW50WzBdID0gTWF0aC5jZWlsKGV4dGVudFswXSAvIHN0ZXApICogc3RlcDtcbiAgICBleHRlbnRbMV0gPSBNYXRoLmZsb29yKGV4dGVudFsxXSAvIHN0ZXApICogc3RlcCArIHN0ZXAgKiAuNTtcbiAgICBleHRlbnRbMl0gPSBzdGVwO1xuICAgIHJldHVybiBleHRlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJUaWNrcyhkb21haW4sIG0pIHtcbiAgICByZXR1cm4gZDMucmFuZ2UuYXBwbHkoZDMsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpIHtcbiAgICB2YXIgcmFuZ2UgPSBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKTtcbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSBkM19mb3JtYXRfcmUuZXhlYyhmb3JtYXQpO1xuICAgICAgbWF0Y2guc2hpZnQoKTtcbiAgICAgIGlmIChtYXRjaFs4XSA9PT0gXCJzXCIpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IGQzLmZvcm1hdFByZWZpeChNYXRoLm1heChhYnMocmFuZ2VbMF0pLCBhYnMocmFuZ2VbMV0pKSk7XG4gICAgICAgIGlmICghbWF0Y2hbN10pIG1hdGNoWzddID0gXCIuXCIgKyBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24ocHJlZml4LnNjYWxlKFxuICAgICAgICAgIHJhbmdlWzJdKSk7XG4gICAgICAgIG1hdGNoWzhdID0gXCJmXCI7XG4gICAgICAgIGZvcm1hdCA9IGQzLmZvcm1hdChtYXRjaC5qb2luKFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0KHByZWZpeC5zY2FsZShkKSkgKyBwcmVmaXguc3ltYm9sO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKCFtYXRjaFs3XSkgbWF0Y2hbN10gPSBcIi5cIiArIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbihtYXRjaFtcbiAgICAgICAgOF0sIHJhbmdlKTtcbiAgICAgIGZvcm1hdCA9IG1hdGNoLmpvaW4oXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1hdCA9IFwiLC5cIiArIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihyYW5nZVsyXSkgKyBcImZcIjtcbiAgICB9XG4gICAgcmV0dXJuIGQzLmZvcm1hdChmb3JtYXQpO1xuICB9XG4gIHZhciBkM19zY2FsZV9saW5lYXJGb3JtYXRTaWduaWZpY2FudCA9IHtcbiAgICBzOiAxLFxuICAgIGc6IDEsXG4gICAgcDogMSxcbiAgICByOiAxLFxuICAgIGU6IDFcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24odmFsdWUpIHtcbiAgICByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjEwICsgLjAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbih0eXBlLCByYW5nZSkge1xuICAgIHZhciBwID0gZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHJhbmdlWzJdKTtcbiAgICByZXR1cm4gdHlwZSBpbiBkM19zY2FsZV9saW5lYXJGb3JtYXRTaWduaWZpY2FudCA/IE1hdGguYWJzKHAgLVxuICAgICAgICBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24oTWF0aC5tYXgoYWJzKHJhbmdlWzBdKSwgYWJzKHJhbmdlWzFdKSkpKSArXG4gICAgICArKHR5cGUgIT09IFwiZVwiKSA6IHAgLSAodHlwZSA9PT0gXCIlXCIpICogMjtcbiAgfVxuICBkMy5zY2FsZS5sb2cgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc2NhbGVfbG9nKGQzLnNjYWxlLmxpbmVhcigpLmRvbWFpbihbMCwgMV0pLCAxMCwgdHJ1ZSwgWzEsXG4gICAgICAxMFxuICAgIF0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xvZyhsaW5lYXIsIGJhc2UsIHBvc2l0aXZlLCBkb21haW4pIHtcbiAgICBmdW5jdGlvbiBsb2coeCkge1xuICAgICAgcmV0dXJuIChwb3NpdGl2ZSA/IE1hdGgubG9nKHggPCAwID8gMCA6IHgpIDogLU1hdGgubG9nKHggPiAwID8gMCA6IC14KSkgL1xuICAgICAgICBNYXRoLmxvZyhiYXNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3coeCkge1xuICAgICAgcmV0dXJuIHBvc2l0aXZlID8gTWF0aC5wb3coYmFzZSwgeCkgOiAtTWF0aC5wb3coYmFzZSwgLXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIobG9nKHgpKTtcbiAgICB9XG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHBvdyhsaW5lYXIuaW52ZXJ0KHgpKTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIHBvc2l0aXZlID0geFswXSA+PSAwO1xuICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKGxvZykpO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGJhc2U7XG4gICAgICBiYXNlID0gK187XG4gICAgICBsaW5lYXIuZG9tYWluKGRvbWFpbi5tYXAobG9nKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmljZWQgPSBkM19zY2FsZV9uaWNlKGRvbWFpbi5tYXAobG9nKSwgcG9zaXRpdmUgPyBNYXRoIDpcbiAgICAgICAgZDNfc2NhbGVfbG9nTmljZU5lZ2F0aXZlKTtcbiAgICAgIGxpbmVhci5kb21haW4obmljZWQpO1xuICAgICAgZG9tYWluID0gbmljZWQubWFwKHBvdyk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksXG4gICAgICAgIHRpY2tzID0gW10sXG4gICAgICAgIHUgPSBleHRlbnRbMF0sXG4gICAgICAgIHYgPSBleHRlbnRbMV0sXG4gICAgICAgIGkgPSBNYXRoLmZsb29yKGxvZyh1KSksXG4gICAgICAgIGogPSBNYXRoLmNlaWwobG9nKHYpKSxcbiAgICAgICAgbiA9IGJhc2UgJSAxID8gMiA6IGJhc2U7XG4gICAgICBpZiAoaXNGaW5pdGUoaiAtIGkpKSB7XG4gICAgICAgIGlmIChwb3NpdGl2ZSkge1xuICAgICAgICAgIGZvciAoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgZm9yICh2YXIgayA9IDE7IGsgPCBuOyBrKyspIHRpY2tzLnB1c2gocG93KGkpICogayk7XG4gICAgICAgICAgdGlja3MucHVzaChwb3coaSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tzLnB1c2gocG93KGkpKTtcbiAgICAgICAgICBmb3IgKDsgaSsrIDwgajspXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gbiAtIDE7IGsgPiAwOyBrLS0pIHRpY2tzLnB1c2gocG93KGkpICogayk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgdGlja3NbaV0gPCB1OyBpKyspIHt9XG4gICAgICAgIGZvciAoaiA9IHRpY2tzLmxlbmd0aDsgdGlja3NbaiAtIDFdID4gdjsgai0tKSB7fVxuICAgICAgICB0aWNrcyA9IHRpY2tzLnNsaWNlKGksIGopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH07XG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKG4sIGZvcm1hdCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZDNfc2NhbGVfbG9nRm9ybWF0O1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBmb3JtYXQgPSBkM19zY2FsZV9sb2dGb3JtYXQ7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgZm9ybWF0ICE9PSBcImZ1bmN0aW9uXCIpIGZvcm1hdCA9IGQzLmZvcm1hdChmb3JtYXQpO1xuICAgICAgdmFyIGsgPSBNYXRoLm1heCguMSwgbiAvIHNjYWxlLnRpY2tzKCkubGVuZ3RoKSxcbiAgICAgICAgZiA9IHBvc2l0aXZlID8gKGUgPSAxZS0xMiwgTWF0aC5jZWlsKSA6IChlID0gLTFlLTEyLFxuICAgICAgICAgIE1hdGguZmxvb3IpLFxuICAgICAgICBlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQgLyBwb3coZihsb2coZCkgKyBlKSkgPD0gayA/IGZvcm1hdChkKSA6IFwiXCI7XG4gICAgICB9O1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xvZyhsaW5lYXIuY29weSgpLCBiYXNlLCBwb3NpdGl2ZSwgZG9tYWluKTtcbiAgICB9O1xuICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcik7XG4gIH1cbiAgdmFyIGQzX3NjYWxlX2xvZ0Zvcm1hdCA9IGQzLmZvcm1hdChcIi4wZVwiKSxcbiAgICBkM19zY2FsZV9sb2dOaWNlTmVnYXRpdmUgPSB7XG4gICAgICBmbG9vcjogZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gLU1hdGguY2VpbCgteCk7XG4gICAgICB9LFxuICAgICAgY2VpbDogZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gLU1hdGguZmxvb3IoLXgpO1xuICAgICAgfVxuICAgIH07XG4gIGQzLnNjYWxlLnBvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9wb3coZDMuc2NhbGUubGluZWFyKCksIDEsIFswLCAxXSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2NhbGVfcG93KGxpbmVhciwgZXhwb25lbnQsIGRvbWFpbikge1xuICAgIHZhciBwb3dwID0gZDNfc2NhbGVfcG93UG93KGV4cG9uZW50KSxcbiAgICAgIHBvd2IgPSBkM19zY2FsZV9wb3dQb3coMSAvIGV4cG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIocG93cCh4KSk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBwb3diKGxpbmVhci5pbnZlcnQoeCkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKHBvd3ApKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSkpO1xuICAgIH07XG4gICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBleHBvbmVudDtcbiAgICAgIHBvd3AgPSBkM19zY2FsZV9wb3dQb3coZXhwb25lbnQgPSB4KTtcbiAgICAgIHBvd2IgPSBkM19zY2FsZV9wb3dQb3coMSAvIGV4cG9uZW50KTtcbiAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChwb3dwKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcG93KGxpbmVhci5jb3B5KCksIGV4cG9uZW50LCBkb21haW4pO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3Bvd1BvdyhlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4IDwgMCA/IC1NYXRoLnBvdygteCwgZSkgOiBNYXRoLnBvdyh4LCBlKTtcbiAgICB9O1xuICB9XG4gIGQzLnNjYWxlLnNxcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2NhbGUucG93KCkuZXhwb25lbnQoLjUpO1xuICB9O1xuICBkMy5zY2FsZS5vcmRpbmFsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX29yZGluYWwoW10sIHtcbiAgICAgIHQ6IFwicmFuZ2VcIixcbiAgICAgIGE6IFtcbiAgICAgICAgW11cbiAgICAgIF1cbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zY2FsZV9vcmRpbmFsKGRvbWFpbiwgcmFuZ2VyKSB7XG4gICAgdmFyIGluZGV4LCByYW5nZSwgcmFuZ2VCYW5kO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIHJhbmdlWygoaW5kZXguZ2V0KHgpIHx8IChyYW5nZXIudCA9PT0gXCJyYW5nZVwiID8gaW5kZXguc2V0KHgsXG4gICAgICAgIGRvbWFpbi5wdXNoKHgpKSA6IE5hTikpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0ZXBzKHN0YXJ0LCBzdGVwKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoZG9tYWluLmxlbmd0aCkubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0gW107XG4gICAgICBpbmRleCA9IG5ldyBkM19NYXAoKTtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSB4Lmxlbmd0aCxcbiAgICAgICAgeGk7XG4gICAgICB3aGlsZSAoKytpIDwgbilcbiAgICAgICAgaWYgKCFpbmRleC5oYXMoeGkgPSB4W2ldKSkgaW5kZXguc2V0KHhpLCBkb21haW4ucHVzaCh4aSkpO1xuICAgICAgcmV0dXJuIHNjYWxlW3Jhbmdlci50XS5hcHBseShzY2FsZSwgcmFuZ2VyLmEpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VQb2ludHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuICAgICAgdmFyIHN0YXJ0ID0geFswXSxcbiAgICAgICAgc3RvcCA9IHhbMV0sXG4gICAgICAgIHN0ZXAgPSBkb21haW4ubGVuZ3RoIDwgMiA/IChzdGFydCA9IChzdGFydCArIHN0b3ApIC8gMixcbiAgICAgICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIHBhZGRpbmcgLyAyLCBzdGVwKTtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VQb2ludHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VSb3VuZFBvaW50cyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICB2YXIgc3RhcnQgPSB4WzBdLFxuICAgICAgICBzdG9wID0geFsxXSxcbiAgICAgICAgc3RlcCA9IGRvbWFpbi5sZW5ndGggPCAyID8gKHN0YXJ0ID0gc3RvcCA9IE1hdGgucm91bmQoKHN0YXJ0ICtcbiAgICAgICAgICAgIHN0b3ApIC8gMiksXG4gICAgICAgICAgMCkgOiAoc3RvcCAtIHN0YXJ0KSAvIChkb21haW4ubGVuZ3RoIC0gMSArIHBhZGRpbmcpIHwgMDtcbiAgICAgIHJhbmdlID0gc3RlcHMoc3RhcnQgKyBNYXRoLnJvdW5kKHN0ZXAgKiBwYWRkaW5nIC8gMiArIChzdG9wIC0gc3RhcnQgLVxuICAgICAgICAoZG9tYWluLmxlbmd0aCAtIDEgKyBwYWRkaW5nKSAqIHN0ZXApIC8gMiksIHN0ZXApO1xuICAgICAgcmFuZ2VCYW5kID0gMDtcbiAgICAgIHJhbmdlciA9IHtcbiAgICAgICAgdDogXCJyYW5nZVJvdW5kUG9pbnRzXCIsXG4gICAgICAgIGE6IGFyZ3VtZW50c1xuICAgICAgfTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlQmFuZHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nLCBvdXRlclBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICB2YXIgcmV2ZXJzZSA9IHhbMV0gPCB4WzBdLFxuICAgICAgICBzdGFydCA9IHhbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0geFsxIC0gcmV2ZXJzZV0sXG4gICAgICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZyArIDIgKlxuICAgICAgICAgIG91dGVyUGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIG91dGVyUGFkZGluZywgc3RlcCk7XG4gICAgICBpZiAocmV2ZXJzZSkgcmFuZ2UucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2VCYW5kID0gc3RlcCAqICgxIC0gcGFkZGluZyk7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VCYW5kc1wiLFxuICAgICAgICBhOiBhcmd1bWVudHNcbiAgICAgIH07XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZVJvdW5kQmFuZHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nLCBvdXRlclBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICB2YXIgcmV2ZXJzZSA9IHhbMV0gPCB4WzBdLFxuICAgICAgICBzdGFydCA9IHhbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0geFsxIC0gcmV2ZXJzZV0sXG4gICAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqXG4gICAgICAgICAgb3V0ZXJQYWRkaW5nKSk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgTWF0aC5yb3VuZCgoc3RvcCAtIHN0YXJ0IC0gKGRvbWFpbi5sZW5ndGggLVxuICAgICAgICBwYWRkaW5nKSAqIHN0ZXApIC8gMiksIHN0ZXApO1xuICAgICAgaWYgKHJldmVyc2UpIHJhbmdlLnJldmVyc2UoKTtcbiAgICAgIHJhbmdlQmFuZCA9IE1hdGgucm91bmQoc3RlcCAqICgxIC0gcGFkZGluZykpO1xuICAgICAgcmFuZ2VyID0ge1xuICAgICAgICB0OiBcInJhbmdlUm91bmRCYW5kc1wiLFxuICAgICAgICBhOiBhcmd1bWVudHNcbiAgICAgIH07XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZUJhbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByYW5nZUJhbmQ7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZUV4dGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlRXh0ZW50KHJhbmdlci5hWzBdKTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9vcmRpbmFsKGRvbWFpbiwgcmFuZ2VyKTtcbiAgICB9O1xuICAgIHJldHVybiBzY2FsZS5kb21haW4oZG9tYWluKTtcbiAgfVxuICBkMy5zY2FsZS5jYXRlZ29yeTEwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTEwKTtcbiAgfTtcbiAgZDMuc2NhbGUuY2F0ZWdvcnkyMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMCk7XG4gIH07XG4gIGQzLnNjYWxlLmNhdGVnb3J5MjBiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTIwYik7XG4gIH07XG4gIGQzLnNjYWxlLmNhdGVnb3J5MjBjID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTIwYyk7XG4gIH07XG4gIHZhciBkM19jYXRlZ29yeTEwID0gWzIwNjIyNjAsIDE2NzQ0MjA2LCAyOTI0NTg4LCAxNDAzNDcyOCwgOTcyNTg4NSxcbiAgICA5MTk3MTMxLCAxNDkwNzMzMCwgODM1NTcxMSwgMTIzNjkxODYsIDE1NTYxNzVcbiAgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjAgPSBbMjA2MjI2MCwgMTE0NTQ0NDAsIDE2NzQ0MjA2LCAxNjc1OTY3MiwgMjkyNDU4OCxcbiAgICAxMDAxODY5OCwgMTQwMzQ3MjgsIDE2NzUwNzQyLCA5NzI1ODg1LCAxMjk1NTg2MSwgOTE5NzEzMSwgMTI4ODUxNDAsXG4gICAgMTQ5MDczMzAsIDE2MjM0MTk0LCA4MzU1NzExLCAxMzA5MjgwNywgMTIzNjkxODYsIDE0NDA4NTg5LCAxNTU2MTc1LFxuICAgIDEwNDEwNzI1XG4gIF0ubWFwKGQzX3JnYlN0cmluZyk7XG4gIHZhciBkM19jYXRlZ29yeTIwYiA9IFszNzUwNzc3LCA1Mzk1NjE5LCA3MDQwNzE5LCAxMDI2NDI4NiwgNjUxOTA5NyxcbiAgICA5MjE2NTk0LCAxMTkxNTExNSwgMTM1NTY2MzYsIDkyMDI5OTMsIDEyNDI2ODA5LCAxNTE4NjUxNCwgMTUxOTA5MzIsXG4gICAgODY2NjE2OSwgMTEzNTY0OTAsIDE0MDQ5NjQzLCAxNTE3NzM3MiwgODA3NzY4MywgMTA4MzQzMjQsIDEzNTI4NTA5LFxuICAgIDE0NTg5NjU0XG4gIF0ubWFwKGQzX3JnYlN0cmluZyk7XG4gIHZhciBkM19jYXRlZ29yeTIwYyA9IFszMjQ0NzMzLCA3MDU3MTEwLCAxMDQwNjYyNSwgMTMwMzI0MzEsIDE1MDk1MDUzLFxuICAgIDE2NjE2NzY0LCAxNjYyNTI1OSwgMTY2MzQwMTgsIDMyNTMwNzYsIDc2NTI0NzAsIDEwNjA3MDAzLCAxMzEwMTUwNCxcbiAgICA3Njk1MjgxLCAxMDM5NDMxMiwgMTIzNjkzNzIsIDE0MzQyODkxLCA2NTEzNTA3LCA5ODY4OTUwLCAxMjQzNDg3NyxcbiAgICAxNDI3NzA4MVxuICBdLm1hcChkM19yZ2JTdHJpbmcpO1xuICBkMy5zY2FsZS5xdWFudGlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9xdWFudGlsZShbXSwgW10pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3F1YW50aWxlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgICB2YXIgdGhyZXNob2xkcztcblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgayA9IDAsXG4gICAgICAgIHEgPSByYW5nZS5sZW5ndGg7XG4gICAgICB0aHJlc2hvbGRzID0gW107XG4gICAgICB3aGlsZSAoKytrIDwgcSkgdGhyZXNob2xkc1trIC0gMV0gPSBkMy5xdWFudGlsZShkb21haW4sIGsgLyBxKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtkMy5iaXNlY3QodGhyZXNob2xkcywgeCldO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSB4Lm1hcChkM19udW1iZXIpLmZpbHRlcihkM19udW1lcmljKS5zb3J0KGQzX2FzY2VuZGluZyk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aHJlc2hvbGRzO1xuICAgIH07XG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICByZXR1cm4geSA8IDAgPyBbTmFOLCBOYU5dIDogW3kgPiAwID8gdGhyZXNob2xkc1t5IC0gMV0gOiBkb21haW5bMF0sXG4gICAgICAgIHkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbeV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtXG4gICAgICAgICAgMV1cbiAgICAgIF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpbGUoZG9tYWluLCByYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9XG4gIGQzLnNjYWxlLnF1YW50aXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aXplKDAsIDEsIFswLCAxXSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc2NhbGVfcXVhbnRpemUoeDAsIHgxLCByYW5nZSkge1xuICAgIHZhciBreCwgaTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihpLCBNYXRoLmZsb29yKGt4ICogKHggLSB4MCkpKSldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICBreCA9IHJhbmdlLmxlbmd0aCAvICh4MSAtIHgwKTtcbiAgICAgIGkgPSByYW5nZS5sZW5ndGggLSAxO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbeDAsIHgxXTtcbiAgICAgIHgwID0gK3hbMF07XG4gICAgICB4MSA9ICt4W3gubGVuZ3RoIC0gMV07XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICB5ID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHkgPSB5IDwgMCA/IE5hTiA6IHkgLyBreCArIHgwO1xuICAgICAgcmV0dXJuIFt5LCB5ICsgMSAvIGt4XTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9xdWFudGl6ZSh4MCwgeDEsIHJhbmdlKTtcbiAgICB9O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cbiAgZDMuc2NhbGUudGhyZXNob2xkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3RocmVzaG9sZChbLjVdLCBbMCwgMV0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3RocmVzaG9sZChkb21haW4sIHJhbmdlKSB7XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgaWYgKHggPD0geCkgcmV0dXJuIHJhbmdlW2QzLmJpc2VjdChkb21haW4sIHgpXTtcbiAgICB9XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0gXztcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG4gICAgICByYW5nZSA9IF87XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICB5ID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBbZG9tYWluW3kgLSAxXSwgZG9tYWluW3ldXTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV90aHJlc2hvbGQoZG9tYWluLCByYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cbiAgZDMuc2NhbGUuaWRlbnRpdHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc2NhbGVfaWRlbnRpdHkoWzAsIDFdKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zY2FsZV9pZGVudGl0eShkb21haW4pIHtcbiAgICBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgICByZXR1cm4gK3g7XG4gICAgfVxuICAgIGlkZW50aXR5LmludmVydCA9IGlkZW50aXR5O1xuICAgIGlkZW50aXR5LmRvbWFpbiA9IGlkZW50aXR5LnJhbmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0geC5tYXAoaWRlbnRpdHkpO1xuICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH07XG4gICAgaWRlbnRpdHkudGlja3MgPSBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKTtcbiAgICB9O1xuICAgIGlkZW50aXR5LnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSwgZm9ybWF0KTtcbiAgICB9O1xuICAgIGlkZW50aXR5LmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9pZGVudGl0eShkb21haW4pO1xuICAgIH07XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGQzLnN2ZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGQzX3plcm8oKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgZDMuc3ZnLmFyYyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbm5lclJhZGl1cyA9IGQzX3N2Z19hcmNJbm5lclJhZGl1cyxcbiAgICAgIG91dGVyUmFkaXVzID0gZDNfc3ZnX2FyY091dGVyUmFkaXVzLFxuICAgICAgY29ybmVyUmFkaXVzID0gZDNfemVybyxcbiAgICAgIHBhZFJhZGl1cyA9IGQzX3N2Z19hcmNBdXRvLFxuICAgICAgc3RhcnRBbmdsZSA9IGQzX3N2Z19hcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGUsXG4gICAgICBwYWRBbmdsZSA9IGQzX3N2Z19hcmNQYWRBbmdsZTtcblxuICAgIGZ1bmN0aW9uIGFyYygpIHtcbiAgICAgIHZhciByMCA9IE1hdGgubWF4KDAsICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgcjEgPSBNYXRoLm1heCgwLCArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZs+ALFxuICAgICAgICBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmz4AsXG4gICAgICAgIGRhID0gTWF0aC5hYnMoYTEgLSBhMCksXG4gICAgICAgIGN3ID0gYTAgPiBhMSA/IDAgOiAxO1xuICAgICAgaWYgKHIxIDwgcjApIHJjID0gcjEsIHIxID0gcjAsIHIwID0gcmM7XG4gICAgICBpZiAoZGEgPj0gz4TOtSkgcmV0dXJuIGNpcmNsZVNlZ21lbnQocjEsIGN3KSArIChyMCA/IGNpcmNsZVNlZ21lbnQocjAsXG4gICAgICAgIDEgLSBjdykgOiBcIlwiKSArIFwiWlwiO1xuICAgICAgdmFyIHJjLCBjciwgcnAsIGFwLCBwMCA9IDAsXG4gICAgICAgIHAxID0gMCxcbiAgICAgICAgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCBwYXRoID0gW107XG4gICAgICBpZiAoYXAgPSAoK3BhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMCkgLyAyKSB7XG4gICAgICAgIHJwID0gcGFkUmFkaXVzID09PSBkM19zdmdfYXJjQXV0byA/IE1hdGguc3FydChyMCAqIHIwICsgcjEgKiByMSkgOlxuICAgICAgICAgICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKCFjdykgcDEgKj0gLTE7XG4gICAgICAgIGlmIChyMSkgcDEgPSBkM19hc2luKHJwIC8gcjEgKiBNYXRoLnNpbihhcCkpO1xuICAgICAgICBpZiAocjApIHAwID0gZDNfYXNpbihycCAvIHIwICogTWF0aC5zaW4oYXApKTtcbiAgICAgIH1cbiAgICAgIGlmIChyMSkge1xuICAgICAgICB4MCA9IHIxICogTWF0aC5jb3MoYTAgKyBwMSk7XG4gICAgICAgIHkwID0gcjEgKiBNYXRoLnNpbihhMCArIHAxKTtcbiAgICAgICAgeDEgPSByMSAqIE1hdGguY29zKGExIC0gcDEpO1xuICAgICAgICB5MSA9IHIxICogTWF0aC5zaW4oYTEgLSBwMSk7XG4gICAgICAgIHZhciBsMSA9IE1hdGguYWJzKGExIC0gYTAgLSAyICogcDEpIDw9IM+AID8gMCA6IDE7XG4gICAgICAgIGlmIChwMSAmJiBkM19zdmdfYXJjU3dlZXAoeDAsIHkwLCB4MSwgeTEpID09PSBjdyBeIGwxKSB7XG4gICAgICAgICAgdmFyIGgxID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgICB4MCA9IHIxICogTWF0aC5jb3MoaDEpO1xuICAgICAgICAgIHkwID0gcjEgKiBNYXRoLnNpbihoMSk7XG4gICAgICAgICAgeDEgPSB5MSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgwID0geTAgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHIwKSB7XG4gICAgICAgIHgyID0gcjAgKiBNYXRoLmNvcyhhMSAtIHAwKTtcbiAgICAgICAgeTIgPSByMCAqIE1hdGguc2luKGExIC0gcDApO1xuICAgICAgICB4MyA9IHIwICogTWF0aC5jb3MoYTAgKyBwMCk7XG4gICAgICAgIHkzID0gcjAgKiBNYXRoLnNpbihhMCArIHAwKTtcbiAgICAgICAgdmFyIGwwID0gTWF0aC5hYnMoYTAgLSBhMSArIDIgKiBwMCkgPD0gz4AgPyAwIDogMTtcbiAgICAgICAgaWYgKHAwICYmIGQzX3N2Z19hcmNTd2VlcCh4MiwgeTIsIHgzLCB5MykgPT09IDEgLSBjdyBeIGwwKSB7XG4gICAgICAgICAgdmFyIGgwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgICB4MiA9IHIwICogTWF0aC5jb3MoaDApO1xuICAgICAgICAgIHkyID0gcjAgKiBNYXRoLnNpbihoMCk7XG4gICAgICAgICAgeDMgPSB5MyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgyID0geTIgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKChyYyA9IE1hdGgubWluKE1hdGguYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLFxuICAgICAgICAgIGFyZ3VtZW50cykpKSA+IC4wMDEpIHtcbiAgICAgICAgY3IgPSByMCA8IHIxIF4gY3cgPyAwIDogMTtcbiAgICAgICAgdmFyIG9jID0geDMgPT0gbnVsbCA/IFt4MiwgeTJdIDogeDEgPT0gbnVsbCA/IFt4MCwgeTBdIDpcbiAgICAgICAgICBkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoW3gwLCB5MF0sIFt4MywgeTNdLCBbeDEsIHkxXSwgW3gyLCB5Ml0pLFxuICAgICAgICAgIGF4ID0geDAgLSBvY1swXSxcbiAgICAgICAgICBheSA9IHkwIC0gb2NbMV0sXG4gICAgICAgICAgYnggPSB4MSAtIG9jWzBdLFxuICAgICAgICAgIGJ5ID0geTEgLSBvY1sxXSxcbiAgICAgICAgICBrYyA9IDEgLyBNYXRoLnNpbihNYXRoLmFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChNYXRoLnNxcnQoYXggKlxuICAgICAgICAgICAgYXggKyBheSAqIGF5KSAqIE1hdGguc3FydChieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLFxuICAgICAgICAgIGxjID0gTWF0aC5zcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgaWYgKHgxICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgcmMxID0gTWF0aC5taW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKSxcbiAgICAgICAgICAgIHQzMCA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyh4MyA9PSBudWxsID8gW3gyLCB5Ml0gOiBbeDMsXG4gICAgICAgICAgICAgIHkzXG4gICAgICAgICAgICBdLCBbeDAsIHkwXSwgcjEsIHJjMSwgY3cpLFxuICAgICAgICAgICAgdDEyID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFt4MSwgeTFdLCBbeDIsIHkyXSwgcjEsIHJjMSxcbiAgICAgICAgICAgICAgY3cpO1xuICAgICAgICAgIGlmIChyYyA9PT0gcmMxKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAwLFwiLCBjciwgXCIgXCIsXG4gICAgICAgICAgICAgIHQzMFsxXSwgXCJBXCIsIHIxLCBcIixcIiwgcjEsIFwiIDAgXCIsIDEgLSBjdyBeIGQzX3N2Z19hcmNTd2VlcChcbiAgICAgICAgICAgICAgICB0MzBbMV1bMF0sIHQzMFsxXVsxXSwgdDEyWzFdWzBdLCB0MTJbMV1bMV0pLCBcIixcIiwgY3csXG4gICAgICAgICAgICAgIFwiIFwiLCB0MTJbMV0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MTJbMF1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIk1cIiwgdDMwWzBdLCBcIkFcIiwgcmMxLCBcIixcIiwgcmMxLCBcIiAwIDEsXCIsIGNyLCBcIiBcIixcbiAgICAgICAgICAgICAgdDEyWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB4MCwgXCIsXCIsIHkwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeDMgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciByYzAgPSBNYXRoLm1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpLFxuICAgICAgICAgICAgdDAzID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFt4MCwgeTBdLCBbeDMsIHkzXSwgcjAsIC1yYzAsXG4gICAgICAgICAgICAgIGN3KSxcbiAgICAgICAgICAgIHQyMSA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbeDIsIHkyXSwgeDEgPT0gbnVsbCA/IFt4MCwgeTBdIDogW1xuICAgICAgICAgICAgICB4MSwgeTFcbiAgICAgICAgICAgIF0sIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgICAgaWYgKHJjID09PSByYzApIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIixcbiAgICAgICAgICAgICAgdDIxWzFdLCBcIkFcIiwgcjAsIFwiLFwiLCByMCwgXCIgMCBcIiwgY3cgXiBkM19zdmdfYXJjU3dlZXAodDIxW1xuICAgICAgICAgICAgICAgIDFdWzBdLCB0MjFbMV1bMV0sIHQwM1sxXVswXSwgdDAzWzFdWzFdKSwgXCIsXCIsIDEgLSBjdyxcbiAgICAgICAgICAgICAgXCIgXCIsIHQwM1sxXSwgXCJBXCIsIHJjMCwgXCIsXCIsIHJjMCwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQwM1swXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB0MjFbMF0sIFwiQVwiLCByYzAsIFwiLFwiLCByYzAsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLFxuICAgICAgICAgICAgICB0MDNbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHgyLCBcIixcIiwgeTIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHgwLCBcIixcIiwgeTApO1xuICAgICAgICBpZiAoeDEgIT0gbnVsbCkgcGF0aC5wdXNoKFwiQVwiLCByMSwgXCIsXCIsIHIxLCBcIiAwIFwiLCBsMSwgXCIsXCIsIGN3LFxuICAgICAgICAgIFwiIFwiLCB4MSwgXCIsXCIsIHkxKTtcbiAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB4MiwgXCIsXCIsIHkyKTtcbiAgICAgICAgaWYgKHgzICE9IG51bGwpIHBhdGgucHVzaChcIkFcIiwgcjAsIFwiLFwiLCByMCwgXCIgMCBcIiwgbDAsIFwiLFwiLCAxIC1cbiAgICAgICAgICBjdywgXCIgXCIsIHgzLCBcIixcIiwgeTMpO1xuICAgICAgfVxuICAgICAgcGF0aC5wdXNoKFwiWlwiKTtcbiAgICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2lyY2xlU2VnbWVudChyMSwgY3cpIHtcbiAgICAgIHJldHVybiBcIk0wLFwiICsgcjEgKyBcIkFcIiArIHIxICsgXCIsXCIgKyByMSArIFwiIDAgMSxcIiArIGN3ICsgXCIgMCxcIiArIC1cbiAgICAgICAgcjEgKyBcIkFcIiArIHIxICsgXCIsXCIgKyByMSArIFwiIDAgMSxcIiArIGN3ICsgXCIgMCxcIiArIHIxO1xuICAgIH1cbiAgICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbm5lclJhZGl1cztcbiAgICAgIGlubmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXRlclJhZGl1cztcbiAgICAgIG91dGVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29ybmVyUmFkaXVzO1xuICAgICAgY29ybmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkUmFkaXVzO1xuICAgICAgcGFkUmFkaXVzID0gdiA9PSBkM19zdmdfYXJjQXV0byA/IGQzX3N2Z19hcmNBdXRvIDogZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG4gICAgICBzdGFydEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcbiAgICAgIHBhZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KFxuICAgICAgICAgIHRoaXMsIGFyZ3VtZW50cykpIC8gMixcbiAgICAgICAgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzKSkgLyAyIC0gaGFsZs+AO1xuICAgICAgcmV0dXJuIFtNYXRoLmNvcyhhKSAqIHIsIE1hdGguc2luKGEpICogcl07XG4gICAgfTtcbiAgICByZXR1cm4gYXJjO1xuICB9O1xuICB2YXIgZDNfc3ZnX2FyY0F1dG8gPSBcImF1dG9cIjtcblxuICBmdW5jdGlvbiBkM19zdmdfYXJjSW5uZXJSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLmlubmVyUmFkaXVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY091dGVyUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5vdXRlclJhZGl1cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTdGFydEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY0VuZEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5lbmRBbmdsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNQYWRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTd2VlcCh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHJldHVybiAoeDAgLSB4MSkgKiB5MCAtICh5MCAtIHkxKSAqIHgwID4gMCA/IDAgOiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKHAwLCBwMSwgcjEsIHJjLCBjdykge1xuICAgIHZhciB4MDEgPSBwMFswXSAtIHAxWzBdLFxuICAgICAgeTAxID0gcDBbMV0gLSBwMVsxXSxcbiAgICAgIGxvID0gKGN3ID8gcmMgOiAtcmMpIC8gTWF0aC5zcXJ0KHgwMSAqIHgwMSArIHkwMSAqIHkwMSksXG4gICAgICBveCA9IGxvICogeTAxLFxuICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICB4MSA9IHAwWzBdICsgb3gsXG4gICAgICB5MSA9IHAwWzFdICsgb3ksXG4gICAgICB4MiA9IHAxWzBdICsgb3gsXG4gICAgICB5MiA9IHAxWzFdICsgb3ksXG4gICAgICB4MyA9ICh4MSArIHgyKSAvIDIsXG4gICAgICB5MyA9ICh5MSArIHkyKSAvIDIsXG4gICAgICBkeCA9IHgyIC0geDEsXG4gICAgICBkeSA9IHkyIC0geTEsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgciA9IHIxIC0gcmMsXG4gICAgICBEID0geDEgKiB5MiAtIHgyICogeTEsXG4gICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQociAqIHIgKiBkMiAtIEQgKiBEKSxcbiAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTAgPSAoLUQgKiBkeCAtIGR5ICogZCkgLyBkMixcbiAgICAgIGN4MSA9IChEICogZHkgKyBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgIGR4MCA9IGN4MCAtIHgzLFxuICAgICAgZHkwID0gY3kwIC0geTMsXG4gICAgICBkeDEgPSBjeDEgLSB4MyxcbiAgICAgIGR5MSA9IGN5MSAtIHkzO1xuICAgIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuICAgIHJldHVybiBbXG4gICAgICBbY3gwIC0gb3gsIGN5MCAtIG95XSxcbiAgICAgIFtjeDAgKiByMSAvIHIsIGN5MCAqIHIxIC8gcl1cbiAgICBdO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmUocHJvamVjdGlvbikge1xuICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsXG4gICAgICB5ID0gZDNfZ2VvbV9wb2ludFksXG4gICAgICBkZWZpbmVkID0gZDNfdHJ1ZSxcbiAgICAgIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsXG4gICAgICBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlLmtleSxcbiAgICAgIHRlbnNpb24gPSAuNztcblxuICAgIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgICAgdmFyIHNlZ21lbnRzID0gW10sXG4gICAgICAgIHBvaW50cyA9IFtdLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCwgZnggPSBkM19mdW5jdG9yKHgpLFxuICAgICAgICBmeSA9IGQzX2Z1bmN0b3IoeSk7XG5cbiAgICAgIGZ1bmN0aW9uIHNlZ21lbnQoKSB7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goXCJNXCIsIGludGVycG9sYXRlKHByb2plY3Rpb24ocG9pbnRzKSwgdGVuc2lvbikpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcbiAgICAgICAgICBwb2ludHMucHVzaChbK2Z4LmNhbGwodGhpcywgZCwgaSksICtmeS5jYWxsKHRoaXMsIGQsIGkpXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHNlZ21lbnQoKTtcbiAgICAgICAgICBwb2ludHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBvaW50cy5sZW5ndGgpIHNlZ21lbnQoKTtcbiAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50cy5qb2luKFwiXCIpIDogbnVsbDtcbiAgICB9XG4gICAgbGluZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcbiAgICAgIHggPSBfO1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfTtcbiAgICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5O1xuICAgICAgeSA9IF87XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRlZmluZWQ7XG4gICAgICBkZWZpbmVkID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgbGluZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5O1xuICAgICAgaWYgKHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIpIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUgPSBfO1xuICAgICAgZWxzZSBpbnRlcnBvbGF0ZUtleSA9IChpbnRlcnBvbGF0ZSA9IGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycy5nZXQoXykgfHxcbiAgICAgICAgZDNfc3ZnX2xpbmVMaW5lYXIpLmtleTtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgbGluZS50ZW5zaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGVuc2lvbjtcbiAgICAgIHRlbnNpb24gPSBfO1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfTtcbiAgICByZXR1cm4gbGluZTtcbiAgfVxuICBkMy5zdmcubGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zdmdfbGluZShkM19pZGVudGl0eSk7XG4gIH07XG4gIHZhciBkM19zdmdfbGluZUludGVycG9sYXRvcnMgPSBkMy5tYXAoe1xuICAgIGxpbmVhcjogZDNfc3ZnX2xpbmVMaW5lYXIsXG4gICAgXCJsaW5lYXItY2xvc2VkXCI6IGQzX3N2Z19saW5lTGluZWFyQ2xvc2VkLFxuICAgIHN0ZXA6IGQzX3N2Z19saW5lU3RlcCxcbiAgICBcInN0ZXAtYmVmb3JlXCI6IGQzX3N2Z19saW5lU3RlcEJlZm9yZSxcbiAgICBcInN0ZXAtYWZ0ZXJcIjogZDNfc3ZnX2xpbmVTdGVwQWZ0ZXIsXG4gICAgYmFzaXM6IGQzX3N2Z19saW5lQmFzaXMsXG4gICAgXCJiYXNpcy1vcGVuXCI6IGQzX3N2Z19saW5lQmFzaXNPcGVuLFxuICAgIFwiYmFzaXMtY2xvc2VkXCI6IGQzX3N2Z19saW5lQmFzaXNDbG9zZWQsXG4gICAgYnVuZGxlOiBkM19zdmdfbGluZUJ1bmRsZSxcbiAgICBjYXJkaW5hbDogZDNfc3ZnX2xpbmVDYXJkaW5hbCxcbiAgICBcImNhcmRpbmFsLW9wZW5cIjogZDNfc3ZnX2xpbmVDYXJkaW5hbE9wZW4sXG4gICAgXCJjYXJkaW5hbC1jbG9zZWRcIjogZDNfc3ZnX2xpbmVDYXJkaW5hbENsb3NlZCxcbiAgICBtb25vdG9uZTogZDNfc3ZnX2xpbmVNb25vdG9uZVxuICB9KTtcbiAgZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHZhbHVlLmtleSA9IGtleTtcbiAgICB2YWx1ZS5jbG9zZWQgPSAvLWNsb3NlZCQvLnRlc3Qoa2V5KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSB7XG4gICAgcmV0dXJuIHBvaW50cy5qb2luKFwiTFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lTGluZWFyQ2xvc2VkKHBvaW50cykge1xuICAgIHJldHVybiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpICsgXCJaXCI7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zdmdfbGluZVN0ZXAocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBwID0gcG9pbnRzWzBdLFxuICAgICAgcGF0aCA9IFtwWzBdLCBcIixcIiwgcFsxXV07XG4gICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaChcIkhcIiwgKHBbMF0gKyAocCA9IHBvaW50c1tpXSlbMF0pIC8gMiwgXCJWXCIsIHBbXG4gICAgICAxXSk7XG4gICAgaWYgKG4gPiAxKSBwYXRoLnB1c2goXCJIXCIsIHBbMF0pO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zdmdfbGluZVN0ZXBCZWZvcmUocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBwID0gcG9pbnRzWzBdLFxuICAgICAgcGF0aCA9IFtwWzBdLCBcIixcIiwgcFsxXV07XG4gICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaChcIlZcIiwgKHAgPSBwb2ludHNbaV0pWzFdLCBcIkhcIiwgcFswXSk7XG4gICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEFmdGVyKHBvaW50cykge1xuICAgIHZhciBpID0gMCxcbiAgICAgIG4gPSBwb2ludHMubGVuZ3RoLFxuICAgICAgcCA9IHBvaW50c1swXSxcbiAgICAgIHBhdGggPSBbcFswXSwgXCIsXCIsIHBbMV1dO1xuICAgIHdoaWxlICgrK2kgPCBuKSBwYXRoLnB1c2goXCJIXCIsIChwID0gcG9pbnRzW2ldKVswXSwgXCJWXCIsIHBbMV0pO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsT3Blbihwb2ludHMsIHRlbnNpb24pIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDQgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzFdICtcbiAgICAgIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMuc2xpY2UoMSwgLTEpLCBkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMoXG4gICAgICAgIHBvaW50cywgdGVuc2lvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVDYXJkaW5hbENsb3NlZChwb2ludHMsIHRlbnNpb24pIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICtcbiAgICAgIGQzX3N2Z19saW5lSGVybWl0ZSgocG9pbnRzLnB1c2gocG9pbnRzWzBdKSxcbiAgICAgICAgcG9pbnRzKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKFtwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDJdXS5jb25jYXQoXG4gICAgICAgIHBvaW50cywgW3BvaW50c1sxXV0pLCB0ZW5zaW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsKHBvaW50cywgdGVuc2lvbikge1xuICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgMyA/IGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgOiBwb2ludHNbMF0gK1xuICAgICAgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cyxcbiAgICAgICAgdGVuc2lvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgdGFuZ2VudHMpIHtcbiAgICBpZiAodGFuZ2VudHMubGVuZ3RoIDwgMSB8fCBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCAmJiBwb2ludHMubGVuZ3RoICE9XG4gICAgICB0YW5nZW50cy5sZW5ndGggKyAyKSB7XG4gICAgICByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB9XG4gICAgdmFyIHF1YWQgPSBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCxcbiAgICAgIHBhdGggPSBcIlwiLFxuICAgICAgcDAgPSBwb2ludHNbMF0sXG4gICAgICBwID0gcG9pbnRzWzFdLFxuICAgICAgdDAgPSB0YW5nZW50c1swXSxcbiAgICAgIHQgPSB0MCxcbiAgICAgIHBpID0gMTtcbiAgICBpZiAocXVhZCkge1xuICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdIC0gdDBbMF0gKiAyIC8gMykgKyBcIixcIiArIChwWzFdIC0gdDBbMV0gKiAyIC8gMykgK1xuICAgICAgICBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICBwMCA9IHBvaW50c1sxXTtcbiAgICAgIHBpID0gMjtcbiAgICB9XG4gICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHQgPSB0YW5nZW50c1sxXTtcbiAgICAgIHAgPSBwb2ludHNbcGldO1xuICAgICAgcGkrKztcbiAgICAgIHBhdGggKz0gXCJDXCIgKyAocDBbMF0gKyB0MFswXSkgKyBcIixcIiArIChwMFsxXSArIHQwWzFdKSArIFwiLFwiICsgKHBbMF0gLVxuICAgICAgICB0WzBdKSArIFwiLFwiICsgKHBbMV0gLSB0WzFdKSArIFwiLFwiICsgcFswXSArIFwiLFwiICsgcFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgdGFuZ2VudHMubGVuZ3RoOyBpKyssIHBpKyspIHtcbiAgICAgICAgcCA9IHBvaW50c1twaV07XG4gICAgICAgIHQgPSB0YW5nZW50c1tpXTtcbiAgICAgICAgcGF0aCArPSBcIlNcIiArIChwWzBdIC0gdFswXSkgKyBcIixcIiArIChwWzFdIC0gdFsxXSkgKyBcIixcIiArIHBbMF0gK1xuICAgICAgICAgIFwiLFwiICsgcFsxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHF1YWQpIHtcbiAgICAgIHZhciBscCA9IHBvaW50c1twaV07XG4gICAgICBwYXRoICs9IFwiUVwiICsgKHBbMF0gKyB0WzBdICogMiAvIDMpICsgXCIsXCIgKyAocFsxXSArIHRbMV0gKiAyIC8gMykgK1xuICAgICAgICBcIixcIiArIGxwWzBdICsgXCIsXCIgKyBscFsxXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgdmFyIHRhbmdlbnRzID0gW10sXG4gICAgICBhID0gKDEgLSB0ZW5zaW9uKSAvIDIsXG4gICAgICBwMCwgcDEgPSBwb2ludHNbMF0sXG4gICAgICBwMiA9IHBvaW50c1sxXSxcbiAgICAgIGkgPSAxLFxuICAgICAgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHAwID0gcDE7XG4gICAgICBwMSA9IHAyO1xuICAgICAgcDIgPSBwb2ludHNbaV07XG4gICAgICB0YW5nZW50cy5wdXNoKFthICogKHAyWzBdIC0gcDBbMF0pLCBhICogKHAyWzFdIC0gcDBbMV0pXSk7XG4gICAgfVxuICAgIHJldHVybiB0YW5nZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXMocG9pbnRzKSB7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAzKSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB2YXIgaSA9IDEsXG4gICAgICBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgIHBpID0gcG9pbnRzWzBdLFxuICAgICAgeDAgPSBwaVswXSxcbiAgICAgIHkwID0gcGlbMV0sXG4gICAgICBweCA9IFt4MCwgeDAsIHgwLCAocGkgPSBwb2ludHNbMV0pWzBdXSxcbiAgICAgIHB5ID0gW3kwLCB5MCwgeTAsIHBpWzFdXSxcbiAgICAgIHBhdGggPSBbeDAsIFwiLFwiLCB5MCwgXCJMXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpLFxuICAgICAgICBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSlcbiAgICAgIF07XG4gICAgcG9pbnRzLnB1c2gocG9pbnRzW24gLSAxXSk7XG4gICAgd2hpbGUgKCsraSA8PSBuKSB7XG4gICAgICBwaSA9IHBvaW50c1tpXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcG9pbnRzLnBvcCgpO1xuICAgIHBhdGgucHVzaChcIkxcIiwgcGkpO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzT3Blbihwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDQpIHJldHVybiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpO1xuICAgIHZhciBwYXRoID0gW10sXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgIHBpLCBweCA9IFswXSxcbiAgICAgIHB5ID0gWzBdO1xuICAgIHdoaWxlICgrK2kgPCAzKSB7XG4gICAgICBwaSA9IHBvaW50c1tpXTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkucHVzaChwaVsxXSk7XG4gICAgfVxuICAgIHBhdGgucHVzaChkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB4KSArIFwiLFwiICtcbiAgICAgIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpKTtcbiAgICAtLWk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHBpID0gcG9pbnRzW2ldO1xuICAgICAgcHguc2hpZnQoKTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkuc2hpZnQoKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc0Nsb3NlZChwb2ludHMpIHtcbiAgICB2YXIgcGF0aCwgaSA9IC0xLFxuICAgICAgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBtID0gbiArIDQsXG4gICAgICBwaSwgcHggPSBbXSxcbiAgICAgIHB5ID0gW107XG4gICAgd2hpbGUgKCsraSA8IDQpIHtcbiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkucHVzaChwaVsxXSk7XG4gICAgfVxuICAgIHBhdGggPSBbZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCksIFwiLFwiLFxuICAgICAgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSlcbiAgICBdO1xuICAgIC0taTtcbiAgICB3aGlsZSAoKytpIDwgbSkge1xuICAgICAgcGkgPSBwb2ludHNbaSAlIG5dO1xuICAgICAgcHguc2hpZnQoKTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkuc2hpZnQoKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCdW5kbGUocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgdmFyIG4gPSBwb2ludHMubGVuZ3RoIC0gMTtcbiAgICBpZiAobikge1xuICAgICAgdmFyIHgwID0gcG9pbnRzWzBdWzBdLFxuICAgICAgICB5MCA9IHBvaW50c1swXVsxXSxcbiAgICAgICAgZHggPSBwb2ludHNbbl1bMF0gLSB4MCxcbiAgICAgICAgZHkgPSBwb2ludHNbbl1bMV0gLSB5MCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBwLCB0O1xuICAgICAgd2hpbGUgKCsraSA8PSBuKSB7XG4gICAgICAgIHAgPSBwb2ludHNbaV07XG4gICAgICAgIHQgPSBpIC8gbjtcbiAgICAgICAgcFswXSA9IHRlbnNpb24gKiBwWzBdICsgKDEgLSB0ZW5zaW9uKSAqICh4MCArIHQgKiBkeCk7XG4gICAgICAgIHBbMV0gPSB0ZW5zaW9uICogcFsxXSArICgxIC0gdGVuc2lvbikgKiAoeTAgKyB0ICogZHkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc3ZnX2xpbmVCYXNpcyhwb2ludHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVEb3Q0KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG4gIH1cbiAgdmFyIGQzX3N2Z19saW5lQmFzaXNCZXppZXIxID0gWzAsIDIgLyAzLCAxIC8gMywgMF0sXG4gICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIgPSBbMCwgMSAvIDMsIDIgLyAzLCAwXSxcbiAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyMyA9IFswLCAxIC8gNiwgMiAvIDMsIDEgLyA2XTtcblxuICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHgsIHkpIHtcbiAgICBwYXRoLnB1c2goXCJDXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMSwgeCksIFwiLFwiLFxuICAgICAgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIxLCB5KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChcbiAgICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIsIHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KFxuICAgICAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyMiwgeSksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoXG4gICAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChcbiAgICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKSB7XG4gICAgcmV0dXJuIChwMVsxXSAtIHAwWzFdKSAvIChwMVswXSAtIHAwWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgaiA9IHBvaW50cy5sZW5ndGggLSAxLFxuICAgICAgbSA9IFtdLFxuICAgICAgcDAgPSBwb2ludHNbMF0sXG4gICAgICBwMSA9IHBvaW50c1sxXSxcbiAgICAgIGQgPSBtWzBdID0gZDNfc3ZnX2xpbmVTbG9wZShwMCwgcDEpO1xuICAgIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgICBtW2ldID0gKGQgKyAoZCA9IGQzX3N2Z19saW5lU2xvcGUocDAgPSBwMSwgcDEgPSBwb2ludHNbaSArIDFdKSkpIC8gMjtcbiAgICB9XG4gICAgbVtpXSA9IGQ7XG4gICAgcmV0dXJuIG07XG4gIH1cblxuICBmdW5jdGlvbiBkM19zdmdfbGluZU1vbm90b25lVGFuZ2VudHMocG9pbnRzKSB7XG4gICAgdmFyIHRhbmdlbnRzID0gW10sXG4gICAgICBkLCBhLCBiLCBzLCBtID0gZDNfc3ZnX2xpbmVGaW5pdGVEaWZmZXJlbmNlcyhwb2ludHMpLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgICBkID0gZDNfc3ZnX2xpbmVTbG9wZShwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pO1xuICAgICAgaWYgKGFicyhkKSA8IM61KSB7XG4gICAgICAgIG1baV0gPSBtW2kgKyAxXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhID0gbVtpXSAvIGQ7XG4gICAgICAgIGIgPSBtW2kgKyAxXSAvIGQ7XG4gICAgICAgIHMgPSBhICogYSArIGIgKiBiO1xuICAgICAgICBpZiAocyA+IDkpIHtcbiAgICAgICAgICBzID0gZCAqIDMgLyBNYXRoLnNxcnQocyk7XG4gICAgICAgICAgbVtpXSA9IHMgKiBhO1xuICAgICAgICAgIG1baSArIDFdID0gcyAqIGI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaSA9IC0xO1xuICAgIHdoaWxlICgrK2kgPD0gaikge1xuICAgICAgcyA9IChwb2ludHNbTWF0aC5taW4oaiwgaSArIDEpXVswXSAtIHBvaW50c1tNYXRoLm1heCgwLCBpIC0gMSldWzBdKSAvXG4gICAgICAgICg2ICogKDEgKyBtW2ldICogbVtpXSkpO1xuICAgICAgdGFuZ2VudHMucHVzaChbcyB8fCAwLCBtW2ldICogcyB8fCAwXSk7XG4gICAgfVxuICAgIHJldHVybiB0YW5nZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lTW9ub3RvbmUocG9pbnRzKSB7XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSA6IHBvaW50c1swXSArXG4gICAgICBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLCBkM19zdmdfbGluZU1vbm90b25lVGFuZ2VudHMocG9pbnRzKSk7XG4gIH1cbiAgZDMuc3ZnLmxpbmUucmFkaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxpbmUgPSBkM19zdmdfbGluZShkM19zdmdfbGluZVJhZGlhbCk7XG4gICAgbGluZS5yYWRpdXMgPSBsaW5lLngsIGRlbGV0ZSBsaW5lLng7XG4gICAgbGluZS5hbmdsZSA9IGxpbmUueSwgZGVsZXRlIGxpbmUueTtcbiAgICByZXR1cm4gbGluZTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM19zdmdfbGluZVJhZGlhbChwb2ludHMpIHtcbiAgICB2YXIgcG9pbnQsIGkgPSAtMSxcbiAgICAgIG4gPSBwb2ludHMubGVuZ3RoLFxuICAgICAgciwgYTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICByID0gcG9pbnRbMF07XG4gICAgICBhID0gcG9pbnRbMV0gLSBoYWxmz4A7XG4gICAgICBwb2ludFswXSA9IHIgKiBNYXRoLmNvcyhhKTtcbiAgICAgIHBvaW50WzFdID0gciAqIE1hdGguc2luKGEpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyZWEocHJvamVjdGlvbikge1xuICAgIHZhciB4MCA9IGQzX2dlb21fcG9pbnRYLFxuICAgICAgeDEgPSBkM19nZW9tX3BvaW50WCxcbiAgICAgIHkwID0gMCxcbiAgICAgIHkxID0gZDNfZ2VvbV9wb2ludFksXG4gICAgICBkZWZpbmVkID0gZDNfdHJ1ZSxcbiAgICAgIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsXG4gICAgICBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlLmtleSxcbiAgICAgIGludGVycG9sYXRlUmV2ZXJzZSA9IGludGVycG9sYXRlLFxuICAgICAgTCA9IFwiTFwiLFxuICAgICAgdGVuc2lvbiA9IC43O1xuXG4gICAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgICB2YXIgc2VnbWVudHMgPSBbXSxcbiAgICAgICAgcG9pbnRzMCA9IFtdLFxuICAgICAgICBwb2ludHMxID0gW10sXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLCBmeDAgPSBkM19mdW5jdG9yKHgwKSxcbiAgICAgICAgZnkwID0gZDNfZnVuY3Rvcih5MCksXG4gICAgICAgIGZ4MSA9IHgwID09PSB4MSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9IDogZDNfZnVuY3Rvcih4MSksXG4gICAgICAgIGZ5MSA9IHkwID09PSB5MSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB5O1xuICAgICAgICB9IDogZDNfZnVuY3Rvcih5MSksXG4gICAgICAgIHgsIHk7XG5cbiAgICAgIGZ1bmN0aW9uIHNlZ21lbnQoKSB7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goXCJNXCIsIGludGVycG9sYXRlKHByb2plY3Rpb24ocG9pbnRzMSksIHRlbnNpb24pLCBMLFxuICAgICAgICAgIGludGVycG9sYXRlUmV2ZXJzZShwcm9qZWN0aW9uKHBvaW50czAucmV2ZXJzZSgpKSwgdGVuc2lvbiksIFwiWlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoZGVmaW5lZC5jYWxsKHRoaXMsIGQgPSBkYXRhW2ldLCBpKSkge1xuICAgICAgICAgIHBvaW50czAucHVzaChbeCA9ICtmeDAuY2FsbCh0aGlzLCBkLCBpKSwgeSA9ICtmeTAuY2FsbCh0aGlzLCBkLCBpKV0pO1xuICAgICAgICAgIHBvaW50czEucHVzaChbK2Z4MS5jYWxsKHRoaXMsIGQsIGkpLCArZnkxLmNhbGwodGhpcywgZCwgaSldKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludHMwLmxlbmd0aCkge1xuICAgICAgICAgIHNlZ21lbnQoKTtcbiAgICAgICAgICBwb2ludHMwID0gW107XG4gICAgICAgICAgcG9pbnRzMSA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9pbnRzMC5sZW5ndGgpIHNlZ21lbnQoKTtcbiAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50cy5qb2luKFwiXCIpIDogbnVsbDtcbiAgICB9XG4gICAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG4gICAgICB4MCA9IHgxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgwO1xuICAgICAgeDAgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG4gICAgICB4MSA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTAgPSB5MSA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5MDtcbiAgICAgIHkwID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTEgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkZWZpbmVkO1xuICAgICAgZGVmaW5lZCA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbnRlcnBvbGF0ZUtleTtcbiAgICAgIGlmICh0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiKSBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlID0gXztcbiAgICAgIGVsc2UgaW50ZXJwb2xhdGVLZXkgPSAoaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZ2V0KF8pIHx8XG4gICAgICAgIGQzX3N2Z19saW5lTGluZWFyKS5rZXk7XG4gICAgICBpbnRlcnBvbGF0ZVJldmVyc2UgPSBpbnRlcnBvbGF0ZS5yZXZlcnNlIHx8IGludGVycG9sYXRlO1xuICAgICAgTCA9IGludGVycG9sYXRlLmNsb3NlZCA/IFwiTVwiIDogXCJMXCI7XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEudGVuc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRlbnNpb247XG4gICAgICB0ZW5zaW9uID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgcmV0dXJuIGFyZWE7XG4gIH1cbiAgZDNfc3ZnX2xpbmVTdGVwQmVmb3JlLnJldmVyc2UgPSBkM19zdmdfbGluZVN0ZXBBZnRlcjtcbiAgZDNfc3ZnX2xpbmVTdGVwQWZ0ZXIucmV2ZXJzZSA9IGQzX3N2Z19saW5lU3RlcEJlZm9yZTtcbiAgZDMuc3ZnLmFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc3ZnX2FyZWEoZDNfaWRlbnRpdHkpO1xuICB9O1xuICBkMy5zdmcuYXJlYS5yYWRpYWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYSA9IGQzX3N2Z19hcmVhKGQzX3N2Z19saW5lUmFkaWFsKTtcbiAgICBhcmVhLnJhZGl1cyA9IGFyZWEueCwgZGVsZXRlIGFyZWEueDtcbiAgICBhcmVhLmlubmVyUmFkaXVzID0gYXJlYS54MCwgZGVsZXRlIGFyZWEueDA7XG4gICAgYXJlYS5vdXRlclJhZGl1cyA9IGFyZWEueDEsIGRlbGV0ZSBhcmVhLngxO1xuICAgIGFyZWEuYW5nbGUgPSBhcmVhLnksIGRlbGV0ZSBhcmVhLnk7XG4gICAgYXJlYS5zdGFydEFuZ2xlID0gYXJlYS55MCwgZGVsZXRlIGFyZWEueTA7XG4gICAgYXJlYS5lbmRBbmdsZSA9IGFyZWEueTEsIGRlbGV0ZSBhcmVhLnkxO1xuICAgIHJldHVybiBhcmVhO1xuICB9O1xuICBkMy5zdmcuY2hvcmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc291cmNlID0gZDNfc291cmNlLFxuICAgICAgdGFyZ2V0ID0gZDNfdGFyZ2V0LFxuICAgICAgcmFkaXVzID0gZDNfc3ZnX2Nob3JkUmFkaXVzLFxuICAgICAgc3RhcnRBbmdsZSA9IGQzX3N2Z19hcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGU7XG5cbiAgICBmdW5jdGlvbiBjaG9yZChkLCBpKSB7XG4gICAgICB2YXIgcyA9IHN1Ymdyb3VwKHRoaXMsIHNvdXJjZSwgZCwgaSksXG4gICAgICAgIHQgPSBzdWJncm91cCh0aGlzLCB0YXJnZXQsIGQsIGkpO1xuICAgICAgcmV0dXJuIFwiTVwiICsgcy5wMCArIGFyYyhzLnIsIHMucDEsIHMuYTEgLSBzLmEwKSArIChlcXVhbHMocywgdCkgP1xuICAgICAgICBjdXJ2ZShzLnIsIHMucDEsIHMuciwgcy5wMCkgOiBjdXJ2ZShzLnIsIHMucDEsIHQuciwgdC5wMCkgKyBhcmMoXG4gICAgICAgICAgdC5yLCB0LnAxLCB0LmExIC0gdC5hMCkgKyBjdXJ2ZSh0LnIsIHQucDEsIHMuciwgcy5wMCkpICsgXCJaXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ViZ3JvdXAoc2VsZiwgZiwgZCwgaSkge1xuICAgICAgdmFyIHN1Ymdyb3VwID0gZi5jYWxsKHNlbGYsIGQsIGkpLFxuICAgICAgICByID0gcmFkaXVzLmNhbGwoc2VsZiwgc3ViZ3JvdXAsIGkpLFxuICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuY2FsbChzZWxmLCBzdWJncm91cCwgaSkgLSBoYWxmz4AsXG4gICAgICAgIGExID0gZW5kQW5nbGUuY2FsbChzZWxmLCBzdWJncm91cCwgaSkgLSBoYWxmz4A7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByOiByLFxuICAgICAgICBhMDogYTAsXG4gICAgICAgIGExOiBhMSxcbiAgICAgICAgcDA6IFtyICogTWF0aC5jb3MoYTApLCByICogTWF0aC5zaW4oYTApXSxcbiAgICAgICAgcDE6IFtyICogTWF0aC5jb3MoYTEpLCByICogTWF0aC5zaW4oYTEpXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICAgICAgcmV0dXJuIGEuYTAgPT0gYi5hMCAmJiBhLmExID09IGIuYTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXJjKHIsIHAsIGEpIHtcbiAgICAgIHJldHVybiBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiAwIFwiICsgKyhhID4gz4ApICsgXCIsMSBcIiArIHA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VydmUocjAsIHAwLCByMSwgcDEpIHtcbiAgICAgIHJldHVybiBcIlEgMCwwIFwiICsgcDE7XG4gICAgfVxuICAgIGNob3JkLnJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhZGl1cztcbiAgICAgIHJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3VyY2UgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG4gICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQudGFyZ2V0ID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuICAgICAgc3RhcnRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5lbmRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGVuZEFuZ2xlO1xuICAgICAgZW5kQW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgcmV0dXJuIGNob3JkO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3N2Z19jaG9yZFJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIGQucmFkaXVzO1xuICB9XG4gIGQzLnN2Zy5kaWFnb25hbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsXG4gICAgICB0YXJnZXQgPSBkM190YXJnZXQsXG4gICAgICBwcm9qZWN0aW9uID0gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbjtcblxuICAgIGZ1bmN0aW9uIGRpYWdvbmFsKGQsIGkpIHtcbiAgICAgIHZhciBwMCA9IHNvdXJjZS5jYWxsKHRoaXMsIGQsIGkpLFxuICAgICAgICBwMyA9IHRhcmdldC5jYWxsKHRoaXMsIGQsIGkpLFxuICAgICAgICBtID0gKHAwLnkgKyBwMy55KSAvIDIsXG4gICAgICAgIHAgPSBbcDAsIHtcbiAgICAgICAgICB4OiBwMC54LFxuICAgICAgICAgIHk6IG1cbiAgICAgICAgfSwge1xuICAgICAgICAgIHg6IHAzLngsXG4gICAgICAgICAgeTogbVxuICAgICAgICB9LCBwM107XG4gICAgICBwID0gcC5tYXAocHJvamVjdGlvbik7XG4gICAgICByZXR1cm4gXCJNXCIgKyBwWzBdICsgXCJDXCIgKyBwWzFdICsgXCIgXCIgKyBwWzJdICsgXCIgXCIgKyBwWzNdO1xuICAgIH1cbiAgICBkaWFnb25hbC5zb3VyY2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG4gICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuICAgIH07XG4gICAgZGlhZ29uYWwudGFyZ2V0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBkaWFnb25hbDtcbiAgICB9O1xuICAgIGRpYWdvbmFsLnByb2plY3Rpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuICAgICAgcHJvamVjdGlvbiA9IHg7XG4gICAgICByZXR1cm4gZGlhZ29uYWw7XG4gICAgfTtcbiAgICByZXR1cm4gZGlhZ29uYWw7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbihkKSB7XG4gICAgcmV0dXJuIFtkLngsIGQueV07XG4gIH1cbiAgZDMuc3ZnLmRpYWdvbmFsLnJhZGlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaWFnb25hbCA9IGQzLnN2Zy5kaWFnb25hbCgpLFxuICAgICAgcHJvamVjdGlvbiA9IGQzX3N2Z19kaWFnb25hbFByb2plY3Rpb24sXG4gICAgICBwcm9qZWN0aW9uXyA9IGRpYWdvbmFsLnByb2plY3Rpb247XG4gICAgZGlhZ29uYWwucHJvamVjdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcHJvamVjdGlvbl8oXG4gICAgICAgIGQzX3N2Z19kaWFnb25hbFJhZGlhbFByb2plY3Rpb24ocHJvamVjdGlvbiA9IHgpKSA6IHByb2plY3Rpb247XG4gICAgfTtcbiAgICByZXR1cm4gZGlhZ29uYWw7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGQgPSBwcm9qZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIgPSBkWzBdLFxuICAgICAgICBhID0gZFsxXSAtIGhhbGbPgDtcbiAgICAgIHJldHVybiBbciAqIE1hdGguY29zKGEpLCByICogTWF0aC5zaW4oYSldO1xuICAgIH07XG4gIH1cbiAgZDMuc3ZnLnN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0eXBlID0gZDNfc3ZnX3N5bWJvbFR5cGUsXG4gICAgICBzaXplID0gZDNfc3ZnX3N5bWJvbFNpemU7XG5cbiAgICBmdW5jdGlvbiBzeW1ib2woZCwgaSkge1xuICAgICAgcmV0dXJuIChkM19zdmdfc3ltYm9scy5nZXQodHlwZS5jYWxsKHRoaXMsIGQsIGkpKSB8fFxuICAgICAgICBkM19zdmdfc3ltYm9sQ2lyY2xlKShzaXplLmNhbGwodGhpcywgZCwgaSkpO1xuICAgIH1cbiAgICBzeW1ib2wudHlwZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHR5cGU7XG4gICAgICB0eXBlID0gZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgfTtcbiAgICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0gZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgfTtcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3N2Z19zeW1ib2xTaXplKCkge1xuICAgIHJldHVybiA2NDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19zeW1ib2xUeXBlKCkge1xuICAgIHJldHVybiBcImNpcmNsZVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfc3ZnX3N5bWJvbENpcmNsZShzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIM+AKTtcbiAgICByZXR1cm4gXCJNMCxcIiArIHIgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiAwIDEsMSAwLFwiICsgLXIgKyBcIkFcIiArIHIgKyBcIixcIiArXG4gICAgICByICsgXCIgMCAxLDEgMCxcIiArIHIgKyBcIlpcIjtcbiAgfVxuICB2YXIgZDNfc3ZnX3N5bWJvbHMgPSBkMy5tYXAoe1xuICAgIGNpcmNsZTogZDNfc3ZnX3N5bWJvbENpcmNsZSxcbiAgICBjcm9zczogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIDUpIC8gMjtcbiAgICAgIHJldHVybiBcIk1cIiArIC0zICogciArIFwiLFwiICsgLXIgKyBcIkhcIiArIC1yICsgXCJWXCIgKyAtMyAqIHIgKyBcIkhcIiArXG4gICAgICAgIHIgKyBcIlZcIiArIC1yICsgXCJIXCIgKyAzICogciArIFwiVlwiICsgciArIFwiSFwiICsgciArIFwiVlwiICsgMyAqIHIgK1xuICAgICAgICBcIkhcIiArIC1yICsgXCJWXCIgKyByICsgXCJIXCIgKyAtMyAqIHIgKyBcIlpcIjtcbiAgICB9LFxuICAgIGRpYW1vbmQ6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByeSA9IE1hdGguc3FydChzaXplIC8gKDIgKiBkM19zdmdfc3ltYm9sVGFuMzApKSxcbiAgICAgICAgcnggPSByeSAqIGQzX3N2Z19zeW1ib2xUYW4zMDtcbiAgICAgIHJldHVybiBcIk0wLFwiICsgLXJ5ICsgXCJMXCIgKyByeCArIFwiLDBcIiArIFwiIDAsXCIgKyByeSArIFwiIFwiICsgLXJ4ICtcbiAgICAgICAgXCIsMFwiICsgXCJaXCI7XG4gICAgfSxcbiAgICBzcXVhcmU6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUpIC8gMjtcbiAgICAgIHJldHVybiBcIk1cIiArIC1yICsgXCIsXCIgKyAtciArIFwiTFwiICsgciArIFwiLFwiICsgLXIgKyBcIiBcIiArIHIgKyBcIixcIiArXG4gICAgICAgIHIgKyBcIiBcIiArIC1yICsgXCIsXCIgKyByICsgXCJaXCI7XG4gICAgfSxcbiAgICBcInRyaWFuZ2xlLWRvd25cIjogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgdmFyIHJ4ID0gTWF0aC5zcXJ0KHNpemUgLyBkM19zdmdfc3ltYm9sU3FydDMpLFxuICAgICAgICByeSA9IHJ4ICogZDNfc3ZnX3N5bWJvbFNxcnQzIC8gMjtcbiAgICAgIHJldHVybiBcIk0wLFwiICsgcnkgKyBcIkxcIiArIHJ4ICsgXCIsXCIgKyAtcnkgKyBcIiBcIiArIC1yeCArIFwiLFwiICsgLVxuICAgICAgICByeSArIFwiWlwiO1xuICAgIH0sXG4gICAgXCJ0cmlhbmdsZS11cFwiOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnggPSBNYXRoLnNxcnQoc2l6ZSAvIGQzX3N2Z19zeW1ib2xTcXJ0MyksXG4gICAgICAgIHJ5ID0gcnggKiBkM19zdmdfc3ltYm9sU3FydDMgLyAyO1xuICAgICAgcmV0dXJuIFwiTTAsXCIgKyAtcnkgKyBcIkxcIiArIHJ4ICsgXCIsXCIgKyByeSArIFwiIFwiICsgLXJ4ICsgXCIsXCIgKyByeSArXG4gICAgICAgIFwiWlwiO1xuICAgIH1cbiAgfSk7XG4gIGQzLnN2Zy5zeW1ib2xUeXBlcyA9IGQzX3N2Z19zeW1ib2xzLmtleXMoKTtcbiAgdmFyIGQzX3N2Z19zeW1ib2xTcXJ0MyA9IE1hdGguc3FydCgzKSxcbiAgICBkM19zdmdfc3ltYm9sVGFuMzAgPSBNYXRoLnRhbigzMCAqIGQzX3JhZGlhbnMpO1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUudHJhbnNpdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaWQgPSBkM190cmFuc2l0aW9uSW5oZXJpdElkIHx8ICsrZDNfdHJhbnNpdGlvbklkLFxuICAgICAgbnMgPSBkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpLFxuICAgICAgc3ViZ3JvdXBzID0gW10sXG4gICAgICBzdWJncm91cCwgbm9kZSwgdHJhbnNpdGlvbiA9IGQzX3RyYW5zaXRpb25Jbmhlcml0IHx8IHtcbiAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgZWFzZTogZDNfZWFzZV9jdWJpY0luT3V0LFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgfTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZCxcbiAgICAgICAgICB0cmFuc2l0aW9uKTtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2gobmFtZSA9PSBudWxsID8gZDNfc2VsZWN0aW9uX2ludGVycnVwdCA6XG4gICAgICBkM19zZWxlY3Rpb25faW50ZXJydXB0TlMoZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSkpO1xuICB9O1xuICB2YXIgZDNfc2VsZWN0aW9uX2ludGVycnVwdCA9IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhcbiAgICBkM190cmFuc2l0aW9uTmFtZXNwYWNlKCkpO1xuXG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhucykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsb2NrLCBhY3RpdmU7XG4gICAgICBpZiAoKGxvY2sgPSB0aGlzW25zXSkgJiYgKGFjdGl2ZSA9IGxvY2tbbG9jay5hY3RpdmVdKSkge1xuICAgICAgICBpZiAoLS1sb2NrLmNvdW50KSBkZWxldGUgbG9ja1tsb2NrLmFjdGl2ZV07XG4gICAgICAgIGVsc2UgZGVsZXRlIHRoaXNbbnNdO1xuICAgICAgICBsb2NrLmFjdGl2ZSArPSAuNTtcbiAgICAgICAgYWN0aXZlLmV2ZW50ICYmIGFjdGl2ZS5ldmVudC5pbnRlcnJ1cHQuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGFjdGl2ZS5pbmRleCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb24oZ3JvdXBzLCBucywgaWQpIHtcbiAgICBkM19zdWJjbGFzcyhncm91cHMsIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUpO1xuICAgIGdyb3Vwcy5uYW1lc3BhY2UgPSBucztcbiAgICBncm91cHMuaWQgPSBpZDtcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG4gIHZhciBkM190cmFuc2l0aW9uUHJvdG90eXBlID0gW10sXG4gICAgZDNfdHJhbnNpdGlvbklkID0gMCxcbiAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkLCBkM190cmFuc2l0aW9uSW5oZXJpdDtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5jYWxsID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNhbGw7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZW1wdHkgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZW1wdHk7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUubm9kZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlO1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnNpemUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2l6ZTtcbiAgZDMudHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgbmFtZSkge1xuICAgIHJldHVybiBzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLnRyYW5zaXRpb24gPyBkM190cmFuc2l0aW9uSW5oZXJpdElkID9cbiAgICAgIHNlbGVjdGlvbi50cmFuc2l0aW9uKG5hbWUpIDogc2VsZWN0aW9uIDogZDNfc2VsZWN0aW9uUm9vdC50cmFuc2l0aW9uKFxuICAgICAgICBzZWxlY3Rpb24pO1xuICB9O1xuICBkMy50cmFuc2l0aW9uLnByb3RvdHlwZSA9IGQzX3RyYW5zaXRpb25Qcm90b3R5cGU7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLFxuICAgICAgbnMgPSB0aGlzLm5hbWVzcGFjZSxcbiAgICAgIHN1Ymdyb3VwcyA9IFtdLFxuICAgICAgc3ViZ3JvdXAsIHN1Ym5vZGUsIG5vZGU7XG4gICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjspIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLFxuICAgICAgICAgICAgaSwgaikpKSB7XG4gICAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgICBkM190cmFuc2l0aW9uTm9kZShzdWJub2RlLCBpLCBucywgaWQsIG5vZGVbbnNdW2lkXSk7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChzdWJub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zZWxlY3RBbGwgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsXG4gICAgICBucyA9IHRoaXMubmFtZXNwYWNlLFxuICAgICAgc3ViZ3JvdXBzID0gW10sXG4gICAgICBzdWJncm91cCwgc3Vibm9kZXMsIG5vZGUsIHN1Ym5vZGUsIHRyYW5zaXRpb247XG4gICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAgIHN1Ym5vZGVzID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgICAgICBmb3IgKHZhciBrID0gLTEsIG8gPSBzdWJub2Rlcy5sZW5ndGg7ICsrayA8IG87KSB7XG4gICAgICAgICAgICBpZiAoc3Vibm9kZSA9IHN1Ym5vZGVzW2tdKSBkM190cmFuc2l0aW9uTm9kZShzdWJub2RlLCBrLCBucyxcbiAgICAgICAgICAgICAgaWQsIHRyYW5zaXRpb24pO1xuICAgICAgICAgICAgc3ViZ3JvdXAucHVzaChzdWJub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgIHZhciBzdWJncm91cHMgPSBbXSxcbiAgICAgIHN1Ymdyb3VwLCBncm91cCwgbm9kZTtcbiAgICBpZiAodHlwZW9mIGZpbHRlciAhPT0gXCJmdW5jdGlvblwiKSBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fZmlsdGVyKGZpbHRlcik7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBmaWx0ZXIuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLm5hbWVzcGFjZSwgdGhpcy5pZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHdlZW4gPSBmdW5jdGlvbihuYW1lLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsXG4gICAgICBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0udHdlZW4uZ2V0KG5hbWUpO1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCB0d2VlbiA9PSBudWxsID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnJlbW92ZShuYW1lKTtcbiAgICB9IDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB0d2Vlbik7XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbl90d2Vlbihncm91cHMsIG5hbWUsIHZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IGdyb3Vwcy5pZCxcbiAgICAgIG5zID0gZ3JvdXBzLm5hbWVzcGFjZTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2goZ3JvdXBzLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKFxuICAgICAgbm9kZSwgaSwgaikge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB0d2Vlbih2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sXG4gICAgICAgIGksIGopKSk7XG4gICAgfSA6ICh2YWx1ZSA9IHR3ZWVuKHZhbHVlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgfSkpO1xuICB9XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWVOUywgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZU5TKSB0aGlzLmF0dHIodmFsdWUsIG5hbWVOU1t2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBpbnRlcnBvbGF0ZSA9IG5hbWVOUyA9PSBcInRyYW5zZm9ybVwiID8gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOlxuICAgICAgZDNfaW50ZXJwb2xhdGUsXG4gICAgICBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lTlMpO1xuXG4gICAgZnVuY3Rpb24gYXR0ck51bGwoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRyTnVsbE5TKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRyVHdlZW4oYikge1xuICAgICAgcmV0dXJuIGIgPT0gbnVsbCA/IGF0dHJOdWxsIDogKGIgKz0gXCJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSksXG4gICAgICAgICAgaTtcbiAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBpbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbE5TIDogKGIgKz0gXCJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSxcbiAgICAgICAgICBpO1xuICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCBpKHQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJhdHRyLlwiICsgbmFtZU5TLCB2YWx1ZSwgbmFtZS5sb2NhbCA/XG4gICAgICBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0clR3ZWVuID0gZnVuY3Rpb24obmFtZU5TLCB0d2Vlbikge1xuICAgIHZhciBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lTlMpO1xuXG4gICAgZnVuY3Rpb24gYXR0clR3ZWVuKGQsIGkpIHtcbiAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKSk7XG4gICAgICByZXR1cm4gZiAmJiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGYodCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRyVHdlZW5OUyhkLCBpKSB7XG4gICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lXG4gICAgICAgIC5sb2NhbCkpO1xuICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIGYodCkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHdlZW4oXCJhdHRyLlwiICsgbmFtZU5TLCBuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOlxuICAgICAgYXR0clR3ZWVuKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobiA8IDMpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAobiA8IDIpIHZhbHVlID0gXCJcIjtcbiAgICAgICAgZm9yIChwcmlvcml0eSBpbiBuYW1lKSB0aGlzLnN0eWxlKHByaW9yaXR5LCBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHByaW9yaXR5ID0gXCJcIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHlsZU51bGwoKSB7XG4gICAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0eWxlU3RyaW5nKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBzdHlsZU51bGwgOiAoYiArPSBcIlwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGEgPSBkM193aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFxuICAgICAgICAgICAgbmFtZSksXG4gICAgICAgICAgaTtcbiAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBkM19pbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbl90d2Vlbih0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUsIHN0eWxlU3RyaW5nKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zdHlsZVR3ZWVuID0gZnVuY3Rpb24obmFtZSwgdHdlZW4sIHByaW9yaXR5KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBwcmlvcml0eSA9IFwiXCI7XG5cbiAgICBmdW5jdGlvbiBzdHlsZVR3ZWVuKGQsIGkpIHtcbiAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCBkM193aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLFxuICAgICAgICBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpKTtcbiAgICAgIHJldHVybiBmICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBmKHQpLCBwcmlvcml0eSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50d2VlbihcInN0eWxlLlwiICsgbmFtZSwgc3R5bGVUd2Vlbik7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJ0ZXh0XCIsIHZhbHVlLCBkM190cmFuc2l0aW9uX3RleHQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25fdGV4dChiKSB7XG4gICAgaWYgKGIgPT0gbnVsbCkgYiA9IFwiXCI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IGI7XG4gICAgfTtcbiAgfVxuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIHJldHVybiB0aGlzLmVhY2goXCJlbmQudHJhbnNpdGlvblwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwO1xuICAgICAgaWYgKHRoaXNbbnNdLmNvdW50IDwgMiAmJiAocCA9IHRoaXMucGFyZW50Tm9kZSkpIHAucmVtb3ZlQ2hpbGQoXG4gICAgICAgIHRoaXMpO1xuICAgIH0pO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVhc2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsXG4gICAgICBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0uZWFzZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gZDMuZWFzZS5hcHBseShkMywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLmVhc2UgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCxcbiAgICAgIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kZWxheTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihcbiAgICAgIG5vZGUsIGksIGopIHtcbiAgICAgIG5vZGVbbnNdW2lkXS5kZWxheSA9ICt2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuICAgIH0gOiAodmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVbbnNdW2lkXS5kZWxheSA9IHZhbHVlO1xuICAgIH0pKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCxcbiAgICAgIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kdXJhdGlvbjtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihcbiAgICAgIG5vZGUsIGksIGopIHtcbiAgICAgIG5vZGVbbnNdW2lkXS5kdXJhdGlvbiA9IE1hdGgubWF4KDEsIHZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXyxcbiAgICAgICAgaSwgaikpO1xuICAgIH0gOiAodmFsdWUgPSBNYXRoLm1heCgxLCB2YWx1ZSksIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVbbnNdW2lkXS5kdXJhdGlvbiA9IHZhbHVlO1xuICAgIH0pKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLFxuICAgICAgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBpbmhlcml0ID0gZDNfdHJhbnNpdGlvbkluaGVyaXQsXG4gICAgICAgIGluaGVyaXRJZCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQ7XG4gICAgICB0cnkge1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaWQ7XG4gICAgICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcbiAgICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdCA9IG5vZGVbbnNdW2lkXTtcbiAgICAgICAgICB0eXBlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG4gICAgICAgIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXQgPSBpbmhlcml0O1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaW5oZXJpdElkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAodHJhbnNpdGlvbi5ldmVudCB8fCAodHJhbnNpdGlvbi5ldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIixcbiAgICAgICAgICBcImVuZFwiLCBcImludGVycnVwdFwiKSkpLm9uKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50cmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlkMCA9IHRoaXMuaWQsXG4gICAgICBpZDEgPSArK2QzX3RyYW5zaXRpb25JZCxcbiAgICAgIG5zID0gdGhpcy5uYW1lc3BhY2UsXG4gICAgICBzdWJncm91cHMgPSBbXSxcbiAgICAgIHN1Ymdyb3VwLCBncm91cCwgbm9kZSwgdHJhbnNpdGlvbjtcbiAgICBmb3IgKHZhciBqID0gMCwgbSA9IHRoaXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHRyYW5zaXRpb24gPSBub2RlW25zXVtpZDBdO1xuICAgICAgICAgIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZDEsIHtcbiAgICAgICAgICAgIHRpbWU6IHRyYW5zaXRpb24udGltZSxcbiAgICAgICAgICAgIGVhc2U6IHRyYW5zaXRpb24uZWFzZSxcbiAgICAgICAgICAgIGRlbGF5OiB0cmFuc2l0aW9uLmRlbGF5ICsgdHJhbnNpdGlvbi5kdXJhdGlvbixcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uLmR1cmF0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQxKTtcbiAgfTtcblxuICBmdW5jdGlvbiBkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZSA9PSBudWxsID8gXCJfX3RyYW5zaXRpb25fX1wiIDogXCJfX3RyYW5zaXRpb25fXCIgKyBuYW1lICsgXCJfX1wiO1xuICB9XG5cbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbk5vZGUobm9kZSwgaSwgbnMsIGlkLCBpbmhlcml0KSB7XG4gICAgdmFyIGxvY2sgPSBub2RlW25zXSB8fCAobm9kZVtuc10gPSB7XG4gICAgICAgIGFjdGl2ZTogMCxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH0pLFxuICAgICAgdHJhbnNpdGlvbiA9IGxvY2tbaWRdO1xuICAgIGlmICghdHJhbnNpdGlvbikge1xuICAgICAgdmFyIHRpbWUgPSBpbmhlcml0LnRpbWU7XG4gICAgICB0cmFuc2l0aW9uID0gbG9ja1tpZF0gPSB7XG4gICAgICAgIHR3ZWVuOiBuZXcgZDNfTWFwKCksXG4gICAgICAgIHRpbWU6IHRpbWUsXG4gICAgICAgIGRlbGF5OiBpbmhlcml0LmRlbGF5LFxuICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlLFxuICAgICAgICBpbmRleDogaVxuICAgICAgfTtcbiAgICAgIGluaGVyaXQgPSBudWxsO1xuICAgICAgKytsb2NrLmNvdW50O1xuICAgICAgZDMudGltZXIoZnVuY3Rpb24oZWxhcHNlZCkge1xuICAgICAgICB2YXIgZGVsYXkgPSB0cmFuc2l0aW9uLmRlbGF5LFxuICAgICAgICAgIGR1cmF0aW9uLCBlYXNlLCB0aW1lciA9IGQzX3RpbWVyX2FjdGl2ZSxcbiAgICAgICAgICB0d2VlbmVkID0gW107XG4gICAgICAgIHRpbWVyLnQgPSBkZWxheSArIHRpbWU7XG4gICAgICAgIGlmIChkZWxheSA8PSBlbGFwc2VkKSByZXR1cm4gc3RhcnQoZWxhcHNlZCAtIGRlbGF5KTtcbiAgICAgICAgdGltZXIuYyA9IHN0YXJ0O1xuXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICAgICAgICBpZiAobG9jay5hY3RpdmUgPiBpZCkgcmV0dXJuIHN0b3AoKTtcbiAgICAgICAgICB2YXIgYWN0aXZlID0gbG9ja1tsb2NrLmFjdGl2ZV07XG4gICAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgICAgLS1sb2NrLmNvdW50O1xuICAgICAgICAgICAgZGVsZXRlIGxvY2tbbG9jay5hY3RpdmVdO1xuICAgICAgICAgICAgYWN0aXZlLmV2ZW50ICYmIGFjdGl2ZS5ldmVudC5pbnRlcnJ1cHQuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLFxuICAgICAgICAgICAgICBhY3RpdmUuaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2NrLmFjdGl2ZSA9IGlkO1xuICAgICAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5zdGFydC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sXG4gICAgICAgICAgICBpKTtcbiAgICAgICAgICB0cmFuc2l0aW9uLnR3ZWVuLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID0gdmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKSkge1xuICAgICAgICAgICAgICB0d2VlbmVkLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVhc2UgPSB0cmFuc2l0aW9uLmVhc2U7XG4gICAgICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uLmR1cmF0aW9uO1xuICAgICAgICAgIGQzLnRpbWVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGltZXIuYyA9IHRpY2soZWxhcHNlZCB8fCAxKSA/IGQzX3RydWUgOiB0aWNrO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfSwgMCwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICAgICAgICBpZiAobG9jay5hY3RpdmUgIT09IGlkKSByZXR1cm4gMTtcbiAgICAgICAgICB2YXIgdCA9IGVsYXBzZWQgLyBkdXJhdGlvbixcbiAgICAgICAgICAgIGUgPSBlYXNlKHQpLFxuICAgICAgICAgICAgbiA9IHR3ZWVuZWQubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChuID4gMCkge1xuICAgICAgICAgICAgdHdlZW5lZFstLW5dLmNhbGwobm9kZSwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0ID49IDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5lbmQuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLFxuICAgICAgICAgICAgICBpKTtcbiAgICAgICAgICAgIHJldHVybiBzdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICBpZiAoLS1sb2NrLmNvdW50KSBkZWxldGUgbG9ja1tpZF07XG4gICAgICAgICAgZWxzZSBkZWxldGUgbm9kZVtuc107XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgIH0sIDAsIHRpbWUpO1xuICAgIH1cbiAgfVxuICBkMy5zdmcuYXhpcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpLFxuICAgICAgb3JpZW50ID0gZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50LFxuICAgICAgaW5uZXJUaWNrU2l6ZSA9IDYsXG4gICAgICBvdXRlclRpY2tTaXplID0gNixcbiAgICAgIHRpY2tQYWRkaW5nID0gMyxcbiAgICAgIHRpY2tBcmd1bWVudHNfID0gWzEwXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdF87XG5cbiAgICBmdW5jdGlvbiBheGlzKGcpIHtcbiAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGcgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgIHZhciBzY2FsZTAgPSB0aGlzLl9fY2hhcnRfXyB8fCBzY2FsZSxcbiAgICAgICAgICBzY2FsZTEgPSB0aGlzLl9fY2hhcnRfXyA9IHNjYWxlLmNvcHkoKTtcbiAgICAgICAgdmFyIHRpY2tzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gc2NhbGUxLnRpY2tzID8gc2NhbGUxLnRpY2tzLmFwcGx5KFxuICAgICAgICAgICAgc2NhbGUxLCB0aWNrQXJndW1lbnRzXykgOiBzY2FsZTEuZG9tYWluKCkgOiB0aWNrVmFsdWVzLFxuICAgICAgICAgIHRpY2tGb3JtYXQgPSB0aWNrRm9ybWF0XyA9PSBudWxsID8gc2NhbGUxLnRpY2tGb3JtYXQgP1xuICAgICAgICAgIHNjYWxlMS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDpcbiAgICAgICAgICBkM19pZGVudGl0eSA6IHRpY2tGb3JtYXRfLFxuICAgICAgICAgIHRpY2sgPSBnLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodGlja3MsIHNjYWxlMSksXG4gICAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmluc2VydChcImdcIiwgXCIuZG9tYWluXCIpLmF0dHIoXG4gICAgICAgICAgICBcImNsYXNzXCIsIFwidGlja1wiKS5zdHlsZShcIm9wYWNpdHlcIiwgzrUpLFxuICAgICAgICAgIHRpY2tFeGl0ID0gZDMudHJhbnNpdGlvbih0aWNrLmV4aXQoKSkuc3R5bGUoXCJvcGFjaXR5XCIsIM61KS5yZW1vdmUoKSxcbiAgICAgICAgICB0aWNrVXBkYXRlID0gZDMudHJhbnNpdGlvbih0aWNrLm9yZGVyKCkpLnN0eWxlKFwib3BhY2l0eVwiLCAxKSxcbiAgICAgICAgICB0aWNrU3BhY2luZyA9IE1hdGgubWF4KGlubmVyVGlja1NpemUsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgICAgdGlja1RyYW5zZm9ybTtcbiAgICAgICAgdmFyIHJhbmdlID0gZDNfc2NhbGVSYW5nZShzY2FsZTEpLFxuICAgICAgICAgIHBhdGggPSBnLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbMF0pLFxuICAgICAgICAgIHBhdGhVcGRhdGUgPSAocGF0aC5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsXG4gICAgICAgICAgICAgIFwiZG9tYWluXCIpLFxuICAgICAgICAgICAgZDMudHJhbnNpdGlvbihwYXRoKSk7XG4gICAgICAgIHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpO1xuICAgICAgICB0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKTtcbiAgICAgICAgdmFyIGxpbmVFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICAgIGxpbmVVcGRhdGUgPSB0aWNrVXBkYXRlLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKS50ZXh0KHRpY2tGb3JtYXQpLFxuICAgICAgICAgIHRleHRFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJ0ZXh0XCIpLFxuICAgICAgICAgIHRleHRVcGRhdGUgPSB0aWNrVXBkYXRlLnNlbGVjdChcInRleHRcIiksXG4gICAgICAgICAgc2lnbiA9IG9yaWVudCA9PT0gXCJ0b3BcIiB8fCBvcmllbnQgPT09IFwibGVmdFwiID8gLTEgOiAxLFxuICAgICAgICAgIHgxLCB4MiwgeTEsIHkyO1xuICAgICAgICBpZiAob3JpZW50ID09PSBcImJvdHRvbVwiIHx8IG9yaWVudCA9PT0gXCJ0b3BcIikge1xuICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1gsIHgxID0gXCJ4XCIsIHkxID0gXCJ5XCIsIHgyID0gXCJ4MlwiLFxuICAgICAgICAgICAgeTIgPSBcInkyXCI7XG4gICAgICAgICAgdGV4dC5hdHRyKFwiZHlcIiwgc2lnbiA8IDAgPyBcIjBlbVwiIDogXCIuNzFlbVwiKS5zdHlsZShcbiAgICAgICAgICAgIFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIik7XG4gICAgICAgICAgcGF0aFVwZGF0ZS5hdHRyKFwiZFwiLCBcIk1cIiArIHJhbmdlWzBdICsgXCIsXCIgKyBzaWduICpcbiAgICAgICAgICAgIG91dGVyVGlja1NpemUgKyBcIlYwSFwiICsgcmFuZ2VbMV0gKyBcIlZcIiArIHNpZ24gKlxuICAgICAgICAgICAgb3V0ZXJUaWNrU2l6ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGlja1RyYW5zZm9ybSA9IGQzX3N2Z19heGlzWSwgeDEgPSBcInlcIiwgeTEgPSBcInhcIiwgeDIgPSBcInkyXCIsXG4gICAgICAgICAgICB5MiA9IFwieDJcIjtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBcIi4zMmVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgc2lnbiA8IDAgP1xuICAgICAgICAgICAgXCJlbmRcIiA6IFwic3RhcnRcIik7XG4gICAgICAgICAgcGF0aFVwZGF0ZS5hdHRyKFwiZFwiLCBcIk1cIiArIHNpZ24gKiBvdXRlclRpY2tTaXplICsgXCIsXCIgK1xuICAgICAgICAgICAgcmFuZ2VbMF0gKyBcIkgwVlwiICsgcmFuZ2VbMV0gKyBcIkhcIiArIHNpZ24gKlxuICAgICAgICAgICAgb3V0ZXJUaWNrU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUVudGVyLmF0dHIoeTIsIHNpZ24gKiBpbm5lclRpY2tTaXplKTtcbiAgICAgICAgdGV4dEVudGVyLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGxpbmVVcGRhdGUuYXR0cih4MiwgMCkuYXR0cih5Miwgc2lnbiAqIGlubmVyVGlja1NpemUpO1xuICAgICAgICB0ZXh0VXBkYXRlLmF0dHIoeDEsIDApLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGlmIChzY2FsZTEucmFuZ2VCYW5kKSB7XG4gICAgICAgICAgdmFyIHggPSBzY2FsZTEsXG4gICAgICAgICAgICBkeCA9IHgucmFuZ2VCYW5kKCkgLyAyO1xuICAgICAgICAgIHNjYWxlMCA9IHNjYWxlMSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiB4KGQpICsgZHg7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChzY2FsZTAucmFuZ2VCYW5kKSB7XG4gICAgICAgICAgc2NhbGUwID0gc2NhbGUxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tFeGl0LmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUxLCBzY2FsZTApO1xuICAgICAgICB9XG4gICAgICAgIHRpY2tFbnRlci5jYWxsKHRpY2tUcmFuc2Zvcm0sIHNjYWxlMCwgc2NhbGUxKTtcbiAgICAgICAgdGlja1VwZGF0ZS5jYWxsKHRpY2tUcmFuc2Zvcm0sIHNjYWxlMSwgc2NhbGUxKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBheGlzLnNjYWxlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2NhbGU7XG4gICAgICBzY2FsZSA9IHg7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMub3JpZW50ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZW50O1xuICAgICAgb3JpZW50ID0geCBpbiBkM19zdmdfYXhpc09yaWVudHMgPyB4ICsgXCJcIiA6XG4gICAgICAgIGQzX3N2Z19heGlzRGVmYXVsdE9yaWVudDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja0FyZ3VtZW50c187XG4gICAgICB0aWNrQXJndW1lbnRzXyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja1ZhbHVlcztcbiAgICAgIHRpY2tWYWx1ZXMgPSB4O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrRm9ybWF0XztcbiAgICAgIHRpY2tGb3JtYXRfID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbikgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICBvdXRlclRpY2tTaXplID0gK2FyZ3VtZW50c1tuIC0gMV07XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMuaW5uZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMub3V0ZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dGVyVGlja1NpemU7XG4gICAgICBvdXRlclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrUGFkZGluZztcbiAgICAgIHRpY2tQYWRkaW5nID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1N1YmRpdmlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgYXhpcztcbiAgICB9O1xuICAgIHJldHVybiBheGlzO1xuICB9O1xuICB2YXIgZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50ID0gXCJib3R0b21cIixcbiAgICBkM19zdmdfYXhpc09yaWVudHMgPSB7XG4gICAgICB0b3A6IDEsXG4gICAgICByaWdodDogMSxcbiAgICAgIGJvdHRvbTogMSxcbiAgICAgIGxlZnQ6IDFcbiAgICB9O1xuXG4gIGZ1bmN0aW9uIGQzX3N2Z19heGlzWChzZWxlY3Rpb24sIHgwLCB4MSkge1xuICAgIHNlbGVjdGlvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciB2MCA9IHgwKGQpO1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKGlzRmluaXRlKHYwKSA/IHYwIDogeDEoZCkpICsgXCIsMClcIjtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGQzX3N2Z19heGlzWShzZWxlY3Rpb24sIHkwLCB5MSkge1xuICAgIHNlbGVjdGlvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciB2MCA9IHkwKGQpO1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoaXNGaW5pdGUodjApID8gdjAgOiB5MShkKSkgKyBcIilcIjtcbiAgICB9KTtcbiAgfVxuICBkMy5zdmcuYnJ1c2ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZlbnQgPSBkM19ldmVudERpc3BhdGNoKGJydXNoLCBcImJydXNoc3RhcnRcIiwgXCJicnVzaFwiLCBcImJydXNoZW5kXCIpLFxuICAgICAgeCA9IG51bGwsXG4gICAgICB5ID0gbnVsbCxcbiAgICAgIHhFeHRlbnQgPSBbMCwgMF0sXG4gICAgICB5RXh0ZW50ID0gWzAsIDBdLFxuICAgICAgeEV4dGVudERvbWFpbiwgeUV4dGVudERvbWFpbiwgeENsYW1wID0gdHJ1ZSxcbiAgICAgIHlDbGFtcCA9IHRydWUsXG4gICAgICByZXNpemVzID0gZDNfc3ZnX2JydXNoUmVzaXplc1swXTtcblxuICAgIGZ1bmN0aW9uIGJydXNoKGcpIHtcbiAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGcgPSBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5zdHlsZShcbiAgICAgICAgICBcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIikub24oXG4gICAgICAgICAgXCJtb3VzZWRvd24uYnJ1c2hcIiwgYnJ1c2hzdGFydCkub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsXG4gICAgICAgICAgYnJ1c2hzdGFydCk7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kID0gZy5zZWxlY3RBbGwoXCIuYmFja2dyb3VuZFwiKS5kYXRhKFswXSk7XG4gICAgICAgIGJhY2tncm91bmQuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImJhY2tncm91bmRcIilcbiAgICAgICAgICAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpLnN0eWxlKFwiY3Vyc29yXCIsIFwiY3Jvc3NoYWlyXCIpO1xuICAgICAgICBnLnNlbGVjdEFsbChcIi5leHRlbnRcIikuZGF0YShbMF0pLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFxuICAgICAgICAgIFwiY2xhc3NcIiwgXCJleHRlbnRcIikuc3R5bGUoXCJjdXJzb3JcIiwgXCJtb3ZlXCIpO1xuICAgICAgICB2YXIgcmVzaXplID0gZy5zZWxlY3RBbGwoXCIucmVzaXplXCIpLmRhdGEocmVzaXplcywgZDNfaWRlbnRpdHkpO1xuICAgICAgICByZXNpemUuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgICByZXNpemUuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIFwicmVzaXplIFwiICsgZDtcbiAgICAgICAgfSkuc3R5bGUoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkM19zdmdfYnJ1c2hDdXJzb3JbZF07XG4gICAgICAgIH0pLmFwcGVuZChcInJlY3RcIikuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiAvW2V3XSQvLnRlc3QoZCkgPyAtMyA6IG51bGw7XG4gICAgICAgIH0pLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gL15bbnNdLy50ZXN0KGQpID8gLTMgOiBudWxsO1xuICAgICAgICB9KS5hdHRyKFwid2lkdGhcIiwgNikuYXR0cihcImhlaWdodFwiLCA2KS5zdHlsZShcInZpc2liaWxpdHlcIixcbiAgICAgICAgICBcImhpZGRlblwiKTtcbiAgICAgICAgcmVzaXplLnN0eWxlKFwiZGlzcGxheVwiLCBicnVzaC5lbXB0eSgpID8gXCJub25lXCIgOiBudWxsKTtcbiAgICAgICAgdmFyIGdVcGRhdGUgPSBkMy50cmFuc2l0aW9uKGcpLFxuICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUgPSBkMy50cmFuc2l0aW9uKGJhY2tncm91bmQpLFxuICAgICAgICAgIHJhbmdlO1xuICAgICAgICBpZiAoeCkge1xuICAgICAgICAgIHJhbmdlID0gZDNfc2NhbGVSYW5nZSh4KTtcbiAgICAgICAgICBiYWNrZ3JvdW5kVXBkYXRlLmF0dHIoXCJ4XCIsIHJhbmdlWzBdKS5hdHRyKFwid2lkdGhcIiwgcmFuZ2VbMV0gLVxuICAgICAgICAgICAgcmFuZ2VbMF0pO1xuICAgICAgICAgIHJlZHJhd1goZ1VwZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkpIHtcbiAgICAgICAgICByYW5nZSA9IGQzX3NjYWxlUmFuZ2UoeSk7XG4gICAgICAgICAgYmFja2dyb3VuZFVwZGF0ZS5hdHRyKFwieVwiLCByYW5nZVswXSkuYXR0cihcImhlaWdodFwiLCByYW5nZVsxXSAtXG4gICAgICAgICAgICByYW5nZVswXSk7XG4gICAgICAgICAgcmVkcmF3WShnVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZWRyYXcoZ1VwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYnJ1c2guZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBldmVudF8gPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIGV4dGVudDEgPSB7XG4gICAgICAgICAgICB4OiB4RXh0ZW50LFxuICAgICAgICAgICAgeTogeUV4dGVudCxcbiAgICAgICAgICAgIGk6IHhFeHRlbnREb21haW4sXG4gICAgICAgICAgICBqOiB5RXh0ZW50RG9tYWluXG4gICAgICAgICAgfSxcbiAgICAgICAgICBleHRlbnQwID0gdGhpcy5fX2NoYXJ0X18gfHwgZXh0ZW50MTtcbiAgICAgICAgdGhpcy5fX2NoYXJ0X18gPSBleHRlbnQxO1xuICAgICAgICBpZiAoZDNfdHJhbnNpdGlvbkluaGVyaXRJZCkge1xuICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZWFjaChcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgeEV4dGVudERvbWFpbiA9IGV4dGVudDAuaTtcbiAgICAgICAgICAgIHlFeHRlbnREb21haW4gPSBleHRlbnQwLmo7XG4gICAgICAgICAgICB4RXh0ZW50ID0gZXh0ZW50MC54O1xuICAgICAgICAgICAgeUV4dGVudCA9IGV4dGVudDAueTtcbiAgICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KS50d2VlbihcImJydXNoOmJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHhpID0gZDNfaW50ZXJwb2xhdGVBcnJheSh4RXh0ZW50LCBleHRlbnQxLngpLFxuICAgICAgICAgICAgICB5aSA9IGQzX2ludGVycG9sYXRlQXJyYXkoeUV4dGVudCwgZXh0ZW50MS55KTtcbiAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSB5RXh0ZW50RG9tYWluID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHhFeHRlbnQgPSBleHRlbnQxLnggPSB4aSh0KTtcbiAgICAgICAgICAgICAgeUV4dGVudCA9IGV4dGVudDEueSA9IHlpKHQpO1xuICAgICAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcbiAgICAgICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KS5lYWNoKFwiZW5kLmJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgeEV4dGVudERvbWFpbiA9IGV4dGVudDEuaTtcbiAgICAgICAgICAgIHlFeHRlbnREb21haW4gPSBleHRlbnQxLmo7XG4gICAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICAgIG1vZGU6IFwicmVzaXplXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJicnVzaGVuZFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgdHlwZTogXCJicnVzaHN0YXJ0XCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuICAgICAgICAgICAgbW9kZTogXCJyZXNpemVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICB0eXBlOiBcImJydXNoZW5kXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlZHJhdyhnKSB7XG4gICAgICBnLnNlbGVjdEFsbChcIi5yZXNpemVcIikuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHhFeHRlbnRbKy9lJC8udGVzdChkKV0gKyBcIixcIiArIHlFeHRlbnRbK1xuICAgICAgICAgIC9ecy8udGVzdChkKV0gKyBcIilcIjtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZHJhd1goZykge1xuICAgICAgZy5zZWxlY3QoXCIuZXh0ZW50XCIpLmF0dHIoXCJ4XCIsIHhFeHRlbnRbMF0pO1xuICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50LC5uPnJlY3QsLnM+cmVjdFwiKS5hdHRyKFwid2lkdGhcIiwgeEV4dGVudFsxXSAtXG4gICAgICAgIHhFeHRlbnRbMF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZHJhd1koZykge1xuICAgICAgZy5zZWxlY3QoXCIuZXh0ZW50XCIpLmF0dHIoXCJ5XCIsIHlFeHRlbnRbMF0pO1xuICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50LC5lPnJlY3QsLnc+cmVjdFwiKS5hdHRyKFwiaGVpZ2h0XCIsIHlFeHRlbnRbMV0gLVxuICAgICAgICB5RXh0ZW50WzBdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBicnVzaHN0YXJ0KCkge1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMsXG4gICAgICAgIGV2ZW50VGFyZ2V0ID0gZDMuc2VsZWN0KGQzLmV2ZW50LnRhcmdldCksXG4gICAgICAgIGV2ZW50XyA9IGV2ZW50Lm9mKHRhcmdldCwgYXJndW1lbnRzKSxcbiAgICAgICAgZyA9IGQzLnNlbGVjdCh0YXJnZXQpLFxuICAgICAgICByZXNpemluZyA9IGV2ZW50VGFyZ2V0LmRhdHVtKCksXG4gICAgICAgIHJlc2l6aW5nWCA9ICEvXihufHMpJC8udGVzdChyZXNpemluZykgJiYgeCxcbiAgICAgICAgcmVzaXppbmdZID0gIS9eKGV8dykkLy50ZXN0KHJlc2l6aW5nKSAmJiB5LFxuICAgICAgICBkcmFnZ2luZyA9IGV2ZW50VGFyZ2V0LmNsYXNzZWQoXCJleHRlbnRcIiksXG4gICAgICAgIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKCksXG4gICAgICAgIGNlbnRlciwgb3JpZ2luID0gZDMubW91c2UodGFyZ2V0KSxcbiAgICAgICAgb2Zmc2V0O1xuICAgICAgdmFyIHcgPSBkMy5zZWxlY3QoZDNfd2luZG93KS5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bikub24oXG4gICAgICAgIFwia2V5dXAuYnJ1c2hcIiwga2V5dXApO1xuICAgICAgaWYgKGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIHcub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIGJydXNoZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHcub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcIm1vdXNldXAuYnJ1c2hcIiwgYnJ1c2hlbmQpO1xuICAgICAgfVxuICAgICAgZy5pbnRlcnJ1cHQoKS5zZWxlY3RBbGwoXCIqXCIpLmludGVycnVwdCgpO1xuICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbMF0gLSBvcmlnaW5bMF07XG4gICAgICAgIG9yaWdpblsxXSA9IHlFeHRlbnRbMF0gLSBvcmlnaW5bMV07XG4gICAgICB9IGVsc2UgaWYgKHJlc2l6aW5nKSB7XG4gICAgICAgIHZhciBleCA9ICsvdyQvLnRlc3QocmVzaXppbmcpLFxuICAgICAgICAgIGV5ID0gKy9ebi8udGVzdChyZXNpemluZyk7XG4gICAgICAgIG9mZnNldCA9IFt4RXh0ZW50WzEgLSBleF0gLSBvcmlnaW5bMF0sIHlFeHRlbnRbMSAtIGV5XSAtIG9yaWdpblsxXV07XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbZXhdO1xuICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50W2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZDMuZXZlbnQuYWx0S2V5KSBjZW50ZXIgPSBvcmlnaW4uc2xpY2UoKTtcbiAgICAgIGcuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIikuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5zdHlsZShcbiAgICAgICAgXCJkaXNwbGF5XCIsIG51bGwpO1xuICAgICAgZDMuc2VsZWN0KFwiYm9keVwiKS5zdHlsZShcImN1cnNvclwiLCBldmVudFRhcmdldC5zdHlsZShcImN1cnNvclwiKSk7XG4gICAgICBldmVudF8oe1xuICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuICAgICAgfSk7XG4gICAgICBicnVzaG1vdmUoKTtcblxuICAgICAgZnVuY3Rpb24ga2V5ZG93bigpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICAgICAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICAgICAgICBjZW50ZXIgPSBudWxsO1xuICAgICAgICAgICAgb3JpZ2luWzBdIC09IHhFeHRlbnRbMV07XG4gICAgICAgICAgICBvcmlnaW5bMV0gLT0geUV4dGVudFsxXTtcbiAgICAgICAgICAgIGRyYWdnaW5nID0gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGtleXVwKCkge1xuICAgICAgICBpZiAoZDMuZXZlbnQua2V5Q29kZSA9PSAzMiAmJiBkcmFnZ2luZyA9PSAyKSB7XG4gICAgICAgICAgb3JpZ2luWzBdICs9IHhFeHRlbnRbMV07XG4gICAgICAgICAgb3JpZ2luWzFdICs9IHlFeHRlbnRbMV07XG4gICAgICAgICAgZHJhZ2dpbmcgPSAwO1xuICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBicnVzaG1vdmUoKSB7XG4gICAgICAgIHZhciBwb2ludCA9IGQzLm1vdXNlKHRhcmdldCksXG4gICAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIHBvaW50WzBdICs9IG9mZnNldFswXTtcbiAgICAgICAgICBwb2ludFsxXSArPSBvZmZzZXRbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgICAgIGlmIChkMy5ldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgIGlmICghY2VudGVyKSBjZW50ZXIgPSBbKHhFeHRlbnRbMF0gKyB4RXh0ZW50WzFdKSAvIDIsIChcbiAgICAgICAgICAgICAgeUV4dGVudFswXSArIHlFeHRlbnRbMV0pIC8gMl07XG4gICAgICAgICAgICBvcmlnaW5bMF0gPSB4RXh0ZW50WysocG9pbnRbMF0gPCBjZW50ZXJbMF0pXTtcbiAgICAgICAgICAgIG9yaWdpblsxXSA9IHlFeHRlbnRbKyhwb2ludFsxXSA8IGNlbnRlclsxXSldO1xuICAgICAgICAgIH0gZWxzZSBjZW50ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNpemluZ1ggJiYgbW92ZTEocG9pbnQsIHgsIDApKSB7XG4gICAgICAgICAgcmVkcmF3WChnKTtcbiAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc2l6aW5nWSAmJiBtb3ZlMShwb2ludCwgeSwgMSkpIHtcbiAgICAgICAgICByZWRyYXdZKGcpO1xuICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW92ZWQpIHtcbiAgICAgICAgICByZWRyYXcoZyk7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcbiAgICAgICAgICAgIG1vZGU6IGRyYWdnaW5nID8gXCJtb3ZlXCIgOiBcInJlc2l6ZVwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbW92ZTEocG9pbnQsIHNjYWxlLCBpKSB7XG4gICAgICAgIHZhciByYW5nZSA9IGQzX3NjYWxlUmFuZ2Uoc2NhbGUpLFxuICAgICAgICAgIHIwID0gcmFuZ2VbMF0sXG4gICAgICAgICAgcjEgPSByYW5nZVsxXSxcbiAgICAgICAgICBwb3NpdGlvbiA9IG9yaWdpbltpXSxcbiAgICAgICAgICBleHRlbnQgPSBpID8geUV4dGVudCA6IHhFeHRlbnQsXG4gICAgICAgICAgc2l6ZSA9IGV4dGVudFsxXSAtIGV4dGVudFswXSxcbiAgICAgICAgICBtaW4sIG1heDtcbiAgICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgICAgcjAgLT0gcG9zaXRpb247XG4gICAgICAgICAgcjEgLT0gc2l6ZSArIHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIG1pbiA9IChpID8geUNsYW1wIDogeENsYW1wKSA/IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgcG9pbnRbaV0pKSA6XG4gICAgICAgICAgcG9pbnRbaV07XG4gICAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICAgIG1heCA9IChtaW4gKz0gcG9zaXRpb24pICsgc2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2VudGVyKSBwb3NpdGlvbiA9IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgMiAqIGNlbnRlcltpXSAtXG4gICAgICAgICAgICBtaW4pKTtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPCBtaW4pIHtcbiAgICAgICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgICAgIG1pbiA9IHBvc2l0aW9uO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXggPSBwb3NpdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dGVudFswXSAhPSBtaW4gfHwgZXh0ZW50WzFdICE9IG1heCkge1xuICAgICAgICAgIGlmIChpKSB5RXh0ZW50RG9tYWluID0gbnVsbDtcbiAgICAgICAgICBlbHNlIHhFeHRlbnREb21haW4gPSBudWxsO1xuICAgICAgICAgIGV4dGVudFswXSA9IG1pbjtcbiAgICAgICAgICBleHRlbnRbMV0gPSBtYXg7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnJ1c2hlbmQoKSB7XG4gICAgICAgIGJydXNobW92ZSgpO1xuICAgICAgICBnLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIikuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5zdHlsZShcbiAgICAgICAgICBcImRpc3BsYXlcIiwgYnJ1c2guZW1wdHkoKSA/IFwibm9uZVwiIDogbnVsbCk7XG4gICAgICAgIGQzLnNlbGVjdChcImJvZHlcIikuc3R5bGUoXCJjdXJzb3JcIiwgbnVsbCk7XG4gICAgICAgIHcub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbnVsbCkub24oXCJtb3VzZXVwLmJydXNoXCIsIG51bGwpLm9uKFxuICAgICAgICAgIFwidG91Y2htb3ZlLmJydXNoXCIsIG51bGwpLm9uKFwidG91Y2hlbmQuYnJ1c2hcIiwgbnVsbCkub24oXG4gICAgICAgICAgXCJrZXlkb3duLmJydXNoXCIsIG51bGwpLm9uKFwia2V5dXAuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICAgIGRyYWdSZXN0b3JlKCk7XG4gICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgdHlwZTogXCJicnVzaGVuZFwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBicnVzaC54ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcbiAgICAgIHggPSB6O1xuICAgICAgcmVzaXplcyA9IGQzX3N2Z19icnVzaFJlc2l6ZXNbIXggPDwgMSB8ICF5XTtcbiAgICAgIHJldHVybiBicnVzaDtcbiAgICB9O1xuICAgIGJydXNoLnkgPSBmdW5jdGlvbih6KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5O1xuICAgICAgeSA9IHo7XG4gICAgICByZXNpemVzID0gZDNfc3ZnX2JydXNoUmVzaXplc1sheCA8PCAxIHwgIXldO1xuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2guY2xhbXAgPSBmdW5jdGlvbih6KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4ICYmIHkgPyBbeENsYW1wLCB5Q2xhbXBdIDogeCA/XG4gICAgICAgIHhDbGFtcCA6IHkgPyB5Q2xhbXAgOiBudWxsO1xuICAgICAgaWYgKHggJiYgeSkgeENsYW1wID0gISF6WzBdLCB5Q2xhbXAgPSAhIXpbMV07XG4gICAgICBlbHNlIGlmICh4KSB4Q2xhbXAgPSAhIXo7XG4gICAgICBlbHNlIGlmICh5KSB5Q2xhbXAgPSAhIXo7XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbih6KSB7XG4gICAgICB2YXIgeDAsIHgxLCB5MCwgeTEsIHQ7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHgpIHtcbiAgICAgICAgICBpZiAoeEV4dGVudERvbWFpbikge1xuICAgICAgICAgICAgeDAgPSB4RXh0ZW50RG9tYWluWzBdLCB4MSA9IHhFeHRlbnREb21haW5bMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHgwID0geEV4dGVudFswXSwgeDEgPSB4RXh0ZW50WzFdO1xuICAgICAgICAgICAgaWYgKHguaW52ZXJ0KSB4MCA9IHguaW52ZXJ0KHgwKSwgeDEgPSB4LmludmVydCh4MSk7XG4gICAgICAgICAgICBpZiAoeDEgPCB4MCkgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh5KSB7XG4gICAgICAgICAgaWYgKHlFeHRlbnREb21haW4pIHtcbiAgICAgICAgICAgIHkwID0geUV4dGVudERvbWFpblswXSwgeTEgPSB5RXh0ZW50RG9tYWluWzFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB5MCA9IHlFeHRlbnRbMF0sIHkxID0geUV4dGVudFsxXTtcbiAgICAgICAgICAgIGlmICh5LmludmVydCkgeTAgPSB5LmludmVydCh5MCksIHkxID0geS5pbnZlcnQoeTEpO1xuICAgICAgICAgICAgaWYgKHkxIDwgeTApIHQgPSB5MCwgeTAgPSB5MSwgeTEgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCAmJiB5ID8gW1xuICAgICAgICAgIFt4MCwgeTBdLFxuICAgICAgICAgIFt4MSwgeTFdXG4gICAgICAgIF0gOiB4ID8gW3gwLCB4MV0gOiB5ICYmIFt5MCwgeTFdO1xuICAgICAgfVxuICAgICAgaWYgKHgpIHtcbiAgICAgICAgeDAgPSB6WzBdLCB4MSA9IHpbMV07XG4gICAgICAgIGlmICh5KSB4MCA9IHgwWzBdLCB4MSA9IHgxWzBdO1xuICAgICAgICB4RXh0ZW50RG9tYWluID0gW3gwLCB4MV07XG4gICAgICAgIGlmICh4LmludmVydCkgeDAgPSB4KHgwKSwgeDEgPSB4KHgxKTtcbiAgICAgICAgaWYgKHgxIDwgeDApIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICAgICAgICBpZiAoeDAgIT0geEV4dGVudFswXSB8fCB4MSAhPSB4RXh0ZW50WzFdKSB4RXh0ZW50ID0gW3gwLCB4MV07XG4gICAgICB9XG4gICAgICBpZiAoeSkge1xuICAgICAgICB5MCA9IHpbMF0sIHkxID0gelsxXTtcbiAgICAgICAgaWYgKHgpIHkwID0geTBbMV0sIHkxID0geTFbMV07XG4gICAgICAgIHlFeHRlbnREb21haW4gPSBbeTAsIHkxXTtcbiAgICAgICAgaWYgKHkuaW52ZXJ0KSB5MCA9IHkoeTApLCB5MSA9IHkoeTEpO1xuICAgICAgICBpZiAoeTEgPCB5MCkgdCA9IHkwLCB5MCA9IHkxLCB5MSA9IHQ7XG4gICAgICAgIGlmICh5MCAhPSB5RXh0ZW50WzBdIHx8IHkxICE9IHlFeHRlbnRbMV0pIHlFeHRlbnQgPSBbeTAsIHkxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBicnVzaDtcbiAgICB9O1xuICAgIGJydXNoLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWJydXNoLmVtcHR5KCkpIHtcbiAgICAgICAgeEV4dGVudCA9IFswLCAwXSwgeUV4dGVudCA9IFswLCAwXTtcbiAgICAgICAgeEV4dGVudERvbWFpbiA9IHlFeHRlbnREb21haW4gPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2guZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhIXggJiYgeEV4dGVudFswXSA9PSB4RXh0ZW50WzFdIHx8ICEheSAmJiB5RXh0ZW50WzBdID09XG4gICAgICAgIHlFeHRlbnRbMV07XG4gICAgfTtcbiAgICByZXR1cm4gZDMucmViaW5kKGJydXNoLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgdmFyIGQzX3N2Z19icnVzaEN1cnNvciA9IHtcbiAgICBuOiBcIm5zLXJlc2l6ZVwiLFxuICAgIGU6IFwiZXctcmVzaXplXCIsXG4gICAgczogXCJucy1yZXNpemVcIixcbiAgICB3OiBcImV3LXJlc2l6ZVwiLFxuICAgIG53OiBcIm53c2UtcmVzaXplXCIsXG4gICAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICAgIHN3OiBcIm5lc3ctcmVzaXplXCJcbiAgfTtcbiAgdmFyIGQzX3N2Z19icnVzaFJlc2l6ZXMgPSBbXG4gICAgW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLFxuICAgIFtcImVcIiwgXCJ3XCJdLFxuICAgIFtcIm5cIiwgXCJzXCJdLFxuICAgIFtdXG4gIF07XG4gIHZhciBkM190aW1lX2Zvcm1hdCA9IGQzX3RpbWUuZm9ybWF0ID0gZDNfbG9jYWxlX2VuVVMudGltZUZvcm1hdDtcbiAgdmFyIGQzX3RpbWVfZm9ybWF0VXRjID0gZDNfdGltZV9mb3JtYXQudXRjO1xuICB2YXIgZDNfdGltZV9mb3JtYXRJc28gPSBkM190aW1lX2Zvcm1hdFV0YyhcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiKTtcbiAgZDNfdGltZV9mb3JtYXQuaXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgK25ldyBEYXRlKFxuICAgICAgXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIikgPyBkM190aW1lX2Zvcm1hdElzb05hdGl2ZSA6XG4gICAgZDNfdGltZV9mb3JtYXRJc287XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgZDNfdGltZV9mb3JtYXRJc29OYXRpdmUucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG4gIH07XG4gIGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlLnRvU3RyaW5nID0gZDNfdGltZV9mb3JtYXRJc28udG9TdHJpbmc7XG4gIGQzX3RpbWUuc2Vjb25kID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDFlMykgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpO1xuICB9KTtcbiAgZDNfdGltZS5zZWNvbmRzID0gZDNfdGltZS5zZWNvbmQucmFuZ2U7XG4gIGQzX3RpbWUuc2Vjb25kcy51dGMgPSBkM190aW1lLnNlY29uZC51dGMucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDZlNCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xuICB9KTtcbiAgZDNfdGltZS5taW51dGVzID0gZDNfdGltZS5taW51dGUucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlcy51dGMgPSBkM190aW1lLm1pbnV0ZS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuaG91ciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB0aW1lem9uZSA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwO1xuICAgIHJldHVybiBuZXcgZDNfZGF0ZSgoTWF0aC5mbG9vcihkYXRlIC8gMzZlNSAtIHRpbWV6b25lKSArIHRpbWV6b25lKSAqXG4gICAgICAzNmU1KTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG4gICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihvZmZzZXQpICogMzZlNSk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xuICB9KTtcbiAgZDNfdGltZS5ob3VycyA9IGQzX3RpbWUuaG91ci5yYW5nZTtcbiAgZDNfdGltZS5ob3Vycy51dGMgPSBkM190aW1lLmhvdXIudXRjLnJhbmdlO1xuICBkM190aW1lLm1vbnRoID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZSA9IGQzX3RpbWUuZGF5KGRhdGUpO1xuICAgIGRhdGUuc2V0RGF0ZSgxKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG4gICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBvZmZzZXQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbiAgfSk7XG4gIGQzX3RpbWUubW9udGhzID0gZDNfdGltZS5tb250aC5yYW5nZTtcbiAgZDNfdGltZS5tb250aHMudXRjID0gZDNfdGltZS5tb250aC51dGMucmFuZ2U7XG5cbiAgZnVuY3Rpb24gZDNfdGltZV9zY2FsZShsaW5lYXIsIG1ldGhvZHMsIGZvcm1hdCkge1xuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIoeCk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlRGF0ZShsaW5lYXIuaW52ZXJ0KHgpKTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmVhci5kb21haW4oKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuICAgICAgbGluZWFyLmRvbWFpbih4KTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdGlja01ldGhvZChleHRlbnQsIGNvdW50KSB7XG4gICAgICB2YXIgc3BhbiA9IGV4dGVudFsxXSAtIGV4dGVudFswXSxcbiAgICAgICAgdGFyZ2V0ID0gc3BhbiAvIGNvdW50LFxuICAgICAgICBpID0gZDMuYmlzZWN0KGQzX3RpbWVfc2NhbGVTdGVwcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiBpID09IGQzX3RpbWVfc2NhbGVTdGVwcy5sZW5ndGggPyBbbWV0aG9kcy55ZWFyLFxuICAgICAgICBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZXh0ZW50Lm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQgLyAzMTUzNmU2O1xuICAgICAgICB9KSwgY291bnQpWzJdXG4gICAgICBdIDogIWkgPyBbZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcywgZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKFxuICAgICAgICBleHRlbnQsIGNvdW50KVsyXV0gOiBtZXRob2RzW3RhcmdldCAvIGQzX3RpbWVfc2NhbGVTdGVwc1tpIC0gMV0gPFxuICAgICAgICBkM190aW1lX3NjYWxlU3RlcHNbaV0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgIH1cbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHNraXApIHtcbiAgICAgIHZhciBkb21haW4gPSBzY2FsZS5kb21haW4oKSxcbiAgICAgICAgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSxcbiAgICAgICAgbWV0aG9kID0gaW50ZXJ2YWwgPT0gbnVsbCA/IHRpY2tNZXRob2QoZXh0ZW50LCAxMCkgOiB0eXBlb2YgaW50ZXJ2YWwgPT09XG4gICAgICAgIFwibnVtYmVyXCIgJiYgdGlja01ldGhvZChleHRlbnQsIGludGVydmFsKTtcbiAgICAgIGlmIChtZXRob2QpIGludGVydmFsID0gbWV0aG9kWzBdLCBza2lwID0gbWV0aG9kWzFdO1xuXG4gICAgICBmdW5jdGlvbiBza2lwcGVkKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihkYXRlKSAmJiAhaW50ZXJ2YWwucmFuZ2UoZGF0ZSwgZDNfdGltZV9zY2FsZURhdGUoK1xuICAgICAgICAgIGRhdGUgKyAxKSwgc2tpcCkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9uaWNlKGRvbWFpbiwgc2tpcCA+IDEgPyB7XG4gICAgICAgIGZsb29yOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgd2hpbGUgKHNraXBwZWQoZGF0ZSA9IGludGVydmFsLmZsb29yKGRhdGUpKSkgZGF0ZSA9XG4gICAgICAgICAgICBkM190aW1lX3NjYWxlRGF0ZShkYXRlIC0gMSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGNlaWw6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB3aGlsZSAoc2tpcHBlZChkYXRlID0gaW50ZXJ2YWwuY2VpbChkYXRlKSkpIGRhdGUgPVxuICAgICAgICAgICAgZDNfdGltZV9zY2FsZURhdGUoK2RhdGUgKyAxKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSA6IGludGVydmFsKSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG4gICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoc2NhbGUuZG9tYWluKCkpLFxuICAgICAgICBtZXRob2QgPSBpbnRlcnZhbCA9PSBudWxsID8gdGlja01ldGhvZChleHRlbnQsIDEwKSA6IHR5cGVvZiBpbnRlcnZhbCA9PT1cbiAgICAgICAgXCJudW1iZXJcIiA/IHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCkgOiAhaW50ZXJ2YWwucmFuZ2UgJiYgW3tcbiAgICAgICAgICByYW5nZTogaW50ZXJ2YWxcbiAgICAgICAgfSwgc2tpcF07XG4gICAgICBpZiAobWV0aG9kKSBpbnRlcnZhbCA9IG1ldGhvZFswXSwgc2tpcCA9IG1ldGhvZFsxXTtcbiAgICAgIHJldHVybiBpbnRlcnZhbC5yYW5nZShleHRlbnRbMF0sIGQzX3RpbWVfc2NhbGVEYXRlKCtleHRlbnRbMV0gKyAxKSxcbiAgICAgICAgc2tpcCA8IDEgPyAxIDogc2tpcCk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUobGluZWFyLmNvcHkoKSwgbWV0aG9kcywgZm9ybWF0KTtcbiAgICB9O1xuICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcik7XG4gIH1cblxuICBmdW5jdGlvbiBkM190aW1lX3NjYWxlRGF0ZSh0KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHQpO1xuICB9XG4gIHZhciBkM190aW1lX3NjYWxlU3RlcHMgPSBbMWUzLCA1ZTMsIDE1ZTMsIDNlNCwgNmU0LCAzZTUsIDllNSwgMThlNSwgMzZlNSxcbiAgICAxMDhlNSwgMjE2ZTUsIDQzMmU1LCA4NjRlNSwgMTcyOGU1LCA2MDQ4ZTUsIDI1OTJlNiwgNzc3NmU2LCAzMTUzNmU2XG4gIF07XG4gIHZhciBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzID0gW1xuICAgIFtkM190aW1lLnNlY29uZCwgMV0sXG4gICAgW2QzX3RpbWUuc2Vjb25kLCA1XSxcbiAgICBbZDNfdGltZS5zZWNvbmQsIDE1XSxcbiAgICBbZDNfdGltZS5zZWNvbmQsIDMwXSxcbiAgICBbZDNfdGltZS5taW51dGUsIDFdLFxuICAgIFtkM190aW1lLm1pbnV0ZSwgNV0sXG4gICAgW2QzX3RpbWUubWludXRlLCAxNV0sXG4gICAgW2QzX3RpbWUubWludXRlLCAzMF0sXG4gICAgW2QzX3RpbWUuaG91ciwgMV0sXG4gICAgW2QzX3RpbWUuaG91ciwgM10sXG4gICAgW2QzX3RpbWUuaG91ciwgNl0sXG4gICAgW2QzX3RpbWUuaG91ciwgMTJdLFxuICAgIFtkM190aW1lLmRheSwgMV0sXG4gICAgW2QzX3RpbWUuZGF5LCAyXSxcbiAgICBbZDNfdGltZS53ZWVrLCAxXSxcbiAgICBbZDNfdGltZS5tb250aCwgMV0sXG4gICAgW2QzX3RpbWUubW9udGgsIDNdLFxuICAgIFtkM190aW1lLnllYXIsIDFdXG4gIF07XG4gIHZhciBkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQgPSBkM190aW1lX2Zvcm1hdC5tdWx0aShbXG4gICAgW1wiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLmdldE1pbGxpc2Vjb25kcygpO1xuICAgIH1dLFxuICAgIFtcIjolU1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC5nZXRTZWNvbmRzKCk7XG4gICAgfV0sXG4gICAgW1wiJUk6JU1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQuZ2V0TWludXRlcygpO1xuICAgIH1dLFxuICAgIFtcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLmdldEhvdXJzKCk7XG4gICAgfV0sXG4gICAgW1wiJWEgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQuZ2V0RGF5KCkgJiYgZC5nZXREYXRlKCkgIT0gMTtcbiAgICB9XSxcbiAgICBbXCIlYiAlZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC5nZXREYXRlKCkgIT0gMTtcbiAgICB9XSxcbiAgICBbXCIlQlwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC5nZXRNb250aCgpO1xuICAgIH1dLFxuICAgIFtcIiVZXCIsIGQzX3RydWVdXG4gIF0pO1xuICB2YXIgZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcyA9IHtcbiAgICByYW5nZTogZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKSAqIHN0ZXAsICtzdG9wLCBzdGVwKS5tYXAoXG4gICAgICAgIGQzX3RpbWVfc2NhbGVEYXRlKTtcbiAgICB9LFxuICAgIGZsb29yOiBkM19pZGVudGl0eSxcbiAgICBjZWlsOiBkM19pZGVudGl0eVxuICB9O1xuICBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLnllYXIgPSBkM190aW1lLnllYXI7XG4gIGQzX3RpbWUuc2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfdGltZV9zY2FsZShkMy5zY2FsZS5saW5lYXIoKSwgZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcyxcbiAgICAgIGQzX3RpbWVfc2NhbGVMb2NhbEZvcm1hdCk7XG4gIH07XG4gIHZhciBkM190aW1lX3NjYWxlVXRjTWV0aG9kcyA9IGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMubWFwKGZ1bmN0aW9uKG0pIHtcbiAgICByZXR1cm4gW21bMF0udXRjLCBtWzFdXTtcbiAgfSk7XG4gIHZhciBkM190aW1lX3NjYWxlVXRjRm9ybWF0ID0gZDNfdGltZV9mb3JtYXRVdGMubXVsdGkoW1xuICAgIFtcIi4lTFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB9XSxcbiAgICBbXCI6JVNcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQuZ2V0VVRDU2Vjb25kcygpO1xuICAgIH1dLFxuICAgIFtcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLmdldFVUQ01pbnV0ZXMoKTtcbiAgICB9XSxcbiAgICBbXCIlSSAlcFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC5nZXRVVENIb3VycygpO1xuICAgIH1dLFxuICAgIFtcIiVhICVkXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLmdldFVUQ0RheSgpICYmIGQuZ2V0VVRDRGF0ZSgpICE9IDE7XG4gICAgfV0sXG4gICAgW1wiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQuZ2V0VVRDRGF0ZSgpICE9IDE7XG4gICAgfV0sXG4gICAgW1wiJUJcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQuZ2V0VVRDTW9udGgoKTtcbiAgICB9XSxcbiAgICBbXCIlWVwiLCBkM190cnVlXVxuICBdKTtcbiAgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMueWVhciA9IGQzX3RpbWUueWVhci51dGM7XG4gIGQzX3RpbWUuc2NhbGUudXRjID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUoZDMuc2NhbGUubGluZWFyKCksIGQzX3RpbWVfc2NhbGVVdGNNZXRob2RzLFxuICAgICAgZDNfdGltZV9zY2FsZVV0Y0Zvcm1hdCk7XG4gIH07XG4gIGQzLnRleHQgPSBkM194aHJUeXBlKGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gcmVxdWVzdC5yZXNwb25zZVRleHQ7XG4gIH0pO1xuICBkMy5qc29uID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBkM194aHIodXJsLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgZDNfanNvbiwgY2FsbGJhY2spO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGQzX2pzb24ocmVxdWVzdCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgfVxuICBkMy5odG1sID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBkM194aHIodXJsLCBcInRleHQvaHRtbFwiLCBkM19odG1sLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZDNfaHRtbChyZXF1ZXN0KSB7XG4gICAgdmFyIHJhbmdlID0gZDNfZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZWxlY3ROb2RlKGQzX2RvY3VtZW50LmJvZHkpO1xuICAgIHJldHVybiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICB9XG4gIGQzLnhtbCA9IGQzX3hoclR5cGUoZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlWE1MO1xuICB9KTtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZDMpO1xuICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9XG4gICAgZDM7XG4gIHRoaXMuZDMgPSBkMztcblxuICByZXR1cm4gZDM7XG4gIC8qZXNsaW50LWRpc2FibGUgKi9cbn07XG4iLCIvKmVzbGludCBjYW1lbGNhc2U6IDAqL1xuXG4vKipcbiAqIEBhdXRob3IgTWljaGFlbCBNY0Rlcm1vdHRcbiAqIENyZWF0ZWQgb24gNy8yMC8xNS5cbiAqL1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2NsdXN0ZXJncmFtJylcbiAgLmZhY3RvcnkoJ2QzQ2x1c3QnLCBkM0NsdXN0KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkM0NsdXN0KGQzLCBsb2Rhc2gpIHtcblxuICAvKiBkM19jbHVzdGVyZ3JhbSAxLjBcbiAgICogTmljayBGZXJuYW5kZXosIE1hJ2F5YW4gTGFiLCBJY2FobiBTY2hvb2wgb2YgTWVkaWNpbmUgYXQgTW91bnQgU2luYWlcbiAgICogKGMpIDIwMTVcbiAgICovXG4gIGZ1bmN0aW9uIGQzX2NsdXN0ZXJncmFtKGFyZ3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKiBVdGlsaXR5IGZ1bmN0aW9uc1xuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgdmFyIFV0aWxzID0ge1xuXG4gICAgICAvKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdCBoYXMgYSBjZXJ0YWluIHByb3BlcnR5LlxuICAgICAgICovXG4gICAgICBoYXM6IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgICAgIH0sXG5cbiAgICAgIC8qIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIHVuZGVmaW5lZC5cbiAgICAgICAqL1xuICAgICAgaXNfdW5kZWZpbmVkOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICAgICAgfSxcblxuICAgICAgLyogTWl4ZXMgdHdvIG9iamVjdHMgaW4gdG9nZXRoZXIsIG92ZXJ3cml0aW5nIGEgdGFyZ2V0IHdpdGggYSBzb3VyY2UuXG4gICAgICAgKi9cbiAgICAgIGV4dGVuZDogZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlW3Byb3BdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdGhpcy5leHRlbmQodGFyZ2V0W3Byb3BdLCBzb3VyY2VbcHJvcF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbmZpZyhhcmdzKSB7XG5cbiAgICAgIHZhciBjb25maWcsXG4gICAgICAgIGRlZmF1bHRzO1xuXG4gICAgICBkZWZhdWx0cyA9IHtcblxuICAgICAgICAvLyBMYWJlbCBvcHRpb25zXG4gICAgICAgIHJvd19sYWJlbF9zY2FsZTogMSxcbiAgICAgICAgY29sX2xhYmVsX3NjYWxlOiAxLFxuICAgICAgICBzdXBlcl9sYWJlbHM6IGZhbHNlLFxuICAgICAgICBzaG93X3Rvb2x0aXBzOiBmYWxzZSxcblxuICAgICAgICAvLyBtYXRyaXggb3B0aW9uc1xuICAgICAgICB0cmFuc3Bvc2U6IGZhbHNlLFxuICAgICAgICB0aWxlX2NvbG9yczogWycjRkYwMDAwJywgJyMxQzg2RUUnXSxcbiAgICAgICAgYmFyX2NvbG9yczogWycjRkYwMDAwJywgJyMxQzg2RUUnXSxcbiAgICAgICAgb3V0bGluZV9jb2xvcnM6IFsnb3JhbmdlJywgJ2JsYWNrJ10sXG4gICAgICAgIGhpZ2hsaWdodF9jb2xvcjogJyNGRkZGMDAnLFxuICAgICAgICB0aWxlX3RpdGxlOiBmYWxzZSxcbiAgICAgICAgLy8gRGVmYXVsdCBkb21haW4gaXMgc2V0IHRvIDAsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGRvbWFpbiB3aWxsIGJlIHNldCBhdXRvbWF0aWNhbGx5XG4gICAgICAgIGlucHV0X2RvbWFpbjogMCxcbiAgICAgICAgb3BhY2l0eV9zY2FsZTogJ2xpbmVhcicsXG5cbiAgICAgICAgLy8gVml6IE9wdGlvbnNcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgYSBET00gZWxlbWVudCwgbm90IGEgc2VsZWN0b3IuXG4gICAgICAgIHN2Z19kaXZfaWQ6ICdzdmdfaWQnLFxuICAgICAgICBkb196b29tOiB0cnVlLFxuICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAnI0ZGRkZGRicsXG4gICAgICAgIHN1cGVyX2JvcmRlcl9jb2xvcjogJyNGNUY1RjUnLFxuICAgICAgICByZXNpemU6IHRydWUsXG4gICAgICAgIG91dGVyX21hcmdpbnM6IHtcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgb3V0ZXJfbWFyZ2luc19leHBhbmQ6IHtcbiAgICAgICAgICB0b3A6IC02NjYsXG4gICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgaW5pX2V4cGFuZDogZmFsc2UsXG4gICAgICAgIC8vIEdyYXkgYm9yZGVyIGFyb3VuZCB0aGUgdmlzdWFsaXphdGlvblxuICAgICAgICBncmV5X2JvcmRlcl93aWR0aDogMyxcbiAgICAgICAgLy8gdGhlIGRpc3RhbmNlIGJldHdlZW4gbGFiZWxzIGFuZCBjbHVzdGVyZ3JhbVxuICAgICAgICAvLyBhIHVuaXZlcnNhbCBtYXJnaW4gZm9yIHRoZSBjbHVzdGVyZ3JhbVxuICAgICAgICB1bmlfbWFyZ2luOiA0LFxuICAgICAgICAvLyBmb3JjZSB0aGUgdmlzdWFsaXphdGlvbiB0byBiZSBzcXVhcmVcbiAgICAgICAgZm9yY2Vfc3F1YXJlOiAwLFxuICAgICAgICB0aWxlX2NsaWNrX2hsaWdodDogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIC8vIE1peGluIGRlZmF1bHRzIHdpdGggdXNlci1kZWZpbmVkIGFyZ3VtZW50cy5cbiAgICAgIGNvbmZpZyA9IFV0aWxzLmV4dGVuZChkZWZhdWx0cywgYXJncyk7XG5cbiAgICAgIGlmIChjb25maWcub3V0ZXJfbWFyZ2luc19leHBhbmQudG9wID09PSAtNjY2KSB7XG4gICAgICAgIGNvbmZpZy5leHBhbmRfYnV0dG9uID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuZXhwYW5kX2J1dHRvbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHNhdmUgbmV0d29ya19kYXRhIHRvIGNvbmZpZ1xuICAgICAgLy8gZXh0ZW5kIGRvZXMgbm90IHByb3Blcmx5IHBhc3MgbmV0d29ya19kYXRhXG4gICAgICBjb25maWcubmV0d29ya19kYXRhID0gYXJncy5uZXR3b3JrX2RhdGE7XG5cbiAgICAgIC8vIHRyYW5zcG9zZSBuZXR3b3JrIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKGNvbmZpZy50cmFuc3Bvc2UpIHtcbiAgICAgICAgY29uZmlnLm5ldHdvcmtfZGF0YSA9IHRyYW5zcG9zZV9uZXR3b3JrKGFyZ3MubmV0d29ya19kYXRhKTtcbiAgICAgICAgdmFyIHRtcF9jb2xfbGFiZWwgPSBhcmdzLmNvbF9sYWJlbDtcbiAgICAgICAgdmFyIHRtcF9yb3dfbGFiZWwgPSBhcmdzLnJvd19sYWJlbDtcbiAgICAgICAgYXJncy5yb3dfbGFiZWwgPSB0bXBfY29sX2xhYmVsO1xuICAgICAgICBhcmdzLmNvbF9sYWJlbCA9IHRtcF9yb3dfbGFiZWw7XG4gICAgICB9XG5cbiAgICAgIC8vIHN1cGVyLXJvdy9jb2wgbGFiZWxzXG4gICAgICBpZiAoIVV0aWxzLmlzX3VuZGVmaW5lZChhcmdzLnJvd19sYWJlbCkgJiYgIVV0aWxzLmlzX3VuZGVmaW5lZChhcmdzLmNvbF9sYWJlbCkpIHtcbiAgICAgICAgY29uZmlnLnN1cGVyX2xhYmVscyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5zdXBlciA9IHt9O1xuICAgICAgICBjb25maWcuc3VwZXIucm93ID0gYXJncy5yb3dfbGFiZWw7XG4gICAgICAgIGNvbmZpZy5zdXBlci5jb2wgPSBhcmdzLmNvbF9sYWJlbDtcbiAgICAgIH1cblxuICAgICAgLy8gaW5pdGlhbGl6ZSBjbHVzdGVyIG9yZGVyaW5nXG4gICAgICBpZiAoIVV0aWxzLmlzX3VuZGVmaW5lZChhcmdzLm9yZGVyKSAmJiBpc19zdXBwb3J0ZWRfb3JkZXIoYXJncy5vcmRlcikpIHtcbiAgICAgICAgY29uZmlnLmluc3Rfb3JkZXIgPSBhcmdzLm9yZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLmluc3Rfb3JkZXIgPSAnY2x1c3QnO1xuICAgICAgfVxuXG4gICAgICBjb25maWcuc2hvd19kZW5kcm9ncmFtID0gVXRpbHMuaGFzKGFyZ3MubmV0d29ya19kYXRhLnJvd19ub2Rlc1swXSwgJ2dyb3VwJykgfHwgVXRpbHMuaGFzKGFyZ3MubmV0d29ya19kYXRhLmNvbF9ub2Rlc1swXSwgJ2dyb3VwJyk7XG4gICAgICBjb25maWcuc2hvd19jYXRlZ29yaWVzID0gVXRpbHMuaGFzKGFyZ3MubmV0d29ya19kYXRhLnJvd19ub2Rlc1swXSwgJ2NsJykgfHwgVXRpbHMuaGFzKGFyZ3MubmV0d29ya19kYXRhLmNvbF9ub2Rlc1swXSwgJ2NsJyk7XG5cblxuICAgICAgLy8gY2hlY2sgZm9yIGNhdGVnb3J5IGluZm9ybWF0aW9uXG4gICAgICBpZiAoY29uZmlnLnNob3dfY2F0ZWdvcmllcykge1xuXG4gICAgICAgIC8vICEhIHNldCB1cCBvcHRpb24gZm9yIG1hbnVhbCBjb2xvciBzcGVjaWZpY2F0aW9uXG4gICAgICAgIGNvbmZpZy5jbGFzc19jb2xvcnMgPSB7fTtcblxuICAgICAgICAvLyBhc3NvY2lhdGUgY2xhc3NlcyB3aXRoIGNvbG9yc1xuICAgICAgICB2YXIgY2xhc3Nfcm93cyA9IGxvZGFzaC51bmlxKGxvZGFzaC5wbHVjayhhcmdzLm5ldHdvcmtfZGF0YS5yb3dfbm9kZXMsICdjbCcpKTtcbiAgICAgICAgY29uZmlnLmNsYXNzX2NvbG9ycy5yb3cgPSB7fTtcbiAgICAgICAgbG9kYXNoLmVhY2goY2xhc3Nfcm93cywgZnVuY3Rpb24oY19yb3csIGkpIHtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgY29uZmlnLmNsYXNzX2NvbG9ycy5yb3dbY19yb3ddID0gJyNlZWUnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuY2xhc3NfY29sb3JzLnJvd1tjX3Jvd10gPSBDb2xvcnMuZ2V0X3JhbmRvbV9jb2xvcihpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFzc29jaWF0ZSBjbGFzc2VzIHdpdGggY29sb3JzXG4gICAgICAgIHZhciBjbGFzc19jb2xzID0gbG9kYXNoLnVuaXEobG9kYXNoLnBsdWNrKGFyZ3MubmV0d29ya19kYXRhLmNvbF9ub2RlcywgJ2NsJykpO1xuICAgICAgICBjb25maWcuY2xhc3NfY29sb3JzLmNvbCA9IHt9O1xuICAgICAgICBsb2Rhc2guZWFjaChjbGFzc19jb2xzLCBmdW5jdGlvbihjX2NvbCwgaSkge1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBjb25maWcuY2xhc3NfY29sb3JzLmNvbFtjX2NvbF0gPSAnI2VlZSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5jbGFzc19jb2xvcnMuY29sW2NfY29sXSA9IENvbG9ycy5nZXRfcmFuZG9tX2NvbG9yKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qIFRyYW5zcG9zZSBuZXR3b3JrLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB0cmFuc3Bvc2VfbmV0d29yayhuZXQpIHtcbiAgICAgICAgdmFyIHRuZXQgPSB7fSxcbiAgICAgICAgICBpbnN0X2xpbmssXG4gICAgICAgICAgaTtcblxuICAgICAgICB0bmV0LnJvd19ub2RlcyA9IG5ldC5jb2xfbm9kZXM7XG4gICAgICAgIHRuZXQuY29sX25vZGVzID0gbmV0LnJvd19ub2RlcztcbiAgICAgICAgdG5ldC5saW5rcyA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXQubGlua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpbnN0X2xpbmsgPSB7fTtcbiAgICAgICAgICBpbnN0X2xpbmsuc291cmNlID0gbmV0LmxpbmtzW2ldLnRhcmdldDtcbiAgICAgICAgICBpbnN0X2xpbmsudGFyZ2V0ID0gbmV0LmxpbmtzW2ldLnNvdXJjZTtcbiAgICAgICAgICBpbnN0X2xpbmsudmFsdWUgPSBuZXQubGlua3NbaV0udmFsdWU7XG5cbiAgICAgICAgICAvLyBPcHRpb25hbCBoaWdobGlnaHQuXG4gICAgICAgICAgaWYgKFV0aWxzLmhhcyhuZXQubGlua3NbaV0sICdoaWdobGlnaHQnKSkge1xuICAgICAgICAgICAgaW5zdF9saW5rLmhpZ2hsaWdodCA9IG5ldC5saW5rc1tpXS5oaWdobGlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChVdGlscy5oYXMobmV0LmxpbmtzW2ldLCAndmFsdWVfdXAnKSkge1xuICAgICAgICAgICAgaW5zdF9saW5rLnZhbHVlX3VwID0gbmV0LmxpbmtzW2ldLnZhbHVlX3VwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoVXRpbHMuaGFzKG5ldC5saW5rc1tpXSwgJ3ZhbHVlX2RuJykpIHtcbiAgICAgICAgICAgIGluc3RfbGluay52YWx1ZV9kbiA9IG5ldC5saW5rc1tpXS52YWx1ZV9kbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFV0aWxzLmhhcyhuZXQubGlua3NbaV0sICdpbmZvJykpIHtcbiAgICAgICAgICAgIGluc3RfbGluay5pbmZvID0gbmV0LmxpbmtzW2ldLmluZm87XG4gICAgICAgICAgfVxuICAgICAgICAgIHRuZXQubGlua3MucHVzaChpbnN0X2xpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRuZXQ7XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gaXNfc3VwcG9ydGVkX29yZGVyKG9yZGVyKSB7XG4gICAgICAgIHJldHVybiBvcmRlciA9PT0gJ2luaScgfHwgb3JkZXIgPT09ICdjbHVzdCcgfHwgb3JkZXIgPT09ICdyYW5rJyB8fCBvcmRlciA9PT0gJ2NsYXNzJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICB2YXIgQ29sb3JzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAvLyBjb2xvcnMgZnJvbSBodHRwOi8vZ3JhcGhpY2Rlc2lnbi5zdGFja2V4Y2hhbmdlLmNvbS9yZXZpc2lvbnMvMzgxNS84XG4gICAgICB2YXIgcmFuZF9jb2xvcnM7XG5cbiAgICAgIC8vIGdlbmVyYXRlIHJhbmRvbSBjb2xvcnNcbiAgICAgIHZhciB0bXAwID0gWycjMDAwMDAwJywgJyNGRjM0RkYnLCAnI0ZGRkYwMCcsICcjRkY0QTQ2J11cbiAgICAgIHZhciB0bXAxID0gZDMuc2NhbGUuY2F0ZWdvcnkyMCgpLnJhbmdlKCkucmV2ZXJzZSgpO1xuICAgICAgdmFyIHRtcDIgPSBkMy5zY2FsZS5jYXRlZ29yeTIwYigpLnJhbmdlKCk7XG4gICAgICB2YXIgdG1wMyA9IGQzLnNjYWxlLmNhdGVnb3J5MjBjKCkucmFuZ2UoKTtcbiAgICAgIHJhbmRfY29sb3JzID0gdG1wMC5jb25jYXQodG1wMSkuY29uY2F0KHRtcDIpLmNvbmNhdCh0bXAzKTtcblxuICAgICAgZnVuY3Rpb24gZ2V0X2RlZmF1bHRfY29sb3IoKSB7XG4gICAgICAgIC8vcmV0dXJuIHJhbmRfY29sb3JzWzBdO1xuICAgICAgICByZXR1cm4gJyNFRUUnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRfcmFuZG9tX2NvbG9yKGkpIHtcbiAgICAgICAgcmV0dXJuIHJhbmRfY29sb3JzW2kgJSBnZXRfbnVtX2NvbG9ycygpXTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0X251bV9jb2xvcnMoKSB7XG4gICAgICAgIHJldHVybiByYW5kX2NvbG9ycy5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldF9kZWZhdWx0X2NvbG9yOiBnZXRfZGVmYXVsdF9jb2xvcixcbiAgICAgICAgZ2V0X3JhbmRvbV9jb2xvcjogZ2V0X3JhbmRvbV9jb2xvcixcbiAgICAgICAgZ2V0X251bV9jb2xvcnM6IGdldF9udW1fY29sb3JzXG4gICAgICB9XG5cbiAgICB9KSgpO1xuXG5cbiAgICAvKiBEZW5kcm9ncmFtIGNvbG9yIGJhci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBEZW5kcm9ncmFtKHR5cGUsIHBhcmFtcywgZWxlbSkge1xuXG4gICAgICB2YXIgZ3JvdXBfY29sb3JzID0gW10sXG4gICAgICAgIGRvbV9jbGFzcyxcbiAgICAgICAgaTtcblxuICAgICAgYnVpbGRfY29sb3JfZ3JvdXBzKCk7XG5cbiAgICAgIGlmICh0eXBlID09PSAncm93Jykge1xuICAgICAgICBkb21fY2xhc3MgPSAncm93X2NsYXNzX3JlY3QnO1xuICAgICAgICBidWlsZF9yb3dfZGVuZHJvKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb21fY2xhc3MgPSAnY29sX2NsYXNzX3JlY3QnO1xuICAgICAgICBidWlsZF9jb2xfZGVuZHJvKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkX2NvbG9yX2dyb3VwcygpIHtcbiAgICAgICAgdmFyIG1heF9ncm91cHM7XG4gICAgICAgIGlmIChwYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2Rlcy5sZW5ndGggPiBwYXJhbXMubmV0d29ya19kYXRhLmNvbF9ub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICBtYXhfZ3JvdXBzID0gcGFyYW1zLm5ldHdvcmtfZGF0YS5yb3dfbm9kZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF4X2dyb3VwcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIGdyYWIgY29sb3JzIGZyb20gdGhlIGxpc3RcbiAgICAgICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICAgICAgZ3JvdXBfY29sb3JzW2ldID0gQ29sb3JzLmdldF9kZWZhdWx0X2NvbG9yKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdyb3VwX2NvbG9yc1tpXSA9IENvbG9ycy5nZXRfcmFuZG9tX2NvbG9yKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBDaGFuZ2VzIHRoZSBncm91cGluZ3MgKHgtIGFuZCB5LWF4aXMgY29sb3IgYmFycykuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGNoYW5nZV9ncm91cHMoaW5zdF9pbmRleCkge1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy4nICsgZG9tX2NsYXNzKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBncm91cF9jb2xvcnNbZC5ncm91cFtpbnN0X2luZGV4XV07XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNvbG9yX2dyb3VwKGopIHtcbiAgICAgICAgcmV0dXJuIGdyb3VwX2NvbG9yc1tqXTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0X2dyb3VwX2NvbG9yKGopIHtcbiAgICAgICAgcmV0dXJuIGdyb3VwX2NvbG9yc1tqXTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGRfcm93X2RlbmRybygpIHtcbiAgICAgICAgZWxlbVxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGRvbV9jbGFzcylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbnN0X3dpZHRoID0gcGFyYW1zLmNsYXNzX3Jvb20uc3ltYm9sX3dpZHRoIC0gMTtcbiAgICAgICAgICAgIHJldHVybiBpbnN0X3dpZHRoICsgJ3B4JztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgdmFyIGluc3RfbGV2ZWwgPSBwYXJhbXMuZ3JvdXBfbGV2ZWwucm93O1xuICAgICAgICAgICAgcmV0dXJuIGdldF9ncm91cF9jb2xvcihkLmdyb3VwW2luc3RfbGV2ZWxdKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5zdF9vZmZzZXQgPSBwYXJhbXMuY2xhc3Nfcm9vbS5zeW1ib2xfd2lkdGggKyAxO1xuICAgICAgICAgICAgcmV0dXJuIGluc3Rfb2Zmc2V0ICsgJ3B4JztcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGRfY29sX2RlbmRybygpIHtcbiAgICAgICAgZWxlbVxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGRvbV9jbGFzcylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGluc3RfaGVpZ2h0ID0gcGFyYW1zLmNsYXNzX3Jvb20uY29sIC0gMTtcbiAgICAgICAgICAgIHJldHVybiBpbnN0X2hlaWdodDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHZhciBpbnN0X2xldmVsID0gcGFyYW1zLmdyb3VwX2xldmVsLmNvbDtcbiAgICAgICAgICAgIHJldHVybiBnZXRfZ3JvdXBfY29sb3IoZC5ncm91cFtpbnN0X2xldmVsXSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIC8vICEhIG9wdGlvbmFsIHJvdyBjYWxsYmFjayBvbiBjbGlja1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuY2xpY2tfZ3JvdXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gb25seSBhZGQgY2xpY2sgZnVuY3Rpb25hbGl0eSB0byByb3cgcmVjdFxuICAgICAgICByb3dfY2xhc3NfcmVjdFxuICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICB2YXIgaW5zdF9sZXZlbCA9IHBhcmFtcy5ncm91cF9sZXZlbC5yb3c7XG4gICAgICAgICAgICB2YXIgaW5zdF9ncm91cCA9IGQuZ3JvdXBbaW5zdF9sZXZlbF07XG4gICAgICAgICAgICAvLyBmaW5kIGFsbCByb3cgbmFtZXMgdGhhdCBhcmUgaW4gdGhlIHNhbWUgZ3JvdXAgYXQgdGhlIHNhbWUgZ3JvdXBfbGV2ZWxcbiAgICAgICAgICAgIC8vIGdldCByb3dfbm9kZXNcbiAgICAgICAgICAgIHJvd19ub2RlcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzO1xuICAgICAgICAgICAgdmFyIGdyb3VwX25vZGVzID0gW107XG5cbiAgICAgICAgICAgIGxvZGFzaC5lYWNoKHJvd19ub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAvLyBjaGVjayB0aGF0IHRoZSBub2RlIGlzIGluIHRoZSBncm91cFxuICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cFtpbnN0X2xldmVsXSA9PT0gaW5zdF9ncm91cCkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2UgYSBsaXN0IG9mIGdlbmVzIHRoYXQgYXJlIGluIGluc3RfZ3JvdXAgYXQgdGhpcyBncm91cF9sZXZlbFxuICAgICAgICAgICAgICAgIGdyb3VwX25vZGVzLnB1c2gobm9kZS5uYW1lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHJldHVybiB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyXG4gICAgICAgICAgICAvLyByb3cgb3IgY29sLCBkaXN0YW5jZSBjdXRvZmYgbGV2ZWwsIG5vZGVzXG4gICAgICAgICAgICB2YXIgZ3JvdXBfaW5mbyA9IHt9O1xuICAgICAgICAgICAgZ3JvdXBfaW5mby50eXBlID0gJ3Jvdyc7XG4gICAgICAgICAgICBncm91cF9pbmZvLm5vZGVzID0gZ3JvdXBfbm9kZXM7XG4gICAgICAgICAgICBncm91cF9pbmZvLmluZm8gPSB7XG4gICAgICAgICAgICAgICd0eXBlJzogJ2Rpc3RhbmNlJyxcbiAgICAgICAgICAgICAgJ2N1dG9mZic6IGluc3RfbGV2ZWwgLyAxMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gcGFzcyBpbmZvcm1hdGlvbiB0byBncm91cF9jbGljayBjYWxsYmFja1xuICAgICAgICAgICAgcGFyYW1zLmNsaWNrX2dyb3VwKGdyb3VwX2luZm8pO1xuXG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbG9yX2dyb3VwOiBjb2xvcl9ncm91cCxcbiAgICAgICAgZ2V0X2dyb3VwX2NvbG9yOiBnZXRfZ3JvdXBfY29sb3IsXG4gICAgICAgIGNoYW5nZV9ncm91cHM6IGNoYW5nZV9ncm91cHNcbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBNYXRyaXgobmV0d29ya19kYXRhLCBzdmdfZWxlbSwgcGFyYW1zKSB7XG5cbiAgICAgIHZhciBtYXRyaXggPSBbXSxcbiAgICAgICAgcm93X25vZGVzID0gbmV0d29ya19kYXRhLnJvd19ub2RlcyxcbiAgICAgICAgY29sX25vZGVzID0gbmV0d29ya19kYXRhLmNvbF9ub2RlcyxcbiAgICAgICAgY2x1c3RfZ3JvdXA7XG5cbiAgICAgIC8vIG1ha2UgdGhlIG1hdHJpeFxuICAgICAgaW5pdGlhbGl6ZV9tYXRyaXgoKTtcblxuICAgICAgLy8gYXBwZW5kIGEgZ3JvdXAgdGhhdCB3aWxsIGhvbGQgY2x1c3RfZ3JvdXAgYW5kIHBvc2l0aW9uIGl0IG9uY2VcbiAgICAgIGNsdXN0X2dyb3VwID0gc3ZnX2VsZW1cbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgK1xuICAgICAgICAgIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLmxlZnQgKyAnLCcgK1xuICAgICAgICAgIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcCArICcpJylcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdpZCcsICdjbHVzdF9ncm91cCcpO1xuXG4gICAgICAvLyBjbHVzdGVyZ3JhbSBiYWNrZ3JvdW5kIHJlY3RcbiAgICAgIGNsdXN0X2dyb3VwXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnYmFja2dyb3VuZCcpXG4gICAgICAgIC5hdHRyKCdpZCcsICdncmV5X2JhY2tncm91bmQnKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnI2VlZScpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0KTtcblxuICAgICAgLy8gZG8gdGhlIGRhdGFiaW5kXG4gICAgICB2YXIgcm93X2dyb3VwcyA9IGNsdXN0X2dyb3VwLnNlbGVjdEFsbCgnLnJvdycpXG4gICAgICAgIC5kYXRhKG1hdHJpeClcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdyb3cnKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5kZXgpICsgJyknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gZHJhdyByb3dzIG9mIGNsdXN0ZXJncmFtXG4gICAgICBpZiAocGFyYW1zLm1hdHJpeC50aWxlX3R5cGUgPT09ICdzaW1wbGUnKSB7XG4gICAgICAgIHJvd19ncm91cHMgPSByb3dfZ3JvdXBzLmVhY2goZHJhd19zaW1wbGVfcm93cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3dfZ3JvdXBzID0gcm93X2dyb3Vwcy5lYWNoKGRyYXdfZ3JvdXBfcm93cyk7XG4gICAgICB9XG5cblxuICAgICAgLy8gYWRkIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHRpbGUgZ3JvdXAgLSBpZiBvbmUgaXMgc3VwcGxpZWQgYnkgdGhlIHVzZXJcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmNsaWNrX3RpbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcudGlsZScpXG4gICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIC8vIGV4cG9ydCByb3cvY29sIG5hbWUgYW5kIHZhbHVlIGZyb20gdGlsZVxuICAgICAgICAgICAgdmFyIHRpbGVfaW5mbyA9IHt9O1xuICAgICAgICAgICAgdGlsZV9pbmZvLnJvdyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzW2QucG9zX3ldLm5hbWU7XG4gICAgICAgICAgICB0aWxlX2luZm8uY29sID0gcGFyYW1zLm5ldHdvcmtfZGF0YS5jb2xfbm9kZXNbZC5wb3NfeF0ubmFtZTtcbiAgICAgICAgICAgIHRpbGVfaW5mby52YWx1ZSA9IGQudmFsdWU7XG4gICAgICAgICAgICBpZiAoVXRpbHMuaGFzKGQsICd2YWx1ZV91cCcpKSB7XG4gICAgICAgICAgICAgIHRpbGVfaW5mby52YWx1ZV91cCA9IGQudmFsdWVfdXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoVXRpbHMuaGFzKGQsICd2YWx1ZV9kbicpKSB7XG4gICAgICAgICAgICAgIHRpbGVfaW5mby52YWx1ZV9kbiA9IGQudmFsdWVfZG47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoVXRpbHMuaGFzKGQsICdpbmZvJykpIHtcbiAgICAgICAgICAgICAgdGlsZV9pbmZvLmluZm8gPSBkLmluZm87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBydW4gdGhlIHVzZXIgc3VwcGxpZWQgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgICAgIHBhcmFtcy5jbGlja190aWxlKHRpbGVfaW5mbyk7XG4gICAgICAgICAgICBhZGRfY2xpY2tfaGxpZ2h0KHRoaXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcblxuICAgICAgICAvLyBoaWdobGlnaHQgY2xpY2tlZCB0aWxlXG4gICAgICAgIGlmIChwYXJhbXMudGlsZV9jbGlja19obGlnaHQpIHtcblxuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLnRpbGUnKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uKGQpIHtcblxuICAgICAgICAgICAgICBhZGRfY2xpY2tfaGxpZ2h0KHRoaXMpXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgfVxuXG5cbiAgICAgIGZ1bmN0aW9uIGFkZF9jbGlja19obGlnaHQoY2xpY2tlZF9yZWN0KSB7XG5cbiAgICAgICAgLy8gZ2V0IHggcG9zaXRpb24gb2YgcmVjdGFuZ2xlXG4gICAgICAgIGQzLnNlbGVjdChjbGlja2VkX3JlY3QpLmVhY2goZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciBwb3NfeCA9IGQucG9zX3g7XG4gICAgICAgICAgdmFyIHBvc195ID0gZC5wb3NfeTtcblxuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNsaWNrX2hsaWdodCcpXG4gICAgICAgICAgICAucmVtb3ZlKCk7XG5cbiAgICAgICAgICBpZiAocG9zX3ggIT0gcGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCB8fCBwb3NfeSAhPSBwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF95KSB7XG5cbiAgICAgICAgICAgIC8vIHNhdmUgcG9zX3ggdG8gcGFyYW1zLnZpei5jbGlja19obGlnaHRfeFxuICAgICAgICAgICAgcGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCA9IHBvc194O1xuICAgICAgICAgICAgcGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeSA9IHBvc195O1xuXG4gICAgICAgICAgICAvLyBkcmF3IHRoZSBoaWdobGlnaHRpbmcgcmVjdGFuZ2xlIGFzIGZvdXIgcmVjdGFuZ2xlc1xuICAgICAgICAgICAgLy8gc28gdGhhdCB0aGUgd2lkdGggYW5kIGhlaWdodCBjYW4gYmUgY29udHJvbGxlZFxuICAgICAgICAgICAgLy8gc2VwYXJhdGVseVxuXG4gICAgICAgICAgICB2YXIgcmVsX3dpZHRoX2hsaWdodCA9IDY7XG4gICAgICAgICAgICB2YXIgb3BhY2l0eV9obGlnaHQgPSAwLjg1O1xuXG4gICAgICAgICAgICB2YXIgaGxpZ2h0X3dpZHRoID0gcmVsX3dpZHRoX2hsaWdodCAqIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoO1xuICAgICAgICAgICAgdmFyIGhsaWdodF9oZWlnaHQgPSByZWxfd2lkdGhfaGxpZ2h0ICogcGFyYW1zLnZpei5ib3JkZXJfd2lkdGggLyBwYXJhbXMudml6Lnpvb21fc3dpdGNoO1xuXG4gICAgICAgICAgICAvLyB0b3AgaGlnaGxpZ2h0XG4gICAgICAgICAgICBkMy5zZWxlY3QoY2xpY2tlZF9yZWN0LnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2xpY2tfaGxpZ2h0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ3RvcF9obGlnaHQnKVxuICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgICAgICAgICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy5tYXRyaXguaGxpZ2h0X2NvbG9yKVxuICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShwb3NfeCkgKyAnLDApJztcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmF0dHIoJ29wYWNpdHknLCBvcGFjaXR5X2hsaWdodCk7XG5cbiAgICAgICAgICAgIC8vIGxlZnQgaGlnaGxpZ2h0XG4gICAgICAgICAgICBkMy5zZWxlY3QoY2xpY2tlZF9yZWN0LnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2xpY2tfaGxpZ2h0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ2xlZnRfaGxpZ2h0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgaGxpZ2h0X3dpZHRoKVxuICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodCAqIDAuOTkpXG4gICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLm1hdHJpeC5obGlnaHRfY29sb3IpXG4gICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKHBvc194KSArICcsJyArXG4gICAgICAgICAgICAgICAgICBobGlnaHRfaGVpZ2h0ICogMC45OSArICcpJztcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmF0dHIoJ29wYWNpdHknLCBvcGFjaXR5X2hsaWdodCk7XG5cbiAgICAgICAgICAgIC8vIHJpZ2h0IGhpZ2hsaWdodFxuICAgICAgICAgICAgZDMuc2VsZWN0KGNsaWNrZWRfcmVjdC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NsaWNrX2hsaWdodCcpXG4gICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdyaWdodF9obGlnaHQnKVxuICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBobGlnaHRfd2lkdGgpXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfaGVpZ2h0ICogMC45OSlcbiAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBwYXJhbXMubWF0cml4LmhsaWdodF9jb2xvcilcbiAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0bXBfdHJhbnNsYXRlID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlKHBvc194KSArIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF93aWR0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgdG1wX3RyYW5zbGF0ZSArICcsJyArXG4gICAgICAgICAgICAgICAgICBobGlnaHRfaGVpZ2h0ICogMC45OSArICcpJztcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmF0dHIoJ29wYWNpdHknLCBvcGFjaXR5X2hsaWdodCk7XG5cbiAgICAgICAgICAgIC8vIGJvdHRvbSBoaWdobGlnaHRcbiAgICAgICAgICAgIGQzLnNlbGVjdChjbGlja2VkX3JlY3QucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjbGlja19obGlnaHQnKVxuICAgICAgICAgICAgICAuYXR0cignaWQnLCAnYm90dG9tX2hsaWdodCcpXG4gICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSAxLjk4ICogaGxpZ2h0X3dpZHRoXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgICAgICAgICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy5tYXRyaXguaGxpZ2h0X2NvbG9yKVxuICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZShwb3NfeCkgKyBobGlnaHRfd2lkdGggKiAwLjk5O1xuICAgICAgICAgICAgICAgIHZhciB0bXBfdHJhbnNsYXRlX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB0bXBfdHJhbnNsYXRlX3ggKyAnLCcgK1xuICAgICAgICAgICAgICAgICAgdG1wX3RyYW5zbGF0ZV95ICsgJyknO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuYXR0cignb3BhY2l0eScsIG9wYWNpdHlfaGxpZ2h0KTtcblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF94ID0gLTY2NjtcbiAgICAgICAgICAgIHBhcmFtcy5tYXRyaXguY2xpY2tfaGxpZ2h0X3kgPSAtNjY2O1xuICAgICAgICAgIH1cblxuXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIGRyYXcgZ3JpZCBsaW5lcyBhZnRlciBkcmF3aW5nIHRpbGVzXG4gICAgICBkcmF3X2dyaWRfbGluZXMoKTtcblxuICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZV9tYXRyaXgoKSB7XG4gICAgICAgIGxvZGFzaC5lYWNoKHJvd19ub2RlcywgZnVuY3Rpb24odG1wLCByb3dfaW5kZXgpIHtcbiAgICAgICAgICBtYXRyaXhbcm93X2luZGV4XSA9IGQzLnJhbmdlKGNvbF9ub2Rlcy5sZW5ndGgpLm1hcChmdW5jdGlvbihjb2xfaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHBvc194OiBjb2xfaW5kZXgsXG4gICAgICAgICAgICAgIHBvc195OiByb3dfaW5kZXgsXG4gICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICBoaWdobGlnaHQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvZGFzaC5lYWNoKG5ldHdvcmtfZGF0YS5saW5rcywgZnVuY3Rpb24obGluaykge1xuICAgICAgICAgIG1hdHJpeFtsaW5rLnNvdXJjZV1bbGluay50YXJnZXRdLnZhbHVlID0gbGluay52YWx1ZTtcbiAgICAgICAgICAvLyB0cmFuc2ZlciBhZGRpdGlvbmFsIGxpbmsgaW5mb3JtYXRpb24gaXMgbmVjZXNzYXJ5XG4gICAgICAgICAgaWYgKGxpbmsudmFsdWVfdXAgJiYgbGluay52YWx1ZV9kbikge1xuICAgICAgICAgICAgbWF0cml4W2xpbmsuc291cmNlXVtsaW5rLnRhcmdldF0udmFsdWVfdXAgPSBsaW5rLnZhbHVlX3VwO1xuICAgICAgICAgICAgbWF0cml4W2xpbmsuc291cmNlXVtsaW5rLnRhcmdldF0udmFsdWVfZG4gPSBsaW5rLnZhbHVlX2RuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGluay5oaWdobGlnaHQpIHtcbiAgICAgICAgICAgIG1hdHJpeFtsaW5rLnNvdXJjZV1bbGluay50YXJnZXRdLmhpZ2hsaWdodCA9IGxpbmsuaGlnaGxpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGluay5pbmZvKSB7XG4gICAgICAgICAgICBtYXRyaXhbbGluay5zb3VyY2VdW2xpbmsudGFyZ2V0XS5pbmZvID0gbGluay5pbmZvO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZHJhd19ncmlkX2xpbmVzKCkge1xuXG4gICAgICAgIC8vIGFwcGVuZCBob3Jpem9udGFsIGxpbmVzXG4gICAgICAgIGNsdXN0X2dyb3VwXG4gICAgICAgICAgLnNlbGVjdEFsbCgnLmhvcnpfbGluZXMnKVxuICAgICAgICAgIC5kYXRhKHJvd19ub2RlcylcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdob3J6X2xpbmVzJylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpbmRleCkgKyAnKSByb3RhdGUoMCknO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgLmF0dHIoJ3gxJywgMClcbiAgICAgICAgICAuYXR0cigneDInLCBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aClcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoIC8gcGFyYW1zLnZpei56b29tX3N3aXRjaCArICdweCcpXG4gICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnd2hpdGUnKVxuXG4gICAgICAgIC8vIGFwcGVuZCB2ZXJ0aWNhbCBsaW5lIGdyb3Vwc1xuICAgICAgICBjbHVzdF9ncm91cFxuICAgICAgICAgIC5zZWxlY3RBbGwoJy52ZXJ0X2xpbmVzJylcbiAgICAgICAgICAuZGF0YShjb2xfbm9kZXMpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndmVydF9saW5lcycpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluZGV4KSArICcpIHJvdGF0ZSgtOTApJztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAgIC5hdHRyKCd4MScsIDApXG4gICAgICAgICAgLmF0dHIoJ3gyJywgLXBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodClcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoICsgJ3B4JylcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsICd3aGl0ZScpO1xuICAgICAgfVxuXG4gICAgICAvLyBtYWtlIGVhY2ggcm93IGluIHRoZSBjbHVzdGVyZ3JhbVxuICAgICAgZnVuY3Rpb24gZHJhd19zaW1wbGVfcm93cyhpbnBfcm93X2RhdGEpIHtcblxuICAgICAgICAvLyByZW1vdmUgemVybyB2YWx1ZXMgdG8gbWFrZSB2aXN1YWxpemF0aW9uIGZhc3RlclxuICAgICAgICB2YXIgcm93X2RhdGEgPSBsb2Rhc2guZmlsdGVyKGlucF9yb3dfZGF0YSwgZnVuY3Rpb24obnVtKSB7XG4gICAgICAgICAgcmV0dXJuIG51bS52YWx1ZSAhPT0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgdGlsZXMgaW4gdGhlIGN1cnJlbnQgcm93XG4gICAgICAgIHZhciB0aWxlID0gZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgICAgLmRhdGEocm93X2RhdGEpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndGlsZScpXG5cbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgLy8gc3dpdGNoIHRoZSBjb2xvciBiYXNlZCBvbiB1cC9kbiB2YWx1ZVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLnZhbHVlID4gMCA/IHBhcmFtcy5tYXRyaXgudGlsZV9jb2xvcnNbMF0gOiBwYXJhbXMubWF0cml4LnRpbGVfY29sb3JzWzFdO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICAvLyBoaWdobGlnaHQgcm93IC0gc2V0IHRleHQgdG8gYWN0aXZlIGlmXG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCB0ZXh0JylcbiAgICAgICAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA9PT0gcC5wb3NfeTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF90ZXh0IHRleHQnKVxuICAgICAgICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpID09PSBwLnBvc194O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbiBtb3VzZW91dCgpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgndGV4dCcpLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKCd0aXRsZScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLnZhbHVlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRpbGVcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBvdXRwdXQgb3BhY2l0eSB1c2luZyB0aGUgb3BhY2l0eSBzY2FsZVxuICAgICAgICAgICAgdmFyIG91dHB1dF9vcGFjaXR5ID0gcGFyYW1zLm1hdHJpeC5vcGFjaXR5X3NjYWxlKE1hdGguYWJzKGQudmFsdWUpKTtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRfb3BhY2l0eTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB0aWxlXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoZC5wb3NfeCkgKyAnLDApJztcbiAgICAgICAgICB9KVxuXG5cblxuICAgICAgICAvLyBhcHBlbmQgdGl0bGUgdG8gZ3JvdXBcbiAgICAgICAgaWYgKHBhcmFtcy5tYXRyaXgudGlsZV90aXRsZSkge1xuICAgICAgICAgIHRpbGUuYXBwZW5kKCd0aXRsZScpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHZhciBpbnN0X3N0cmluZyA9ICd2YWx1ZTogJyArIGQudmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiBpbnN0X3N0cmluZztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgLy8gbWFrZSBlYWNoIHJvdyBpbiB0aGUgY2x1c3RlcmdyYW1cbiAgICAgIGZ1bmN0aW9uIGRyYXdfZ3JvdXBfcm93cyhpbnBfcm93X2RhdGEpIHtcblxuICAgICAgICAvLyByZW1vdmUgemVybyB2YWx1ZXMgdG8gbWFrZSB2aXN1YWxpemF0aW9uIGZhc3RlclxuICAgICAgICB2YXIgcm93X2RhdGEgPSBsb2Rhc2guZmlsdGVyKGlucF9yb3dfZGF0YSwgZnVuY3Rpb24obnVtKSB7XG4gICAgICAgICAgcmV0dXJuIG51bS52YWx1ZSAhPT0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgZ3JvdXBzXG4gICAgICAgIHZhciB0aWxlID0gZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgLy8gZGF0YSBqb2luXG4gICAgICAgICAgLnNlbGVjdEFsbCgnZycpXG4gICAgICAgICAgLmRhdGEocm93X2RhdGEpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndGlsZScpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoZC5wb3NfeCkgKyAnLDApJztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBhcHBlbmQgcmVjdFxuICAgICAgICB0aWxlXG4gICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RpbGVfZ3JvdXAnKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSlcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIG91dHB1dCBvcGFjaXR5IHVzaW5nIHRoZSBvcGFjaXR5IHNjYWxlXG4gICAgICAgICAgICB2YXIgb3V0cHV0X29wYWNpdHkgPSBwYXJhbXMubWF0cml4Lm9wYWNpdHlfc2NhbGUoTWF0aC5hYnMoZC52YWx1ZSkpO1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGQudmFsdWVfdXApID4gMCAmJiBNYXRoLmFicyhkLnZhbHVlX2RuKSA+IDApIHtcbiAgICAgICAgICAgICAgb3V0cHV0X29wYWNpdHkgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dF9vcGFjaXR5O1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gc3dpdGNoIHRoZSBjb2xvciBiYXNlZCBvbiB1cC9kbiB2YWx1ZVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIC8vIG5vcm1hbCBydWxlXG4gICAgICAgICAgICByZXR1cm4gZC52YWx1ZSA+IDAgPyBwYXJhbXMubWF0cml4LnRpbGVfY29sb3JzWzBdIDogcGFyYW1zLm1hdHJpeC50aWxlX2NvbG9yc1sxXTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB0aWxlXG4gICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICAvLyBoaWdobGlnaHQgcm93IC0gc2V0IHRleHQgdG8gYWN0aXZlIGlmXG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCB0ZXh0JylcbiAgICAgICAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA9PT0gcC5wb3NfeTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfdGV4dCB0ZXh0JylcbiAgICAgICAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA9PT0gcC5wb3NfeDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gbW91c2VvdXQoKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJ3RleHQnKS5jbGFzc2VkKCdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cigndGl0bGUnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC52YWx1ZTtcbiAgICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIC8vIC8vIGFwcGVuZCBldmlkZW5jZSBoaWdobGlnaHRpbmcgLSBibGFjayByZWN0c1xuICAgICAgICAvLyBpZiAocGFyYW1zLm1hdHJpeC5oaWdobGlnaHQgPT09IDEpIHtcblxuICAgICAgICAvLyB0aWxlXG4gICAgICAgIC8vICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC8vICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpICogMC44MClcbiAgICAgICAgLy8gICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpICogMC44MClcbiAgICAgICAgLy8gICAuYXR0cignY2xhc3MnLCAnaGlnaGxpZ2h0aW5nX3JlY3QnKVxuICAgICAgICAvLyAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLyAxMCArXG4gICAgICAgIC8vICAgJyAsICcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLyAxMCArICcpJylcbiAgICAgICAgLy8gICAuYXR0cignY2xhc3MnLCAnY2VsbF9oaWdobGlnaHQnKVxuICAgICAgICAvLyAgIC5hdHRyKCdzdHJva2UnLCAnYmxhY2snKVxuICAgICAgICAvLyAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAxLjApXG4gICAgICAgIC8vICAgLmF0dHIoJ2ZpbGwtb3BhY2l0eScsIDAuMClcbiAgICAgICAgLy8gICAuYXR0cignc3Ryb2tlLW9wYWNpdHknLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIC8vICAgICAvLyBpbml0aWFsaXplIG9wYWNpdHkgdG8gMFxuICAgICAgICAvLyAgICAgdmFyIGluc3Rfb3BhY2l0eSA9IDA7XG4gICAgICAgIC8vICAgICAvLyBzZXQgb3BhY2l0eSB0byAxIGlmIHRoZXJlIGlzIGV2aWRlbmNlXG4gICAgICAgIC8vICAgICBpZiAoZC5oaWdobGlnaHQgPT09IDEpIHtcbiAgICAgICAgLy8gICAgIGluc3Rfb3BhY2l0eSA9IDE7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICByZXR1cm4gaW5zdF9vcGFjaXR5O1xuICAgICAgICAvLyAgIH0pO1xuXG5cbiAgICAgICAgdmFyIHJlbF93aWR0aF9obGlnaHQgPSA0O1xuICAgICAgICB2YXIgaGlnaGxpZ2h0X29wYWNpdHkgPSAwLjA7XG5cbiAgICAgICAgdmFyIGhsaWdodF93aWR0aCA9IHJlbF93aWR0aF9obGlnaHQgKiBwYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgdmFyIGhsaWdodF9oZWlnaHQgPSByZWxfd2lkdGhfaGxpZ2h0ICogcGFyYW1zLnZpei5ib3JkZXJfd2lkdGggLyBwYXJhbXMudml6Lnpvb21fc3dpdGNoO1xuXG4gICAgICAgIC8vIHRvcCBoaWdobGlnaHRcbiAgICAgICAgdGlsZVxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWdobGlnaHQnKVxuICAgICAgICAgIC5hdHRyKCdpZCcsICdwZXJtX3RvcF9obGlnaHQnKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSlcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGxpZ2h0X2hlaWdodClcbiAgICAgICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLmhpZ2hsaWdodCA+IDAgPyBwYXJhbXMubWF0cml4Lm91dGxpbmVfY29sb3JzWzBdIDogcGFyYW1zLm1hdHJpeC5vdXRsaW5lX2NvbG9yc1sxXTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKCdvcGFjaXR5JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKGQuaGlnaGxpZ2h0KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBsZWZ0IGhpZ2hsaWdodFxuICAgICAgICB0aWxlXG4gICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2hpZ2hsaWdodCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ3Blcm1fbGVmdF9obGlnaHQnKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGhsaWdodF93aWR0aClcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodCAqIDAuOTkpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC5oaWdobGlnaHQgPiAwID8gcGFyYW1zLm1hdHJpeC5vdXRsaW5lX2NvbG9yc1swXSA6IHBhcmFtcy5tYXRyaXgub3V0bGluZV9jb2xvcnNbMV07XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgMCArICcsJyArXG4gICAgICAgICAgICAgIGhsaWdodF9oZWlnaHQgKiAwLjk5ICsgJyknO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoJ29wYWNpdHknLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoZC5oaWdobGlnaHQpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJpZ2h0IGhpZ2hsaWdodFxuICAgICAgICB0aWxlXG4gICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2hpZ2hsaWdodCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ3Blcm1fcmlnaHRfaGxpZ2h0JylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBobGlnaHRfd2lkdGgpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF9oZWlnaHQgKiAwLjk5KVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQuaGlnaGxpZ2h0ID4gMCA/IHBhcmFtcy5tYXRyaXgub3V0bGluZV9jb2xvcnNbMF0gOiBwYXJhbXMubWF0cml4Lm91dGxpbmVfY29sb3JzWzFdO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGUgPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfd2lkdGg7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgdG1wX3RyYW5zbGF0ZSArICcsJyArXG4gICAgICAgICAgICAgIGhsaWdodF9oZWlnaHQgKiAwLjk5ICsgJyknO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoJ29wYWNpdHknLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoZC5oaWdobGlnaHQpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGJvdHRvbSBoaWdobGlnaHRcbiAgICAgICAgdGlsZVxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWdobGlnaHQnKVxuICAgICAgICAgIC5hdHRyKCdpZCcsICdwZXJtX290dG9tX2hsaWdodCcpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC0gMS45OCAqIGhsaWdodF93aWR0aFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhsaWdodF9oZWlnaHQpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC5oaWdobGlnaHQgPiAwID8gcGFyYW1zLm1hdHJpeC5vdXRsaW5lX2NvbG9yc1swXSA6IHBhcmFtcy5tYXRyaXgub3V0bGluZV9jb2xvcnNbMV07XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZV94ID0gaGxpZ2h0X3dpZHRoICogMC45OTtcbiAgICAgICAgICAgIHZhciB0bXBfdHJhbnNsYXRlX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfaGVpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGVfeCArICcsJyArXG4gICAgICAgICAgICAgIHRtcF90cmFuc2xhdGVfeSArICcpJztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKCdvcGFjaXR5JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKGQuaGlnaGxpZ2h0KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyB9XG5cblxuICAgICAgICAvLyBzcGxpdC11cFxuICAgICAgICB0aWxlXG4gICAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgLy8gLnN0eWxlKCdzdHJva2UnLCAnYmxhY2snKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0aWxlX3NwbGl0X3VwJylcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDApXG4gICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzdGFydF94ID0gMDtcbiAgICAgICAgICAgIHZhciBmaW5hbF94ID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0X3kgPSAwO1xuICAgICAgICAgICAgdmFyIGZpbmFsX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgL1xuICAgICAgICAgICAgICA2MDtcbiAgICAgICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00nICsgc3RhcnRfeCArICcsJyArIHN0YXJ0X3kgKyAnLCBMJyArXG4gICAgICAgICAgICAgIHN0YXJ0X3ggKyAnLCAnICsgZmluYWxfeSArICcsIEwnICsgZmluYWxfeCArICcsMCBaJztcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRfc3RyaW5nO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgb3V0cHV0IG9wYWNpdHkgdXNpbmcgdGhlIG9wYWNpdHkgc2NhbGVcbiAgICAgICAgICAgIHZhciBvdXRwdXRfb3BhY2l0eSA9IDA7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZC52YWx1ZV9kbikgPiAwKSB7XG4gICAgICAgICAgICAgIG91dHB1dF9vcGFjaXR5ID0gcGFyYW1zLm1hdHJpeC5vcGFjaXR5X3NjYWxlKE1hdGguYWJzKGQudmFsdWVfdXApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRfb3BhY2l0eTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC8vIHN3aXRjaCB0aGUgY29sb3IgYmFzZWQgb24gdXAvZG4gdmFsdWVcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIHJsX3QgKHJlbGVhc2VkKSBibHVlXG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLm1hdHJpeC50aWxlX2NvbG9yc1swXTtcbiAgICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIHNwbGl0LWRuXG4gICAgICAgIHRpbGVcbiAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndGlsZV9zcGxpdF9kbicpXG4gICAgICAgICAgLy8gLnN0eWxlKCdzdHJva2UnLCAnYmxhY2snKVxuICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMClcbiAgICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0X3ggPSAwO1xuICAgICAgICAgICAgdmFyIGZpbmFsX3ggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCk7XG4gICAgICAgICAgICB2YXIgc3RhcnRfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAvXG4gICAgICAgICAgICAgIDYwO1xuICAgICAgICAgICAgdmFyIGZpbmFsX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgL1xuICAgICAgICAgICAgICA2MDtcbiAgICAgICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00nICsgc3RhcnRfeCArICcsICcgKyBzdGFydF95ICsgJyAsICAgTCcgK1xuICAgICAgICAgICAgICBmaW5hbF94ICsgJywgJyArIGZpbmFsX3kgKyAnLCAgTCcgKyBmaW5hbF94ICsgJywwIFonO1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBvdXRwdXQgb3BhY2l0eSB1c2luZyB0aGUgb3BhY2l0eSBzY2FsZVxuICAgICAgICAgICAgdmFyIG91dHB1dF9vcGFjaXR5ID0gMDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkLnZhbHVlX3VwKSA+IDApIHtcbiAgICAgICAgICAgICAgb3V0cHV0X29wYWNpdHkgPSBwYXJhbXMubWF0cml4Lm9wYWNpdHlfc2NhbGUoTWF0aC5hYnMoZC52YWx1ZV9kbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dF9vcGFjaXR5O1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gc3dpdGNoIHRoZSBjb2xvciBiYXNlZCBvbiB1cC9kbiB2YWx1ZVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5tYXRyaXgudGlsZV9jb2xvcnNbMV07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYXBwZW5kIHRpdGxlIHRvIGdyb3VwXG4gICAgICAgIGlmIChwYXJhbXMubWF0cml4LnRpbGVfdGl0bGUpIHtcbiAgICAgICAgICB0aWxlXG4gICAgICAgICAgICAuYXBwZW5kKCd0aXRsZScpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHZhciBpbnN0X3N0cmluZyA9ICd2YWx1ZTogJyArIGQudmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiBpbnN0X3N0cmluZztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE1hdHJpeCBBUElcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldF9jbHVzdF9ncm91cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGNsdXN0X2dyb3VwO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbWF0cml4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbm9kZXM6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3JvdycpIHtcbiAgICAgICAgICAgIHZhciBub2RlcyA9IG5ldHdvcmtfZGF0YS5yb3dfbm9kZXM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBub2RlcyA9IG5ldHdvcmtfZGF0YS5jb2xfbm9kZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBub2RlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICAvKiBIYW5kbGVzIHNlYXJjaGluZyByb3dzIG9yIGNvbHVtbnMuXG4gICAgICEhIG5lZWQgdG8gZ2VuZXJhbGl6ZSB0byBjb2x1bW4gYW5kIHJvd1xuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgZnVuY3Rpb24gU2VhcmNoKHBhcmFtcywgbm9kZXMsIHByb3ApIHtcblxuICAgICAgLyogQ29sbGVjdCBlbnRpdGllcyBmcm9tIHJvdyBvciBjb2x1bW5zLlxuICAgICAgICovXG4gICAgICB2YXIgZW50aXRpZXMgPSBbXSxcbiAgICAgICAgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVudGl0aWVzLnB1c2gobm9kZXNbaV1bcHJvcF0pO1xuICAgICAgfVxuXG4gICAgICAvKiBGaW5kIGEgZ2VuZSAocm93KSBpbiB0aGUgY2x1c3RlcmdyYW0uXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGZpbmRfZW50aXRpZXMoc2VhcmNoX3Rlcm0pIHtcbiAgICAgICAgaWYgKGVudGl0aWVzLmluZGV4T2Yoc2VhcmNoX3Rlcm0pICE9PSAtMSkge1xuICAgICAgICAgIHVuX2hpZ2hsaWdodF9lbnRpdGllcygpO1xuICAgICAgICAgIHpvb21fYW5kX2hpZ2hsaWdodF9mb3VuZF9lbnRpdHkoc2VhcmNoX3Rlcm0pO1xuICAgICAgICAgIGhpZ2hsaWdodF9lbnRpdHkoc2VhcmNoX3Rlcm0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIFpvb20gaW50byBhbmQgaGlnaGxpZ2h0IHRoZSBmb3VuZCB0aGUgZ2VuZVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB6b29tX2FuZF9oaWdobGlnaHRfZm91bmRfZW50aXR5KHNlYXJjaF90ZXJtKSB7XG4gICAgICAgIHZhciBpZHggPSBsb2Rhc2guaW5kZXhPZihlbnRpdGllcywgc2VhcmNoX3Rlcm0pLFxuICAgICAgICAgIGluc3RfeV9wb3MgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaWR4KSxcbiAgICAgICAgICBwYW5fZHkgPSBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgLyAyIC0gaW5zdF95X3BvcztcblxuICAgICAgICAvLyB2aXogZXhwb3NlcyB0d29fdHJhbnNsYXRlX3pvb20gZnJvbSB6b29tIG9iamVjdFxuICAgICAgICB2aXoudHdvX3RyYW5zbGF0ZV96b29tKDAsIHBhbl9keSwgcGFyYW1zLnZpei56b29tX3N3aXRjaCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVuX2hpZ2hsaWdodF9lbnRpdGllcygpIHtcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKS5zZWxlY3QoJ3JlY3QnKS5zdHlsZSgnb3BhY2l0eScsIDApO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoaWdobGlnaHRfZW50aXR5KHNlYXJjaF90ZXJtKSB7XG5cbiAgICAgICAgZDMuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRbcHJvcF0gPT09IHNlYXJjaF90ZXJtO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG4gICAgICB9XG5cbiAgICAgIC8qIFJldHVybnMgYWxsIHRoZSBnZW5lcyBpbiB0aGUgY2x1c3RlcmdyYW0uXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldF9lbnRpdGllcygpIHtcbiAgICAgICAgcmV0dXJuIGVudGl0aWVzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaW5kX2VudGl0aWVzOiBmaW5kX2VudGl0aWVzLFxuICAgICAgICBnZXRfZW50aXRpZXM6IGdldF9lbnRpdGllc1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBWaXpQYXJhbXMgTW9kdWxlXG4gICAgICovXG4gICAgZnVuY3Rpb24gVml6UGFyYW1zKGNvbmZpZykge1xuXG4gICAgICB2YXIgcGFyYW1zID0gaW5pdGlhbGl6ZV92aXN1YWxpemF0aW9uKGNvbmZpZylcblxuICAgICAgLy8gRGVmaW5lIFZpc3VhbGl6YXRpb24gRGltZW5zaW9uc1xuICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZV92aXN1YWxpemF0aW9uKGNvbmZpZykge1xuXG4gICAgICAgIC8vIGluaXRpYWxpemUgcGFyYW1zIG9iamVjdCBmcm9tIGNvbmZpZ1xuICAgICAgICB2YXIgcGFyYW1zID0gY29uZmlnO1xuXG4gICAgICAgIC8vIExhYmVsIFBhcmFtc3RlcnNcbiAgICAgICAgcGFyYW1zLmxhYmVscyA9IHt9O1xuICAgICAgICBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVscyA9IGNvbmZpZy5zdXBlcl9sYWJlbHM7XG4gICAgICAgIC8vIFN1cGVyIExhYmVscyBEZXRhaXNcbiAgICAgICAgaWYgKHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxzKSB7XG4gICAgICAgICAgcGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aCA9IDIwO1xuICAgICAgICAgIHBhcmFtcy5sYWJlbHMuc3VwZXIgPSB7fTtcbiAgICAgICAgICBwYXJhbXMubGFiZWxzLnN1cGVyLnJvdyA9IGNvbmZpZy5zdXBlci5yb3c7XG4gICAgICAgICAgcGFyYW1zLmxhYmVscy5zdXBlci5jb2wgPSBjb25maWcuc3VwZXIuY29sO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfd2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9wdGlvbmFsIGNsYXNzaWZpY2F0aW9uXG4gICAgICAgIHBhcmFtcy5sYWJlbHMuc2hvd19jYXRlZ29yaWVzID0gY29uZmlnLnNob3dfY2F0ZWdvcmllcztcbiAgICAgICAgaWYgKHBhcmFtcy5sYWJlbHMuc2hvd19jYXRlZ29yaWVzKSB7XG4gICAgICAgICAgcGFyYW1zLmxhYmVscy5jbGFzc19jb2xvcnMgPSBjb25maWcuY2xhc3NfY29sb3JzO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5sYWJlbHMuc2hvd190b29sdGlwcyA9IGNvbmZpZy5zaG93X3Rvb2x0aXBzO1xuXG4gICAgICAgIC8vIE1hdHJpeCBPcHRpb25zXG4gICAgICAgIHBhcmFtcy5tYXRyaXggPSB7fTtcbiAgICAgICAgcGFyYW1zLm1hdHJpeC50aWxlX2NvbG9ycyA9IGNvbmZpZy50aWxlX2NvbG9ycztcbiAgICAgICAgcGFyYW1zLm1hdHJpeC5iYXJfY29sb3JzID0gY29uZmlnLmJhcl9jb2xvcnM7XG4gICAgICAgIHBhcmFtcy5tYXRyaXgub3V0bGluZV9jb2xvcnMgPSBjb25maWcub3V0bGluZV9jb2xvcnM7XG4gICAgICAgIHBhcmFtcy5tYXRyaXguaGxpZ2h0X2NvbG9yID0gY29uZmlnLmhpZ2hsaWdodF9jb2xvclxuICAgICAgICBwYXJhbXMubWF0cml4LnRpbGVfdGl0bGUgPSBjb25maWcudGlsZV90aXRsZTtcblxuICAgICAgICAvLyBWaXN1YWxpemF0aW9uIE9wdGlvbnNcbiAgICAgICAgcGFyYW1zLnZpeiA9IHt9O1xuICAgICAgICBwYXJhbXMudml6LnN2Z19kaXZfaWQgPSBjb25maWcuc3ZnX2Rpdl9pZDtcbiAgICAgICAgcGFyYW1zLnZpei5kb196b29tID0gY29uZmlnLmRvX3pvb207XG4gICAgICAgIHBhcmFtcy52aXoucmVzaXplID0gY29uZmlnLnJlc2l6ZTtcbiAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcnNcbiAgICAgICAgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yID0gY29uZmlnLmJhY2tncm91bmRfY29sb3I7XG4gICAgICAgIHBhcmFtcy52aXouc3VwZXJfYm9yZGVyX2NvbG9yID0gY29uZmlnLnN1cGVyX2JvcmRlcl9jb2xvcjtcbiAgICAgICAgLy8gbWFyZ2luIHdpZHRoc1xuICAgICAgICBwYXJhbXMudml6Lm91dGVyX21hcmdpbnMgPSBjb25maWcub3V0ZXJfbWFyZ2lucztcbiAgICAgICAgcGFyYW1zLnZpei5vdXRlcl9tYXJnaW5zX2V4cGFuZCA9IGNvbmZpZy5vdXRlcl9tYXJnaW5zX2V4cGFuZDtcbiAgICAgICAgcGFyYW1zLnZpei5leHBhbmQgPSBjb25maWcuaW5pX2V4cGFuZDtcbiAgICAgICAgcGFyYW1zLnZpei51bmlfbWFyZ2luID0gY29uZmlnLnVuaV9tYXJnaW47XG4gICAgICAgIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGggPSBjb25maWcuZ3JleV9ib3JkZXJfd2lkdGg7XG4gICAgICAgIHBhcmFtcy52aXouc2hvd19kZW5kcm9ncmFtID0gY29uZmlnLnNob3dfZGVuZHJvZ3JhbTtcbiAgICAgICAgcGFyYW1zLnZpei50aWxlX2NsaWNrX2hsaWdodCA9IGNvbmZpZy50aWxlX2NsaWNrX2hsaWdodDtcblxuICAgICAgICAvLyBpbml0aWFsaXplZCBjbGlja2VkIHRpbGUgYW5kIHJvd3NcbiAgICAgICAgcGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCA9IC02NjY7XG4gICAgICAgIHBhcmFtcy5tYXRyaXguY2xpY2tfaGxpZ2h0X3kgPSAtNjY2O1xuICAgICAgICBwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF9yb3cgPSAtNjY2O1xuICAgICAgICBwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF9jb2wgPSAtNjY2O1xuXG4gICAgICAgIC8vIGluaXRpYWwgb3JkZXIgb2YgY2x1c3RlcmdyYW1cbiAgICAgICAgcGFyYW1zLnZpei5pbnN0X29yZGVyID0gY29uZmlnLmluc3Rfb3JkZXI7XG5cbiAgICAgICAgcGFyYW1zLm1hdHJpeC5vcGFjaXR5X2Z1bmN0aW9uID0gY29uZmlnLm9wYWNpdHlfc2NhbGU7XG5cbiAgICAgICAgLy8gbm90IGluaXRpYWxpemVkIGluIGV4cGFuZCBzdGF0ZVxuICAgICAgICAvLyBwYXJhbXMudml6LmV4cGFuZCA9IGZhbHNlO1xuICAgICAgICBpZiAocGFyYW1zLnZpei5leHBhbmQgPT09IHRydWUpIHtcbiAgICAgICAgICBkMy5zZWxlY3QoJyNjbHVzdF9pbnN0cnVjdF9jb250YWluZXInKVxuICAgICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMudml6LmV4cGFuZF9idXR0b24gPSBjb25maWcuZXhwYW5kX2J1dHRvbjtcblxuICAgICAgICAvLyBwYXNzIG5ldHdvcmtfZGF0YSB0byBwYXJhbXNcbiAgICAgICAgcGFyYW1zLm5ldHdvcmtfZGF0YSA9IGNvbmZpZy5uZXR3b3JrX2RhdGE7XG5cbiAgICAgICAgdmFyIG5ldHdvcmtfZGF0YSA9IHBhcmFtcy5uZXR3b3JrX2RhdGE7XG5cbiAgICAgICAgLy8gcmVzaXplIGJhc2VkIG9uIHBhcmVudCBkaXZcbiAgICAgICAgcGFyZW50X2Rpdl9zaXplX3BvcyhwYXJhbXMpO1xuXG4gICAgICAgIC8vIGdldCBoZWlnaHQgYW5kIHdpZHRoIGZyb20gcGFyZW50IGRpdlxuICAgICAgICBwYXJhbXMudml6LnN2Z19kaW0gPSB7fTtcbiAgICAgICAgcGFyYW1zLnZpei5zdmdfZGltLndpZHRoID0gTnVtYmVyKGQzLnNlbGVjdCgnIycgKyBwYXJhbXMudml6LnN2Z19kaXZfaWQpLnN0eWxlKCd3aWR0aCcpLnJlcGxhY2UoJ3B4JywgJycpKTtcbiAgICAgICAgcGFyYW1zLnZpei5zdmdfZGltLmhlaWdodCA9IE51bWJlcihkMy5zZWxlY3QoJyMnICsgcGFyYW1zLnZpei5zdmdfZGl2X2lkKS5zdHlsZSgnaGVpZ2h0JykucmVwbGFjZSgncHgnLCAnJykpO1xuXG4gICAgICAgIHBhcmFtcy52aXoucGFyZW50X2Rpdl9zaXplX3BvcyA9IHBhcmVudF9kaXZfc2l6ZV9wb3M7XG5cbiAgICAgICAgLy8gVmFyaWFibGUgTGFiZWwgV2lkdGhzXG4gICAgICAgIC8vIGJhc2VkIG9uIHRoZSBsZW5ndGggb2YgdGhlIHJvdy9jb2wgbGFiZWxzIC0gbG9uZ2VyIGxhYmVscyBtZWFuIG1vcmUgc3BhY2UgZ2l2ZW5cbiAgICAgICAgLy8gZ2V0IHJvdyBjb2wgZGF0YVxuICAgICAgICB2YXIgY29sX25vZGVzID0gbmV0d29ya19kYXRhLmNvbF9ub2RlcztcbiAgICAgICAgdmFyIHJvd19ub2RlcyA9IG5ldHdvcmtfZGF0YS5yb3dfbm9kZXM7XG5cblxuICAgICAgICAvLyBmaW5kIHRoZSBsYWJlbCB3aXRoIHRoZSBtb3N0IGNoYXJhY3RlcnMgYW5kIHVzZSBpdCB0byBhZGp1c3QgdGhlIHJvdyBhbmQgY29sIG1hcmdpbnNcbiAgICAgICAgdmFyIHJvd19tYXhfY2hhciA9IGxvZGFzaC5tYXgocm93X25vZGVzLCBmdW5jdGlvbihpbnN0KSB7XG4gICAgICAgICAgcmV0dXJuIGluc3QubmFtZS5sZW5ndGg7XG4gICAgICAgIH0pLm5hbWUubGVuZ3RoO1xuICAgICAgICB2YXIgY29sX21heF9jaGFyID0gbG9kYXNoLm1heChjb2xfbm9kZXMsIGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdC5uYW1lLmxlbmd0aDtcbiAgICAgICAgfSkubmFtZS5sZW5ndGg7XG5cbiAgICAgICAgcGFyYW1zLmxhYmVscy5yb3dfbWF4X2NoYXIgPSByb3dfbWF4X2NoYXI7XG4gICAgICAgIHBhcmFtcy5sYWJlbHMuY29sX21heF9jaGFyID0gY29sX21heF9jaGFyO1xuXG4gICAgICAgIC8vIHRoZSBtYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIGEgbGFiZWxcbiAgICAgICAgcGFyYW1zLmxhYmVscy5tYXhfbGFiZWxfY2hhciA9IDM1O1xuXG4gICAgICAgIC8vIGRlZmluZSBsYWJlbCBzY2FsZSBwYXJhbWV0ZXJzOiB0aGUgbW9yZSBjaGFyYWN0ZXJzIGluIHRoZSBsb25nZXN0IG5hbWUsIHRoZSBsYXJnZXIgdGhlIG1hcmdpblxuICAgICAgICB2YXIgbWluX251bV9jaGFyID0gNTtcbiAgICAgICAgdmFyIG1heF9udW1fY2hhciA9IHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXI7XG5cbiAgICAgICAgLy8gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gc2hvd1xuICAgICAgICBwYXJhbXMubGFiZWxzLnNob3dfY2hhciA9IDE1O1xuXG4gICAgICAgIC8vIGNhbGMgaG93IG11Y2ggb2YgdGhlIGxhYmVsIHRvIGtlZXBcbiAgICAgICAgdmFyIGtlZXBfbGFiZWxfc2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgIC5kb21haW4oW3BhcmFtcy5sYWJlbHMuc2hvd19jaGFyLCBtYXhfbnVtX2NoYXJdKVxuICAgICAgICAgIC5yYW5nZShbMSwgcGFyYW1zLmxhYmVscy5zaG93X2NoYXIgLyBtYXhfbnVtX2NoYXJdKS5jbGFtcCgndHJ1ZScpO1xuXG4gICAgICAgIHBhcmFtcy5sYWJlbHMucm93X2tlZXAgPSBrZWVwX2xhYmVsX3NjYWxlKHJvd19tYXhfY2hhcik7XG4gICAgICAgIHBhcmFtcy5sYWJlbHMuY29sX2tlZXAgPSBrZWVwX2xhYmVsX3NjYWxlKGNvbF9tYXhfY2hhcik7XG5cbiAgICAgICAgLy8gZGVmaW5lIGxhYmVsIHNjYWxlXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICB2YXIgbWluX2xhYmVsX3dpZHRoID0gODU7XG4gICAgICAgIHZhciBtYXhfbGFiZWxfd2lkdGggPSAxNDA7XG4gICAgICAgIHZhciBsYWJlbF9zY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgLmRvbWFpbihbbWluX251bV9jaGFyLCBtYXhfbnVtX2NoYXJdKVxuICAgICAgICAgIC5yYW5nZShbbWluX2xhYmVsX3dpZHRoLCBtYXhfbGFiZWxfd2lkdGhdKS5jbGFtcCgndHJ1ZScpO1xuXG4gICAgICAgIC8vIHJvdGF0ZWQgY29sdW1uIGxhYmVscyAtIGFwcHJveCB0cmlnXG4gICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsID0ge307XG4gICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoID0ge307XG5cbiAgICAgICAgLy8gc2NyZWVuX2xhYmVsX3NjYWxlIC0gc21hbGwgcmVkdWN0aW9uXG4gICAgICAgIHZhciBzY3JlZW5fbGFiZWxfc2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgIC5kb21haW4oWzUwMCwgMTAwMF0pXG4gICAgICAgICAgLnJhbmdlKFswLjgsIDEuMF0pXG4gICAgICAgICAgLmNsYW1wKHRydWUpO1xuXG4gICAgICAgIC8vIExhYmVsIFNjYWxlXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIGRlcGVuZGVudCBvbiBtYXggY2hhciBsZW5ndGggb3Igcm93L2NvbCBsYWJlbHMsIHNjcmVlbnNpemUsXG4gICAgICAgIC8vIGFuZCB1c2VyLWRlZmluZWQgZmFjdG9yXG4gICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLnJvdyA9IDEuMiAqIGxhYmVsX3NjYWxlKHJvd19tYXhfY2hhcikgKiBzY3JlZW5fbGFiZWxfc2NhbGUocGFyYW1zLnZpei5zdmdfZGltLndpZHRoKSAqIHBhcmFtcy5yb3dfbGFiZWxfc2NhbGU7XG5cbiAgICAgICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sID0gbGFiZWxfc2NhbGUoY29sX21heF9jaGFyKSAqIHNjcmVlbl9sYWJlbF9zY2FsZShwYXJhbXMudml6LnN2Z19kaW0uaGVpZ2h0KSAqIHBhcmFtcy5jb2xfbGFiZWxfc2NhbGU7XG5cbiAgICAgICAgLy8gbm9ybWFsIGxhYmVsIG1hcmdpbnNcbiAgICAgICAgcGFyYW1zLm5vcm1fbGFiZWwubWFyZ2luID0ge307XG4gICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi5sZWZ0ID0gcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aCArIHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfd2lkdGg7XG4gICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi50b3AgPSBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoICsgcGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aDtcblxuICAgICAgICAvLyByb3cgZ3JvdXBzIC0gb25seSBhZGQgaWYgdGhlIHJvd3MgaGF2ZSBhIGdyb3VwIGF0dHJpYnV0ZVxuICAgICAgICAvLyBEZWZpbmUgdGhlIHNwYWNlIG5lZWRlZCBmb3IgdGhlIGNsYXNzaWZpY2F0aW9uIG9mIHJvd3MgLSBpbmNsdWRlcyBjbGFzc2lmaWNhdGlvbiB0cmlhbmdsZXMgYW5kIHJlY3RzXG4gICAgICAgIHBhcmFtcy5jbGFzc19yb29tID0ge307XG4gICAgICAgIGlmIChwYXJhbXMudml6LnNob3dfZGVuZHJvZ3JhbSkge1xuICAgICAgICAgIC8vIG1ha2Ugcm9vbSBmb3IgZ3JvdXAgcmVjdHNcbiAgICAgICAgICBwYXJhbXMuY2xhc3Nfcm9vbS5yb3cgPSAxODtcbiAgICAgICAgICBwYXJhbXMuY2xhc3Nfcm9vbS5jb2wgPSA5O1xuICAgICAgICAgIC8vIHRoZSB3aWR0aCBvZiB0aGUgY2xhc3NpZmljYXRpb24gdHJpYW5nbGUgb3IgZ3JvdXAgcmVjdGFuZ2xlXG4gICAgICAgICAgcGFyYW1zLmNsYXNzX3Jvb20uc3ltYm9sX3dpZHRoID0gOTtcblxuICAgICAgICAgIGNvbmZpZy5ncm91cF9sZXZlbCA9IHtcbiAgICAgICAgICAgIHJvdzogNSxcbiAgICAgICAgICAgIGNvbDogNVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkbyBub3QgbWFrZSByb29tIGZvciBncm91cCByZWN0c1xuICAgICAgICAgIHBhcmFtcy5jbGFzc19yb29tLnJvdyA9IDk7XG4gICAgICAgICAgcGFyYW1zLmNsYXNzX3Jvb20uY29sID0gMDtcbiAgICAgICAgICAvLyB0aGUgd2lkdGggb2YgdGhlIGNsYXNzaWZpY2F0aW9uIHRyaWFuZ2xlIG9yIGdyb3VwIHJlY3RhbmdsZVxuICAgICAgICAgIHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCA9IDk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBub3JtIGxhYmVsIGJhY2tncm91bmQgd2lkdGgsIG5vcm0tbGFiZWwtd2lkdGggcGx1cyBjbGFzcy13aWR0aCBwbHVzIG1hcmdpblxuICAgICAgICBwYXJhbXMubm9ybV9sYWJlbC5iYWNrZ3JvdW5kID0ge307XG4gICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLmJhY2tncm91bmQucm93ID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgcGFyYW1zLmNsYXNzX3Jvb20ucm93ICsgcGFyYW1zLnZpei51bmlfbWFyZ2luO1xuICAgICAgICBwYXJhbXMubm9ybV9sYWJlbC5iYWNrZ3JvdW5kLmNvbCA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCArIHBhcmFtcy5jbGFzc19yb29tLmNvbCArIHBhcmFtcy52aXoudW5pX21hcmdpbjtcblxuICAgICAgICAvLyBjbHVzdGVyZ3JhbSBkaW1lbnNpb25zXG4gICAgICAgIHBhcmFtcy52aXouY2x1c3QgPSB7fTtcbiAgICAgICAgcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4gPSB7fTtcbiAgICAgICAgLy8gY2x1c3QgbWFyZ2luIGlzIHRoZSBtYXJnaW4gb2YgdGhlIG5vcm1fbGFiZWwgcGx1cyB0aGUgd2lkdGggb2YgdGhlIGVudGlyZSBub3JtX2xhYmVsIGdyb3VwXG4gICAgICAgIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLmxlZnQgPSBwYXJhbXMubm9ybV9sYWJlbC5tYXJnaW4ubGVmdCArIHBhcmFtcy5ub3JtX2xhYmVsLmJhY2tncm91bmQucm93O1xuICAgICAgICBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi50b3AgPSBwYXJhbXMubm9ybV9sYWJlbC5tYXJnaW4udG9wICsgcGFyYW1zLm5vcm1fbGFiZWwuYmFja2dyb3VuZC5jb2w7XG5cbiAgICAgICAgLy8gc3ZnIHNpemU6IGxlc3MgdGhhbiBzdmcgc2l6ZVxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyAwLjggYXBwcm94aW1hdGVzIHRoZSB0cmlnb25vbWV0cmljIGRpc3RhbmNlIHJlcXVpcmVkIGZvciBoaWRpbmcgdGhlIHNwaWxsb3ZlclxuICAgICAgICBwYXJhbXMudml6LnNwaWxsb3Zlcl94X29mZnNldCA9IGxhYmVsX3NjYWxlKGNvbF9tYXhfY2hhcikgKiAwLjcgKiBwYXJhbXMuY29sX2xhYmVsX3NjYWxlO1xuXG5cbiAgICAgICAgLy8gcmVkdWNlIHdpZHRoIGJ5IHJvdy9jb2wgbGFiZWxzIGFuZCBieSBncmV5X2JvcmRlciB3aWR0aCAocmVkdWNlIHdpZHRoIGJ5IGxlc3Mgc2luY2UgdGhpcyBpcyBsZXNzIGFwYXJlbnQgd2l0aCBzbGFudGVkIGNvbCBsYWJlbHMpXG4gICAgICAgIHZhciBpbmlfY2x1c3Rfd2lkdGggPSBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGggLSAocGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aCArXG4gICAgICAgICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgcGFyYW1zLmNsYXNzX3Jvb20ucm93KSAtIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGggLSBwYXJhbXMudml6LnNwaWxsb3Zlcl94X29mZnNldDtcblxuICAgICAgICAvLyB0aGVyZSBpcyBzcGFjZSBiZXR3ZWVuIHRoZSBjbHVzdGVyZ3JhbSBhbmQgdGhlIGJvcmRlclxuICAgICAgICB2YXIgaW5pX2NsdXN0X2hlaWdodCA9IHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQgLSAocGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aCArXG4gICAgICAgICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sICsgcGFyYW1zLmNsYXNzX3Jvb20uY29sKSAtIDUgKiBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoO1xuXG4gICAgICAgIHBhcmFtcy52aXoubnVtX2NvbF9ub2RlcyA9IGNvbF9ub2Rlcy5sZW5ndGg7XG4gICAgICAgIHBhcmFtcy52aXoubnVtX3Jvd19ub2RlcyA9IHJvd19ub2Rlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gY2x1c3RfZGltIC0gY2x1c3RlcmdyYW0gZGltZW5zaW9ucyAodGhlIGNsdXN0ZXJncmFtIGlzIHNtYWxsZXIgdGhhbiB0aGUgc3ZnKVxuICAgICAgICBwYXJhbXMudml6LmNsdXN0LmRpbSA9IHt9O1xuXG4gICAgICAgIC8vIGNsdXN0ZXJncmFtIGhlaWdodFxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gZW5zdXJlIHRoYXQgcmVjdHMgYXJlIG5ldmVyIHRhbGxlciB0aGFuIHRoZXkgYXJlIHdpZGVcbiAgICAgICAgLy8gZm9yY2Ugc3F1YXJlIHRpbGVzXG4gICAgICAgIGlmIChpbmlfY2x1c3Rfd2lkdGggLyBwYXJhbXMudml6Lm51bV9jb2xfbm9kZXMgPCBpbmlfY2x1c3RfaGVpZ2h0IC8gcGFyYW1zLnZpei5udW1fcm93X25vZGVzKSB7XG5cbiAgICAgICAgICAvLyBzY2FsZSB0aGUgaGVpZ2h0XG4gICAgICAgICAgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ID0gaW5pX2NsdXN0X3dpZHRoICogKHBhcmFtcy52aXoubnVtX3Jvd19ub2RlcyAvIHBhcmFtcy52aXoubnVtX2NvbF9ub2Rlcyk7XG5cbiAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3Igbm90IGEgZm9yY2Ugc3F1YXJlIGhhcyBvY2N1cnJlZFxuICAgICAgICAgIC8vIHNvIHRoYXQgSSBjYW4gYWRqdXN0IHRoZSBmb250IGFjY29yZGluZ2x5XG4gICAgICAgICAgcGFyYW1zLnZpei5mb3JjZV9zcXVhcmUgPSAxO1xuXG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgZm9yY2Vfc3F1YXJlIGRvZXMgbm90IGNhdXNlIHRoZSBlbnRpcmUgdmlzdWFsaXphdGlvblxuICAgICAgICAgIC8vIHRvIGJlIHRhbGxlciB0aGFuIHRoZSBzdmcsIGlmIGl0IGRvZXMsIHRoZW4gdW5kb1xuICAgICAgICAgIGlmIChwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgPiBpbmlfY2x1c3RfaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSBoZWlnaHQgZXF1YWwgdG8gdGhlIHdpZHRoXG4gICAgICAgICAgICBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgPSBpbmlfY2x1c3RfaGVpZ2h0O1xuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCBhIGZvcmNlIHNxdWFyZSBoYXMgb2NjdXJyZWRcbiAgICAgICAgICAgIHBhcmFtcy52aXouZm9yY2Vfc3F1YXJlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZG8gbm90IGZvcmNlIHNxdWFyZSB0aWxlc1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvLyB0aGUgaGVpZ2h0IHdpbGwgYmUgY2FsY3VsYXRlZCBub3JtYWxseSAtIGxlYWRpbmcgdG8gd2lkZSB0aWxlc1xuICAgICAgICAgIHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCA9IGluaV9jbHVzdF9oZWlnaHQ7XG4gICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCBhIGZvcmNlIHNxdWFyZSBoYXMgb2NjdXJyZWRcbiAgICAgICAgICBwYXJhbXMudml6LmZvcmNlX3NxdWFyZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYW51YWwgZm9yY2Ugc3F1YXJlXG4gICAgICAgIGlmIChjb25maWcuZm9yY2Vfc3F1YXJlID09PSAxKSB7XG4gICAgICAgICAgcGFyYW1zLnZpei5mb3JjZV9zcXVhcmUgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmaW5lIE9yZGVyaW5nc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLy8gRGVmaW5lIE9yZGVyaW5nc1xuICAgICAgICBwYXJhbXMubWF0cml4Lm9yZGVycyA9IHtcbiAgICAgICAgICAvLyBpbmlcbiAgICAgICAgICBpbmlfcm93OiBkMy5yYW5nZShwYXJhbXMudml6Lm51bV9jb2xfbm9kZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbF9ub2Rlc1tiXS5pbmkgLSBjb2xfbm9kZXNbYV0uaW5pO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGluaV9jb2w6IGQzLnJhbmdlKHBhcmFtcy52aXoubnVtX3Jvd19ub2Rlcykuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gcm93X25vZGVzW2JdLmluaSAtIHJvd19ub2Rlc1thXS5pbmk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgLy8gcmFua1xuICAgICAgICAgIHJhbmtfcm93OiBkMy5yYW5nZShwYXJhbXMudml6Lm51bV9jb2xfbm9kZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbF9ub2Rlc1tiXS5yYW5rIC0gY29sX25vZGVzW2FdLnJhbms7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgcmFua19jb2w6IGQzLnJhbmdlKHBhcmFtcy52aXoubnVtX3Jvd19ub2Rlcykuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gcm93X25vZGVzW2JdLnJhbmsgLSByb3dfbm9kZXNbYV0ucmFuaztcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAvLyBjbHVzdGVyZWRcbiAgICAgICAgICBjbHVzdF9yb3c6IGQzLnJhbmdlKHBhcmFtcy52aXoubnVtX2NvbF9ub2Rlcykuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sX25vZGVzW2JdLmNsdXN0IC0gY29sX25vZGVzW2FdLmNsdXN0O1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGNsdXN0X2NvbDogZDMucmFuZ2UocGFyYW1zLnZpei5udW1fcm93X25vZGVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiByb3dfbm9kZXNbYl0uY2x1c3QgLSByb3dfbm9kZXNbYV0uY2x1c3Q7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgLy8gY2xhc3NcbiAgICAgICAgICBjbGFzc19yb3c6IGQzLnJhbmdlKHBhcmFtcy52aXoubnVtX2NvbF9ub2Rlcykuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sX25vZGVzW2JdLmNsIC0gY29sX25vZGVzW2FdLmNsO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGNsYXNzX2NvbDogZDMucmFuZ2UocGFyYW1zLnZpei5udW1fcm93X25vZGVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiByb3dfbm9kZXNbYl0uY2wgLSByb3dfbm9kZXNbYV0uY2w7XG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcblxuICAgICAgICAvLyAvLyB0aGUgdmlzdWFsaXphdGlvbiBkaW1lbnNpb25zIGNhbiBiZSBzbWFsbGVyIHRoYW4gdGhlIHN2Z1xuICAgICAgICAvLyAvLyBjb2x1bW5zIG5lZWQgdG8gYmUgc2hydW5rIGZvciB3aWRlIHNjcmVlbnNcbiAgICAgICAgLy8gdmFyIG1pbl9jb2xfc2hyaW5rX3NjYWxlID0gZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKFsxMDAsMTUwMF0pLnJhbmdlKFsxLDAuMV0pLmNsYW1wKCd0cnVlJyk7XG4gICAgICAgIC8vIHZhciBtaW5fY29sX3NocmluayA9IG1pbl9jb2xfc2hyaW5rX3NjYWxlKHBhcmFtcy52aXouc3ZnX2RpbS53aWR0aCk7XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIGNsdXN0ZXJncmFtIHdpZHRoXG4gICAgICAgIC8vIHJlZHVjZSBjbHVzdGVyZ3JhbSB3aWR0aCBpZiB0cmlhbmdsZXMgYXJlIHRhbGxlciB0aGFuIHRoZSBub3JtYWwgd2lkdGhcbiAgICAgICAgLy8gb2YgdGhlIGNvbHVtbnNcbiAgICAgICAgdmFyIHRtcF94X3NjYWxlID0gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlQmFuZHMoWzAsIGluaV9jbHVzdF93aWR0aF0pO1xuICAgICAgICB0bXBfeF9zY2FsZS5kb21haW4ocGFyYW1zLm1hdHJpeC5vcmRlcnMuaW5pX3Jvdyk7XG4gICAgICAgIHZhciB0cmlhbmdsZV9oZWlnaHQgPSB0bXBfeF9zY2FsZS5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgIGlmICh0cmlhbmdsZV9oZWlnaHQgPiBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wpIHtcbiAgICAgICAgICBpbmlfY2x1c3Rfd2lkdGggPSBpbmlfY2x1c3Rfd2lkdGggKiAocGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sIC8gdHJpYW5nbGVfaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCA9IGluaV9jbHVzdF93aWR0aDtcblxuXG4gICAgICAgIC8vIHNjYWxpbmcgZnVuY3Rpb25zIHRvIHBvc2l0aW9uIHJvd3MgYW5kIHRpbGVzLCBkZWZpbmUgcmFuZ2VCYW5kc1xuICAgICAgICBwYXJhbXMubWF0cml4Lnhfc2NhbGUgPSBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2VCYW5kcyhbMCwgcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGhdKTtcbiAgICAgICAgcGFyYW1zLm1hdHJpeC55X3NjYWxlID0gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlQmFuZHMoWzAsIHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodF0pO1xuXG4gICAgICAgIC8vIEFzc2lnbiBpbml0aWFsIG9yZGVyaW5nIGZvciB4X3NjYWxlIGFuZCB5X3NjYWxlXG4gICAgICAgIGlmIChwYXJhbXMudml6Lmluc3Rfb3JkZXIgPT09ICdpbmknKSB7XG4gICAgICAgICAgcGFyYW1zLm1hdHJpeC54X3NjYWxlLmRvbWFpbihwYXJhbXMubWF0cml4Lm9yZGVycy5pbmlfcm93KTtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnlfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLmluaV9jb2wpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy52aXouaW5zdF9vcmRlciA9PT0gJ2NsdXN0Jykge1xuICAgICAgICAgIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5kb21haW4ocGFyYW1zLm1hdHJpeC5vcmRlcnMuY2x1c3Rfcm93KTtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnlfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLmNsdXN0X2NvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLnZpei5pbnN0X29yZGVyID09PSAncmFuaycpIHtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnhfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLnJhbmtfcm93KTtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnlfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLnJhbmtfY29sKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMudml6Lmluc3Rfb3JkZXIgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnhfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLmNsYXNzX3Jvdyk7XG4gICAgICAgICAgcGFyYW1zLm1hdHJpeC55X3NjYWxlLmRvbWFpbihwYXJhbXMubWF0cml4Lm9yZGVycy5jbGFzc19jb2wpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmlzdWFsaXphdGlvbiBwYXJhbWV0ZXJzXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8vIGJvcmRlcl93aWR0aCAtIHdpZHRoIG9mIHdoaXRlIGJvcmRlcnMgYXJvdW5kIHRpbGVzXG4gICAgICAgIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC8gNDA7XG5cbiAgICAgICAgLy8gem9vbV9zd2l0Y2ggZnJvbSAxIHRvIDJkIHpvb21cbiAgICAgICAgcGFyYW1zLnZpei56b29tX3N3aXRjaCA9IChwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCAvIHBhcmFtcy52aXoubnVtX2NvbF9ub2RlcykgLyAocGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0IC8gcGFyYW1zLnZpei5udW1fcm93X25vZGVzKTtcblxuICAgICAgICAvLyB6b29tX3N3aXRjaCBjYW4gbm90IGJlIGxlc3MgdGhhbiAxXG4gICAgICAgIGlmIChwYXJhbXMudml6Lnpvb21fc3dpdGNoIDwgMSkge1xuICAgICAgICAgIHBhcmFtcy52aXouem9vbV9zd2l0Y2ggPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZm9udCBzaXplIGNvbnRyb2xzXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gbWluIGFuZCBtYXggbnVtYmVyIG9mIGV4cGVjdGVkIG5vZGVzXG4gICAgICAgIHZhciBtaW5fbm9kZV9udW0gPSAxMDtcbiAgICAgICAgdmFyIG1heF9ub2RlX251bSA9IDMwMDA7XG5cbiAgICAgICAgLy8gbWluIGFuZCBtYXggZXhwZWN0ZWQgc2NyZWVuIHdpZHRoc1xuICAgICAgICB2YXIgbWluX3Zpel93aWR0aCA9IDQwMDtcbiAgICAgICAgdmFyIG1heF92aXpfd2lkdGggPSAyMDAwO1xuXG4gICAgICAgIC8vIHNjYWxlIGZvbnQgb2Zmc2V0LCB3aGVuIHRoZSBmb250IHNpemUgaXMgdGhlIGhlaWdodCBvZiB0aGUgcmVjdHMgdGhlbiBpdCBzaG91bGQgYmUgYWxtb3N0IHRoZSBmdWxsIHdpZHRoIG9mIHRoZSByZWN0c1xuICAgICAgICAvLyB3aGVuIHRoZSBmb250IHNpemUgaXMgc21hbGwsIHRoZW4gdGhlIG9mZnNldCBzaG91bGQgYmUgYWxtb3N0IGVxdWFsIHRvIGhhbGYgdGhlIHJlY3Qgd2lkdGhcbiAgICAgICAgcGFyYW1zLnNjYWxlX2ZvbnRfb2Zmc2V0ID0gZDMuc2NhbGVcbiAgICAgICAgICAubGluZWFyKCkuZG9tYWluKFsxLCAwXSlcbiAgICAgICAgICAucmFuZ2UoWzAuOCwgMC41XSk7XG5cbiAgICAgICAgLy8gdGhlIGRlZmF1bHQgZm9udCBzaXplcyBhcmUgc2V0IGhlcmVcbiAgICAgICAgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX3JvdyA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAqIDEuMDE7XG4gICAgICAgIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wgPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjg3O1xuXG4gICAgICAgIC8vIGluaXRpYWxpemUgZm9udCBzaXplIHpvb21pbmcgcGFyYW1ldGVyc1xuICAgICAgICBwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udCA9IHt9O1xuICAgICAgICBwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5yb3cgPSAxO1xuICAgICAgICBwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5jb2wgPSAxO1xuXG4gICAgICAgIC8vIGFsbG93IHVzZXIgdG8gZG8gJ3JlYWwnIDJEIHpvb20gdW50aWwgdmlzdWFsIGFpZCBjb2x1bW4gdHJpYW5nbGVcbiAgICAgICAgLy8gaXMgYXMgdGFsbCBhcyB0aGUgbm9ybWFsIGxhYmVsIHdpZHRoXG4gICAgICAgIHBhcmFtcy52aXoucmVhbF96b29tID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sIC8gKHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAvIDIpO1xuXG4gICAgICAgIC8vIHNldCBvcGFjaXR5IHNjYWxlXG4gICAgICAgIHBhcmFtcy5tYXRyaXgubWF4X2xpbmsgPSBsb2Rhc2gubWF4KG5ldHdvcmtfZGF0YS5saW5rcywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLmFicyhkLnZhbHVlKTtcbiAgICAgICAgfSkudmFsdWU7XG5cbiAgICAgICAgLy8gc2V0IG9wYWNpdHlfc2NhbGVcbiAgICAgICAgLy8gaW5wdXQgZG9tYWluIG9mIDAgbWVhbnMgc2V0IHRoZSBkb21haW4gYXV0b21hdGljYWxseVxuICAgICAgICBpZiAoY29uZmlnLmlucHV0X2RvbWFpbiA9PT0gMCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgZG9tYWluIHVzaW5nIHRoZSBtYXhpbXVtIGFic29sdXRlIHZhbHVlXG4gICAgICAgICAgaWYgKHBhcmFtcy5tYXRyaXgub3BhY2l0eV9mdW5jdGlvbiA9PT0gJ2xpbmVhcicpIHtcbiAgICAgICAgICAgIHBhcmFtcy5tYXRyaXgub3BhY2l0eV9zY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAgIC5kb21haW4oWzAsIE1hdGguYWJzKHBhcmFtcy5tYXRyaXgubWF4X2xpbmspXSkuY2xhbXAodHJ1ZSlcbiAgICAgICAgICAgICAgLnJhbmdlKFswLjAsIDEuMF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLm1hdHJpeC5vcGFjaXR5X2Z1bmN0aW9uID09PSAnbG9nJykge1xuICAgICAgICAgICAgcGFyYW1zLm1hdHJpeC5vcGFjaXR5X3NjYWxlID0gZDMuc2NhbGUubG9nKClcbiAgICAgICAgICAgICAgLmRvbWFpbihbMC4wMDEsIE1hdGguYWJzKHBhcmFtcy5tYXRyaXgubWF4X2xpbmspXSkuY2xhbXAodHJ1ZSlcbiAgICAgICAgICAgICAgLnJhbmdlKFswLjAsIDEuMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIGRvbWFpbiBtYW51YWxseVxuICAgICAgICAgIGlmIChwYXJhbXMubWF0cml4Lm9wYWNpdHlfZnVuY3Rpb24gPT09ICdsaW5lYXInKSB7XG4gICAgICAgICAgICBwYXJhbXMubWF0cml4Lm9wYWNpdHlfc2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgICAuZG9tYWluKFswLCBjb25maWcuaW5wdXRfZG9tYWluXSkuY2xhbXAodHJ1ZSlcbiAgICAgICAgICAgICAgLnJhbmdlKFswLjAsIDEuMF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLm1hdHJpeC5vcGFjaXR5X2Z1bmN0aW9uID09PSAnbG9nJykge1xuICAgICAgICAgICAgcGFyYW1zLm1hdHJpeC5vcGFjaXR5X3NjYWxlID0gZDMuc2NhbGUubG9nKClcbiAgICAgICAgICAgICAgLmRvbWFpbihbMC4wMDEsIGNvbmZpZy5pbnB1dF9kb21haW5dKS5jbGFtcCh0cnVlKVxuICAgICAgICAgICAgICAucmFuZ2UoWzAuMCwgMS4wXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaXMgYSB0cmFuc2l0aW9uIHJ1bm5pbmcgY3VycmVudGx5XG4gICAgICAgIHBhcmFtcy52aXoucnVuX3RyYW5zID0gZmFsc2U7XG5cbiAgICAgICAgLy8gdGlsZSB0eXBlOiBzaW1wbGUgb3IgZ3JvdXBcbiAgICAgICAgLy8gcmVjdCBpcyB0aGUgZGVmYXVsdCBmYXN0ZXIgYW5kIHNpbXBsZXIgb3B0aW9uXG4gICAgICAgIC8vIGdyb3VwIGlzIHRoZSBvcHRpb25hbCBzbG93ZXIgYW5kIG1vcmUgY29tcGxleCBvcHRpb24gdGhhdCBpcyBhY3RpdmF0ZWQgd2l0aDogaGlnaGxpZ2h0aW5nIG9yIHNwbGl0IHRpbGVzXG4gICAgICAgIGlmIChVdGlscy5oYXMobmV0d29ya19kYXRhLmxpbmtzWzBdLCAndmFsdWVfdXAnKSB8fCBVdGlscy5oYXMobmV0d29ya19kYXRhLmxpbmtzWzBdLCAnaGlnaGxpZ2h0JykpIHtcbiAgICAgICAgICBwYXJhbXMubWF0cml4LnRpbGVfdHlwZSA9ICdncm91cCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyYW1zLm1hdHJpeC50aWxlX3R5cGUgPSAnc2ltcGxlJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGlmIHJlY3RzIHNob3VsZCBiZSBoaWdobGlnaHRlZFxuICAgICAgICBpZiAoVXRpbHMuaGFzKG5ldHdvcmtfZGF0YS5saW5rc1swXSwgJ2hpZ2hsaWdodCcpKSB7XG4gICAgICAgICAgcGFyYW1zLm1hdHJpeC5oaWdobGlnaHQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmFtcy5tYXRyaXguaGlnaGxpZ2h0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICB9XG5cbiAgICAgIC8vIHBhcmVudF9kaXY6IHNpemUgYW5kIHBvc2l0aW9uIHN2ZyBjb250YWluZXIgLSBzdmdfZGl2XG4gICAgICBmdW5jdGlvbiBwYXJlbnRfZGl2X3NpemVfcG9zKHBhcmFtcykge1xuXG4gICAgICAgIC8vIGdldCBvdXRlcl9tYXJnaW5zXG4gICAgICAgIGlmIChwYXJhbXMudml6LmV4cGFuZCA9PSBmYWxzZSkge1xuICAgICAgICAgIHZhciBvdXRlcl9tYXJnaW5zID0gcGFyYW1zLnZpei5vdXRlcl9tYXJnaW5zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvdXRlcl9tYXJnaW5zID0gcGFyYW1zLnZpei5vdXRlcl9tYXJnaW5zX2V4cGFuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMudml6LnJlc2l6ZSkge1xuXG4gICAgICAgICAgLy8gZ2V0IHRoZSBzaXplIG9mIHRoZSB3aW5kb3dcbiAgICAgICAgICB2YXIgc2NyZWVuX3dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgdmFyIHNjcmVlbl9oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICAgICAgICAvLyBkZWZpbmUgd2lkdGggYW5kIGhlaWdodCBvZiBjbHVzdGVyZ3JhbSBjb250YWluZXJcbiAgICAgICAgICB2YXIgY29udF9kaW0gPSB7fTtcbiAgICAgICAgICBjb250X2RpbS53aWR0aCA9IHNjcmVlbl93aWR0aCAtIG91dGVyX21hcmdpbnMubGVmdCAtIG91dGVyX21hcmdpbnMucmlnaHQ7XG4gICAgICAgICAgY29udF9kaW0uaGVpZ2h0ID0gc2NyZWVuX2hlaWdodCAtIG91dGVyX21hcmdpbnMudG9wIC0gb3V0ZXJfbWFyZ2lucy5ib3R0b207XG5cbiAgICAgICAgICAvLyBzaXplIHRoZSBzdmcgY29udGFpbmVyIGRpdiAtIHN2Z19kaXZcbiAgICAgICAgICBkMy5zZWxlY3QoJyMnICsgcGFyYW1zLnZpei5zdmdfZGl2X2lkKVxuICAgICAgICAgICAgLnN0eWxlKCdtYXJnaW4tbGVmdCcsIG91dGVyX21hcmdpbnMubGVmdCArICdweCcpXG4gICAgICAgICAgICAuc3R5bGUoJ21hcmdpbi10b3AnLCBvdXRlcl9tYXJnaW5zLnRvcCArICdweCcpXG4gICAgICAgICAgICAuc3R5bGUoJ3dpZHRoJywgY29udF9kaW0ud2lkdGggKyAncHgnKVxuICAgICAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBjb250X2RpbS5oZWlnaHQgKyAncHgnKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgLy8gc2l6ZSB0aGUgc3ZnIGNvbnRhaW5lciBkaXYgLSBzdmdfZGl2XG4gICAgICAgICAgZDMuc2VsZWN0KCcjJyArIHBhcmFtcy52aXouc3ZnX2Rpdl9pZClcbiAgICAgICAgICAgIC5zdHlsZSgnbWFyZ2luLWxlZnQnLCBvdXRlcl9tYXJnaW5zLmxlZnQgKyAncHgnKVxuICAgICAgICAgICAgLnN0eWxlKCdtYXJnaW4tdG9wJywgb3V0ZXJfbWFyZ2lucy50b3AgKyAncHgnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW1zO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTGFiZWxzKGFyZ3MpIHtcblxuXG4gICAgICAvLyBtYWtlIHJvdyBsYWJlbHNcbiAgICAgIGZ1bmN0aW9uIG1ha2Vfcm93cyhwYXJhbXMsIHJvd19ub2RlcywgcmVvcmRlcikge1xuXG4gICAgICAgIGZ1bmN0aW9uIG5vcm1hbF9uYW1lKGQpIHtcbiAgICAgICAgICB2YXIgaW5zdF9uYW1lID0gZC5uYW1lLnJlcGxhY2UoL18vZywgJyAnKS5zcGxpdCgnIycpWzBdO1xuICAgICAgICAgIGlmIChpbnN0X25hbWUubGVuZ3RoID4gcGFyYW1zLmxhYmVscy5tYXhfbGFiZWxfY2hhcikge1xuICAgICAgICAgICAgaW5zdF9uYW1lID0gaW5zdF9uYW1lLnN1YnN0cmluZygwLCBwYXJhbXMubGFiZWxzLm1heF9sYWJlbF9jaGFyKSArICcuLic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpbnN0X25hbWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcm93X2NvbnRhaW5lciA9IGQzLnNlbGVjdCgnI21haW5fc3ZnJylcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignaWQnLCAncm93X2NvbnRhaW5lcicpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi5sZWZ0ICsgJywnICtcbiAgICAgICAgICAgIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcCArICcpJyk7XG5cbiAgICAgICAgLy8gd2hpdGUgYmFja2dyb3VuZFxuICAgICAgICByb3dfY29udGFpbmVyXG4gICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBwYXJhbXMudml6LmJhY2tncm91bmRfY29sb3IpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm5vcm1fbGFiZWwuYmFja2dyb3VuZC5yb3cpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDMwICogcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ICsgJ3B4JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnd2hpdGVfYmFycycpO1xuXG4gICAgICAgIC8vIGNvbnRhaW5lciBmb3Igcm93IGxhYmVsIGdyb3Vwc1xuICAgICAgICByb3dfY29udGFpbmVyXG4gICAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xhYmVsX2NvbnRhaW5lcicpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLnJvdyArICcsMCknKVxuICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgIC5hdHRyKCdpZCcsICdyb3dfbGFiZWxzJyk7XG5cblxuXG5cbiAgICAgICAgdmFyIHJvd19sYWJlbHMgPSBkMy5zZWxlY3QoJyNyb3dfbGFiZWxzJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCdnJylcbiAgICAgICAgICAuZGF0YShyb3dfbm9kZXMpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAncm93X2xhYmVsX3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGluZGV4KSArICcpJztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbignZGJsY2xpY2snLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZW9yZGVyLnJvd19yZW9yZGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAocGFyYW1zLnRpbGVfY2xpY2tfaGxpZ2h0KSB7XG4gICAgICAgICAgICAgIGFkZF9yb3dfY2xpY2tfaGxpZ2h0KHRoaXMsIGQuaW5pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuXG4gICAgICAgIGlmIChwYXJhbXMubGFiZWxzLnNob3dfdG9vbHRpcHMpIHtcbiAgICAgICAgICAvLyBkMy10b29sdGlwXG4gICAgICAgICAgdmFyIHRpcCA9IGQzLnRpcCgpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnZDMtdGlwJylcbiAgICAgICAgICAgIC5kaXJlY3Rpb24oJ2UnKVxuICAgICAgICAgICAgLm9mZnNldChbMCwgMTBdKVxuICAgICAgICAgICAgLmh0bWwoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICB2YXIgaW5zdF9uYW1lID0gZC5uYW1lLnJlcGxhY2UoL18vZywgJyAnKS5zcGxpdCgnIycpWzBdO1xuICAgICAgICAgICAgICByZXR1cm4gXCI8c3Bhbj5cIiArIGluc3RfbmFtZSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgIGQzLnNlbGVjdCgnIycgKyBwYXJhbXMudml6LnN2Z19kaXZfaWQpXG4gICAgICAgICAgICAuc2VsZWN0KCdzdmcnKVxuICAgICAgICAgICAgLnNlbGVjdCgnI3Jvd19jb250YWluZXInKVxuICAgICAgICAgICAgLmNhbGwodGlwKTtcblxuICAgICAgICAgIHJvd19sYWJlbHNcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRpcC5zaG93KGQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbiBtb3VzZW91dChkKSB7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5zZWxlY3QoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgICAgICAgIHRpcC5oaWRlKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm93X2xhYmVsc1xuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5zZWxlY3QoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdhY3RpdmUnLCB0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gbW91c2VvdXQoZCkge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIGFwcGVuZCByZWN0YW5nbGUgYmVoaW5kIHRleHRcbiAgICAgICAgcm93X2xhYmVsc1xuICAgICAgICAgIC5pbnNlcnQoJ3JlY3QnLCAndGV4dCcpXG4gICAgICAgICAgLmF0dHIoJ3gnLCAtMTApXG4gICAgICAgICAgLmF0dHIoJ3knLCAwKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIDEwKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAxMClcbiAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcblxuICAgICAgICAvLyBhcHBlbmQgcm93IGxhYmVsIHRleHRcbiAgICAgICAgcm93X2xhYmVsc1xuICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd5JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpICogMC43NSlcbiAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnZW5kJylcbiAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgKyAncHgnKVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxfbmFtZShkKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBjaGFuZ2UgdGhlIHNpemUgb2YgdGhlIGhpZ2hsaWdodGluZyByZWN0c1xuICAgICAgICByb3dfbGFiZWxzXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYmJveCA9IGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuc2VsZWN0KCd0ZXh0JylbMF1bMF1cbiAgICAgICAgICAgICAgLmdldEJCb3goKTtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBiYm94LngpXG4gICAgICAgICAgICAgIC5hdHRyKCd5JywgMClcbiAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgYmJveC53aWR0aClcbiAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSlcbiAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RfaGwgPSAneWVsbG93JztcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdF9obDtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0X29wYWNpdHkgPSAwO1xuICAgICAgICAgICAgICAgIC8vIGhpZ2hsaWdodCB0YXJnZXQgZ2VuZXNcbiAgICAgICAgICAgICAgICBpZiAoZC50YXJnZXQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgIGluc3Rfb3BhY2l0eSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0X29wYWNpdHk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGxhYmVsIHRoZSB3aWRlc3Qgcm93IGFuZCBjb2wgbGFiZWxzXG4gICAgICAgIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXggPSB7fTtcbiAgICAgICAgcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3cgPSAwO1xuXG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdG1wX3dpZHRoID0gZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpLm5vZGUoKS5nZXRCQm94KCkud2lkdGg7XG4gICAgICAgICAgaWYgKHRtcF93aWR0aCA+IHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93KSB7XG4gICAgICAgICAgICBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LnJvdyA9IHRtcF93aWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJvdyB0cmlhbmdsZXNcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgdmFyIHJvd19sYWJlbF92aXogPSByb3dfY29udGFpbmVyXG4gICAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ3Jvd19sYWJlbF92aXonKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cgKyAnLDApJylcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignaWQnLCAncm93X2xhYmVsX3RyaWFuZ2xlcycpO1xuXG4gICAgICAgIC8vIHdoaXRlIGJhY2tncm91bmQgZm9yIHRyaWFuZ2xlXG4gICAgICAgIHJvd19sYWJlbF92aXpcbiAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnd2hpdGVfYmFycycpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBwYXJhbXMudml6LmJhY2tncm91bmRfY29sb3IpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLmNsYXNzX3Jvb20ucm93ICsgJ3B4JylcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5zdF9oZWlnaHQgPSBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQ7XG4gICAgICAgICAgICByZXR1cm4gaW5zdF9oZWlnaHQ7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZ3JvdXBzIHRvIGhvbGQgbGFiZWxfdml6XG4gICAgICAgIHZhciByb3dfdHJpYW5nbGVfaW5pX2dyb3VwID0gcm93X2xhYmVsX3ZpelxuICAgICAgICAgIC5zZWxlY3RBbGwoJ2cnKVxuICAgICAgICAgIC5kYXRhKHJvd19ub2RlcylcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdyb3dfdHJpYW5nbGVfZ3JvdXAnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwgJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpbmRleCkgKyAnKSc7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIHRyaWFuZ2xlc1xuICAgICAgICByb3dfdHJpYW5nbGVfaW5pX2dyb3VwXG4gICAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBvcmlnaW5feCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCAtIDE7XG4gICAgICAgICAgICB2YXIgb3JpZ2luX3kgPSAwO1xuICAgICAgICAgICAgdmFyIG1pZF94ID0gMTtcbiAgICAgICAgICAgIHZhciBtaWRfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgICAgICB2YXIgZmluYWxfeCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCAtIDE7XG4gICAgICAgICAgICB2YXIgZmluYWxfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKTtcbiAgICAgICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00gJyArIG9yaWdpbl94ICsgJywnICsgb3JpZ2luX3kgKyAnIEwgJyArXG4gICAgICAgICAgICAgIG1pZF94ICsgJywnICsgbWlkX3kgKyAnLCBMICcgKyBmaW5hbF94ICsgJywnICsgZmluYWxfeSArICcgWic7XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0X3N0cmluZztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgLy8gaW5pdGFpbGl6ZSBjb2xvclxuICAgICAgICAgICAgdmFyIGluc3RfY29sb3IgPSAnI2VlZSc7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmxhYmVscy5zaG93X2NhdGVnb3JpZXMpIHtcbiAgICAgICAgICAgICAgaW5zdF9jb2xvciA9IHBhcmFtcy5sYWJlbHMuY2xhc3NfY29sb3JzLnJvd1tkLmNsXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnN0X2NvbG9yO1xuICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgaWYgKFV0aWxzLmhhcyhwYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2Rlc1swXSwgJ3ZhbHVlJykpIHtcblxuICAgICAgICAgIC8vIHNldCBiYXIgc2NhbGVcbiAgICAgICAgICB2YXIgZW5yX21heCA9IE1hdGguYWJzKGxvZGFzaC5tYXgocm93X25vZGVzLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoZC52YWx1ZSlcbiAgICAgICAgICB9KS52YWx1ZSk7XG4gICAgICAgICAgcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfcm93ID0gZDMuc2NhbGVcbiAgICAgICAgICAgIC5saW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihbMCwgZW5yX21heF0pXG4gICAgICAgICAgICAucmFuZ2UoWzAsIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLnJvd10pO1xuXG4gICAgICAgICAgcm93X2xhYmVsc1xuICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAncm93X2JhcnMnKVxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICB2YXIgaW5zdF92YWx1ZSA9IDA7XG4gICAgICAgICAgICAgIGluc3RfdmFsdWUgPSBwYXJhbXMubGFiZWxzLmJhcl9zY2FsZV9yb3coTWF0aC5hYnMoZC52YWx1ZSkpO1xuICAgICAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICAgICAgICBpbnN0X3ZhbHVlID0gLXBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX3JvdyhNYXRoLmFicyhkLnZhbHVlKSk7XG4gICAgICAgICAgICAgIHJldHVybiBpbnN0X3ZhbHVlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGQudmFsdWUgPiAwID8gcGFyYW1zLm1hdHJpeC5iYXJfY29sb3JzWzBdIDogcGFyYW1zLm1hdHJpeC5iYXJfY29sb3JzWzFdO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKCdvcGFjaXR5JywgMC40KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJvdyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpXG4gICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmNsaWNrX2xhYmVsID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcGFyYW1zLmNsaWNrX2xhYmVsKGQubmFtZSwgJ3JvdycpO1xuICAgICAgICAgICAgICBhZGRfcm93X2NsaWNrX2hsaWdodCh0aGlzLCBkLmluaSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAocGFyYW1zLnRpbGVfY2xpY2tfaGxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYWRkX3Jvd19jbGlja19obGlnaHQodGhpcywgZC5pbmkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9KVxuXG5cbiAgICAgICAgZnVuY3Rpb24gYWRkX3Jvd19jbGlja19obGlnaHQoY2xpY2tlZF9yb3csIGlkX2NsaWNrZWRfcm93KSB7XG5cbiAgICAgICAgICBpZiAoaWRfY2xpY2tlZF9yb3cgIT0gcGFyYW1zLmNsaWNrX2hsaWdodF9yb3cpIHtcblxuICAgICAgICAgICAgdmFyIHJlbF93aWR0aF9obGlnaHQgPSA2O1xuICAgICAgICAgICAgdmFyIG9wYWNpdHlfaGxpZ2h0ID0gMC44NTtcbiAgICAgICAgICAgIHZhciBobGlnaHRfd2lkdGggPSByZWxfd2lkdGhfaGxpZ2h0ICogcGFyYW1zLnZpei5ib3JkZXJfd2lkdGg7XG4gICAgICAgICAgICB2YXIgaGxpZ2h0X2hlaWdodCA9IHJlbF93aWR0aF9obGlnaHQgKiBwYXJhbXMudml6LmJvcmRlcl93aWR0aCAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG5cbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNsaWNrX2hsaWdodCcpXG4gICAgICAgICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgICAgICAgLy8gLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIHJvd1xuICAgICAgICAgICAgLy8gZDMuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgICAgICAgLy8gICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgLy8gICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgICAgIC8vICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG5cbiAgICAgICAgICAgIGQzLnNlbGVjdChjbGlja2VkX3JvdylcbiAgICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjbGlja19obGlnaHQnKVxuICAgICAgICAgICAgICAuYXR0cignaWQnLCAncm93X3RvcF9obGlnaHQnKVxuICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgICAgICAgICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy5tYXRyaXguaGxpZ2h0X2NvbG9yKVxuICAgICAgICAgICAgICAuYXR0cignb3BhY2l0eScsIG9wYWNpdHlfaGxpZ2h0KTtcblxuICAgICAgICAgICAgZDMuc2VsZWN0KGNsaWNrZWRfcm93KVxuICAgICAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NsaWNrX2hsaWdodCcpXG4gICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdyb3dfYm90dG9tX2hsaWdodCcpXG4gICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy52aXouc3ZnX2RpbS53aWR0aClcbiAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhsaWdodF9oZWlnaHQpXG4gICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLm1hdHJpeC5obGlnaHRfY29sb3IpXG4gICAgICAgICAgICAgIC5hdHRyKCdvcGFjaXR5Jywgb3BhY2l0eV9obGlnaHQpXG4gICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZV95ID0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodDtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyB0bXBfdHJhbnNsYXRlX3kgKyAnKSc7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jbGlja19obGlnaHQnKVxuICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICBwYXJhbXMuY2xpY2tfaGxpZ2h0X3JvdyA9IC02NjY7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvLyByb3cgbGFiZWwgdGV4dCB3aWxsIG5vdCBzcGlsbG92ZXIgaW5pdGlhbGx5IHNpbmNlXG4gICAgICAgIC8vIHRoZSBmb250LXNpemUgaXMgc2V0IHVwIHRvIG5vdCBhbGxvdyBzcGlsbG92ZXJcbiAgICAgICAgLy8gaXQgY2FuIHNwaWxsb3ZlciBkdXJpbmcgem9vbWluZyBhbmQgbXVzdCBiZSBjb25zdHJhaW5lZFxuXG4gICAgICAgIC8vIHJldHVybiByb3dfdHJpYW5nbGVfaW5pX2dyb3VwIHNvIHRoYXQgdGhlIGRlbmRyb2dyYW0gY2FuIGJlIG1hZGVcbiAgICAgICAgcmV0dXJuIHJvd190cmlhbmdsZV9pbmlfZ3JvdXA7XG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2UgY29sIGxhYmVsc1xuICAgICAgZnVuY3Rpb24gbWFrZV9jb2xzKHBhcmFtcywgY29sX25vZGVzLCByZW9yZGVyKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gbm9ybWFsX25hbWUoZCkge1xuICAgICAgICAgIHZhciBpbnN0X25hbWUgPSBkLm5hbWUucmVwbGFjZSgvXy9nLCAnICcpLnNwbGl0KCcjJylbMF07XG4gICAgICAgICAgaWYgKGluc3RfbmFtZS5sZW5ndGggPiBwYXJhbXMubGFiZWxzLm1heF9sYWJlbF9jaGFyKSB7XG4gICAgICAgICAgICBpbnN0X25hbWUgPSBpbnN0X25hbWUuc3Vic3RyaW5nKDAsIHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXIpICsgJy4uJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RfbmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1ha2UgY29udGFpbmVyIHRvIHByZS1wb3NpdGlvbiB6b29tYWJsZSBlbGVtZW50c1xuICAgICAgICB2YXIgY29udGFpbmVyX2FsbF9jb2wgPSBkMy5zZWxlY3QoJyNtYWluX3N2ZycpXG4gICAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2NvbF9jb250YWluZXInKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0ICsgJywnICtcbiAgICAgICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi50b3AgKyAnKScpO1xuXG4gICAgICAgIC8vIHdoaXRlIGJhY2tncm91bmQgcmVjdCBmb3IgY29sIGxhYmVsc1xuICAgICAgICBjb250YWluZXJfYWxsX2NvbFxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yKSAvLyEhIHByb2dfY29sb3JzXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgMzAgKiBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCArICdweCcpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5ub3JtX2xhYmVsLmJhY2tncm91bmQuY29sKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd3aGl0ZV9iYXJzJyk7XG5cbiAgICAgICAgLy8gY29sIGxhYmVsc1xuICAgICAgICBjb250YWluZXJfYWxsX2NvbFxuICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsYWJlbF9jb250YWluZXInKVxuICAgICAgICAgIC8vIHBvc2l0aW9uIHRoZSBvdXRlciBjb2wgbGFiZWwgZ3JvdXBcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wgKyAnKScpXG4gICAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2NvbF9sYWJlbHMnKTtcblxuICAgICAgICAvLyBvZmZzZXQgY2xpY2sgZ3JvdXAgY29sdW1uIGxhYmVsXG4gICAgICAgIHZhciB4X29mZnNldF9jbGljayA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAvIDIgKyBwYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgLy8gcmVkdWNlIHdpZHRoIG9mIHJvdGF0ZWQgcmVjdHNcbiAgICAgICAgdmFyIHJlZHVjZV9yZWN0X3dpZHRoID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpICogMC4zNjtcblxuXG4gICAgICAgIC8vIGFkZCBtYWluIGNvbHVtbiBsYWJlbCBncm91cFxuICAgICAgICB2YXIgY29sX2xhYmVsX29iaiA9IGQzLnNlbGVjdCgnI2NvbF9sYWJlbHMnKVxuICAgICAgICAgIC5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfdGV4dCcpXG4gICAgICAgICAgLmRhdGEoY29sX25vZGVzKVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NvbF9sYWJlbF90ZXh0JylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoaW5kZXgpICsgJykgcm90YXRlKC05MCknO1xuICAgICAgICAgIH0pXG5cbiAgICAgICAgLy8gYXBwZW5kIGdyb3VwIGZvciBpbmRpdmlkdWFsIGNvbHVtbiBsYWJlbFxuICAgICAgICB2YXIgY29sX2xhYmVsX2NsaWNrID0gY29sX2xhYmVsX29ialxuICAgICAgICAgIC8vIGFwcGVuZCBuZXcgZ3JvdXAgZm9yIHJlY3QgYW5kIGxhYmVsIChub3Qgd2hpdGUgbGluZXMpXG4gICAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NvbF9sYWJlbF9jbGljaycpXG4gICAgICAgICAgLy8gcm90YXRlIGNvbHVtbiBsYWJlbHNcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC8gMiArICcsJyArIHhfb2Zmc2V0X2NsaWNrICsgJykgcm90YXRlKDQ1KScpXG4gICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgICAgICAgICAgLy8gdGlwLnNob3coZClcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRpcC5oaWRlKGQpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIGNvbHVtbiBsYWJlbFxuICAgICAgICBjb2xfbGFiZWxfY2xpY2tcbiAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAuYXR0cigneCcsIDApXG4gICAgICAgICAgLy8gbWFudWFsbHkgdHVuZWRcbiAgICAgICAgICAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuNjQpXG4gICAgICAgICAgLmF0dHIoJ2R4JywgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgpXG4gICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ3N0YXJ0JylcbiAgICAgICAgICAuYXR0cignZnVsbF9uYW1lJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQubmFtZTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC8vIG9yaWdpbmFsIGZvbnQgc2l6ZVxuICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCArICdweCcpXG4gICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbF9uYW1lKGQpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYXJhbXMubGFiZWxzLnNob3dfdG9vbHRpcHMpIHtcblxuICAgICAgICAgIC8vIGQzLXRvb2x0aXBcbiAgICAgICAgICB2YXIgdGlwID0gZDMudGlwKClcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdkMy10aXAnKVxuICAgICAgICAgICAgLmRpcmVjdGlvbigncycpXG4gICAgICAgICAgICAub2Zmc2V0KFsyMCwgMF0pXG4gICAgICAgICAgICAuaHRtbChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHZhciBpbnN0X25hbWUgPSBkLm5hbWUucmVwbGFjZSgvXy9nLCAnICcpLnNwbGl0KCcjJylbMF07XG4gICAgICAgICAgICAgIHJldHVybiBcIjxzcGFuPlwiICsgaW5zdF9uYW1lICsgXCI8L3NwYW4+XCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBkMy5zZWxlY3QoJyMnICsgcGFyYW1zLnZpei5zdmdfZGl2X2lkKVxuICAgICAgICAgICAgLnNlbGVjdCgnc3ZnJylcbiAgICAgICAgICAgIC5zZWxlY3QoJyNyb3dfY29udGFpbmVyJylcbiAgICAgICAgICAgIC5jYWxsKHRpcCk7XG5cbiAgICAgICAgICBjb2xfbGFiZWxfb2JqXG4gICAgICAgICAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgdGlwLnNob3cpXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgdGlwLmhpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2wgPSAwO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0bXBfd2lkdGggPSBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0Jykubm9kZSgpLmdldEJCb3goKS53aWR0aDtcbiAgICAgICAgICBpZiAodG1wX3dpZHRoID4gcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2wpIHtcbiAgICAgICAgICAgIC8vIGluY3JlYXNlIHRoZSBhcHBhcmVudCB3aWR0aCBvZiB0aGUgY29sdW1uIGxhYmVsIHNpbmNlIGl0cyByb3RhdGVkXG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgZ2l2ZSBtb3JlIHJvb20gZm9yIHRleHRcbiAgICAgICAgICAgIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXguY29sID0gdG1wX3dpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgd2lkZXN0IHJvdyBvciBjb2wgYXJlIHdpZGVyIHRoYW4gdGhlIGFsbG93ZWQgbGFiZWwgd2lkdGhcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIHBhcmFtcy5pbmlfc2NhbGVfZm9udCA9IHt9O1xuICAgICAgICBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQucm93ID0gMTtcbiAgICAgICAgcGFyYW1zLmluaV9zY2FsZV9mb250LmNvbCA9IDE7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93ID4gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93KSB7XG5cbiAgICAgICAgICAvLyBjYWxjIHJlZHVjdGlvbiBpbiBmb250IHNpemVcbiAgICAgICAgICBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQucm93ID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93IC8gcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3c7XG4gICAgICAgICAgLy8gcmVkZWZpbmUgYm91bmRpbmdfd2lkdGhfbWF4LnJvd1xuICAgICAgICAgIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93ID0gcGFyYW1zLmluaV9zY2FsZV9mb250LnJvdyAqIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93O1xuXG4gICAgICAgICAgLy8gcmVkZWZpbmUgZGVmYXVsdCBmc1xuICAgICAgICAgIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgPSBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICogcGFyYW1zLmluaV9zY2FsZV9mb250LnJvdztcblxuICAgICAgICAgIC8vIHJlZHVjZSBmb250IHNpemVcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICsgJ3B4Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2wgPiBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wpIHtcbiAgICAgICAgICBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQuY29sID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sIC8gcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2w7XG4gICAgICAgICAgLy8gcmVkZWZpbmUgYm91bmRpbmdfd2lkdGhfbWF4LmNvbFxuICAgICAgICAgIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXguY29sID0gcGFyYW1zLmluaV9zY2FsZV9mb250LmNvbCAqIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXguY29sO1xuICAgICAgICAgIC8vIHJlZGVmaW5lIGRlZmF1bHQgZnNcbiAgICAgICAgICBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfY29sID0gcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCAqIHBhcmFtcy5pbmlfc2NhbGVfZm9udC5jb2w7XG4gICAgICAgICAgLy8gcmVkdWNlIGZvbnQgc2l6ZVxuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF9jbGljaycpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfY29sICsgJ3B4Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhcHBlbmQgcmVjdGFuZ2xlIGJlaGluZCB0ZXh0XG4gICAgICAgIGNvbF9sYWJlbF9jbGlja1xuICAgICAgICAgIC5pbnNlcnQoJ3JlY3QnLCAndGV4dCcpXG4gICAgICAgICAgLmF0dHIoJ3gnLCAxMClcbiAgICAgICAgICAuYXR0cigneScsIDApXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgMTApXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDEwKVxuICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIC8vIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgaGlnaGxpZ2h0aW5nIHJlY3RzXG4gICAgICAgIGNvbF9sYWJlbF9jbGlja1xuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGJib3ggPSBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLnNlbGVjdCgndGV4dCcpWzBdWzBdXG4gICAgICAgICAgICAgIC5nZXRCQm94KCk7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgICAgIC5hdHRyKCd4JywgYmJveC54ICogMS4yNSlcbiAgICAgICAgICAgICAgLmF0dHIoJ3knLCAwKVxuICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBiYm94LndpZHRoICogMS4yNSlcbiAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuNilcbiAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgJ3llbGxvdycpXG4gICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFkZCB0cmlhbmdsZSB1bmRlciByb3RhdGVkIGxhYmVsc1xuICAgICAgICBjb2xfbGFiZWxfY2xpY2tcbiAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDApXG4gICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIHggYW5kIHkgYXJlIGZsaXBwZWQgc2luY2UgaXRzIHJvdGF0ZWRcbiAgICAgICAgICAgIHZhciBvcmlnaW5feSA9IC1wYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgICAgIHZhciBzdGFydF94ID0gMDtcbiAgICAgICAgICAgIHZhciBmaW5hbF94ID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC0gcmVkdWNlX3JlY3Rfd2lkdGg7XG4gICAgICAgICAgICB2YXIgc3RhcnRfeSA9IC0ocGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC0gcmVkdWNlX3JlY3Rfd2lkdGggK1xuICAgICAgICAgICAgICBwYXJhbXMudml6LmJvcmRlcl93aWR0aCk7XG4gICAgICAgICAgICB2YXIgZmluYWxfeSA9IC1wYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00gJyArIG9yaWdpbl95ICsgJywwIEwgJyArIHN0YXJ0X3kgKyAnLCcgK1xuICAgICAgICAgICAgICBzdGFydF94ICsgJywgTCAnICsgZmluYWxfeSArICcsJyArIGZpbmFsX3ggKyAnIFonO1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHZhciBpbnN0X2NvbG9yID0gJyNlZWUnO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5sYWJlbHMuc2hvd19jYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgIGluc3RfY29sb3IgPSBwYXJhbXMubGFiZWxzLmNsYXNzX2NvbG9ycy5jb2xbZC5jbF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zdF9jb2xvcjtcbiAgICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIGdldCBtYXggdmFsdWVcbiAgICAgICAgdmFyIGVucl9tYXggPSBNYXRoLmFicyhsb2Rhc2gubWF4KGNvbF9ub2RlcywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLmFicyhkLnZhbHVlKVxuICAgICAgICB9KS52YWx1ZSk7XG4gICAgICAgIHZhciBlbnJfbWluID0gTWF0aC5hYnMobG9kYXNoLm1pbihjb2xfbm9kZXMsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoZC52YWx1ZSlcbiAgICAgICAgfSkudmFsdWUpO1xuXG4gICAgICAgIC8vIHRoZSBlbnJpY2htZW50IGJhciBzaG91bGQgYmUgMy80dGhzIG9mIHRoZSBoZWlnaHQgb2YgdGhlIGNvbHVtbiBsYWJlbHNcbiAgICAgICAgcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfY29sID0gZDMuc2NhbGVcbiAgICAgICAgICAubGluZWFyKClcbiAgICAgICAgICAuZG9tYWluKFtlbnJfbWluICogMC43NSwgZW5yX21heF0pXG4gICAgICAgICAgLnJhbmdlKFswLCBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2xdKTtcblxuICAgICAgICAvLyBhcHBlbmQgY29sdW1uIHZhbHVlIGJhcnNcbiAgICAgICAgaWYgKFV0aWxzLmhhcyhwYXJhbXMubmV0d29ya19kYXRhLmNvbF9ub2Rlc1swXSwgJ3ZhbHVlJykpIHtcbiAgICAgICAgICBjb2xfbGFiZWxfY2xpY2tcbiAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NvbF9iYXJzJylcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICAgICAgICBpZiAoZC52YWx1ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBpbnN0X3ZhbHVlID0gcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfY29sKGQudmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBpbnN0X3ZhbHVlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIHJvdGF0ZSBsYWJlbHMgLSByZWR1Y2Ugd2lkdGggaWYgcm90YXRpbmdcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjY2KVxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkLnZhbHVlID4gMCA/IHBhcmFtcy5tYXRyaXguYmFyX2NvbG9yc1swXSA6IHBhcmFtcy5tYXRyaXguYmFyX2NvbG9yc1sxXTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cignb3BhY2l0eScsIDAuNCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIGFkZCBjb2wgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbihkKSB7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmNsaWNrX2xhYmVsID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcGFyYW1zLmNsaWNrX2xhYmVsKGQubmFtZSwgJ2NvbCcpO1xuICAgICAgICAgICAgICBhZGRfY29sX2NsaWNrX2hsaWdodCh0aGlzLCBkLmluaSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgIGlmIChwYXJhbXMudGlsZV9jbGlja19obGlnaHQpIHtcbiAgICAgICAgICAgICAgICBhZGRfY29sX2NsaWNrX2hsaWdodCh0aGlzLCBkLmluaSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ2RibGNsaWNrJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmVvcmRlci5jb2xfcmVvcmRlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy50aWxlX2NsaWNrX2hsaWdodCkge1xuICAgICAgICAgICAgICBhZGRfY29sX2NsaWNrX2hsaWdodCh0aGlzLCBkLmluaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cblxuICAgICAgICBmdW5jdGlvbiBhZGRfY29sX2NsaWNrX2hsaWdodChjbGlja2VkX2NvbCwgaWRfY2xpY2tlZF9jb2wpIHtcblxuICAgICAgICAgIGlmIChpZF9jbGlja2VkX2NvbCAhPSBwYXJhbXMuY2xpY2tfaGxpZ2h0X2NvbCkge1xuXG4gICAgICAgICAgICBwYXJhbXMuY2xpY2tfaGxpZ2h0X2NvbCA9IGlkX2NsaWNrZWRfY29sO1xuXG4gICAgICAgICAgICB2YXIgcmVsX3dpZHRoX2hsaWdodCA9IDY7XG4gICAgICAgICAgICB2YXIgb3BhY2l0eV9obGlnaHQgPSAwLjg1O1xuICAgICAgICAgICAgdmFyIGhsaWdodF93aWR0aCA9IHJlbF93aWR0aF9obGlnaHQgKiBwYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgICAgIHZhciBobGlnaHRfaGVpZ2h0ID0gcmVsX3dpZHRoX2hsaWdodCAqIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoIC8gcGFyYW1zLnZpei56b29tX3N3aXRjaDtcblxuICAgICAgICAgICAgZDMuc2VsZWN0QWxsKCcuY2xpY2tfaGxpZ2h0JylcbiAgICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAvLyAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgY29sdW1uXG4gICAgICAgICAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyAvLyB1bmhpbGlnaHQgYW5kIHVuYm9sZCBhbGwgY29sdW1ucyAoYWxyZWFkeSB1bmJvbGRlZCBlYXJsaWVyKVxuICAgICAgICAgICAgLy8gZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgICAgICAgLy8gICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgICAgIC8vICAgLnN0eWxlKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICAgICAvLyAvLyBoaWdobGlnaHQgY29sdW1uIG5hbWVcbiAgICAgICAgICAgIC8vIGQzLnNlbGVjdChjbGlja2VkX2NvbClcbiAgICAgICAgICAgIC8vICAgLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgICAvLyAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuXG4gICAgICAgICAgICBkMy5zZWxlY3QoY2xpY2tlZF9jb2wpXG4gICAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2xpY2tfaGxpZ2h0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ2NvbF90b3BfaGxpZ2h0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0KVxuICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGxpZ2h0X3dpZHRoKVxuICAgICAgICAgICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy5tYXRyaXguaGxpZ2h0X2NvbG9yKVxuICAgICAgICAgICAgICAuYXR0cignb3BhY2l0eScsIG9wYWNpdHlfaGxpZ2h0KVxuICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IC0ocGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAgIHBhcmFtcy5jbGFzc19yb29tLmNvbCArIHBhcmFtcy52aXoudW5pX21hcmdpbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGVfeCArICcsJyArIHRtcF90cmFuc2xhdGVfeSArICcpJztcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGQzLnNlbGVjdChjbGlja2VkX2NvbClcbiAgICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjbGlja19obGlnaHQnKVxuICAgICAgICAgICAgICAuYXR0cignaWQnLCAnY29sX2JvdHRvbV9obGlnaHQnKVxuICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQpXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfd2lkdGgpXG4gICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLm1hdHJpeC5obGlnaHRfY29sb3IpXG4gICAgICAgICAgICAgIC5hdHRyKCdvcGFjaXR5Jywgb3BhY2l0eV9obGlnaHQpXG4gICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyByZXZlcnNlIHggYW5kIHkgc2luY2Ugcm90YXRlZFxuICAgICAgICAgICAgICAgIHZhciB0bXBfdHJhbnNsYXRlX3kgPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfd2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IC0ocGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAgIHBhcmFtcy5jbGFzc19yb29tLmNvbCArIHBhcmFtcy52aXoudW5pX21hcmdpbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGVfeCArICcsJyArIHRtcF90cmFuc2xhdGVfeSArICcpJztcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNsaWNrX2hsaWdodCcpXG4gICAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHBhcmFtcy5jbGlja19obGlnaHRfY29sID0gLTY2NjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250YWluZXJfYWxsX2NvbDtcblxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYWtlX3Jvd3M6IG1ha2Vfcm93cyxcbiAgICAgICAgbWFrZV9jb2xzOiBtYWtlX2NvbHNcbiAgICAgIH07XG5cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIFN1cGVyTGFiZWxzKCkge1xuXG4gICAgICBmdW5jdGlvbiBtYWtlKHBhcmFtcykge1xuXG4gICAgICAgIC8vIHN1cGVyIGNvbCB0aXRsZVxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIGFkZCBzdXBlciBjb2x1bW4gdGl0bGUgYmFja2dyb3VuZFxuICAgICAgICBkMy5zZWxlY3QoJyNtYWluX3N2ZycpXG4gICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBwYXJhbXMudml6LmJhY2tncm91bmRfY29sb3IpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfd2lkdGggKyAncHgnKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsICczMDAwcHgnKVxuICAgICAgICAgIC5hdHRyKCdpZCcsICdzdXBlcl9jb2xfYmtnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnd2hpdGVfYmFycycpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aCArICcpJyk7XG5cbiAgICAgICAgLy8gc3VwZXIgY29sIHRpdGxlXG4gICAgICAgIGQzLnNlbGVjdCgnI21haW5fc3ZnJylcbiAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAuYXR0cignaWQnLCAnc3VwZXJfY29sJylcbiAgICAgICAgICAudGV4dChwYXJhbXMubGFiZWxzLnN1cGVyLmNvbClcbiAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnY2VudGVyJylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5zdF94ID0gcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGggLyAyICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGhcbiAgICAgICAgICAgICAgLnJvdztcbiAgICAgICAgICAgIHZhciBpbnN0X3kgPSBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoIC0gcGFyYW1zLnZpei51bmlfbWFyZ2luO1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGluc3RfeCArICcsJyArIGluc3RfeSArICcpJztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzE0cHgnKVxuICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAzMDApO1xuXG4gICAgICAgIC8vIHN1cGVyIHJvdyB0aXRsZVxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIGQzLnNlbGVjdCgnI21haW5fc3ZnJylcbiAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy52aXouYmFja2dyb3VuZF9jb2xvcilcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICsgJ3B4JylcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgJzMwMDBweCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ3N1cGVyX3Jvd19ia2cnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd3aGl0ZV9iYXJzJylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aCArICcsMCknKTtcblxuICAgICAgICAvLyBhcHBlbmQgc3VwZXIgdGl0bGUgcm93IGdyb3VwXG4gICAgICAgIC8vIHRoaXMgaXMgdXNlZCB0byBzZXBhcmF0ZSB0cmFuc2xhdGlvbiBmcm9tIHJvdGF0aW9uXG4gICAgICAgIGQzLnNlbGVjdCgnI21haW5fc3ZnJylcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignaWQnLCAnc3VwZXJfcm93JylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBwb3NpdGlvbiBpbiB0aGUgbWlkZGxlIG9mIHRoZSBjbHVzdGVyZ3JhbVxuICAgICAgICAgICAgdmFyIGluc3RfeCA9IHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfd2lkdGggLSBwYXJhbXMudml6LnVuaV9tYXJnaW47XG4gICAgICAgICAgICB2YXIgaW5zdF95ID0gcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0IC8gMiArIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoXG4gICAgICAgICAgICAgIC5jb2w7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgaW5zdF94ICsgJywnICsgaW5zdF95ICsgJyknO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHN1cGVyIHJvdyBsYWJlbCAocm90YXRlIHRoZSBhbHJlYWR5IHRyYW5zbGF0ZWQgdGl0bGUgKVxuICAgICAgICBkMy5zZWxlY3QoJyNzdXBlcl9yb3cnKVxuICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgIC50ZXh0KHBhcmFtcy5sYWJlbHMuc3VwZXIucm93KVxuICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdjZW50ZXInKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAncm90YXRlKC05MCknKVxuICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzE0cHgnKVxuICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAzMDApO1xuXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1ha2U6IG1ha2VcbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKiBTcGlsbG92ZXIgTW9kdWxlXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3BpbGxvdmVyKHBhcmFtcywgY29udGFpbmVyX2FsbF9jb2wpIHtcblxuICAgICAgLy8gbWFrZSBzcGlsbG92ZXIgcHJvdGVjdGlvbiBkaXZzXG4gICAgICBtYWtlKHBhcmFtcywgY29udGFpbmVyX2FsbF9jb2wpO1xuXG4gICAgICBmdW5jdGlvbiBtYWtlKHBhcmFtcywgY29udGFpbmVyX2FsbF9jb2wpIHtcblxuICAgICAgICAvLyBTcGlsbG92ZXIgUHJvdGVjdGlvblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8vIGhpZGUgc3BpbGxvdmVyIGZyb20gc2xhbnRlZCBjb2x1bW4gbGFiZWxzIG9uIHJpZ2h0IHNpZGVcbiAgICAgICAgY29udGFpbmVyX2FsbF9jb2xcbiAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsICcwJylcbiAgICAgICAgICAvLyBtaW5pLWxhbmd1YWdlIGZvciBkcmF3aW5nIHBhdGggaW4gZDMsIHVzZWQgdG8gZHJhdyB0cmlhbmdsZVxuICAgICAgICAgIC5hdHRyKCdkJywgJ00gMCwwIEwgNTAwLC01MDAsIEwgNTAwLDAgWicpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBwYXJhbXMudml6LmJhY2tncm91bmRfY29sb3IpIC8vISEgcHJvZ19jb2xvcnNcbiAgICAgICAgICAuYXR0cignaWQnLCAncmlnaHRfc2xhbnRfdHJpYW5nbGUnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCArICcsJyArXG4gICAgICAgICAgICBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wgKyAnKScpO1xuXG4gICAgICAgIC8vIGhpZGUgc3BpbGxvdmVyIGZyb20gc2xhbnRlZCBjb2x1bW4gbGFiZWxzIG9uIGxlZnQgc2lkZVxuICAgICAgICBjb250YWluZXJfYWxsX2NvbFxuICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgJzAnKVxuICAgICAgICAgIC8vIG1pbmktbGFuZ3VhZ2UgZm9yIGRyYXdpbmcgcGF0aCBpbiBkMywgdXNlZCB0byBkcmF3IHRyaWFuZ2xlXG4gICAgICAgICAgLmF0dHIoJ2QnLCAnTSAwLDAgTCA1MDAsLTUwMCwgTCAwLC01MDAgWicpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBwYXJhbXMudml6LmJhY2tncm91bmRfY29sb3IpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2xlZnRfc2xhbnRfdHJpYW5nbGUnKVxuICAgICAgICAgIC8vIHNoaWZ0IGxlZnQgYnkgMSBweCB0byBwcmV2ZW50IGN1dHRpbmcgb2ZmIGxhYmVsc1xuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKC0xLCcgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wgK1xuICAgICAgICAgICAgJyknKTtcblxuICAgICAgICAvLyB0b3AgY29ybmVyIHJlY3RcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyB3aGl0ZSByZWN0IHRvIGNvdmVyIGV4Y2VzcyBsYWJlbHNcbiAgICAgICAgZDMuc2VsZWN0KCcjbWFpbl9zdmcnKVxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yKSAvLyEhIHByb2dfY29sb3JzXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4ubGVmdClcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4udG9wKVxuICAgICAgICAgIC5hdHRyKCdpZCcsICd0b3BfbGVmdF93aGl0ZScpO1xuXG4gICAgICAgIC8vIGhpZGUgc3BpbGxvdmVyIGZyb20gcmlnaHRcbiAgICAgICAgZDMuc2VsZWN0KCcjbWFpbl9zdmcnKVxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yKSAvLyEhIHByb2dfY29sb3JzXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgJzMwMHB4JylcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgJzMwMDBweCcpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRtcF9sZWZ0ID0gcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4ubGVmdCArIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoO1xuICAgICAgICAgICAgdmFyIHRtcF90b3AgPSBwYXJhbXMubm9ybV9sYWJlbC5tYXJnaW4udG9wICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGhcbiAgICAgICAgICAgICAgLmNvbDtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB0bXBfbGVmdCArICcsJyArIHRtcF90b3AgKyAnKSc7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnd2hpdGVfYmFycycpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ3JpZ2h0X3NwaWxsb3ZlcicpO1xuXG4gICAgICAgIC8vIHdoaXRlIGJvcmRlciBib3R0b20gLSBwcmV2ZW50IGNsdXN0ZXJncmFtIGZyb20gaGl0dGluZyBib3JkZXJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBkMy5zZWxlY3QoJyNtYWluX3N2ZycpXG4gICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2JvdHRvbV9zcGlsbG92ZXInKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yKSAvLyEhIHByb2dfY29sb3JzXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5zdmdfZGltLndpZHRoKVxuICAgICAgICAgIC8vIG1ha2UgdGhpcyBib3JkZXIgdHdpY2UgdGhlIHdpZHRoIG9mIHRoZSBncmV5IGJvcmRlclxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAyICogcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBzaGlmdCB1cCBlbm91Z2ggdG8gc2hvdyB0aGUgZW50aXJlIGJvcmRlciB3aWR0aFxuICAgICAgICAgICAgdmFyIGluc3Rfb2Zmc2V0ID0gcGFyYW1zLnZpei5zdmdfZGltLmhlaWdodCAtIDMgKiBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoO1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgaW5zdF9vZmZzZXQgKyAnKSc7XG4gICAgICAgICAgfSk7XG5cblxuICAgICAgfVxuXG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldF92aXN1YWxpemF0aW9uX3NpemUocGFyYW1zKSB7XG5cbiAgICAgIC8vIGdldCBvdXRlcl9tYXJnaW5zXG4gICAgICBpZiAocGFyYW1zLnZpei5leHBhbmQgPT0gZmFsc2UpIHtcbiAgICAgICAgdmFyIG91dGVyX21hcmdpbnMgPSBwYXJhbXMudml6Lm91dGVyX21hcmdpbnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3V0ZXJfbWFyZ2lucyA9IHBhcmFtcy52aXoub3V0ZXJfbWFyZ2luc19leHBhbmQ7XG4gICAgICB9XG5cbiAgICAgIC8vIGdldCB0aGUgc2l6ZSBvZiB0aGUgd2luZG93XG4gICAgICB2YXIgc2NyZWVuX3dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB2YXIgc2NyZWVuX2hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgICAgLy8gZGVmaW5lIHdpZHRoIGFuZCBoZWlnaHQgb2YgY2x1c3RlcmdyYW0gY29udGFpbmVyXG4gICAgICB2YXIgY29udF9kaW0gPSB7fTtcbiAgICAgIGNvbnRfZGltLndpZHRoID0gc2NyZWVuX3dpZHRoIC0gb3V0ZXJfbWFyZ2lucy5sZWZ0IC0gb3V0ZXJfbWFyZ2lucy5yaWdodDtcbiAgICAgIGNvbnRfZGltLmhlaWdodCA9IHNjcmVlbl9oZWlnaHQgLSBvdXRlcl9tYXJnaW5zLnRvcCAtIG91dGVyX21hcmdpbnMuYm90dG9tO1xuXG4gICAgICBydW5fcmVzZXRfdmlzdWFsaXphdGlvbl9zaXplKGNvbnRfZGltLndpZHRoLCBjb250X2RpbS5oZWlnaHQsIG91dGVyX21hcmdpbnMubGVmdCwgb3V0ZXJfbWFyZ2lucy50b3AsIHBhcmFtcyk7XG5cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHJ1bl9yZXNldF92aXN1YWxpemF0aW9uX3NpemUoc2V0X2NsdXN0X3dpZHRoLCBzZXRfY2x1c3RfaGVpZ2h0LCBzZXRfbWFyZ2luX2xlZnQsIHNldF9tYXJnaW5fdG9wLCBwYXJhbWV0ZXJzKSB7XG5cbiAgICAgIHZhciBwYXJhbXMgPSBwYXJhbWV0ZXJzIHx8IHRoaXMucGFyYW1zO1xuXG4gICAgICAvLyByZXNldCB6b29tXG4gICAgICAvLyB6b29tLnR3b190cmFuc2xhdGVfem9vbSgwLDAsMSlcbiAgICAgIHZhciB6b29tX3kgPSAxO1xuICAgICAgdmFyIHpvb21feCA9IDE7XG4gICAgICB2YXIgcGFuX2R4ID0gMDtcbiAgICAgIHZhciBwYW5fZHkgPSAwO1xuXG5cbiAgICAgIHZhciBoYWxmX2hlaWdodCA9IHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCAvIDI7XG4gICAgICB2YXIgY2VudGVyX3kgPSAtKHpvb21feSAtIDEpICogaGFsZl9oZWlnaHQ7XG5cbiAgICAgIC8vIHRyYW5zZm9ybSBjbHVzdCBncm91cFxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgLy8gZDMuc2VsZWN0KCcjY2x1c3RfZ3JvdXAnKVxuICAgICAgdml6LmdldF9jbHVzdF9ncm91cCgpXG4gICAgICAgIC8vIGZpcnN0IGFwcGx5IHRoZSBtYXJnaW4gdHJhbnNmb3JtYXRpb25cbiAgICAgICAgLy8gdGhlbiB6b29tLCB0aGVuIGFwcGx5IHRoZSBmaW5hbCB0cmFuc2Zvcm1hdGlvblxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgWzAsIDAgKyBjZW50ZXJfeV0gKyAnKScgK1xuICAgICAgICAgICcgc2NhbGUoJyArIDEgKyAnLCcgKyB6b29tX3kgKyAnKScgKyAndHJhbnNsYXRlKCcgKyBbcGFuX2R4LFxuICAgICAgICAgICAgcGFuX2R5XG4gICAgICAgICAgXSArICcpJyk7XG5cbiAgICAgIC8vIHRyYW5zZm9ybSByb3cgbGFiZWxzXG4gICAgICBkMy5zZWxlY3QoJyNyb3dfbGFiZWxzJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFswLCBjZW50ZXJfeV0gKyAnKScgKyAnIHNjYWxlKCcgK1xuICAgICAgICAgIHpvb21feSArICcsJyArIHpvb21feSArICcpJyArICd0cmFuc2xhdGUoJyArIFswLCBwYW5fZHldICsgJyknKTtcblxuICAgICAgLy8gdHJhbnNmb3JtIHJvd19sYWJlbF90cmlhbmdsZXNcbiAgICAgIC8vIHVzZSB0aGUgb2Zmc2V0IHNhdmVkIGluIHBhcmFtcywgb25seSB6b29tIGluIHRoZSB5IGRpcmVjdGlvblxuICAgICAgZDMuc2VsZWN0KCcjcm93X2xhYmVsX3RyaWFuZ2xlcycpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBbMCwgY2VudGVyX3ldICsgJyknICsgJyBzY2FsZSgnICtcbiAgICAgICAgICAxICsgJywnICsgem9vbV95ICsgJyknICsgJ3RyYW5zbGF0ZSgnICsgWzAsIHBhbl9keV0gKyAnKScpO1xuXG4gICAgICAvLyB0cmFuc2Zvcm0gY29sIGxhYmVsc1xuICAgICAgZDMuc2VsZWN0KCcjY29sX2xhYmVscycpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAnIHNjYWxlKCcgKyAxICsgJywnICsgMSArICcpJyArICd0cmFuc2xhdGUoJyArIFtcbiAgICAgICAgICBwYW5fZHgsIDBcbiAgICAgICAgXSArICcpJyk7XG5cbiAgICAgIC8vIHRyYW5zZm9ybSBjb2xfY2xhc3NcbiAgICAgIGQzLnNlbGVjdCgnI2NvbF9jbGFzcycpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAnIHNjYWxlKCcgKyAxICsgJywnICsgMSArICcpJyArICd0cmFuc2xhdGUoJyArIFtcbiAgICAgICAgICBwYW5fZHgsIDBcbiAgICAgICAgXSArICcpJyk7XG5cbiAgICAgIC8vIHNldCB5IHRyYW5zbGF0ZTogY2VudGVyX3kgaXMgcG9zaXRpdmUsIHBvc2l0aXZlIG1vdmVzIHRoZSB2aXN1YWxpemF0aW9uIGRvd25cbiAgICAgIC8vIHRoZSB0cmFuc2xhdGUgdmVjdG9yIGhhcyB0aGUgaW5pdGlhbCBtYXJnaW4sIHRoZSBmaXJzdCB5IGNlbnRlcmluZywgYW5kIHBhbl9keVxuICAgICAgLy8gdGltZXMgdGhlIHNjYWxpbmcgem9vbV95XG4gICAgICB2YXIgbmV0X3lfb2Zmc2V0ID0gcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4udG9wICsgY2VudGVyX3kgKyBwYW5fZHkgKiB6b29tX3k7XG5cbiAgICAgIC8vIHJlc2V0IHRoZSB6b29tIHRyYW5zbGF0ZSBhbmQgem9vbVxuICAgICAgcGFyYW1zLnpvb20uc2NhbGUoem9vbV95KTtcbiAgICAgIHBhcmFtcy56b29tLnRyYW5zbGF0ZShbcGFuX2R4LCBuZXRfeV9vZmZzZXRdKTtcblxuXG5cbiAgICAgIC8vIHNpemUgdGhlIHN2ZyBjb250YWluZXIgZGl2IC0gc3ZnX2RpdlxuICAgICAgZDMuc2VsZWN0KCcjJyArIHBhcmFtcy52aXouc3ZnX2Rpdl9pZClcbiAgICAgICAgLnN0eWxlKCdtYXJnaW4tbGVmdCcsIHNldF9tYXJnaW5fbGVmdCArICdweCcpXG4gICAgICAgIC5zdHlsZSgnbWFyZ2luLXRvcCcsIHNldF9tYXJnaW5fdG9wICsgJ3B4JylcbiAgICAgICAgLnN0eWxlKCd3aWR0aCcsIHNldF9jbHVzdF93aWR0aCArICdweCcpXG4gICAgICAgIC5zdHlsZSgnaGVpZ2h0Jywgc2V0X2NsdXN0X2hlaWdodCArICdweCcpO1xuXG4gICAgICAvLyBnZXQgaGVpZ2h0IGFuZCB3aWR0aCBmcm9tIHBhcmVudCBkaXZcbiAgICAgIHBhcmFtcy52aXouc3ZnX2RpbSA9IHt9O1xuICAgICAgcGFyYW1zLnZpei5zdmdfZGltLndpZHRoID0gTnVtYmVyKGQzLnNlbGVjdCgnIycgKyBwYXJhbXMudml6LnN2Z19kaXZfaWQpLnN0eWxlKCd3aWR0aCcpLnJlcGxhY2UoJ3B4JywgJycpKTtcbiAgICAgIHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQgPSBOdW1iZXIoZDMuc2VsZWN0KCcjJyArIHBhcmFtcy52aXouc3ZnX2Rpdl9pZCkuc3R5bGUoJ2hlaWdodCcpLnJlcGxhY2UoJ3B4JywgJycpKTtcblxuXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAvLyByZXNpemluZyBsYWJlbHMgb24gc2NyZWVuIHJlc2l6ZSB3aWxsIGJlIGRvbmUgbGF0ZXJcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgLy8gLy8gZGVmaW5lIGxhYmVsIHNjYWxlIHBhcmFtZXRlcnM6IHRoZSBtb3JlIGNoYXJhY3RlcnMgaW4gdGhlIGxvbmdlc3QgbmFtZSwgdGhlIGxhcmdlciB0aGUgbWFyZ2luXG4gICAgICAvLyB2YXIgbWluX251bV9jaGFyID0gNTtcbiAgICAgIC8vIHZhciBtYXhfbnVtX2NoYXIgPSBwYXJhbXMubGFiZWxzLm1heF9sYWJlbF9jaGFyO1xuXG4gICAgICAvLyAvLyBkZWZpbmUgbGFiZWwgc2NhbGVcbiAgICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgLy8gdmFyIG1pbl9sYWJlbF93aWR0aCA9IDg1O1xuICAgICAgLy8gdmFyIG1heF9sYWJlbF93aWR0aCA9IDE0MDtcbiAgICAgIC8vIHZhciBsYWJlbF9zY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAvLyAgIC5kb21haW4oW21pbl9udW1fY2hhciwgbWF4X251bV9jaGFyXSlcbiAgICAgIC8vICAgLnJhbmdlKFttaW5fbGFiZWxfd2lkdGgsIG1heF9sYWJlbF93aWR0aF0pLmNsYW1wKCd0cnVlJyk7XG5cbiAgICAgIC8vIC8vIHNjcmVlbl9sYWJlbF9zY2FsZVxuICAgICAgLy8gdmFyIHNjcmVlbl9sYWJlbF9zY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAvLyAgIC5kb21haW4oWzUwMCwxMDAwXSlcbiAgICAgIC8vICAgLnJhbmdlKFswLjUsMS4wXSlcbiAgICAgIC8vICAgLmNsYW1wKHRydWUpO1xuXG4gICAgICAvLyAvLyBMYWJlbCBTY2FsZVxuICAgICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgIC8vIC8vIGRlcGVuZGVudCBvbiBtYXggY2hhciBsZW5ndGggb3Igcm93L2NvbCBsYWJlbHMsIHNjcmVlbnNpemUsXG4gICAgICAvLyAvLyBhbmQgdXNlci1kZWZpbmVkIGZhY3RvclxuICAgICAgLy8gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ID0gMS4yKmxhYmVsX3NjYWxlKHBhcmFtcy5sYWJlbHMucm93X21heF9jaGFyKVxuICAgICAgLy8gICAqIHNjcmVlbl9sYWJlbF9zY2FsZShwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAvLyAgICogcGFyYW1zLnJvd19sYWJlbF9zY2FsZTtcblxuICAgICAgLy8gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sID0gbGFiZWxfc2NhbGUocGFyYW1zLmxhYmVscy5jb2xfbWF4X2NoYXIpXG4gICAgICAvLyAgICogc2NyZWVuX2xhYmVsX3NjYWxlKHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQpXG4gICAgICAvLyAgICogcGFyYW1zLmNvbF9sYWJlbF9zY2FsZTtcblxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIC8vIHJlZHVjZSB3aWR0aCBieSByb3cvY29sIGxhYmVscyBhbmQgYnkgZ3JleV9ib3JkZXIgd2lkdGggKHJlZHVjZSB3aWR0aCBieSBsZXNzIHNpbmNlIHRoaXMgaXMgbGVzcyBhcGFyZW50IHdpdGggc2xhbnRlZCBjb2wgbGFiZWxzKVxuICAgICAgdmFyIGluaV9jbHVzdF93aWR0aCA9IHBhcmFtcy52aXouc3ZnX2RpbS53aWR0aCAtIChwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICtcbiAgICAgICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgcGFyYW1zLmNsYXNzX3Jvb20ucm93KSAtIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGggLSBwYXJhbXMudml6LnNwaWxsb3Zlcl94X29mZnNldDtcblxuICAgICAgLy8gdGhlcmUgaXMgc3BhY2UgYmV0d2VlbiB0aGUgY2x1c3RlcmdyYW0gYW5kIHRoZSBib3JkZXJcbiAgICAgIHZhciBpbmlfY2x1c3RfaGVpZ2h0ID0gcGFyYW1zLnZpei5zdmdfZGltLmhlaWdodCAtIChwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICtcbiAgICAgICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sICsgcGFyYW1zLmNsYXNzX3Jvb20uY29sKSAtIDUgKiBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoO1xuXG4gICAgICAvLyAvLyB0aGUgdmlzdWFsaXphdGlvbiBkaW1lbnNpb25zIGNhbiBiZSBzbWFsbGVyIHRoYW4gdGhlIHN2Z1xuICAgICAgLy8gLy8gY29sdW1ucyBuZWVkIHRvIGJlIHNocnVuayBmb3Igd2lkZSBzY3JlZW5zXG4gICAgICAvLyB2YXIgbWluX2NvbF9zaHJpbmtfc2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKS5kb21haW4oWzEwMCwxNTAwXSkucmFuZ2UoWzEsMC4xXSkuY2xhbXAoJ3RydWUnKTtcbiAgICAgIC8vIHZhciBtaW5fY29sX3NocmluayA9IG1pbl9jb2xfc2hyaW5rX3NjYWxlKHBhcmFtcy52aXouc3ZnX2RpbS53aWR0aCk7XG5cbiAgICAgIC8vIHJlZHVjZSBjbHVzdGVyZ3JhbSB3aWR0aCBpZiB0cmlhbmdsZXMgYXJlIHRhbGxlciB0aGFuIHRoZSBub3JtYWwgd2lkdGhcbiAgICAgIC8vIG9mIHRoZSBjb2x1bW5zXG4gICAgICB2YXIgdG1wX3hfc2NhbGUgPSBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2VCYW5kcyhbMCwgaW5pX2NsdXN0X3dpZHRoXSk7XG4gICAgICB0bXBfeF9zY2FsZS5kb21haW4ocGFyYW1zLm1hdHJpeC5vcmRlcnMuaW5pX3Jvdyk7XG4gICAgICB2YXIgdHJpYW5nbGVfaGVpZ2h0ID0gdG1wX3hfc2NhbGUucmFuZ2VCYW5kKCkgLyAyO1xuICAgICAgaWYgKHRyaWFuZ2xlX2hlaWdodCA+IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCkge1xuICAgICAgICBpbmlfY2x1c3Rfd2lkdGggPSBpbmlfY2x1c3Rfd2lkdGggKiAocGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sIC8gdHJpYW5nbGVfaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoID0gaW5pX2NsdXN0X3dpZHRoO1xuXG5cbiAgICAgIC8vIGNsdXN0ZXJncmFtIGhlaWdodFxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAvLyBlbnN1cmUgdGhhdCByZWN0cyBhcmUgbmV2ZXIgdGFsbGVyIHRoYW4gdGhleSBhcmUgd2lkZVxuICAgICAgLy8gZm9yY2Ugc3F1YXJlIHRpbGVzXG4gICAgICBpZiAoaW5pX2NsdXN0X3dpZHRoIC8gcGFyYW1zLnZpei5udW1fY29sX25vZGVzIDwgaW5pX2NsdXN0X2hlaWdodCAvIHBhcmFtcy52aXoubnVtX3Jvd19ub2Rlcykge1xuXG4gICAgICAgIC8vIHNjYWxlIHRoZSBoZWlnaHRcbiAgICAgICAgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ID0gaW5pX2NsdXN0X3dpZHRoICogKHBhcmFtcy52aXoubnVtX3Jvd19ub2RlcyAvIHBhcmFtcy52aXoubnVtX2NvbF9ub2Rlcyk7XG5cbiAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCBhIGZvcmNlIHNxdWFyZSBoYXMgb2NjdXJyZWRcbiAgICAgICAgLy8gc28gdGhhdCBJIGNhbiBhZGp1c3QgdGhlIGZvbnQgYWNjb3JkaW5nbHlcbiAgICAgICAgcGFyYW1zLnZpei5mb3JjZV9zcXVhcmUgPSAxO1xuXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IGZvcmNlX3NxdWFyZSBkb2VzIG5vdCBjYXVzZSB0aGUgZW50aXJlIHZpc3VhbGl6YXRpb25cbiAgICAgICAgLy8gdG8gYmUgdGFsbGVyIHRoYW4gdGhlIHN2ZywgaWYgaXQgZG9lcywgdGhlbiB1bmRvXG4gICAgICAgIGlmIChwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgPiBpbmlfY2x1c3RfaGVpZ2h0KSB7XG4gICAgICAgICAgLy8gbWFrZSB0aGUgaGVpZ2h0IGVxdWFsIHRvIHRoZSB3aWR0aFxuICAgICAgICAgIHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCA9IGluaV9jbHVzdF9oZWlnaHQ7XG4gICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCBhIGZvcmNlIHNxdWFyZSBoYXMgb2NjdXJyZWRcbiAgICAgICAgICBwYXJhbXMudml6LmZvcmNlX3NxdWFyZSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGRvIG5vdCBmb3JjZSBzcXVhcmUgdGlsZXNcbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyB0aGUgaGVpZ2h0IHdpbGwgYmUgY2FsY3VsYXRlZCBub3JtYWxseSAtIGxlYWRpbmcgdG8gd2lkZSB0aWxlc1xuICAgICAgICBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgPSBpbmlfY2x1c3RfaGVpZ2h0O1xuICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3Igbm90IGEgZm9yY2Ugc3F1YXJlIGhhcyBvY2N1cnJlZFxuICAgICAgICBwYXJhbXMudml6LmZvcmNlX3NxdWFyZSA9IDA7XG4gICAgICB9XG5cbiAgICAgIC8vIHpvb21fc3dpdGNoIGZyb20gMSB0byAyZCB6b29tXG4gICAgICBwYXJhbXMudml6Lnpvb21fc3dpdGNoID0gKHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoIC8gcGFyYW1zLnZpei5udW1fY29sX25vZGVzKSAvIChwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgLyBwYXJhbXMudml6Lm51bV9yb3dfbm9kZXMpO1xuXG4gICAgICAvLyB6b29tX3N3aXRjaCBjYW4gbm90IGJlIGxlc3MgdGhhbiAxXG4gICAgICBpZiAocGFyYW1zLnZpei56b29tX3N3aXRjaCA8IDEpIHtcbiAgICAgICAgcGFyYW1zLnZpei56b29tX3N3aXRjaCA9IDE7XG4gICAgICB9XG5cblxuICAgICAgLy8gcmVzaXplIHRoZSBzdmdcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICB2YXIgc3ZnX2dyb3VwID0gZDMuc2VsZWN0KCcjJyArIHBhcmFtcy52aXouc3ZnX2Rpdl9pZClcbiAgICAgICAgLnNlbGVjdCgnc3ZnJylcbiAgICAgICAgLmF0dHIoJ2lkJywgJ21haW5fc3ZnJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5zdmdfZGltLndpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLnZpei5zdmdfZGltLmhlaWdodCk7XG5cbiAgICAgIC8vIHJlZGVmaW5lIHhfc2NhbGUgYW5kIHlfc2NhbGUgcmFuZ2VCYW5kc1xuICAgICAgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZHMoWzAsIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoXSk7XG4gICAgICBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kcyhbMCwgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0XSk7XG5cbiAgICAgIC8vIHJlZGVmaW5lIHpvb20gZXh0ZW50XG4gICAgICBwYXJhbXMudml6LnJlYWxfem9vbSA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCAvIChwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLyAyKTtcbiAgICAgIHBhcmFtcy56b29tXG4gICAgICAgIC5zY2FsZUV4dGVudChbMSwgcGFyYW1zLnZpei5yZWFsX3pvb20gKiBwYXJhbXMudml6Lnpvb21fc3dpdGNoXSk7XG5cbiAgICAgIC8vIHJlZGVmaW5lIGJvcmRlciB3aWR0aFxuICAgICAgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLyA0MDtcblxuICAgICAgLy8gdGhlIGRlZmF1bHQgZm9udCBzaXplcyBhcmUgc2V0IGhlcmVcbiAgICAgIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgKiAxLjAxO1xuICAgICAgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuODU7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNncmV5X2JhY2tncm91bmQnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCk7XG5cbiAgICAgIC8vIHJlc2l6ZSB0aWxlc1xuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnRpbGUnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShkLnBvc194KSArICcsMCknO1xuICAgICAgICB9KTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnRpbGVfZ3JvdXAnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkpO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93JylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGluZGV4KSArICcpJztcbiAgICAgICAgfSk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5oaWdobGlnaHRpbmdfcmVjdCcpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuODApXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjgwKTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnRpbGVfc3BsaXRfdXAnKVxuICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBzdGFydF94ID0gMDtcbiAgICAgICAgICB2YXIgZmluYWxfeCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKTtcbiAgICAgICAgICB2YXIgc3RhcnRfeSA9IDA7XG4gICAgICAgICAgdmFyIGZpbmFsX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLyA2MDtcbiAgICAgICAgICB2YXIgb3V0cHV0X3N0cmluZyA9ICdNJyArIHN0YXJ0X3ggKyAnLCcgKyBzdGFydF95ICsgJywgTCcgK1xuICAgICAgICAgICAgc3RhcnRfeCArICcsICcgKyBmaW5hbF95ICsgJywgTCcgKyBmaW5hbF94ICsgJywwIFonO1xuICAgICAgICAgIHJldHVybiBvdXRwdXRfc3RyaW5nO1xuICAgICAgICB9KVxuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcudGlsZV9zcGxpdF9kbicpXG4gICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0X3ggPSAwO1xuICAgICAgICAgIHZhciBmaW5hbF94ID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpO1xuICAgICAgICAgIHZhciBzdGFydF95ID0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC8gNjA7XG4gICAgICAgICAgdmFyIGZpbmFsX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLyA2MDtcbiAgICAgICAgICB2YXIgb3V0cHV0X3N0cmluZyA9ICdNJyArIHN0YXJ0X3ggKyAnLCAnICsgc3RhcnRfeSArICcgLCAgIEwnICtcbiAgICAgICAgICAgIGZpbmFsX3ggKyAnLCAnICsgZmluYWxfeSArICcsICBMJyArIGZpbmFsX3ggKyAnLDAgWic7XG4gICAgICAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gICAgICAgIH0pXG5cbiAgICAgIC8vIHJlc2l6ZSBjbGljayBobGlnaHRcbiAgICAgIHZhciByZWxfd2lkdGhfaGxpZ2h0ID0gNjtcbiAgICAgIHZhciBvcGFjaXR5X2hsaWdodCA9IDAuODU7XG5cbiAgICAgIHZhciBobGlnaHRfd2lkdGggPSByZWxfd2lkdGhfaGxpZ2h0ICogcGFyYW1zLnZpei5ib3JkZXJfd2lkdGg7XG4gICAgICB2YXIgaGxpZ2h0X2hlaWdodCA9IHJlbF93aWR0aF9obGlnaHQgKiBwYXJhbXMudml6LmJvcmRlcl93aWR0aCAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG5cbiAgICAgIC8vIHJlcG9zaXRpb24gdGlsZSBoaWdobGlnaHRcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIC8vIHRvcCBoaWdobGlnaHRcbiAgICAgIGQzLnNlbGVjdCgnI3RvcF9obGlnaHQnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF94KSArICcsMCknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gbGVmdCBoaWdobGlnaHRcbiAgICAgIGQzLnNlbGVjdCgnI2xlZnRfaGxpZ2h0JylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgaGxpZ2h0X3dpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodCAqIDAuOTkpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKHBhcmFtcy5tYXRyaXguY2xpY2tfaGxpZ2h0X3gpICsgJywnICtcbiAgICAgICAgICAgIGhsaWdodF9oZWlnaHQgKiAwLjk5ICsgJyknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gcmlnaHQgaGlnaGxpZ2h0XG4gICAgICBkMy5zZWxlY3QoJyNyaWdodF9obGlnaHQnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBobGlnaHRfd2lkdGgpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfaGVpZ2h0ICogMC45OSlcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0bXBfdHJhbnNsYXRlID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlKHBhcmFtcy5tYXRyaXguY2xpY2tfaGxpZ2h0X3gpICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X3dpZHRoO1xuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB0bXBfdHJhbnNsYXRlICsgJywnICtcbiAgICAgICAgICAgIGhsaWdodF9oZWlnaHQgKiAwLjk5ICsgJyknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gYm90dG9tIGhpZ2hsaWdodFxuICAgICAgZDMuc2VsZWN0KCcjYm90dG9tX2hsaWdodCcpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSAxLjk4ICogaGxpZ2h0X3dpZHRoXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZShwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF94KSArIGhsaWdodF93aWR0aCAqIDAuOTk7XG4gICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF9oZWlnaHQ7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGVfeCArICcsJyArXG4gICAgICAgICAgICB0bXBfdHJhbnNsYXRlX3kgKyAnKSc7XG4gICAgICAgIH0pO1xuXG4gICAgICAvLyByZXNpemUgcm93IGhpZ2hsaWdodFxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgZDMuc2VsZWN0KCcjcm93X3RvcF9obGlnaHQnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KTtcblxuICAgICAgZDMuc2VsZWN0KCcjcm93X2JvdHRvbV9obGlnaHQnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF9oZWlnaHQ7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgdG1wX3RyYW5zbGF0ZV95ICsgJyknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gcmVzaXplIGNvbCBoaWdobGlnaHRcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgIGQzLnNlbGVjdCgnI2NvbF90b3BfaGxpZ2h0JylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0KVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgaGxpZ2h0X3dpZHRoKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeSA9IDA7XG4gICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IC0ocGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ICtcbiAgICAgICAgICAgIHBhcmFtcy5jbGFzc19yb29tLmNvbCArIHBhcmFtcy52aXoudW5pX21hcmdpbik7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGVfeCArICcsJyArIHRtcF90cmFuc2xhdGVfeSArICcpJztcbiAgICAgICAgfSk7XG5cbiAgICAgIGQzLnNlbGVjdCgnI2NvbF9ib3R0b21faGxpZ2h0JylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0KVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgaGxpZ2h0X3dpZHRoKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeSA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF93aWR0aDtcbiAgICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZV94ID0gLShwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgK1xuICAgICAgICAgICAgcGFyYW1zLmNsYXNzX3Jvb20uY29sICsgcGFyYW1zLnZpei51bmlfbWFyZ2luKTtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgdG1wX3RyYW5zbGF0ZV94ICsgJywnICsgdG1wX3RyYW5zbGF0ZV95ICsgJyknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gYWRkIHRleHQgdG8gcm93L2NvbCBkdXJpbmcgcmVzaXplXG4gICAgICBmdW5jdGlvbiBub3JtYWxfbmFtZShkKSB7XG4gICAgICAgIHZhciBpbnN0X25hbWUgPSBkLm5hbWUucmVwbGFjZSgvXy9nLCAnICcpLnNwbGl0KCcjJylbMF07XG4gICAgICAgIGlmIChpbnN0X25hbWUubGVuZ3RoID4gcGFyYW1zLmxhYmVscy5tYXhfbGFiZWxfY2hhcikge1xuICAgICAgICAgIGluc3RfbmFtZSA9IGluc3RfbmFtZS5zdWJzdHJpbmcoMCwgcGFyYW1zLmxhYmVscy5tYXhfbGFiZWxfY2hhcikgKyAnLi4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnN0X25hbWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlc2l6ZSByb3cgbGFiZWxzXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdCgnI3Jvd19jb250YWluZXInKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm5vcm1fbGFiZWwubWFyZ2luLmxlZnQgKyAnLCcgK1xuICAgICAgICAgIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcCArICcpJyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNyb3dfY29udGFpbmVyJylcbiAgICAgICAgLnNlbGVjdCgnLndoaXRlX2JhcnMnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubm9ybV9sYWJlbC5iYWNrZ3JvdW5kLnJvdylcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDMwICogcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ICsgJ3B4Jyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNyb3dfY29udGFpbmVyJylcbiAgICAgICAgLnNlbGVjdCgnLmxhYmVsX2NvbnRhaW5lcicpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cgKyAnLDApJyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpbmRleCkgKyAnKSc7XG4gICAgICAgIH0pO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3knLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjc1KVxuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICsgJ3B4JylcbiAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBub3JtYWxfbmFtZShkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgaGlnaGxpZ2h0aW5nIHJlY3RzXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYmJveCA9IGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgLnNlbGVjdCgndGV4dCcpWzBdWzBdXG4gICAgICAgICAgICAuZ2V0QkJveCgpO1xuICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgICAuYXR0cigneCcsIGJib3gueCAqIDAuNSlcbiAgICAgICAgICAgIC5hdHRyKCd5JywgMClcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGJib3gud2lkdGggKiAwLjUpXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBpbnN0X2hsID0gJ3llbGxvdyc7XG4gICAgICAgICAgICAgIHJldHVybiBpbnN0X2hsO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgdmFyIGluc3Rfb3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAgIC8vIGhpZ2hsaWdodCB0YXJnZXQgZ2VuZXNcbiAgICAgICAgICAgICAgaWYgKGQudGFyZ2V0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaW5zdF9vcGFjaXR5ID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gaW5zdF9vcGFjaXR5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgIC8vIGxhYmVsIHRoZSB3aWRlc3Qgcm93IGFuZCBjb2wgbGFiZWxzXG4gICAgICBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4ID0ge307XG4gICAgICBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LnJvdyA9IDA7XG4gICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0bXBfd2lkdGggPSBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0Jykubm9kZSgpLmdldEJCb3goKS53aWR0aDtcbiAgICAgICAgaWYgKHRtcF93aWR0aCA+IHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93KSB7XG4gICAgICAgICAgcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3cgPSB0bXBfd2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KCcjcm93X2xhYmVsX3ZpeicpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cgKyAnLDApJyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNyb3dfbGFiZWxfdml6JylcbiAgICAgICAgLnNlbGVjdCgnd2hpdGVfYmFycycpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5jbGFzc19yb29tLnJvdyArICdweCcpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5zdF9oZWlnaHQgPSBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQ7XG4gICAgICAgICAgcmV0dXJuIGluc3RfaGVpZ2h0O1xuICAgICAgICB9KTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd190cmlhbmdsZV9ncm91cCcpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsICcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5kZXgpICsgJyknO1xuICAgICAgICB9KTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd190cmlhbmdsZV9ncm91cCcpXG4gICAgICAgIC5zZWxlY3QoJ3BhdGgnKVxuICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBvcmlnaW5feCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCAtIDE7XG4gICAgICAgICAgdmFyIG9yaWdpbl95ID0gMDtcbiAgICAgICAgICB2YXIgbWlkX3ggPSAxO1xuICAgICAgICAgIHZhciBtaWRfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgICAgdmFyIGZpbmFsX3ggPSBwYXJhbXMuY2xhc3Nfcm9vbS5zeW1ib2xfd2lkdGggLSAxO1xuICAgICAgICAgIHZhciBmaW5hbF95ID0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpO1xuICAgICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00gJyArIG9yaWdpbl94ICsgJywnICsgb3JpZ2luX3kgKyAnIEwgJyArXG4gICAgICAgICAgICBtaWRfeCArICcsJyArIG1pZF95ICsgJywgTCAnICsgZmluYWxfeCArICcsJyArIGZpbmFsX3kgKyAnIFonO1xuICAgICAgICAgIHJldHVybiBvdXRwdXRfc3RyaW5nO1xuICAgICAgICB9KTtcblxuXG4gICAgICBpZiAoVXRpbHMuaGFzKHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzWzBdLCAndmFsdWUnKSkge1xuXG4gICAgICAgIC8vIHNldCBiYXIgc2NhbGVcbiAgICAgICAgdmFyIGVucl9tYXggPSBNYXRoLmFicyhsb2Rhc2gubWF4KHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGguYWJzKGQudmFsdWUpXG4gICAgICAgIH0pLnZhbHVlKTtcbiAgICAgICAgcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfcm93ID0gZDMuc2NhbGVcbiAgICAgICAgICAubGluZWFyKClcbiAgICAgICAgICAuZG9tYWluKFswLCBlbnJfbWF4XSlcbiAgICAgICAgICAucmFuZ2UoWzAsIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLnJvd10pO1xuXG4gICAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5yb3dfYmFycycpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICAgICAgaW5zdF92YWx1ZSA9IHBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX3JvdyhNYXRoLmFicyhkLnZhbHVlKSk7XG4gICAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICAgICAgaW5zdF92YWx1ZSA9IC1wYXJhbXMubGFiZWxzLmJhcl9zY2FsZV9yb3coTWF0aC5hYnMoZC52YWx1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RfdmFsdWU7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpKTtcblxuICAgICAgfVxuXG4gICAgICAvLyByZXNpemUgY29sIGxhYmVsc1xuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNjb2xfY29udGFpbmVyJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLmxlZnQgKyAnLCcgK1xuICAgICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi50b3AgKyAnKScpO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KCcjY29sX2NvbnRhaW5lcicpXG4gICAgICAgIC5zZWxlY3QoJy53aGl0ZV9iYXJzJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgMzAgKiBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCArICdweCcpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubm9ybV9sYWJlbC5iYWNrZ3JvdW5kLmNvbCk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNjb2xfY29udGFpbmVyJylcbiAgICAgICAgLnNlbGVjdCgnLmxhYmVsX2NvbnRhaW5lcicpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCArICcpJyk7XG5cbiAgICAgIC8vIG9mZnNldCBjbGljayBncm91cCBjb2x1bW4gbGFiZWxcbiAgICAgIHZhciB4X29mZnNldF9jbGljayA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAvIDIgKyBwYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgIC8vIHJlZHVjZSB3aWR0aCBvZiByb3RhdGVkIHJlY3RzXG4gICAgICB2YXIgcmVkdWNlX3JlY3Rfd2lkdGggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjM2O1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluZGV4KSArICcpIHJvdGF0ZSgtOTApJztcbiAgICAgICAgfSk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC8gMiArICcsJyArIHhfb2Zmc2V0X2NsaWNrICsgJykgcm90YXRlKDQ1KScpO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJylcbiAgICAgICAgLnNlbGVjdCgndGV4dCcpXG4gICAgICAgIC5hdHRyKCd5JywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpICogMC42MClcbiAgICAgICAgLmF0dHIoJ2R4JywgMiAqIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoKVxuICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wgKyAncHgnKVxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIG5vcm1hbF9uYW1lKGQpO1xuICAgICAgICB9KTtcblxuXG4gICAgICBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LmNvbCA9IDA7XG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRtcF93aWR0aCA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3RleHQnKS5ub2RlKCkuZ2V0QkJveCgpLndpZHRoO1xuICAgICAgICBpZiAodG1wX3dpZHRoID4gcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2wpIHtcbiAgICAgICAgICBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LmNvbCA9IHRtcF93aWR0aCAqIDEuMjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cblxuICAgICAgLy8gY2hlY2sgaWYgd2lkZXN0IHJvdyBvciBjb2wgYXJlIHdpZGVyIHRoYW4gdGhlIGFsbG93ZWQgbGFiZWwgd2lkdGhcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgcGFyYW1zLmluaV9zY2FsZV9mb250ID0ge307XG4gICAgICBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQucm93ID0gMTtcbiAgICAgIHBhcmFtcy5pbmlfc2NhbGVfZm9udC5jb2wgPSAxO1xuXG4gICAgICBpZiAocGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3cgPiBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cpIHtcblxuICAgICAgICAvLyBjYWxjIHJlZHVjdGlvbiBpbiBmb250IHNpemVcbiAgICAgICAgcGFyYW1zLmluaV9zY2FsZV9mb250LnJvdyA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLnJvdyAvIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93O1xuICAgICAgICAvLyByZWRlZmluZSBib3VuZGluZ193aWR0aF9tYXgucm93XG4gICAgICAgIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93ID0gcGFyYW1zLmluaV9zY2FsZV9mb250LnJvdyAqIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93O1xuXG4gICAgICAgIC8vIHJlZGVmaW5lIGRlZmF1bHQgZnNcbiAgICAgICAgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX3JvdyA9IHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgKiBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQucm93O1xuICAgICAgICAvLyByZWR1Y2UgZm9udCBzaXplXG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX3JvdyArICdweCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXguY29sID4gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sKSB7XG5cbiAgICAgICAgLy8gY2FsYyByZWR1Y3Rpb24gaW4gZm9udCBzaXplXG4gICAgICAgIHBhcmFtcy5pbmlfc2NhbGVfZm9udC5jb2wgPSBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wgLyBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LmNvbDtcbiAgICAgICAgLy8gcmVkZWZpbmUgYm91bmRpbmdfd2lkdGhfbWF4LmNvbFxuICAgICAgICBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LmNvbCA9IHBhcmFtcy5pbmlfc2NhbGVfZm9udC5jb2wgKiBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LmNvbDtcbiAgICAgICAgLy8gcmVkZWZpbmUgZGVmYXVsdCBmc1xuICAgICAgICBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfY29sID0gcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCAqIHBhcmFtcy5pbmlfc2NhbGVfZm9udC5jb2w7XG4gICAgICAgIC8vIHJlZHVjZSBmb250IHNpemVcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCArICdweCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF9jbGljaycpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBiYm94ID0gZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAuc2VsZWN0KCd0ZXh0JylbMF1bMF1cbiAgICAgICAgICAgIC5nZXRCQm94KCk7XG4gICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgICAgIC5hdHRyKCd4JywgYmJveC54ICogMS4yNSlcbiAgICAgICAgICAgIC5hdHRyKCd5JywgMClcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGJib3gud2lkdGggKiAxLjI1KVxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuNilcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICd5ZWxsb3cnKVxuICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJylcbiAgICAgICAgLnNlbGVjdCgncGF0aCcpXG4gICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8geCBhbmQgeSBhcmUgZmxpcHBlZCBzaW5jZSBpdHMgcm90YXRlZFxuICAgICAgICAgIHZhciBvcmlnaW5feSA9IC1wYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgICB2YXIgc3RhcnRfeCA9IDA7XG4gICAgICAgICAgdmFyIGZpbmFsX3ggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSByZWR1Y2VfcmVjdF93aWR0aDtcbiAgICAgICAgICB2YXIgc3RhcnRfeSA9IC0ocGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC0gcmVkdWNlX3JlY3Rfd2lkdGggK1xuICAgICAgICAgICAgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgpO1xuICAgICAgICAgIHZhciBmaW5hbF95ID0gLXBhcmFtcy52aXouYm9yZGVyX3dpZHRoO1xuICAgICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00gJyArIG9yaWdpbl95ICsgJywwIEwgJyArIHN0YXJ0X3kgKyAnLCcgK1xuICAgICAgICAgICAgc3RhcnRfeCArICcsIEwgJyArIGZpbmFsX3kgKyAnLCcgKyBmaW5hbF94ICsgJyBaJztcbiAgICAgICAgICByZXR1cm4gb3V0cHV0X3N0cmluZztcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIGluc3RfY29sb3IgPSAnI2VlZSc7XG4gICAgICAgICAgaWYgKHBhcmFtcy5sYWJlbHMuc2hvd19jYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICBpbnN0X2NvbG9yID0gcGFyYW1zLmxhYmVscy5jbGFzc19jb2xvcnMuY29sW2QuY2xdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaW5zdF9jb2xvcjtcbiAgICAgICAgfSk7XG5cblxuICAgICAgLy8gZ2V0IG1heCB2YWx1ZVxuICAgICAgdmFyIGVucl9tYXggPSBNYXRoLmFicyhsb2Rhc2gubWF4KHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhkLnZhbHVlKVxuICAgICAgfSkudmFsdWUpO1xuICAgICAgdmFyIGVucl9taW4gPSBNYXRoLmFicyhsb2Rhc2gubWluKHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhkLnZhbHVlKVxuICAgICAgfSkudmFsdWUpO1xuXG4gICAgICAvLyB0aGUgZW5yaWNobWVudCBiYXIgc2hvdWxkIGJlIDMvNHRocyBvZiB0aGUgaGVpZ2h0IG9mIHRoZSBjb2x1bW4gbGFiZWxzXG4gICAgICBwYXJhbXMubGFiZWxzLmJhcl9zY2FsZV9jb2wgPSBkMy5zY2FsZVxuICAgICAgICAubGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbZW5yX21pbiAqIDAuNzUsIGVucl9tYXhdKVxuICAgICAgICAucmFuZ2UoWzAsIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbF0pO1xuXG4gICAgICAvLyBhcHBlbmQgY29sdW1uIHZhbHVlIGJhcnNcbiAgICAgIGlmIChVdGlscy5oYXMocGFyYW1zLm5ldHdvcmtfZGF0YS5jb2xfbm9kZXNbMF0sICd2YWx1ZScpKSB7XG5cbiAgICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmNvbF9iYXJzJylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICB2YXIgaW5zdF92YWx1ZSA9IDA7XG4gICAgICAgICAgICBpZiAoZC52YWx1ZSA+IDApIHtcbiAgICAgICAgICAgICAgaW5zdF92YWx1ZSA9IHBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX2NvbChkLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnN0X3ZhbHVlO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gcm90YXRlIGxhYmVscyAtIHJlZHVjZSB3aWR0aCBpZiByb3RhdGluZ1xuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjY2KTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVzaXplIGRlbmRyb2dyYW1cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5yb3dfY2xhc3NfcmVjdCcpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbnN0X3dpZHRoID0gcGFyYW1zLmNsYXNzX3Jvb20uc3ltYm9sX3dpZHRoIC0gMTtcbiAgICAgICAgICByZXR1cm4gaW5zdF93aWR0aCArICdweCc7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGluc3Rfb2Zmc2V0ID0gcGFyYW1zLmNsYXNzX3Jvb20uc3ltYm9sX3dpZHRoICsgMTtcbiAgICAgICAgICByZXR1cm4gaW5zdF9vZmZzZXQgKyAncHgnO1xuICAgICAgICB9KTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmNvbF9jbGFzc19yZWN0JylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGluc3RfaGVpZ2h0ID0gcGFyYW1zLmNsYXNzX3Jvb20uY29sIC0gMTtcbiAgICAgICAgICByZXR1cm4gaW5zdF9oZWlnaHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2NsYXNzX2dyb3VwJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpbmRleCkgKyAnLDApJztcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIHJlcG9zaXRpb24gZ3JpZCBsaW5lc1xuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmhvcnpfbGluZXMnKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5kZXgpICsgJykgcm90YXRlKDApJztcbiAgICAgICAgfSlcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmhvcnpfbGluZXMnKVxuICAgICAgICAuc2VsZWN0KCdsaW5lJylcbiAgICAgICAgLmF0dHIoJ3gyJywgcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGgpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGggLyBwYXJhbXMudml6Lnpvb21fc3dpdGNoICsgJ3B4JylcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnZlcnRfbGluZXMnKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluZGV4KSArICcpIHJvdGF0ZSgtOTApJztcbiAgICAgICAgfSk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy52ZXJ0X2xpbmVzJylcbiAgICAgICAgLnNlbGVjdCgnbGluZScpXG4gICAgICAgIC5hdHRyKCd4MicsIC1wYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGggKyAncHgnKTtcblxuICAgICAgLy8gcmVzaXplIHN1cGVybGFiZWxzXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KCcjc3VwZXJfY29sX2JrZycpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICsgJ3B4JylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aCArICcpJyk7XG5cbiAgICAgIC8vIHN1cGVyIGNvbCB0aXRsZVxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdCgnI3N1cGVyX2NvbCcpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5zdF94ID0gcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGggLyAyICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGhcbiAgICAgICAgICAgIC5yb3c7XG4gICAgICAgICAgdmFyIGluc3RfeSA9IHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfd2lkdGggLSBwYXJhbXMudml6LnVuaV9tYXJnaW47XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGluc3RfeCArICcsJyArIGluc3RfeSArICcpJztcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIHN1cGVyIHJvdyB0aXRsZVxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdCgnI3N1cGVyX3Jvd19ia2cnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICsgJ3B4JylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGggKyAnLDApJyk7XG5cbiAgICAgIC8vIGFwcGVuZCBzdXBlciB0aXRsZSByb3cgZ3JvdXBcbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNzdXBlcl9yb3cnKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGluc3RfeCA9IHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfd2lkdGggLSBwYXJhbXMudml6LnVuaV9tYXJnaW47XG4gICAgICAgICAgdmFyIGluc3RfeSA9IHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCAvIDIgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aFxuICAgICAgICAgICAgLmNvbDtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgaW5zdF94ICsgJywnICsgaW5zdF95ICsgJyknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gLy8gc3VwZXIgcm93IGxhYmVsIChyb3RhdGUgdGhlIGFscmVhZHkgdHJhbnNsYXRlZCB0aXRsZSApXG4gICAgICAvLyBkMy5zZWxlY3QoJyNzdXBlcl9yb3dfbGFiZWwnKVxuICAgICAgLy8gICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC8vICAgLnRleHQocGFyYW1zLmxhYmVscy5zdXBlci5yb3cpXG4gICAgICAvLyAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdjZW50ZXInKVxuICAgICAgLy8gICAuYXR0cigndHJhbnNmb3JtJywgJ3JvdGF0ZSgtOTApJylcbiAgICAgIC8vICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTRweCcpXG4gICAgICAvLyAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAzMDApO1xuXG4gICAgICAvLyByZXNpemUgc3BpbGxvdmVyXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAvLyBoaWRlIHNwaWxsb3ZlciBmcm9tIHNsYW50ZWQgY29sdW1uIGxhYmVscyBvbiByaWdodCBzaWRlXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KCcjcmlnaHRfc2xhbnRfdHJpYW5nbGUnKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGggKyAnLCcgK1xuICAgICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCArICcpJyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNsZWZ0X3NsYW50X3RyaWFuZ2xlJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoLTEsJyArIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCArICcpJyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyN0b3BfbGVmdF93aGl0ZScpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLmxlZnQpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi50b3ApO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KCcjcmlnaHRfc3BpbGxvdmVyJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0bXBfbGVmdCA9IHBhcmFtcy52aXouY2x1c3QubWFyZ2luLmxlZnQgKyBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aDtcbiAgICAgICAgICB2YXIgdG1wX3RvcCA9IHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi50b3AgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aFxuICAgICAgICAgICAgLmNvbDtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgdG1wX2xlZnQgKyAnLCcgKyB0bXBfdG9wICsgJyknO1xuICAgICAgICB9KTtcblxuXG4gICAgICAvLyB3aGl0ZSBib3JkZXIgYm90dG9tIC0gcHJldmVudCBjbHVzdGVyZ3JhbSBmcm9tIGhpdHRpbmcgYm9yZGVyXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KCcjYm90dG9tX3NwaWxsb3ZlcicpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy52aXouc3ZnX2RpbS53aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDIgKiBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gc2hpZnQgdXAgZW5vdWdoIHRvIHNob3cgdGhlIGVudGlyZSBib3JkZXIgd2lkdGhcbiAgICAgICAgICB2YXIgaW5zdF9vZmZzZXQgPSBwYXJhbXMudml6LnN2Z19kaW0uaGVpZ2h0IC0gMyAqIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGg7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgaW5zdF9vZmZzZXQgKyAnKSc7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgIC8vIGFkZCBib3JkZXIgdG8gc3ZnIGluIGZvdXIgc2VwYXJhdGUgbGluZXMgLSB0byBub3QgaW50ZXJmZXJlIHdpdGggY2xpY2tpbmcgYW55dGhpbmdcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAvLyBsZWZ0IGJvcmRlclxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdCgnI2xlZnRfYm9yZGVyJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsMCknKTtcblxuICAgICAgLy8gcmlnaHQgYm9yZGVyXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KCcjcmlnaHRfYm9yZGVyJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5zdF9vZmZzZXQgPSBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGggLSBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoO1xuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBpbnN0X29mZnNldCArICcsMCknO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gdG9wIGJvcmRlclxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdCgnI3RvcF9ib3JkZXInKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGluc3Rfb2Zmc2V0ID0gMDtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgaW5zdF9vZmZzZXQgKyAnLDApJztcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIGJvdHRvbSBib3JkZXJcbiAgICAgIHN2Z19ncm91cC5zZWxlY3QoJyNib3R0b21fYm9yZGVyJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5zdmdfZGltLndpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aClcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbnN0X29mZnNldCA9IHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQgLSBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoO1xuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsJyArIGluc3Rfb2Zmc2V0ICsgJyknO1xuICAgICAgICB9KTtcblxuXG5cbiAgICAgIC8vIHJlc2V0IHpvb20gYW5kIHRyYW5zbGF0ZVxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICBwYXJhbXMuem9vbS5zY2FsZSgxKS50cmFuc2xhdGUoXG4gICAgICAgIFtwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0LCBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi50b3BdXG4gICAgICApO1xuXG4gICAgICBkMy5zZWxlY3QoJyNtYWluX3N2ZycpLnN0eWxlKCdvcGFjaXR5JywgMSk7XG4gICAgfVxuXG4gICAgLyogUmVwcmVzZW50cyB0aGUgZW50aXJlIHZpc3VhbGl6YXRpb246IGxhYmVscywgZGVuZHJvZ3JhbSAob3B0aW9uYWwpIGFuZCBtYXRyaXguXG4gICAgICovXG4gICAgZnVuY3Rpb24gVml6KGNvbmZpZykge1xuXG4gICAgICAvLyBzY29wZSB0aGVzZSB2YXJpYWJsZXMgdG8gdml6XG4gICAgICB2YXIgbWF0cml4LFxuICAgICAgICByb3dfZGVuZHJvZ3JhbSxcbiAgICAgICAgY29sX2RlbmRyb2dyYW0sXG4gICAgICAgIHpvb20sXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgcmVvcmRlcjtcblxuICAgICAgLy8gbWFrZSB2aXpcbiAgICAgIHBhcmFtcyA9IG1ha2UoY29uZmlnKTtcblxuICAgICAgLyogVGhlIG1haW4gZnVuY3Rpb247IG1ha2VzIGNsdXN0ZXJncmFtIGJhc2VkIG9uIHVzZXIgYXJndW1lbnRzLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBtYWtlKGNvbmZpZykge1xuXG4gICAgICAgIC8vIGluaXRpYWxpemUgY2x1c3RlcmdyYW0gdmFyaWFibGVzXG4gICAgICAgIHBhcmFtcyA9IFZpelBhcmFtcyhjb25maWcpO1xuXG4gICAgICAgIHZhciBuZXR3b3JrX2RhdGEgPSBwYXJhbXMubmV0d29ya19kYXRhO1xuXG4gICAgICAgIC8vIHNldCBsb2NhbCB2YXJpYWJsZXMgZnJvbSBuZXR3b3JrX2RhdGFcbiAgICAgICAgdmFyIGNvbF9ub2RlcyA9IG5ldHdvcmtfZGF0YS5jb2xfbm9kZXM7XG4gICAgICAgIHZhciByb3dfbm9kZXMgPSBuZXR3b3JrX2RhdGEucm93X25vZGVzO1xuXG4gICAgICAgIC8vIEJlZ2luIE1ha2luZyBWaXN1YWxpemF0aW9uXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8vICEhIG5lZWRzIHRvIGJlIGltcHJvdmVkXG4gICAgICAgIC8vIHJlbW92ZSBhbnkgcHJldmlvdXMgdmlzdWFsaXphdGlvbnNcbiAgICAgICAgZDMuc2VsZWN0KCcjbWFpbl9zdmcnKS5yZW1vdmUoKTtcblxuICAgICAgICAvLyBpbnN0YW50aWF0ZSB6b29tIG9iamVjdFxuICAgICAgICB6b29tID0gWm9vbShwYXJhbXMpO1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgdmFyaWFibGUgem9vbSwgYSBkMyBtZXRob2RcbiAgICAgICAgcGFyYW1zLnpvb20gPSBkMy5iZWhhdmlvclxuICAgICAgICAgIC56b29tKClcbiAgICAgICAgICAuc2NhbGVFeHRlbnQoWzEsIHBhcmFtcy52aXoucmVhbF96b29tICogcGFyYW1zLnZpei56b29tX3N3aXRjaF0pXG4gICAgICAgICAgLm9uKCd6b29tJywgem9vbS56b29tZWQpO1xuXG4gICAgICAgIHZhciBzdmdfZ3JvdXAgPSBkMy5zZWxlY3QoJyMnICsgcGFyYW1zLnZpei5zdmdfZGl2X2lkKVxuICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ21haW5fc3ZnJylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQpO1xuXG4gICAgICAgIGlmIChwYXJhbXMudml6LmRvX3pvb20pIHtcbiAgICAgICAgICBzdmdfZ3JvdXAuY2FsbChwYXJhbXMuem9vbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYWtlIHRoZSBtYXRyaXhcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBtYXRyaXggPSBNYXRyaXgobmV0d29ya19kYXRhLCBzdmdfZ3JvdXAsIHBhcmFtcyk7XG5cblxuICAgICAgICAvLyBkZWZpbmUgcmVvcmRlcmluZyBvYmplY3QgLSBzY29wZWQgdG8gdml6XG4gICAgICAgIHJlb3JkZXIgPSBSZW9yZGVyKHBhcmFtcyk7XG5cbiAgICAgICAgLy8gZGVmaW5lIGxhYmVscyBvYmplY3RcbiAgICAgICAgdmFyIGxhYmVscyA9IExhYmVscyhwYXJhbXMpO1xuXG4gICAgICAgIC8vIHJvdyBsYWJlbHNcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICB2YXIgcm93X3RyaWFuZ2xlX2luaV9ncm91cCA9IGxhYmVscy5tYWtlX3Jvd3MocGFyYW1zLCByb3dfbm9kZXMsIHJlb3JkZXIpO1xuXG4gICAgICAgIC8vIENvbHVtbiBMYWJlbHNcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICB2YXIgY29udGFpbmVyX2FsbF9jb2wgPSBsYWJlbHMubWFrZV9jb2xzKHBhcmFtcywgY29sX25vZGVzLCByZW9yZGVyKTtcblxuXG4gICAgICAgIC8vIGFkZCBncm91cCBsYWJlbHMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgaWYgKHBhcmFtcy52aXouc2hvd19kZW5kcm9ncmFtKSB7XG5cbiAgICAgICAgICAvLyBtYWtlIHJvdyBkZW5kcm9ncmFtXG4gICAgICAgICAgcm93X2RlbmRyb2dyYW0gPSBEZW5kcm9ncmFtKCdyb3cnLCBwYXJhbXMsIHJvd190cmlhbmdsZV9pbmlfZ3JvdXApO1xuXG4gICAgICAgICAgLy8gYWRkIGNsYXNzIGxhYmVsIHVuZGVyIGNvbHVtbiBsYWJlbFxuICAgICAgICAgIHZhciBjb2xfY2xhc3MgPSBjb250YWluZXJfYWxsX2NvbFxuICAgICAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAvLyAuYXR0cigndHJhbnNmb3JtJywndHJhbnNsYXRlKDAsJytwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wrJyknKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgaW5zdF9vZmZzZXQgPSBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wgKyAyO1xuICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBpbnN0X29mZnNldCArICcpJztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC8vIHNoaWZ0IGRvd24gMXB4XG4gICAgICAgICAgICAvLyAuYXR0cigndHJhbnNmb3JtJywndHJhbnNsYXRlKDAsMiknKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ2NvbF9jbGFzcycpO1xuXG4gICAgICAgICAgLy8gYXBwZW5kIGdyb3VwcyAtIGVhY2ggd2lsbCBob2xkIGEgY2xhc3NpZmljYXRpb24gcmVjdFxuICAgICAgICAgIHZhciBjb2xfY2xhc3NfaW5pX2dyb3VwID0gY29sX2NsYXNzXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCdnJylcbiAgICAgICAgICAgIC5kYXRhKGNvbF9ub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjb2xfY2xhc3NfZ3JvdXAnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoaW5kZXgpICsgJywwKSc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIG1ha2UgY29sIGRlbmRyb2dyYW1cbiAgICAgICAgICBjb2xfZGVuZHJvZ3JhbSA9IERlbmRyb2dyYW0oJ2NvbCcsIHBhcmFtcywgY29sX2NsYXNzX2luaV9ncm91cCk7XG5cbiAgICAgICAgICAvLyBvcHRpb25hbCBjb2x1bW4gY2FsbGJhY2sgb24gY2xpY2tcbiAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5jbGlja19ncm91cCA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICBjb2xfY2xhc3NfaW5pX2dyb3VwXG4gICAgICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RfbGV2ZWwgPSBwYXJhbXMuZ3JvdXBfbGV2ZWwuY29sO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0X2dyb3VwID0gZC5ncm91cFtpbnN0X2xldmVsXTtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIGFsbCBjb2x1bW4gbmFtZXMgdGhhdCBhcmUgaW4gdGhlIHNhbWUgZ3JvdXAgYXQgdGhlIHNhbWUgZ3JvdXBfbGV2ZWxcbiAgICAgICAgICAgICAgICAvLyBnZXQgY29sX25vZGVzXG4gICAgICAgICAgICAgICAgY29sX25vZGVzID0gcGFyYW1zLm5ldHdvcmtfZGF0YS5jb2xfbm9kZXM7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwX25vZGVzID0gW107XG4gICAgICAgICAgICAgICAgbG9kYXNoLmVhY2goY29sX25vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBjaGVjayB0aGF0IHRoZSBub2RlIGlzIGluIHRoZSBncm91cFxuICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXBbaW5zdF9sZXZlbF0gPT09IGluc3RfZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBhIGxpc3Qgb2YgZ2VuZXMgdGhhdCBhcmUgaW4gaW5zdF9ncm91cCBhdCB0aGlzIGdyb3VwX2xldmVsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwX25vZGVzLnB1c2gobm9kZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyXG4gICAgICAgICAgICAgICAgLy8gcm93IG9yIGNvbCwgZGlzdGFuY2UgY3V0b2ZmIGxldmVsLCBub2Rlc1xuICAgICAgICAgICAgICAgIHZhciBncm91cF9pbmZvID0ge307XG4gICAgICAgICAgICAgICAgZ3JvdXBfaW5mby50eXBlID0gJ2NvbCc7XG4gICAgICAgICAgICAgICAgZ3JvdXBfaW5mby5ub2RlcyA9IGdyb3VwX25vZGVzO1xuICAgICAgICAgICAgICAgIGdyb3VwX2luZm8uaW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2Rpc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICdjdXRvZmYnOiBpbnN0X2xldmVsIC8gMTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gcGFzcyBpbmZvcm1hdGlvbiB0byBncm91cF9jbGljayBjYWxsYmFja1xuICAgICAgICAgICAgICAgIHBhcmFtcy5jbGlja19ncm91cChncm91cF9pbmZvKTtcblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gU3BpbGxvdmVyIERpdnNcbiAgICAgICAgdmFyIHNwaWxsb3ZlciA9IFNwaWxsb3ZlcihwYXJhbXMsIGNvbnRhaW5lcl9hbGxfY29sKTtcblxuICAgICAgICAvLyBTdXBlciBMYWJlbHNcbiAgICAgICAgaWYgKHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxzKSB7XG4gICAgICAgICAgdmFyIHN1cGVyX2xhYmVscyA9IFN1cGVyTGFiZWxzKCk7XG4gICAgICAgICAgc3VwZXJfbGFiZWxzLm1ha2UocGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRtcCBhZGQgZmluYWwgc3ZnIGJvcmRlciBoZXJlXG4gICAgICAgIC8vIGFkZCBib3JkZXIgdG8gc3ZnIGluIGZvdXIgc2VwYXJhdGUgbGluZXMgLSB0byBub3QgaW50ZXJmZXJlIHdpdGggY2xpY2tpbmcgYW55dGhpbmdcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIGxlZnQgYm9yZGVyXG4gICAgICAgIC8vIGQzLnNlbGVjdCgnI21haW5fc3ZnJylcbiAgICAgICAgLy8gICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLy8gICAuYXR0cignaWQnLCAnbGVmdF9ib3JkZXInKVxuICAgICAgICAvLyAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5zdXBlcl9ib3JkZXJfY29sb3IpIC8vISEgcHJvZ19jb2xvcnNcbiAgICAgICAgLy8gICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoKVxuICAgICAgICAvLyAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMudml6LnN2Z19kaW0uaGVpZ2h0KVxuICAgICAgICAvLyAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsMCknKTtcblxuICAgICAgICAvLyAvLyByaWdodCBib3JkZXJcbiAgICAgICAgLy8gZDMuc2VsZWN0KCcjbWFpbl9zdmcnKVxuICAgICAgICAvLyAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAvLyAgIC5hdHRyKCdpZCcsICdyaWdodF9ib3JkZXInKVxuICAgICAgICAvLyAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5zdXBlcl9ib3JkZXJfY29sb3IpIC8vISEgcHJvZ19jb2xvcnNcbiAgICAgICAgLy8gICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoKVxuICAgICAgICAvLyAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMudml6LnN2Z19kaW0uaGVpZ2h0KVxuICAgICAgICAvLyAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIHZhciBpbnN0X29mZnNldCA9IHBhcmFtcy52aXouc3ZnX2RpbS53aWR0aCAtIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGg7XG4gICAgICAgIC8vICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgaW5zdF9vZmZzZXQgKyAnLDApJztcbiAgICAgICAgLy8gICB9KTtcblxuICAgICAgICAvLyAvLyB0b3AgYm9yZGVyXG4gICAgICAgIC8vIGQzLnNlbGVjdCgnI21haW5fc3ZnJylcbiAgICAgICAgLy8gICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLy8gICAuYXR0cignaWQnLCAndG9wX2JvcmRlcicpXG4gICAgICAgIC8vICAgLmF0dHIoJ2ZpbGwnLCBwYXJhbXMudml6LnN1cGVyX2JvcmRlcl9jb2xvcikgLy8hISBwcm9nX2NvbG9yc1xuICAgICAgICAvLyAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy52aXouc3ZnX2RpbS53aWR0aClcbiAgICAgICAgLy8gICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aClcbiAgICAgICAgLy8gICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICB2YXIgaW5zdF9vZmZzZXQgPSAwO1xuICAgICAgICAvLyAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGluc3Rfb2Zmc2V0ICsgJywwKSc7XG4gICAgICAgIC8vICAgfSk7XG5cbiAgICAgICAgLy8gLy8gYm90dG9tIGJvcmRlclxuICAgICAgICAvLyBkMy5zZWxlY3QoJyNtYWluX3N2ZycpXG4gICAgICAgIC8vICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC8vICAgLmF0dHIoJ2lkJywgJ2JvdHRvbV9ib3JkZXInKVxuICAgICAgICAvLyAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5zdXBlcl9ib3JkZXJfY29sb3IpIC8vISEgcHJvZ19jb2xvcnNcbiAgICAgICAgLy8gICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAgIC8vICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGgpXG4gICAgICAgIC8vICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyAgICAgdmFyIGluc3Rfb2Zmc2V0ID0gcGFyYW1zLnZpei5zdmdfZGltLmhlaWdodCAtIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGg7XG4gICAgICAgIC8vICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBpbnN0X29mZnNldCArICcpJztcbiAgICAgICAgLy8gICB9KTtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBpbml0aWFsaXplIHRyYW5zbGF0ZSB2ZWN0b3IgdG8gY29tcGVuc2F0ZSBmb3IgbGFiZWwgbWFyZ2luc1xuICAgICAgICBwYXJhbXMuem9vbS50cmFuc2xhdGUoW3BhcmFtcy52aXouY2x1c3QubWFyZ2luLmxlZnQsIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcF0pO1xuXG4gICAgICAgIC8vIHJlc2l6ZSB3aW5kb3dcbiAgICAgICAgaWYgKHBhcmFtcy52aXoucmVzaXplKSB7XG4gICAgICAgICAgZDMuc2VsZWN0KHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KCcjbWFpbl9zdmcnKS5zdHlsZSgnb3BhY2l0eScsIDAuNSk7XG4gICAgICAgICAgICB2YXIgd2FpdF90aW1lID0gNTAwO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy52aXoucnVuX3RyYW5zID09IHRydWUpIHtcbiAgICAgICAgICAgICAgd2FpdF90aW1lID0gMjUwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzZXRfdmlzdWFsaXphdGlvbl9zaXplLCB3YWl0X3RpbWUsIHBhcmFtcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnZpei5leHBhbmRfYnV0dG9uKSB7XG5cbiAgICAgICAgICB2YXIgZXhwYW5kX29wYWNpdHkgPSAwLjQ7XG4gICAgICAgICAgLy8gYWRkIGV4cGFuZCBidXR0b25cbiAgICAgICAgICBkMy5zZWxlY3QoJyNtYWluX3N2ZycpLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAuYXR0cignaWQnLCAnZXhwYW5kX2J1dHRvbicpXG4gICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgICAgIC5hdHRyKCdkb21pbmFudC1iYXNlbGluZScsICdjZW50cmFsJylcbiAgICAgICAgICAgIC5hdHRyKCdmb250LWZhbWlseScsICdGb250QXdlc29tZScpXG4gICAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgJzMwcHgnKVxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICBpZiAocGFyYW1zLnZpei5leHBhbmQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwYW5kIGJ1dHRvblxuICAgICAgICAgICAgICAgIHJldHVybiAnXFx1ZjBiMic7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbWVudSBidXR0b25cbiAgICAgICAgICAgICAgICByZXR1cm4gJ1xcdWYwYzknO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoJ3knLCAnMjVweCcpXG4gICAgICAgICAgICAuYXR0cigneCcsICcyNXB4JylcbiAgICAgICAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxuICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgZXhwYW5kX29wYWNpdHkpXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoJ29wYWNpdHknLCAwLjc1KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnb3BhY2l0eScsIGV4cGFuZF9vcGFjaXR5KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgLy8gZXhwYW5kIHZpZXdcbiAgICAgICAgICAgICAgaWYgKHBhcmFtcy52aXouZXhwYW5kID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcjY2x1c3RfaW5zdHJ1Y3RfY29udGFpbmVyJylcbiAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1lbnUgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnXFx1ZjBjOSc7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwYXJhbXMudml6LmV4cGFuZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAvLyBjb250cmFjdCB2aWV3XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoJyNjbHVzdF9pbnN0cnVjdF9jb250YWluZXInKVxuICAgICAgICAgICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV4cGFuZCBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdcXHVmMGIyJztcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHBhcmFtcy52aXouZXhwYW5kID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGdldCB1cGRhdGVkIHNpemUgZm9yIHZpc3VhbGl6YXRpb25cbiAgICAgICAgICAgICAgcGFyYW1zLnZpei5wYXJlbnRfZGl2X3NpemVfcG9zKHBhcmFtcyk7XG5cbiAgICAgICAgICAgICAgZDMuc2VsZWN0KCcjbWFpbl9zdmcnKS5zdHlsZSgnb3BhY2l0eScsIDAuNSk7XG4gICAgICAgICAgICAgIHZhciB3YWl0X3RpbWUgPSA1MDA7XG4gICAgICAgICAgICAgIGlmIChwYXJhbXMudml6LnJ1bl90cmFucyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgd2FpdF90aW1lID0gMjUwMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJlc2V0X3Zpc3VhbGl6YXRpb25fc2l6ZSwgd2FpdF90aW1lLCBwYXJhbXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbml0aWFsaXplIGRvdWJsZSBjbGljayB6b29tIGZvciBtYXRyaXhcbiAgICAgICAgem9vbS5pbmlfZG91YmxlY2xpY2soKTtcblxuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgfVxuXG5cblxuICAgICAgLy8gaGlnaGxpZ2h0IHJlc291cmNlIHR5cGVzIC0gc2V0IHVwIHR5cGUvY29sb3IgYXNzb2NpYXRpb25cbiAgICAgIHZhciBnZW5lX3NlYXJjaCA9IFNlYXJjaChwYXJhbXMsIHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzLCAnbmFtZScpO1xuXG4gICAgICAvLyBjaGFuZ2Ugb3BhY2l0eVxuICAgICAgdmFyIG9wYWNpdHlfc2xpZGVyID0gZnVuY3Rpb24oaW5zdF9zbGlkZXIpIHtcblxuICAgICAgICB2YXIgbWF4X2xpbmsgPSBwYXJhbXMubWF0cml4Lm1heF9saW5rO1xuICAgICAgICB2YXIgc2xpZGVyX3NjYWxlID0gZDMuc2NhbGVcbiAgICAgICAgICAubGluZWFyKClcbiAgICAgICAgICAuZG9tYWluKFswLCAxXSlcbiAgICAgICAgICAucmFuZ2UoWzEsIDAuMV0pO1xuXG4gICAgICAgIHZhciBzbGlkZXJfZmFjdG9yID0gc2xpZGVyX3NjYWxlKGluc3Rfc2xpZGVyKTtcblxuICAgICAgICBpZiAocGFyYW1zLm1hdHJpeC5vcGFjaXR5X2Z1bmN0aW9uID09PSAnbGluZWFyJykge1xuICAgICAgICAgIHBhcmFtcy5tYXRyaXgub3BhY2l0eV9zY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAuZG9tYWluKFswLCBzbGlkZXJfZmFjdG9yICogTWF0aC5hYnMocGFyYW1zLm1hdHJpeC5tYXhfbGluayldKVxuICAgICAgICAgICAgLmNsYW1wKHRydWUpXG4gICAgICAgICAgICAucmFuZ2UoWzAuMCwgMS4wXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLm1hdHJpeC5vcGFjaXR5X2Z1bmN0aW9uID09PSAnbG9nJykge1xuICAgICAgICAgIHBhcmFtcy5tYXRyaXgub3BhY2l0eV9zY2FsZSA9IGQzLnNjYWxlLmxvZygpXG4gICAgICAgICAgICAuZG9tYWluKFswLjAwMDEsIHNsaWRlcl9mYWN0b3IgKiBNYXRoLmFicyhwYXJhbXMubWF0cml4Lm1heF9saW5rKV0pXG4gICAgICAgICAgICAuY2xhbXAodHJ1ZSlcbiAgICAgICAgICAgIC5yYW5nZShbMC4wLCAxLjBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLnRpbGUnKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5tYXRyaXgub3BhY2l0eV9zY2FsZShNYXRoLmFicyhkLnZhbHVlKSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIH1cblxuICAgICAgdmFyIG9wYWNpdHlfZnVuY3Rpb24gPSBmdW5jdGlvbihmdW5jdGlvbl90eXBlKSB7XG5cblxuXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbWFrZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbWFrZShjb25maWcpO1xuICAgICAgICB9LFxuICAgICAgICBjaGFuZ2VfZ3JvdXA6IGZ1bmN0aW9uKGluc3RfcmMsIGluc3RfaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5zdF9yYyA9PT0gJ3JvdycpIHtcbiAgICAgICAgICAgIHJvd19kZW5kcm9ncmFtLmNoYW5nZV9ncm91cHMoaW5zdF9pbmRleCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbF9kZW5kcm9ncmFtLmNoYW5nZV9ncm91cHMoaW5zdF9pbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRfY2x1c3RfZ3JvdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBtYXRyaXguZ2V0X2NsdXN0X2dyb3VwKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9tYXRyaXg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBtYXRyaXguZ2V0X21hdHJpeCgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbm9kZXM6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gbWF0cml4LmdldF9ub2Rlcyh0eXBlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHdvX3RyYW5zbGF0ZV96b29tOiB6b29tLnR3b190cmFuc2xhdGVfem9vbSxcbiAgICAgICAgLy8gZXhwb3NlIGFsbF9yZW9yZGVyIGZ1bmN0aW9uXG4gICAgICAgIHJlb3JkZXI6IHJlb3JkZXIuYWxsX3Jlb3JkZXIsXG4gICAgICAgIHNlYXJjaDogZ2VuZV9zZWFyY2gsXG4gICAgICAgIG9wYWNpdHlfc2xpZGVyOiBvcGFjaXR5X3NsaWRlcixcbiAgICAgICAgb3BhY2l0eV9mdW5jdGlvbjogb3BhY2l0eV9mdW5jdGlvbixcbiAgICAgICAgcnVuX3Jlc2V0X3Zpc3VhbGl6YXRpb25fc2l6ZTogcnVuX3Jlc2V0X3Zpc3VhbGl6YXRpb25fc2l6ZSxcbiAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgLyogUmVvcmRlcmluZyBNb2R1bGVcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIFJlb3JkZXIocGFyYW1zKSB7XG5cbiAgICAgIC8qIFJlb3JkZXIgdGhlIGNsdXN0ZXJncmFtIHVzaW5nIHRoZSB0b2dnbGUgc3dpdGNoXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGFsbF9yZW9yZGVyKGluc3Rfb3JkZXIpIHtcblxuICAgICAgICBwYXJhbXMudml6LnJ1bl90cmFucyA9IHRydWU7XG5cbiAgICAgICAgLy8gbG9hZCBvcmRlcnNcbiAgICAgICAgaWYgKGluc3Rfb3JkZXIgPT09ICdpbmknKSB7XG4gICAgICAgICAgcGFyYW1zLm1hdHJpeC54X3NjYWxlLmRvbWFpbihwYXJhbXMubWF0cml4Lm9yZGVycy5pbmlfcm93KTtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnlfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLmluaV9jb2wpO1xuICAgICAgICB9IGVsc2UgaWYgKGluc3Rfb3JkZXIgPT09ICdjbHVzdCcpIHtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnhfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLmNsdXN0X3Jvdyk7XG4gICAgICAgICAgcGFyYW1zLm1hdHJpeC55X3NjYWxlLmRvbWFpbihwYXJhbXMubWF0cml4Lm9yZGVycy5jbHVzdF9jb2wpO1xuICAgICAgICB9IGVsc2UgaWYgKGluc3Rfb3JkZXIgPT09ICdyYW5rJykge1xuICAgICAgICAgIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5kb21haW4ocGFyYW1zLm1hdHJpeC5vcmRlcnMucmFua19yb3cpO1xuICAgICAgICAgIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5kb21haW4ocGFyYW1zLm1hdHJpeC5vcmRlcnMucmFua19jb2wpO1xuICAgICAgICB9IGVsc2UgaWYgKGluc3Rfb3JkZXIgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICBwYXJhbXMubWF0cml4Lnhfc2NhbGUuZG9tYWluKHBhcmFtcy5tYXRyaXgub3JkZXJzLmNsYXNzX3Jvdyk7XG4gICAgICAgICAgcGFyYW1zLm1hdHJpeC55X3NjYWxlLmRvbWFpbihwYXJhbXMubWF0cml4Lm9yZGVycy5jbGFzc19jb2wpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gb25seSBhbmltYXRlIHRyYW5zaXRpb24gaWYgdGhlcmUgYXJlIGEgc21hbGwgbnVtYmVyIG9mIHRpbGVzXG4gICAgICAgIGlmIChkMy5zZWxlY3RBbGwoJy50aWxlJylbMF0ubGVuZ3RoIDwgMTAwMDApIHtcblxuICAgICAgICAgIC8vIGRlZmluZSB0aGUgdCB2YXJpYWJsZSBhcyB0aGUgdHJhbnNpdGlvbiBmdW5jdGlvblxuICAgICAgICAgIHZhciB0ID0gdml6LmdldF9jbHVzdF9ncm91cCgpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApO1xuXG4gICAgICAgICAgLy8gcmVvcmRlciBtYXRyaXhcbiAgICAgICAgICB0LnNlbGVjdEFsbCgnLnJvdycpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaSkgKyAnKSc7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgnLnRpbGUnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShkLnBvc194KSArICcgLCAwKSc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIE1vdmUgUm93IExhYmVsc1xuICAgICAgICAgIGQzLnNlbGVjdCgnI3Jvd19sYWJlbHMnKS5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaSkgKyAnKSc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHQuc2VsZWN0QWxsKCcuY29sdW1uJylcbiAgICAgICAgICBkMy5zZWxlY3QoJyNjb2xfbGFiZWxzJykuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpKSArICcpcm90YXRlKC05MCknO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyByZW9yZGVyIHJvd19sYWJlbF90cmlhbmdsZSBncm91cHNcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfdHJpYW5nbGVfZ3JvdXAnKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGkpICsgJyknO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyByZW9yZGVyIGNvbF9jbGFzcyBncm91cHNcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xfY2xhc3NfZ3JvdXAnKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpKSArICcsMCknO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIC8vIGRlZmluZSB0aGUgdCB2YXJpYWJsZSBhcyB0aGUgdHJhbnNpdGlvbiBmdW5jdGlvblxuICAgICAgICAgIHZhciB0ID0gdml6LmdldF9jbHVzdF9ncm91cCgpXG5cbiAgICAgICAgICAvLyByZW9yZGVyIG1hdHJpeFxuICAgICAgICAgIHQuc2VsZWN0QWxsKCcucm93JylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpKSArICcpJztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCcudGlsZScpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGQucG9zX3gpICsgJyAsIDApJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gTW92ZSBSb3cgTGFiZWxzXG4gICAgICAgICAgZDMuc2VsZWN0KCcjcm93X2xhYmVscycpLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpKSArICcpJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gdC5zZWxlY3RBbGwoJy5jb2x1bW4nKVxuICAgICAgICAgIGQzLnNlbGVjdCgnI2NvbF9sYWJlbHMnKS5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfdGV4dCcpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGkpICsgJylyb3RhdGUoLTkwKSc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHJlb3JkZXIgcm93X2xhYmVsX3RyaWFuZ2xlIGdyb3Vwc1xuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLnJvd190cmlhbmdsZV9ncm91cCcpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaSkgKyAnKSc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHJlb3JkZXIgY29sX2NsYXNzIGdyb3Vwc1xuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNvbF9jbGFzc19ncm91cCcpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGkpICsgJywwKSc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBhcmFtcy52aXoucnVuX3RyYW5zID0gZmFsc2U7XG5cbiAgICAgICAgcmVwb3NpdGlvbl90aWxlX2hpZ2hsaWdodCgpO1xuXG4gICAgICAgIC8vIGJhY2t1cCBhbGxvdyBwcm9ncmFtbWF0aWMgem9vbVxuICAgICAgICBzZXRUaW1lb3V0KGVuZF9yZW9yZGVyLCAyNTAwKTtcblxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByb3dfcmVvcmRlcigpIHtcblxuICAgICAgICAvLyBnZXQgaW5zdCByb3cgKGdlbmUpXG4gICAgICAgIHZhciBpbnN0X3JvdyA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3RleHQnKS50ZXh0KCk7XG5cbiAgICAgICAgLy8gZ2V0IHJvdyBhbmQgY29sIG5vZGVzXG4gICAgICAgIHBhcmFtcy52aXoucnVuX3RyYW5zID0gdHJ1ZTtcblxuICAgICAgICB2YXIgbWF0ID0gdml6LmdldF9tYXRyaXgoKTtcbiAgICAgICAgdmFyIHJvd19ub2RlcyA9IHZpei5nZXRfbm9kZXMoJ3JvdycpO1xuICAgICAgICB2YXIgY29sX25vZGVzID0gdml6LmdldF9ub2RlcygnY29sJyk7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgaW5kZXggb2YgdGhlIHJvd1xuICAgICAgICB2YXIgdG1wX2FyciA9IFtdO1xuICAgICAgICBsb2Rhc2guZWFjaChyb3dfbm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICB0bXBfYXJyLnB1c2gobm9kZS5uYW1lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZmluZCBpbmRleFxuICAgICAgICB2YXIgaW5zdF9yb3cgPSBsb2Rhc2guaW5kZXhPZih0bXBfYXJyLCBpbnN0X3Jvdyk7XG5cbiAgICAgICAgLy8gZ2F0aGVyIHRoZSB2YWx1ZXMgb2YgdGhlIGlucHV0IGdlbmVzXG4gICAgICAgIHRtcF9hcnIgPSBbXTtcbiAgICAgICAgbG9kYXNoLmVhY2goY29sX25vZGVzLCBmdW5jdGlvbihub2RlLCBpbmRleCkge1xuICAgICAgICAgIHRtcF9hcnIucHVzaChtYXRbaW5zdF9yb3ddW2luZGV4XS52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNvcnQgdGhlIHJvd3NcbiAgICAgICAgdmFyIHRtcF9zb3J0ID0gZDMucmFuZ2UodG1wX2Fyci5sZW5ndGgpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiB0bXBfYXJyW2JdIC0gdG1wX2FyclthXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gLy8gZ2V0IHBhcmFtZXRlcnNcbiAgICAgICAgLy8gdmFyIHBhcmFtcyA9IHBhcmFtcztcblxuICAgICAgICAvLyByZXNvcnQgdGhlIGNvbHVtbnMgKHJlc29ydCB4KVxuICAgICAgICBwYXJhbXMubWF0cml4Lnhfc2NhbGUuZG9tYWluKHRtcF9zb3J0KTtcblxuICAgICAgICAvLyByZW9yZGVyIG1hdHJpeFxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgdCB2YXJpYWJsZSBhcyB0aGUgdHJhbnNpdGlvbiBmdW5jdGlvblxuICAgICAgICB2YXIgdCA9IHZpei5nZXRfY2x1c3RfZ3JvdXAoKVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMCk7XG5cbiAgICAgICAgLy8gcmVvcmRlciBtYXRyaXhcbiAgICAgICAgdC5zZWxlY3RBbGwoJy50aWxlJylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShkYXRhLnBvc194KSArICcsMCknO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1vdmUgQ29sIExhYmVsc1xuICAgICAgICBkMy5zZWxlY3QoJyNjb2xfbGFiZWxzJykuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZGF0YSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoaW5kZXgpICsgJylyb3RhdGUoLTkwKSc7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVvcmRlciBjb2xfY2xhc3MgZ3JvdXBzXG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNvbF9jbGFzc19ncm91cCcpXG4gICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkYXRhLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpbmRleCkgKyAnLDApJztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lYWNoKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIHNldCBydW5uaW5nIHRyYW5zaXRpb24gdG8gMFxuICAgICAgICAgICAgcGFyYW1zLnZpei5ydW5fdHJhbnMgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgcm93XG4gICAgICAgIC8vIGQzLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAgICAgLy8gICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgLy8gICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgLy8gZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgIC8vICAgLnNlbGVjdCgncmVjdCcpXG4gICAgICAgIC8vICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG5cbiAgICAgICAgcmVwb3NpdGlvbl90aWxlX2hpZ2hsaWdodCgpO1xuXG4gICAgICAgIC8vIGJhY2t1cCBhbGxvdyBwcm9ncmFtbWF0aWMgem9vbVxuICAgICAgICBzZXRUaW1lb3V0KGVuZF9yZW9yZGVyLCAyNTAwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY29sX3Jlb3JkZXIoKSB7XG4gICAgICAgIC8vIHNldCBydW5uaW5nIHRyYW5zaXRpb24gdmFsdWVcbiAgICAgICAgcGFyYW1zLnZpei5ydW5fdHJhbnMgPSB0cnVlO1xuXG4gICAgICAgIHZhciBtYXQgPSB2aXouZ2V0X21hdHJpeCgpO1xuICAgICAgICB2YXIgcm93X25vZGVzID0gdml6LmdldF9ub2Rlcygncm93Jyk7XG4gICAgICAgIHZhciBjb2xfbm9kZXMgPSB2aXouZ2V0X25vZGVzKCdjb2wnKTtcblxuICAgICAgICAvLyBnZXQgaW5zdCBjb2wgKHRlcm0pXG4gICAgICAgIHZhciBpbnN0X3Rlcm0gPSBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JykuYXR0cignZnVsbF9uYW1lJyk7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgY29sdW1uIG51bWJlciBvZiB0aGlzIHRlcm0gZnJvbSBjb2xfbm9kZXNcbiAgICAgICAgLy8gZ2F0aGVyIGNvbHVtbiBub2RlIG5hbWVzXG4gICAgICAgIHZhciB0bXBfYXJyID0gW107XG4gICAgICAgIGxvZGFzaC5lYWNoKGNvbF9ub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIHRtcF9hcnIucHVzaChub2RlLm5hbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBmaW5kIGluZGV4XG4gICAgICAgIHZhciBpbnN0X2NvbCA9IGxvZGFzaC5pbmRleE9mKHRtcF9hcnIsIGluc3RfdGVybSk7XG5cbiAgICAgICAgLy8gZ2F0aGVyIHRoZSB2YWx1ZXMgb2YgdGhlIGlucHV0IGdlbmVzXG4gICAgICAgIHRtcF9hcnIgPSBbXTtcbiAgICAgICAgbG9kYXNoLmVhY2gocm93X25vZGVzLCBmdW5jdGlvbihub2RlLCBpbmRleCkge1xuICAgICAgICAgIHRtcF9hcnIucHVzaChtYXRbaW5kZXhdW2luc3RfY29sXS52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNvcnQgdGhlIHJvd3NcbiAgICAgICAgdmFyIHRtcF9zb3J0ID0gZDMucmFuZ2UodG1wX2Fyci5sZW5ndGgpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiB0bXBfYXJyW2JdIC0gdG1wX2FyclthXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVzb3J0IHJvd3MgLSB5IGF4aXNcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBwYXJhbXMubWF0cml4Lnlfc2NhbGUuZG9tYWluKHRtcF9zb3J0KTtcblxuICAgICAgICAvLyByZW9yZGVyXG4gICAgICAgIC8vIGRlZmluZSB0aGUgdCB2YXJpYWJsZSBhcyB0aGUgdHJhbnNpdGlvbiBmdW5jdGlvblxuICAgICAgICB2YXIgdCA9IHZpei5nZXRfY2x1c3RfZ3JvdXAoKVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMCk7XG5cbiAgICAgICAgLy8gcmVvcmRlciBtYXRyaXhcbiAgICAgICAgdC5zZWxlY3RBbGwoJy5yb3cnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkYXRhLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGluZGV4KSArICcpJztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW9yZGVyIHJvd19sYWJlbF90cmlhbmdsZSBncm91cHNcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcucm93X3RyaWFuZ2xlX2dyb3VwJylcbiAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGRhdGEsIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5kZXgpICsgJyknO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1vdmUgUm93IExhYmVsc1xuICAgICAgICBkMy5zZWxlY3QoJyNyb3dfbGFiZWxzJykuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZGF0YSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpbmRleCkgKyAnKSc7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdC5zZWxlY3RBbGwoJy5jb2x1bW4nKVxuICAgICAgICBkMy5zZWxlY3QoJyNjb2xfbGFiZWxzJykuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZGF0YSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoaW5kZXgpICsgJylyb3RhdGUoLTkwKSc7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZWFjaCgnZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBzZXQgcnVubmluZyB0cmFuc2l0aW9uIHRvIDBcbiAgICAgICAgICAgIHBhcmFtcy52aXoucnVuX3RyYW5zID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGNvbHVtblxuICAgICAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIC8vIHVuaGlsaWdodCBhbmQgdW5ib2xkIGFsbCBjb2x1bW5zIChhbHJlYWR5IHVuYm9sZGVkIGVhcmxpZXIpXG4gICAgICAgIC8vIGQzLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF90ZXh0JylcbiAgICAgICAgLy8gICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgLy8gICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgLy8gLy8gaGlnaGxpZ2h0IGNvbHVtbiBuYW1lXG4gICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAvLyAgIC5zZWxlY3QoJ3JlY3QnKVxuICAgICAgICAvLyAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuXG5cbiAgICAgICAgcmVwb3NpdGlvbl90aWxlX2hpZ2hsaWdodCgpO1xuXG4gICAgICAgIC8vIGJhY2t1cCBhbGxvdyBwcm9ncmFtbWF0aWMgem9vbVxuICAgICAgICBzZXRUaW1lb3V0KGVuZF9yZW9yZGVyLCAyNTAwKTtcbiAgICAgIH1cblxuICAgICAgLy8gYWxsb3cgcHJvZ3JhbW1hdGljIHpvb20gYWZ0ZXIgcmVvcmRlcmluZ1xuICAgICAgZnVuY3Rpb24gZW5kX3Jlb3JkZXIoKSB7XG4gICAgICAgIHBhcmFtcy52aXoucnVuX3RyYW5zID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlcG9zaXRpb24gdGlsZSBoaWdobGlnaHRcbiAgICAgIGZ1bmN0aW9uIHJlcG9zaXRpb25fdGlsZV9oaWdobGlnaHQoKSB7XG4gICAgICAgIC8vIHJlc2l6ZSBjbGljayBobGlnaHRcbiAgICAgICAgdmFyIHJlbF93aWR0aF9obGlnaHQgPSA2O1xuICAgICAgICB2YXIgb3BhY2l0eV9obGlnaHQgPSAwLjg1O1xuXG4gICAgICAgIHZhciBobGlnaHRfd2lkdGggPSByZWxfd2lkdGhfaGxpZ2h0ICogcGFyYW1zLnZpei5ib3JkZXJfd2lkdGg7XG4gICAgICAgIHZhciBobGlnaHRfaGVpZ2h0ID0gcmVsX3dpZHRoX2hsaWdodCAqIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoIC8gcGFyYW1zLnZpei56b29tX3N3aXRjaDtcbiAgICAgICAgLy8gcmVwb3NpdGlvbiB0aWxlIGhpZ2hsaWdodFxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8vIHRvcCBoaWdobGlnaHRcbiAgICAgICAgZDMuc2VsZWN0KCcjdG9wX2hsaWdodCcpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKHBhcmFtcy5tYXRyaXguY2xpY2tfaGxpZ2h0X3gpICsgJywwKSc7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbGVmdCBoaWdobGlnaHRcbiAgICAgICAgZDMuc2VsZWN0KCcjbGVmdF9obGlnaHQnKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGhsaWdodF93aWR0aClcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodCAqIDAuOTkpXG4gICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUocGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCkgKyAnLCcgK1xuICAgICAgICAgICAgICBobGlnaHRfaGVpZ2h0ICogMC45OSArICcpJztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByaWdodCBoaWdobGlnaHRcbiAgICAgICAgZDMuc2VsZWN0KCcjcmlnaHRfaGxpZ2h0JylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBobGlnaHRfd2lkdGgpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF9oZWlnaHQgKiAwLjk5KVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZSA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZShwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF94KSArIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF93aWR0aDtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB0bXBfdHJhbnNsYXRlICsgJywnICtcbiAgICAgICAgICAgICAgaGxpZ2h0X2hlaWdodCAqIDAuOTkgKyAnKSc7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYm90dG9tIGhpZ2hsaWdodFxuICAgICAgICBkMy5zZWxlY3QoJyNib3R0b21faGxpZ2h0JylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSAxLjk4ICogaGxpZ2h0X3dpZHRoXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGxpZ2h0X2hlaWdodClcbiAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZShwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF94KSArIGhsaWdodF93aWR0aCAqIDAuOTk7XG4gICAgICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZV95ID0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodDtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB0bXBfdHJhbnNsYXRlX3ggKyAnLCcgK1xuICAgICAgICAgICAgICB0bXBfdHJhbnNsYXRlX3kgKyAnKSc7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcm93X3Jlb3JkZXI6IHJvd19yZW9yZGVyLFxuICAgICAgICBjb2xfcmVvcmRlcjogY29sX3Jlb3JkZXIsXG4gICAgICAgIGFsbF9yZW9yZGVyOiBhbGxfcmVvcmRlclxuICAgICAgfTtcblxuICAgIH1cblxuXG5cbiAgICBmdW5jdGlvbiBab29tKHBhcmFtcykge1xuXG4gICAgICAvKiBGdW5jdGlvbnMgZm9yIHpvb21pbmcuIFNob3VsZCBiZSB0dXJuZWQgaW50byBhIG1vZHVsZS5cbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgICBmdW5jdGlvbiB6b29tZWQoKSB7XG5cbiAgICAgICAgdmFyIHpvb21feCA9IGQzLmV2ZW50LnNjYWxlLFxuICAgICAgICAgIHpvb21feSA9IGQzLmV2ZW50LnNjYWxlLFxuICAgICAgICAgIHRyYW5zX3ggPSBkMy5ldmVudC50cmFuc2xhdGVbMF0gLSBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0LFxuICAgICAgICAgIHRyYW5zX3kgPSBkMy5ldmVudC50cmFuc2xhdGVbMV0gLSBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi50b3A7XG5cbiAgICAgICAgLy8gYXBwbHkgdHJhbnNmb3JtYXRpb25cbiAgICAgICAgYXBwbHlfdHJhbnNmb3JtYXRpb24odHJhbnNfeCwgdHJhbnNfeSwgem9vbV94LCB6b29tX3kpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseV90cmFuc2Zvcm1hdGlvbih0cmFuc194LCB0cmFuc195LCB6b29tX3gsIHpvb21feSkge1xuXG4gICAgICAgIHZhciBkM19zY2FsZSA9IHpvb21feDtcblxuICAgICAgICAvLyB5IC0gcnVsZXNcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIGF2YWlsYWJsZSBwYW5uaW5nIHJvb20gaW4gdGhlIHkgZGlyZWN0aW9uXG4gICAgICAgIC8vIG11bHRpcGxlIGV4dHJhIHJvb20gKHpvb20gLSAxKSBieSB0aGUgd2lkdGhcbiAgICAgICAgLy8gYWx3YXlzIGRlZmluZWQgaW4gdGhlIHNhbWUgd2F5XG4gICAgICAgIHZhciBwYW5fcm9vbV95ID0gKGQzX3NjYWxlIC0gMSkgKiBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQ7XG5cbiAgICAgICAgLy8gZG8gbm90IHRyYW5zbGF0ZSBpZiB0cmFuc2xhdGUgaW4geSBkaXJlY3Rpb24gaXMgcG9zaXRpdmVcbiAgICAgICAgaWYgKHRyYW5zX3kgPj0gMCkge1xuICAgICAgICAgIC8vIHJlc3RyaWN0IHRyYW5zZm9ybWF0aW9uIHBhcmFtZXRlcnNcbiAgICAgICAgICAvLyBubyBwYW5uaW5nIGluIGVpdGhlciBkaXJlY3Rpb25cbiAgICAgICAgICB0cmFuc195ID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXN0cmljdCB5IHBhbiB0byBwYW5fcm9vbV95IGlmIG5lY2Vzc2FyeVxuICAgICAgICBlbHNlIGlmICh0cmFuc195IDw9IC1wYW5fcm9vbV95KSB7XG4gICAgICAgICAgdHJhbnNfeSA9IC1wYW5fcm9vbV95O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8geCAtIHJ1bGVzXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyB6b29tIGluIHkgZGlyZWN0aW9uIG9ubHkgLSB0cmFuc2xhdGUgaW4geSBvbmx5XG4gICAgICAgIGlmIChkM19zY2FsZSA8IHBhcmFtcy52aXouem9vbV9zd2l0Y2gpIHtcbiAgICAgICAgICAvLyBubyB4IHRyYW5zbGF0ZSBvciB6b29tXG4gICAgICAgICAgdHJhbnNfeCA9IDA7XG4gICAgICAgICAgem9vbV94ID0gMTtcbiAgICAgICAgfVxuICAgICAgICAvLyB6b29tIGluIGJvdGggZGlyZWN0aW9uc1xuICAgICAgICAvLyBzY2FsZSBpcyBncmVhdGVyIHRoYW4gcGFyYW1zLnZpei56b29tX3N3aXRjaFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvLyBhdmFpbGFibGUgcGFubmluZyByb29tIGluIHRoZSB4IGRpcmVjdGlvblxuICAgICAgICAgIC8vIG11bHRpcGxlIGV4dHJhIHJvb20gKHpvb20gLSAxKSBieSB0aGUgd2lkdGhcbiAgICAgICAgICB2YXIgcGFuX3Jvb21feCA9IChkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2ggLSAxKSAqIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoO1xuXG4gICAgICAgICAgLy8gbm8gcGFubmluZyBpbiB0aGUgcG9zaXRpdmUgZGlyZWN0aW9uXG4gICAgICAgICAgaWYgKHRyYW5zX3ggPiAwKSB7XG4gICAgICAgICAgICAvLyByZXN0cmljdCB0cmFuc2Zvcm1hdGlvbiBwYXJhbWV0ZXJzXG4gICAgICAgICAgICAvLyBubyBwYW5uaW5nIGluIHRoZSB4IGRpcmVjdGlvblxuICAgICAgICAgICAgdHJhbnNfeCA9IDA7XG4gICAgICAgICAgICAvLyBzZXQgem9vbV94XG4gICAgICAgICAgICB6b29tX3ggPSBkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHJlc3RyaWN0IHBhbm5pbmcgdG8gcGFuX3Jvb21feFxuICAgICAgICAgIGVsc2UgaWYgKHRyYW5zX3ggPD0gLXBhbl9yb29tX3gpIHtcbiAgICAgICAgICAgIC8vIHJlc3RyaWN0IHRyYW5zZm9ybWF0aW9uIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIC8vIG5vIHBhbm5pbmcgaW4gdGhlIHggZGlyZWN0aW9uXG4gICAgICAgICAgICB0cmFuc194ID0gLXBhbl9yb29tX3g7XG4gICAgICAgICAgICAvLyBzZXQgem9vbV94XG4gICAgICAgICAgICB6b29tX3ggPSBkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGFsbG93IHR3byBkaW1lbnNpb25hbCBwYW5uaW5nXG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZXN0cmljdCB0cmFuc2Zvcm1hdGlvbiBwYXJhbWV0ZXJzXG4gICAgICAgICAgICAvLyBzZXQgem9vbV94XG4gICAgICAgICAgICB6b29tX3ggPSBkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXBwbHkgdHJhbnNmb3JtYXRpb24gYW5kIHJlc2V0IHRyYW5zbGF0ZSB2ZWN0b3JcbiAgICAgICAgLy8gdGhlIHpvb20gdmVjdG9yICh6b29tLnNjYWxlKSBuZXZlciBnZXRzIHJlc2V0XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyB0cmFuc2xhdGUgY2x1c3RlcmdyYW1cbiAgICAgICAgLy8gZDMuc2VsZWN0KCcjY2x1c3RfZ3JvdXAnKVxuICAgICAgICB2aXouZ2V0X2NsdXN0X2dyb3VwKClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgW3RyYW5zX3gsIHRyYW5zX3ldICsgJykgc2NhbGUoJyArXG4gICAgICAgICAgICB6b29tX3ggKyAnLCcgKyB6b29tX3kgKyAnKScpO1xuXG4gICAgICAgIC8vIHRyYW5zZm9ybSByb3cgbGFiZWxzXG4gICAgICAgIGQzLnNlbGVjdCgnI3Jvd19sYWJlbHMnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBbMCwgdHJhbnNfeV0gKyAnKSBzY2FsZSgnICsgem9vbV95ICtcbiAgICAgICAgICAgICcpJyk7XG5cbiAgICAgICAgLy8gdHJhbnNmb3JtIHJvd19sYWJlbF90cmlhbmdsZXNcbiAgICAgICAgLy8gdXNlIHRoZSBvZmZzZXQgc2F2ZWQgaW4gcGFyYW1zLCBvbmx5IHpvb20gaW4gdGhlIHkgZGlyZWN0aW9uXG4gICAgICAgIGQzLnNlbGVjdCgnI3Jvd19sYWJlbF90cmlhbmdsZXMnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBbMCwgdHJhbnNfeV0gKyAnKSBzY2FsZSggMSwnICtcbiAgICAgICAgICAgIHpvb21feSArICcpJyk7XG5cbiAgICAgICAgLy8gdHJhbnNmb3JtIGNvbCBsYWJlbHNcbiAgICAgICAgLy8gbW92ZSBkb3duIGNvbCBsYWJlbHMgYXMgem9vbWluZyBvY2N1cnMsIHN1YnRyYWN0IHRyYW5zX3ggLSAyMCBhbG1vc3Qgd29ya3NcbiAgICAgICAgZDMuc2VsZWN0KCcjY29sX2xhYmVscycpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFt0cmFuc194LCAwXSArICcpIHNjYWxlKCcgKyB6b29tX3ggK1xuICAgICAgICAgICAgJyknKTtcblxuICAgICAgICAvLyB0cmFuc2Zvcm0gY29sX2NsYXNzXG4gICAgICAgIGQzLnNlbGVjdCgnI2NvbF9jbGFzcycpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFt0cmFuc194LCAwXSArICcpIHNjYWxlKCcgKyB6b29tX3ggK1xuICAgICAgICAgICAgJywxKScpO1xuXG4gICAgICAgIC8vIHJlc2V0IHRyYW5zbGF0ZSB2ZWN0b3IgLSBhZGQgYmFjayBtYXJnaW5zIHRvIHRyYW5zX3ggYW5kIHRyYW5zX3lcbiAgICAgICAgcGFyYW1zLnpvb21cbiAgICAgICAgICAudHJhbnNsYXRlKFt0cmFuc194ICsgcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4ubGVmdCwgdHJhbnNfeSArIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcF0pO1xuXG4gICAgICAgIHZhciB0cmFucyA9IGZhbHNlO1xuICAgICAgICBjb25zdHJhaW5fZm9udF9zaXplKHRyYW5zKTtcblxuXG4gICAgICAgIC8vIHJlc2l6ZSBsYWJlbCBiYXJzIGlmIG5lY2Vzc2FyeVxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBpZiAoVXRpbHMuaGFzKHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzWzBdLCAndmFsdWUnKSkge1xuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLnJvd19iYXJzJylcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICAgICAgICBpbnN0X3ZhbHVlID0gcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfcm93KE1hdGguYWJzKGQudmFsdWUpKSAvIHpvb21feTtcbiAgICAgICAgICAgICAgcmV0dXJuIGluc3RfdmFsdWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHZhciBpbnN0X3ZhbHVlID0gMDtcbiAgICAgICAgICAgICAgaW5zdF92YWx1ZSA9IC1wYXJhbXMubGFiZWxzLmJhcl9zY2FsZV9yb3coTWF0aC5hYnMoZC52YWx1ZSkpIC8gem9vbV95O1xuICAgICAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFV0aWxzLmhhcyhwYXJhbXMubmV0d29ya19kYXRhLmNvbF9ub2Rlc1swXSwgJ3ZhbHVlJykpIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xfYmFycycpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHZhciBpbnN0X3ZhbHVlID0gMDtcbiAgICAgICAgICAgICAgaWYgKGQudmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zdF92YWx1ZSA9IHBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX2NvbChkLnZhbHVlKSAvIHpvb21feDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0d29fdHJhbnNsYXRlX3pvb20ocGFuX2R4LCBwYW5fZHksIGZpbl96b29tKSB7XG5cbiAgICAgICAgLy8gZ2V0IHBhcmFtZXRlcnNcbiAgICAgICAgaWYgKCFwYXJhbXMudml6LnJ1bl90cmFucykge1xuXG4gICAgICAgICAgLy8gZGVmaW5lIHRoZSBjb21tb25seSB1c2VkIHZhcmlhYmxlIGhhbGZfaGVpZ2h0XG4gICAgICAgICAgdmFyIGhhbGZfaGVpZ2h0ID0gcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0IC8gMjtcblxuICAgICAgICAgIC8vIHkgcGFuIHJvb20sIHRoZSBwYW4gcm9vbSBoYXMgdG8gYmUgbGVzcyB0aGFuIGhhbGZfaGVpZ2h0IHNpbmNlXG4gICAgICAgICAgLy8gem9vbWluZyBpbiBvbiBhIGdlbmUgdGhhdCBpcyBuZWFyIHRoZSB0b3Agb2YgdGhlIGNsdXN0ZXJncmFtIGFsc28gY2F1c2VzXG4gICAgICAgICAgLy8gcGFubmluZyBvdXQgb2YgdGhlIHZpc2libGUgcmVnaW9uXG4gICAgICAgICAgdmFyIHlfcGFuX3Jvb20gPSBoYWxmX2hlaWdodCAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG5cbiAgICAgICAgICAvLyBwcmV2ZW50IHZpc3VhbGl6YXRpb24gZnJvbSBwYW5uaW5nIGRvd24gdG9vIG11Y2hcbiAgICAgICAgICAvLyB3aGVuIHpvb21pbmcgaW50byBnZW5lcyBuZWFyIHRoZSB0b3Agb2YgdGhlIGNsdXN0ZXJncmFtXG4gICAgICAgICAgaWYgKHBhbl9keSA+PSBoYWxmX2hlaWdodCAtIHlfcGFuX3Jvb20pIHtcblxuICAgICAgICAgICAgLy8gZXhwbGFuYXRpb24gb2YgcGFubmluZyBydWxlc1xuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBwcmV2ZW50IHRoZSBjbHVzdGVyZ3JhbSBmcm9tIHBhbm5pbmcgZG93biB0b28gbXVjaFxuICAgICAgICAgICAgLy8gaWYgdGhlIGFtb3VudCBvZiBwYW5uaW5nIGlzIGVxdWFsIHRvIHRoZSBoYWxmX2hlaWdodCB0aGVuIGl0IG5lZWRzIHRvIGJlIHJlZHVjZWRcbiAgICAgICAgICAgIC8vIGVmZmVjdGl2ZWx5LCB0aGUgdGhlIHZpc3VhbGl6YXRpb24gbmVlZHMgdG8gYmUgbW92ZWQgdXAgKG5lZ2F0aXZlKSBieSBzb21lIGZhY3RvclxuICAgICAgICAgICAgLy8gb2YgdGhlIGhhbGYtd2lkdGgtb2YtdGhlLXZpc3VhbGl6YXRpb24uXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIHpvb21pbmcgaW52b2x2ZWQsIHRoZW4gdGhlXG4gICAgICAgICAgICAvLyB2aXN1YWxpemF0aW9uIHdvdWxkIGJlIGNlbnRlcmVkIGZpcnN0LCB0aGVuIHBhbm5lZCB0byBjZW50ZXIgdGhlIHRvcCB0ZXJtXG4gICAgICAgICAgICAvLyB0aGlzIHdvdWxkIHJlcXVpcmUgYVxuICAgICAgICAgICAgLy8gY29ycmVjdGlvbiB0byByZS1jZW50ZXIgaXQuIEhvd2V2ZXIsIGJlY2F1c2Ugb2YgdGhlIHpvb21pbmcgdGhlIG9mZnNldCBpc1xuICAgICAgICAgICAgLy8gcmVkdWNlZCBieSB0aGUgem9vbSBmYWN0b3IgKHRoaXMgaXMgYmVjYXVzZSB0aGUgcGFubmluZyBpcyBvY2N1cnJpbmcgb24gc29tZXRoaW5nXG4gICAgICAgICAgICAvLyB0aGF0IHdpbGwgYmUgem9vbWVkIGludG8gLSB0aGlzIGlzIHdoeSB0aGUgcGFuX2R5IHZhbHVlIGlzIG5vdCBzY2FsZWQgaW4gdGhlIHR3b1xuICAgICAgICAgICAgLy8gdHJhbnNsYXRlIHRyYW5zZm9ybWF0aW9ucywgYnV0IGl0IGhhcyB0byBiZSBzY2FsZWQgYWZ0ZXJ3YXJkcyB0byBzZXQgdGhlIHRyYW5zbGF0ZVxuICAgICAgICAgICAgLy8gdmVjdG9yKVxuICAgICAgICAgICAgLy8gcGFuX2R5ID0gaGFsZl9oZWlnaHQgLSAoaGFsZl9oZWlnaHQpL3BhcmFtcy52aXouem9vbV9zd2l0Y2hcblxuICAgICAgICAgICAgLy8gaWYgcGFuX2R5IGlzIGdyZWF0ZXIgdGhhbiB0aGUgcGFuIHJvb20sIHRoZW4gcGFubmluZyBoYXMgdG8gYmUgcmVzdHJpY3RlZFxuICAgICAgICAgICAgLy8gc3RhcnQgYnkgc2hpZnRpbmcgYmFjayB1cCAobmVnYXRpdmUpIGJ5IGhhbGZfaGVpZ2h0L3BhcmFtcy52aXouem9vbV9zd2l0Y2ggdGhlbiBzaGlmdCBiYWNrIGRvd25cbiAgICAgICAgICAgIC8vIGJ5IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gaGFsZl9oZWlnaHQgYW5kIHBhbl9keSAoc28gdGhhdCB0aGUgdG9wIG9mIHRoZSBjbHVzdGVyZ3JhbSBpc1xuICAgICAgICAgICAgLy8gdmlzaWJsZSlcbiAgICAgICAgICAgIHZhciBzaGlmdF90b3Bfdml6ID0gaGFsZl9oZWlnaHQgLSBwYW5fZHk7XG4gICAgICAgICAgICB2YXIgc2hpZnRfdXBfdml6ID0gLWhhbGZfaGVpZ2h0IC8gcGFyYW1zLnZpei56b29tX3N3aXRjaCArXG4gICAgICAgICAgICAgIHNoaWZ0X3RvcF92aXo7XG5cbiAgICAgICAgICAgIC8vIHJlZHVjZSBwYW5fZHkgc28gdGhhdCB0aGUgdmlzdWFsaXphdGlvbiBkb2VzIG5vdCBnZXQgcGFubmVkIHRvIGZhciBkb3duXG4gICAgICAgICAgICBwYW5fZHkgPSBwYW5fZHkgKyBzaGlmdF91cF92aXo7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcHJldmVudCB2aXN1YWxpemF0aW9uIGZyb20gcGFubmluZyB1cCB0b28gbXVjaFxuICAgICAgICAgIC8vIHdoZW4gem9vbWluZyBpbnRvIGdlbmVzIGF0IHRoZSBib3R0b20gb2YgdGhlIGNsdXN0ZXJncmFtXG4gICAgICAgICAgaWYgKHBhbl9keSA8IC0oaGFsZl9oZWlnaHQgLSB5X3Bhbl9yb29tKSkge1xuXG4gICAgICAgICAgICBzaGlmdF90b3Bfdml6ID0gaGFsZl9oZWlnaHQgKyBwYW5fZHk7XG5cbiAgICAgICAgICAgIHNoaWZ0X3VwX3ZpeiA9IGhhbGZfaGVpZ2h0IC8gcGFyYW1zLnZpei56b29tX3N3aXRjaCAtIHNoaWZ0X3RvcF92aXo7IC8vLSBtb3ZlX3VwX29uZV9yb3c7XG5cbiAgICAgICAgICAgIC8vIHJlZHVjZSBwYW5fZHkgc28gdGhhdCB0aGUgdmlzdWFsaXphdGlvbiBkb2VzIG5vdCBnZXQgcGFubmVkIHRvIGZhciBkb3duXG4gICAgICAgICAgICBwYW5fZHkgPSBwYW5fZHkgKyBzaGlmdF91cF92aXo7XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3aWxsIGltcHJvdmUgdGhpcyAhIVxuICAgICAgICAgIHZhciB6b29tX3kgPSBmaW5fem9vbTtcbiAgICAgICAgICB2YXIgem9vbV94ID0gMTtcblxuICAgICAgICAgIC8vIHNlYXJjaCBkdXJhdGlvbiAtIHRoZSBkdXJhdGlvbiBvZiB6b29taW5nIGFuZCBwYW5uaW5nXG4gICAgICAgICAgdmFyIHNlYXJjaF9kdXJhdGlvbiA9IDcwMDtcblxuICAgICAgICAgIC8vIGNlbnRlcl95XG4gICAgICAgICAgdmFyIGNlbnRlcl95ID0gLSh6b29tX3kgLSAxKSAqIGhhbGZfaGVpZ2h0O1xuXG4gICAgICAgICAgLy8gdHJhbnNmb3JtIGNsdXN0IGdyb3VwXG4gICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgIC8vIGQzLnNlbGVjdCgnI2NsdXN0X2dyb3VwJylcbiAgICAgICAgICB2aXouZ2V0X2NsdXN0X2dyb3VwKClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oc2VhcmNoX2R1cmF0aW9uKVxuICAgICAgICAgICAgLy8gZmlyc3QgYXBwbHkgdGhlIG1hcmdpbiB0cmFuc2Zvcm1hdGlvblxuICAgICAgICAgICAgLy8gdGhlbiB6b29tLCB0aGVuIGFwcGx5IHRoZSBmaW5hbCB0cmFuc2Zvcm1hdGlvblxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFswLCAwICsgY2VudGVyX3ldICsgJyknICtcbiAgICAgICAgICAgICAgJyBzY2FsZSgnICsgMSArICcsJyArIHpvb21feSArICcpJyArICd0cmFuc2xhdGUoJyArIFtwYW5fZHgsXG4gICAgICAgICAgICAgICAgcGFuX2R5XG4gICAgICAgICAgICAgIF0gKyAnKScpO1xuXG4gICAgICAgICAgLy8gdHJhbnNmb3JtIHJvdyBsYWJlbHNcbiAgICAgICAgICBkMy5zZWxlY3QoJyNyb3dfbGFiZWxzJylcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbihzZWFyY2hfZHVyYXRpb24pXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgWzAsIGNlbnRlcl95XSArICcpJyArICcgc2NhbGUoJyArXG4gICAgICAgICAgICAgIHpvb21feSArICcsJyArIHpvb21feSArICcpJyArICd0cmFuc2xhdGUoJyArIFswLCBwYW5fZHldICsgJyknKTtcblxuICAgICAgICAgIC8vIHRyYW5zZm9ybSByb3dfbGFiZWxfdHJpYW5nbGVzXG4gICAgICAgICAgLy8gdXNlIHRoZSBvZmZzZXQgc2F2ZWQgaW4gcGFyYW1zLCBvbmx5IHpvb20gaW4gdGhlIHkgZGlyZWN0aW9uXG4gICAgICAgICAgZDMuc2VsZWN0KCcjcm93X2xhYmVsX3RyaWFuZ2xlcycpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24oc2VhcmNoX2R1cmF0aW9uKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFswLCBjZW50ZXJfeV0gKyAnKScgKyAnIHNjYWxlKCcgK1xuICAgICAgICAgICAgICAxICsgJywnICsgem9vbV95ICsgJyknICsgJ3RyYW5zbGF0ZSgnICsgWzAsIHBhbl9keV0gKyAnKScpO1xuXG4gICAgICAgICAgLy8gdHJhbnNmb3JtIGNvbCBsYWJlbHNcbiAgICAgICAgICBkMy5zZWxlY3QoJyNjb2xfbGFiZWxzJylcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbihzZWFyY2hfZHVyYXRpb24pXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJyBzY2FsZSgnICsgMSArICcsJyArIDEgKyAnKScgKyAndHJhbnNsYXRlKCcgKyBbXG4gICAgICAgICAgICAgIHBhbl9keCwgMFxuICAgICAgICAgICAgXSArICcpJyk7XG5cbiAgICAgICAgICAvLyB0cmFuc2Zvcm0gY29sX2NsYXNzXG4gICAgICAgICAgZDMuc2VsZWN0KCcjY29sX2NsYXNzJylcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbihzZWFyY2hfZHVyYXRpb24pXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJyBzY2FsZSgnICsgMSArICcsJyArIDEgKyAnKScgKyAndHJhbnNsYXRlKCcgKyBbXG4gICAgICAgICAgICAgIHBhbl9keCwgMFxuICAgICAgICAgICAgXSArICcpJyk7XG5cbiAgICAgICAgICAvLyBzZXQgeSB0cmFuc2xhdGU6IGNlbnRlcl95IGlzIHBvc2l0aXZlLCBwb3NpdGl2ZSBtb3ZlcyB0aGUgdmlzdWFsaXphdGlvbiBkb3duXG4gICAgICAgICAgLy8gdGhlIHRyYW5zbGF0ZSB2ZWN0b3IgaGFzIHRoZSBpbml0aWFsIG1hcmdpbiwgdGhlIGZpcnN0IHkgY2VudGVyaW5nLCBhbmQgcGFuX2R5XG4gICAgICAgICAgLy8gdGltZXMgdGhlIHNjYWxpbmcgem9vbV95XG4gICAgICAgICAgdmFyIG5ldF95X29mZnNldCA9IHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcCArIGNlbnRlcl95ICsgcGFuX2R5ICogem9vbV95O1xuXG4gICAgICAgICAgLy8gcmVzZXQgdGhlIHpvb20gdHJhbnNsYXRlIGFuZCB6b29tXG4gICAgICAgICAgcGFyYW1zLnpvb20uc2NhbGUoem9vbV95KTtcbiAgICAgICAgICBwYXJhbXMuem9vbS50cmFuc2xhdGUoW3Bhbl9keCwgbmV0X3lfb2Zmc2V0XSk7XG5cbiAgICAgICAgICB2YXIgdHJhbnMgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0cmFpbl9mb250X3NpemUodHJhbnMpO1xuXG4gICAgICAgICAgLy8gcmUtc2l6ZSBvZiB0aGUgaGlnaGxpZ2h0aW5nIHJlY3RzXG4gICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICBkMy5zZWxlY3QoJyNyb3dfbGFiZWxzJylcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBnZXQgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgcm93IGxhYmVsIHRleHRcbiAgICAgICAgICAgICAgdmFyIGJib3ggPSBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuc2VsZWN0KCd0ZXh0JylbMF1bMF1cbiAgICAgICAgICAgICAgICAuZ2V0QkJveCgpO1xuXG4gICAgICAgICAgICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94IHRvIHNldCB0aGUgc2l6ZSBvZiB0aGUgcmVjdFxuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgICAgICAgICAuYXR0cigneCcsIGJib3gueCAqIDAuNSlcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgYmJveC53aWR0aCAqIDAuNSlcbiAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICd5ZWxsb3cnKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAvLyBjb2x1bW4gdmFsdWUgYmFyc1xuICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgLy8gcmVkdWNlIHRoZSBoZWlnaHQgb2YgdGhlIGNvbHVtbiB2YWx1ZSBiYXJzIGJhc2VkIG9uIHRoZSB6b29tIGFwcGxpZWRcbiAgICAgICAgICAvLyByZWNhbGN1bGF0ZSB0aGUgaGVpZ2h0IGFuZCBkaXZpZGUgYnkgdGhlIHpvb21pbmcgc2NhbGVcbiAgICAgICAgICAvLyBjb2xfbGFiZWxfb2JqLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgaWYgKFV0aWxzLmhhcyhwYXJhbXMubmV0d29ya19kYXRhLmNvbF9ub2Rlc1swXSwgJ3ZhbHVlJykpIHtcblxuICAgICAgICAgICAgZDMuc2VsZWN0QWxsKCcuY29sX2JhcnMnKVxuICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgIC5kdXJhdGlvbihzZWFyY2hfZHVyYXRpb24pXG4gICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdF92YWx1ZSA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGQudmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBpbnN0X3ZhbHVlID0gcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfY29sKGQudmFsdWUpIC8gem9vbV94O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoVXRpbHMuaGFzKHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzWzBdLCAndmFsdWUnKSkge1xuXG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfYmFycycpXG4gICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgLmR1cmF0aW9uKHNlYXJjaF9kdXJhdGlvbilcbiAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0X3ZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICBpbnN0X3ZhbHVlID0gcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfcm93KE1hdGguYWJzKGQudmFsdWUpKSAvIHpvb21feTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgIGluc3RfdmFsdWUgPSAtcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfcm93KE1hdGguYWJzKGQudmFsdWUpKSAvIHpvb21feTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY29uc3RyYWluX2ZvbnRfc2l6ZSh0cmFucykge1xuXG4gICAgICAgIHZhciBzZWFyY2hfZHVyYXRpb24gPSA3MDA7XG5cbiAgICAgICAgdmFyIGZyYWN0aW9uX2tlZXAgPSB7fTtcblxuICAgICAgICB2YXIga2VlcF93aWR0aCA9IHt9O1xuICAgICAgICBrZWVwX3dpZHRoLnJvdyA9IHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXgucm93ICogcGFyYW1zLmxhYmVscy5yb3dfa2VlcCAqIHBhcmFtcy56b29tLnNjYWxlKCk7XG4gICAgICAgIGtlZXBfd2lkdGguY29sID0gcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2wgKiBwYXJhbXMubGFiZWxzLmNvbF9rZWVwICogcGFyYW1zLnpvb20uc2NhbGUoKSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG5cbiAgICAgICAgZnVuY3Rpb24gbm9ybWFsX25hbWUoZCkge1xuICAgICAgICAgIHZhciBpbnN0X25hbWUgPSBkLm5hbWUucmVwbGFjZSgvXy9nLCAnICcpLnNwbGl0KCcjJylbMF07XG4gICAgICAgICAgaWYgKGluc3RfbmFtZS5sZW5ndGggPiBwYXJhbXMubGFiZWxzLm1heF9sYWJlbF9jaGFyKSB7XG4gICAgICAgICAgICBpbnN0X25hbWUgPSBpbnN0X25hbWUuc3Vic3RyaW5nKDAsIHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXIpICsgJy4uJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RfbmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZWVwX3dpZHRoLnJvdyA+IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLnJvdykge1xuXG4gICAgICAgICAgcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQucm93ID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93IC8ga2VlcF93aWR0aC5yb3c7XG5cbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodHJhbnMpIHtcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbihzZWFyY2hfZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICogcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQucm93ICsgJ3B4JylcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAqXG4gICAgICAgICAgICAgICAgICBwYXJhbXMuc2NhbGVfZm9udF9vZmZzZXQocGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQucm93KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgKiBwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5yb3cgKyAncHgnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpICpcbiAgICAgICAgICAgICAgICAgIHBhcmFtcy5zY2FsZV9mb250X29mZnNldChwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5yb3cpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0cmFucykge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKHNlYXJjaF9kdXJhdGlvbilcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgKyAncHgnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpICogMC43NSk7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxfbmFtZShkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICsgJ3B4JylcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuNzUpXG4gICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbF9uYW1lKGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoa2VlcF93aWR0aC5jb2wgPiBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wpIHtcblxuICAgICAgICAgIHBhcmFtcy52aXouem9vbV9zY2FsZV9mb250LmNvbCA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCAvIGtlZXBfd2lkdGguY29sO1xuXG4gICAgICAgICAgZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0cmFucykge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKHNlYXJjaF9kdXJhdGlvbilcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wgKlxuICAgICAgICAgICAgICAgICAgcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQuY29sICsgJ3B4Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wgKlxuICAgICAgICAgICAgICAgICAgcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQuY29sICsgJ3B4JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRyYW5zKSB7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oc2VhcmNoX2R1cmF0aW9uKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCArICdweCcpO1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbm9ybWFsX25hbWUoZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wgKyAncHgnKVxuICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxfbmFtZShkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdmFyIG1heF9yb3dfd2lkdGggPSBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3c7XG4gICAgICAgIHZhciBtYXhfY29sX3dpZHRoID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sO1xuXG4gICAgICAgIC8vIGNvbnN0cmFpbiB0ZXh0IGFmdGVyIHpvb21pbmdcbiAgICAgICAgaWYgKHBhcmFtcy5sYWJlbHMucm93X2tlZXAgPCAxKSB7XG4gICAgICAgICAgZDMuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJpbV90ZXh0KHRoaXMsICdyb3cnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmxhYmVscy5jb2xfa2VlcCA8IDEpIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJpbV90ZXh0KHRoaXMsICdjb2wnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRyaW1fdGV4dChpbnN0X3NlbGVjdGlvbiwgaW5zdF9yYykge1xuXG4gICAgICAgICAgdmFyIG1heF93aWR0aCxcbiAgICAgICAgICAgIGluc3Rfem9vbTtcblxuICAgICAgICAgIHZhciBzYWZlX3Jvd190cmltX3RleHQgPSAwLjk7XG5cbiAgICAgICAgICBpZiAoaW5zdF9yYyA9PT0gJ3JvdycpIHtcbiAgICAgICAgICAgIG1heF93aWR0aCA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLnJvdyAqIHNhZmVfcm93X3RyaW1fdGV4dDtcbiAgICAgICAgICAgIGluc3Rfem9vbSA9IHBhcmFtcy56b29tLnNjYWxlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoZSBjb2x1bW4gbGFiZWwgaGFzIGV4dHJhIGxlbmd0aCBzaW5jZSBpdHMgcm90YXRlZFxuICAgICAgICAgICAgbWF4X3dpZHRoID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sO1xuICAgICAgICAgICAgaW5zdF96b29tID0gcGFyYW1zLnpvb20uc2NhbGUoKSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHRtcF93aWR0aCA9IGQzLnNlbGVjdChpbnN0X3NlbGVjdGlvbikuc2VsZWN0KCd0ZXh0Jykubm9kZSgpLmdldEJCb3goKS53aWR0aDtcbiAgICAgICAgICB2YXIgaW5zdF90ZXh0ID0gZDMuc2VsZWN0KGluc3Rfc2VsZWN0aW9uKS5zZWxlY3QoJ3RleHQnKS50ZXh0KCk7XG4gICAgICAgICAgdmFyIGFjdHVhbF93aWR0aCA9IHRtcF93aWR0aCAqIGluc3Rfem9vbTtcblxuICAgICAgICAgIGlmIChhY3R1YWxfd2lkdGggPiBtYXhfd2lkdGgpIHtcblxuICAgICAgICAgICAgdmFyIHRyaW1fZnJhY3Rpb24gPSBtYXhfd2lkdGggLyBhY3R1YWxfd2lkdGg7XG4gICAgICAgICAgICB2YXIga2VlcF9udW1fY2hhciA9IE1hdGguZmxvb3IoaW5zdF90ZXh0Lmxlbmd0aCAqIHRyaW1fZnJhY3Rpb24pIC0gMztcbiAgICAgICAgICAgIHZhciB0cmltbWVkX3RleHQgPSBpbnN0X3RleHQuc3Vic3RyaW5nKDAsIGtlZXBfbnVtX2NoYXIpICsgJy4uJztcbiAgICAgICAgICAgIGQzLnNlbGVjdChpbnN0X3NlbGVjdGlvbikuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAgICAgLnRleHQodHJpbW1lZF90ZXh0KTtcblxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW5pX2RvdWJsZWNsaWNrKCkge1xuXG4gICAgICAgIC8vIGRpc2FibGUgZG91YmxlLWNsaWNrIHpvb206IGRvdWJsZSBjbGljayBzaG91bGQgcmVzZXQgem9vbSBsZXZlbFxuICAgICAgICBkMy5zZWxlY3RBbGwoJ3N2ZycpLm9uKCdkYmxjbGljay56b29tJywgbnVsbCk7XG5cbiAgICAgICAgLy8gZG91YmxlIGNsaWNrIHRvIHJlc2V0IHpvb20gLSBhZGQgdHJhbnNpdGlvblxuICAgICAgICBkMy5zZWxlY3QoJyNtYWluX3N2ZycpXG4gICAgICAgICAgLm9uKCdkYmxjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gcHJvZ3JhbW1hdGljIHpvb20gcmVzZXRcbiAgICAgICAgICAgIHR3b190cmFuc2xhdGVfem9vbSgwLCAwLCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgem9vbWVkOiB6b29tZWQsXG4gICAgICAgIHR3b190cmFuc2xhdGVfem9vbTogdHdvX3RyYW5zbGF0ZV96b29tLFxuICAgICAgICBpbmlfZG91YmxlY2xpY2s6IGluaV9kb3VibGVjbGlja1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIE1haW4gcHJvZ3JhbVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgICAvLyBjb25zdW1lIGFuZCB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gICAgLy8gYnVpbGQgZ2lhbnQgY29uZmlnIG9iamVjdFxuICAgIC8vIHZpc3VhbGl6ZSBiYXNlZCBvbiBjb25maWcgb2JqZWN0XG4gICAgLy8gaGFuZGxlIHVzZXIgZXZlbnRzXG5cbiAgICAvLyBjb25zdW1lIGFuZCB2YWxpZGF0ZSB1c2VyIGFyZ3VtZW50cywgcHJvZHVjZSBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgIHZhciBjb25maWcgPSBDb25maWcoYXJncyk7XG5cbiAgICAvLyBtYWtlIHZpc3VhbGl6YXRpb24gdXNpbmcgY29uZmlndXJhdGlvbiBvYmplY3QgYW5kIG5ldHdvcmtcbiAgICB2YXIgdml6ID0gVml6KGNvbmZpZyk7XG5cblxuICAgIC8qIEFQSVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgICByZXR1cm4ge1xuICAgICAgZmluZF9nZW5lOiB2aXouc2VhcmNoLmZpbmRfZW50aXRpZXMsXG4gICAgICBnZXRfZ2VuZXM6IHZpei5zZWFyY2guZ2V0X2VudGl0aWVzLFxuICAgICAgY2hhbmdlX2dyb3Vwczogdml6LmNoYW5nZV9ncm91cCxcbiAgICAgIHJlb3JkZXI6IHZpei5yZW9yZGVyLFxuICAgICAgb3BhY2l0eV9zbGlkZXI6IHZpei5vcGFjaXR5X3NsaWRlcixcbiAgICAgIG9wYWNpdHlfZnVuY3Rpb246IHZpei5vcGFjaXR5X2Z1bmN0aW9uLFxuICAgICAgcmVzaXplOiB2aXoucnVuX3Jlc2V0X3Zpc3VhbGl6YXRpb25fc2l6ZSxcbiAgICAgIHBhcmFtczogdml6LnBhcmFtc1xuICAgIH07XG5cbiAgfVxuICByZXR1cm4ge1xuICAgIGNsdXN0ZXJncmFtOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICByZXR1cm4gZDNfY2x1c3RlcmdyYW0oYXJncyk7XG4gICAgfVxuICB9O1xufVxuIiwiLyplc2xpbnQgY2FtZWxjYXNlOiAwKi9cblxuLyoqXG4gKiBAYXV0aG9yIE1pY2hhZWwgTWNEZXJtb3R0XG4gKiBDcmVhdGVkIG9uIDcvMjAvMTUuXG4gKi9cblxuYW5ndWxhclxuICAubW9kdWxlKCdjbHVzdGVyZ3JhbScpXG4gIC5mYWN0b3J5KCdkM0RhdGEnLCBkM0RhdGEpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGQzRGF0YSgpIHtcbiAgcmV0dXJuIHtcbiAgICAncm93X25vZGVzJzogW3tcbiAgICAgICdjbHVzdCc6IDQsXG4gICAgICAnbmFtZSc6ICdBVEFDLVNlcScsXG4gICAgICAncmFuayc6IDEsXG4gICAgICAnaW5pJzogMTFcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiA5LFxuICAgICAgJ25hbWUnOiAnR0NQJyxcbiAgICAgICdyYW5rJzogOCxcbiAgICAgICdpbmknOiAxMFxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDEsXG4gICAgICAnbmFtZSc6ICdJbW11bm9mbHVvcmVzY2VuY2UnLFxuICAgICAgJ3JhbmsnOiAzLFxuICAgICAgJ2luaSc6IDlcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiA2LFxuICAgICAgJ25hbWUnOiAnS0lOT01Fc2NhbicsXG4gICAgICAncmFuayc6IDIsXG4gICAgICAnaW5pJzogOFxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDgsXG4gICAgICAnbmFtZSc6ICdMMTAwMCcsXG4gICAgICAncmFuayc6IDEwLFxuICAgICAgJ2luaSc6IDdcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiA3LFxuICAgICAgJ25hbWUnOiAnTUVNQScsXG4gICAgICAncmFuayc6IDYsXG4gICAgICAnaW5pJzogNlxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDEwLFxuICAgICAgJ25hbWUnOiAnUDEwMCcsXG4gICAgICAncmFuayc6IDcsXG4gICAgICAnaW5pJzogNVxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDAsXG4gICAgICAnbmFtZSc6ICdSTkEtU2VxJyxcbiAgICAgICdyYW5rJzogOSxcbiAgICAgICdpbmknOiA0XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMixcbiAgICAgICduYW1lJzogJ1JQUEEnLFxuICAgICAgJ3JhbmsnOiA0LFxuICAgICAgJ2luaSc6IDNcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiA1LFxuICAgICAgJ25hbWUnOiAnU1dBVEgtTVMnLFxuICAgICAgJ3JhbmsnOiAwLFxuICAgICAgJ2luaSc6IDJcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiAzLFxuICAgICAgJ25hbWUnOiAnVmlhYmlsaXR5JyxcbiAgICAgICdyYW5rJzogNSxcbiAgICAgICdpbmknOiAxXG4gICAgfV0sXG4gICAgJ2NvbF9ub2Rlcyc6IFt7XG4gICAgICAnY2x1c3QnOiAyOCxcbiAgICAgICduYW1lJzogJ0EzNzUnLFxuICAgICAgJ3JhbmsnOiAyOCxcbiAgICAgICdpbmknOiAzM1xuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDI5LFxuICAgICAgJ25hbWUnOiAnQTU0OScsXG4gICAgICAncmFuayc6IDI5LFxuICAgICAgJ2luaSc6IDMyXG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMTcsXG4gICAgICAnbmFtZSc6ICdDMzInLFxuICAgICAgJ3JhbmsnOiAxMixcbiAgICAgICdpbmknOiAzMVxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDExLFxuICAgICAgJ25hbWUnOiAnQ09MTzg1OCcsXG4gICAgICAncmFuayc6IDIwLFxuICAgICAgJ2luaSc6IDMwXG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMjQsXG4gICAgICAnbmFtZSc6ICdDZWxsIEZyZWUnLFxuICAgICAgJ3JhbmsnOiAxMCxcbiAgICAgICdpbmknOiAyOVxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDMxLFxuICAgICAgJ25hbWUnOiAnSEExRScsXG4gICAgICAncmFuayc6IDI1LFxuICAgICAgJ2luaSc6IDI4XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMTksXG4gICAgICAnbmFtZSc6ICdITUUxJyxcbiAgICAgICdyYW5rJzogMTMsXG4gICAgICAnaW5pJzogMjdcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiAzMixcbiAgICAgICduYW1lJzogJ0hQQUMnLFxuICAgICAgJ3JhbmsnOiAyNixcbiAgICAgICdpbmknOiAyNlxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDMwLFxuICAgICAgJ25hbWUnOiAnSFQyOScsXG4gICAgICAncmFuayc6IDI3LFxuICAgICAgJ2luaSc6IDI1XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMTgsXG4gICAgICAnbmFtZSc6ICdLMicsXG4gICAgICAncmFuayc6IDE0LFxuICAgICAgJ2luaSc6IDI0XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMTIsXG4gICAgICAnbmFtZSc6ICdMT1hJTVZJJyxcbiAgICAgICdyYW5rJzogMjEsXG4gICAgICAnaW5pJzogMjNcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiAyNyxcbiAgICAgICduYW1lJzogJ01DRjcnLFxuICAgICAgJ3JhbmsnOiAzMCxcbiAgICAgICdpbmknOiAyMlxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDIwLFxuICAgICAgJ25hbWUnOiAnTURBTUIyMzEnLFxuICAgICAgJ3JhbmsnOiAxNSxcbiAgICAgICdpbmknOiAyMVxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDE2LFxuICAgICAgJ25hbWUnOiAnTU1BQ1NGJyxcbiAgICAgICdyYW5rJzogMTYsXG4gICAgICAnaW5pJzogMjBcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiAxNSxcbiAgICAgICduYW1lJzogJ01aN01FTCcsXG4gICAgICAncmFuayc6IDE3LFxuICAgICAgJ2luaSc6IDE5XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMjUsXG4gICAgICAnbmFtZSc6ICdOUEMnLFxuICAgICAgJ3JhbmsnOiAyNCxcbiAgICAgICdpbmknOiAxOFxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDI2LFxuICAgICAgJ25hbWUnOiAnUEMzJyxcbiAgICAgICdyYW5rJzogMzEsXG4gICAgICAnaW5pJzogMTdcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiA3LFxuICAgICAgJ25hbWUnOiAnUHJvbW9DZWxsIE15b2N5dGVzJyxcbiAgICAgICdyYW5rJzogMzIsXG4gICAgICAnaW5pJzogMTZcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiAxNCxcbiAgICAgICduYW1lJzogJ1JWSDQyMScsXG4gICAgICAncmFuayc6IDE4LFxuICAgICAgJ2luaSc6IDE1XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMTMsXG4gICAgICAnbmFtZSc6ICdTS01FTDI4JyxcbiAgICAgICdyYW5rJzogMTksXG4gICAgICAnaW5pJzogMTRcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiAxMCxcbiAgICAgICduYW1lJzogJ1dNMTE1JyxcbiAgICAgICdyYW5rJzogMjIsXG4gICAgICAnaW5pJzogMTNcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiA5LFxuICAgICAgJ25hbWUnOiAnV00xNTUyQycsXG4gICAgICAncmFuayc6IDIzLFxuICAgICAgJ2luaSc6IDEyXG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMjIsXG4gICAgICAnbmFtZSc6ICdpUFNDIDAwQ1RSLW4yJyxcbiAgICAgICdyYW5rJzogOCxcbiAgICAgICdpbmknOiAxMVxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDAsXG4gICAgICAnbmFtZSc6ICdpUFNDIDE0Q1RSLW42JyxcbiAgICAgICdyYW5rJzogNyxcbiAgICAgICdpbmknOiAxMFxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDIxLFxuICAgICAgJ25hbWUnOiAnaVBTQyAyNUNUUi0xOG4yJyxcbiAgICAgICdyYW5rJzogMTEsXG4gICAgICAnaW5pJzogOVxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDgsXG4gICAgICAnbmFtZSc6ICdpUFNDIDI4QUxTLW4yQScsXG4gICAgICAncmFuayc6IDAsXG4gICAgICAnaW5pJzogOFxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDYsXG4gICAgICAnbmFtZSc6ICdpUFNDIDI5QUxTLW4xTicsXG4gICAgICAncmFuayc6IDEsXG4gICAgICAnaW5pJzogN1xuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDUsXG4gICAgICAnbmFtZSc6ICdpUFNDIDMwQUxTLW4xQScsXG4gICAgICAncmFuayc6IDIsXG4gICAgICAnaW5pJzogNlxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDQsXG4gICAgICAnbmFtZSc6ICdpUFNDIDMyU01BLW4zJyxcbiAgICAgICdyYW5rJzogMyxcbiAgICAgICdpbmknOiA1XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMyxcbiAgICAgICduYW1lJzogJ2lQU0MgNTJBTFMtbjZBJyxcbiAgICAgICdyYW5rJzogNCxcbiAgICAgICdpbmknOiA0XG4gICAgfSwge1xuICAgICAgJ2NsdXN0JzogMixcbiAgICAgICduYW1lJzogJ2lQU0MgNzdTTUEtbjUnLFxuICAgICAgJ3JhbmsnOiA1LFxuICAgICAgJ2luaSc6IDNcbiAgICB9LCB7XG4gICAgICAnY2x1c3QnOiAyMyxcbiAgICAgICduYW1lJzogJ2lQU0MgODNDVFItMzNuMScsXG4gICAgICAncmFuayc6IDksXG4gICAgICAnaW5pJzogMlxuICAgIH0sIHtcbiAgICAgICdjbHVzdCc6IDEsXG4gICAgICAnbmFtZSc6ICdpUFNDIDgzU01BLW41JyxcbiAgICAgICdyYW5rJzogNixcbiAgICAgICdpbmknOiAxXG4gICAgfV0sXG4gICAgJ2xpbmtzJzogW3tcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MCcsXG4gICAgICAgICduYW1lJzogJ3NwaW5hbCBtdXNjdWxhciBhdHJvcGh5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgxJyxcbiAgICAgICAgJ25hbWUnOiAnYW15b3Ryb3BoaWMgbGF0ZXJhbCBzY2xlcm9zaXMnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDAsXG4gICAgICAndGFyZ2V0JzogMjIsXG4gICAgICAndmFsdWUnOiAyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODAnLFxuICAgICAgICAnbmFtZSc6ICdzcGluYWwgbXVzY3VsYXIgYXRyb3BoeSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MScsXG4gICAgICAgICduYW1lJzogJ2FteW90cm9waGljIGxhdGVyYWwgc2NsZXJvc2lzJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiAwLFxuICAgICAgJ3RhcmdldCc6IDI0LFxuICAgICAgJ3ZhbHVlJzogMi4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgwJyxcbiAgICAgICAgJ25hbWUnOiAnc3BpbmFsIG11c2N1bGFyIGF0cm9waHknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODEnLFxuICAgICAgICAnbmFtZSc6ICdhbXlvdHJvcGhpYyBsYXRlcmFsIHNjbGVyb3NpcydcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMCxcbiAgICAgICd0YXJnZXQnOiAzMSxcbiAgICAgICd2YWx1ZSc6IDIuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ0ZScsXG4gICAgICAgICduYW1lJzogJ3RyYW5jaGUyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDRmJyxcbiAgICAgICAgJ25hbWUnOiAnMTI3MTczOC02Mi01IChNSS0yKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTInLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEyOTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTQnLFxuICAgICAgICAnbmFtZSc6ICdDUEktMTY5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU1JyxcbiAgICAgICAgJ25hbWUnOiAnZGVjaXRhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NicsXG4gICAgICAgICduYW1lJzogJ0RNU08nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTYnLFxuICAgICAgICAnbmFtZSc6ICdlbnRpbm9zdGF0IChNUzI3NSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTcnLFxuICAgICAgICAnbmFtZSc6ICdFUFotNTY3NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1OCcsXG4gICAgICAgICduYW1lJzogJ0VQWi01Njg3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU5JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaMDA0Nzc3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDVhJyxcbiAgICAgICAgJ25hbWUnOiAnRVg1MjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NScsXG4gICAgICAgICduYW1lJzogJ09TSS0wMjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjYnLFxuICAgICAgICAnbmFtZSc6ICdyYXBhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjcnLFxuICAgICAgICAnbmFtZSc6ICdyZXN2ZXJhdHJvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OCcsXG4gICAgICAgICduYW1lJzogJ3NhbGVybWlkZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YScsXG4gICAgICAgICduYW1lJzogJ3N0YXVyb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNjgnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4tYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2OScsXG4gICAgICAgICduYW1lJzogJ1VOQzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNmEnLFxuICAgICAgICAnbmFtZSc6ICdVTkMwNjQ2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDZiJyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMTIxNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NScsXG4gICAgICAgICduYW1lJzogJ3Zvcmlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzgnLFxuICAgICAgICAnbmFtZSc6ICd6ZWJ1bGFyaW5lJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiAxLFxuICAgICAgJ3RhcmdldCc6IDAsXG4gICAgICAndmFsdWUnOiAzMi4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDRlJyxcbiAgICAgICAgJ25hbWUnOiAndHJhbmNoZTInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNGYnLFxuICAgICAgICAnbmFtZSc6ICcxMjcxNzM4LTYyLTUgKE1JLTIpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1NicsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQgKE1TMjc1KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1NycsXG4gICAgICAgICduYW1lJzogJ0VQWi01Njc2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU4JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaLTU2ODcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTknLFxuICAgICAgICAnbmFtZSc6ICdFUFowMDQ3NzcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNWEnLFxuICAgICAgICAnbmFtZSc6ICdFWDUyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2OCcsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbi1hJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDY5JyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2YScsXG4gICAgICAgICduYW1lJzogJ1VOQzA2NDYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNmInLFxuICAgICAgICAnbmFtZSc6ICdVTkMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc1JyxcbiAgICAgICAgJ25hbWUnOiAndm9yaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEsXG4gICAgICAndGFyZ2V0JzogMSxcbiAgICAgICd2YWx1ZSc6IDMyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNGUnLFxuICAgICAgICAnbmFtZSc6ICd0cmFuY2hlMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ0ZicsXG4gICAgICAgICduYW1lJzogJzEyNzE3MzgtNjItNSAoTUktMiknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU2JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCAoTVMyNzUpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU3JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaLTU2NzYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTgnLFxuICAgICAgICAnbmFtZSc6ICdFUFotNTY4NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1OScsXG4gICAgICAgICduYW1lJzogJ0VQWjAwNDc3NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1YScsXG4gICAgICAgICduYW1lJzogJ0VYNTI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDY4JyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluLWEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNjknLFxuICAgICAgICAnbmFtZSc6ICdVTkMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDZhJyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMDY0NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2YicsXG4gICAgICAgICduYW1lJzogJ1VOQzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMSxcbiAgICAgICd0YXJnZXQnOiAxMSxcbiAgICAgICd2YWx1ZSc6IDMyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNGUnLFxuICAgICAgICAnbmFtZSc6ICd0cmFuY2hlMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ0ZicsXG4gICAgICAgICduYW1lJzogJzEyNzE3MzgtNjItNSAoTUktMiknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU2JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCAoTVMyNzUpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU3JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaLTU2NzYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTgnLFxuICAgICAgICAnbmFtZSc6ICdFUFotNTY4NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1OScsXG4gICAgICAgICduYW1lJzogJ0VQWjAwNDc3NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1YScsXG4gICAgICAgICduYW1lJzogJ0VYNTI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDY4JyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluLWEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNjknLFxuICAgICAgICAnbmFtZSc6ICdVTkMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDZhJyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMDY0NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2YicsXG4gICAgICAgICduYW1lJzogJ1VOQzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMSxcbiAgICAgICd0YXJnZXQnOiAxNSxcbiAgICAgICd2YWx1ZSc6IDMyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNGUnLFxuICAgICAgICAnbmFtZSc6ICd0cmFuY2hlMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ0ZicsXG4gICAgICAgICduYW1lJzogJzEyNzE3MzgtNjItNSAoTUktMiknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU2JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCAoTVMyNzUpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU3JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaLTU2NzYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTgnLFxuICAgICAgICAnbmFtZSc6ICdFUFotNTY4NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1OScsXG4gICAgICAgICduYW1lJzogJ0VQWjAwNDc3NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1YScsXG4gICAgICAgICduYW1lJzogJ0VYNTI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDY4JyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluLWEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNjknLFxuICAgICAgICAnbmFtZSc6ICdVTkMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDZhJyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMDY0NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2YicsXG4gICAgICAgICduYW1lJzogJ1VOQzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMSxcbiAgICAgICd0YXJnZXQnOiAxNixcbiAgICAgICd2YWx1ZSc6IDMyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjgnLFxuICAgICAgICAnbmFtZSc6ICdWZW11cmFmZW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmNhNycsXG4gICAgICAgICduYW1lJzogJ0pOSy1JTi04J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmY2E4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWIgKyBKTkstSU4tOCdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMixcbiAgICAgICd0YXJnZXQnOiAzLFxuICAgICAgJ3ZhbHVlJzogMy4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjYTcnLFxuICAgICAgICAnbmFtZSc6ICdKTkstSU4tOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmNhOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliICsgSk5LLUlOLTgnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDIsXG4gICAgICAndGFyZ2V0JzogMTAsXG4gICAgICAndmFsdWUnOiAzLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjgnLFxuICAgICAgICAnbmFtZSc6ICdWZW11cmFmZW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmNhNycsXG4gICAgICAgICduYW1lJzogJ0pOSy1JTi04J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmY2E4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWIgKyBKTkstSU4tOCdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMixcbiAgICAgICd0YXJnZXQnOiAyMCxcbiAgICAgICd2YWx1ZSc6IDMuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmY2E3JyxcbiAgICAgICAgJ25hbWUnOiAnSk5LLUlOLTgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjYTgnLFxuICAgICAgICAnbmFtZSc6ICdWZW11cmFmZW5pYiArIEpOSy1JTi04J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiAyLFxuICAgICAgJ3RhcmdldCc6IDIxLFxuICAgICAgJ3ZhbHVlJzogMy4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmY2IyJyxcbiAgICAgICAgJ25hbWUnOiAnWlNUSzQ3NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmNiNScsXG4gICAgICAgICduYW1lJzogJ01QUy0xLUlOLTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjYjcnLFxuICAgICAgICAnbmFtZSc6ICdJYnJ1dGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjYjknLFxuICAgICAgICAnbmFtZSc6ICdUR1gyMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjYmInLFxuICAgICAgICAnbmFtZSc6ICdCR0ozOTgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjYmQnLFxuICAgICAgICAnbmFtZSc6ICdDR1AwODI5OTYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjYmYnLFxuICAgICAgICAnbmFtZSc6ICdCYXJpY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmNjMScsXG4gICAgICAgICduYW1lJzogJ01SVDY3MzA3J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiAzLFxuICAgICAgJ3RhcmdldCc6IDQsXG4gICAgICAndmFsdWUnOiA4LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGYnLFxuICAgICAgICAnbmFtZSc6ICdhbHBoYS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUxJyxcbiAgICAgICAgJ25hbWUnOiAnYmV0YS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTInLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEyOTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTMnLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEzMzgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTQnLFxuICAgICAgICAnbmFtZSc6ICdDUEktMTY5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU1JyxcbiAgICAgICAgJ25hbWUnOiAnZGVjaXRhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NicsXG4gICAgICAgICduYW1lJzogJ0RNU08nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTcnLFxuICAgICAgICAnbmFtZSc6ICdlbnRpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU4JyxcbiAgICAgICAgJ25hbWUnOiAnZmx1cGhlemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OScsXG4gICAgICAgICduYW1lJzogJ2Z1bHZlc3RyYW50J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YicsXG4gICAgICAgICduYW1lJzogJ2dlbmlzdGVpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjMnLFxuICAgICAgICAnbmFtZSc6ICdNaXRveGFudHJvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjQnLFxuICAgICAgICAnbmFtZSc6ICdtb25vcmRlbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NScsXG4gICAgICAgICduYW1lJzogJ09TSS0wMjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjYnLFxuICAgICAgICAnbmFtZSc6ICdyYXBhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjcnLFxuICAgICAgICAnbmFtZSc6ICdyZXN2ZXJhdHJvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OCcsXG4gICAgICAgICduYW1lJzogJ3NhbGVybWlkZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OScsXG4gICAgICAgICduYW1lJzogJ3Npcm9saW11cydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YScsXG4gICAgICAgICduYW1lJzogJ3N0YXVyb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmInLFxuICAgICAgICAnbmFtZSc6ICd0YW5lc3BhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmMnLFxuICAgICAgICAnbmFtZSc6ICd0aGlvcmlkYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmQnLFxuICAgICAgICAnbmFtZSc6ICd0cmV0aW5vaW4gKGF0cmEpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZlJyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmYnLFxuICAgICAgICAnbmFtZSc6ICd0cmlmbHVvcGVyYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzAnLFxuICAgICAgICAnbmFtZSc6ICd0cm9nbGl0YXpvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzEnLFxuICAgICAgICAnbmFtZSc6ICd1bmMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcyJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDY0NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MycsXG4gICAgICAgICduYW1lJzogJ3VuYzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzQnLFxuICAgICAgICAnbmFtZSc6ICd2YWxwcm9pYyBhY2lkJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc1JyxcbiAgICAgICAgJ25hbWUnOiAndm9yaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NicsXG4gICAgICAgICduYW1lJzogJ3dpdGhhZmVyaW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NycsXG4gICAgICAgICduYW1lJzogJ3dvcnRtYW5uaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzgnLFxuICAgICAgICAnbmFtZSc6ICd6ZWJ1bGFyaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRmJyxcbiAgICAgICAgJ25hbWUnOiAnYWxwaGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MScsXG4gICAgICAgICduYW1lJzogJ2JldGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUzJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMzM4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU3JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OCcsXG4gICAgICAgICduYW1lJzogJ2ZsdXBoZXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTknLFxuICAgICAgICAnbmFtZSc6ICdmdWx2ZXN0cmFudCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWInLFxuICAgICAgICAnbmFtZSc6ICdnZW5pc3RlaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYzJyxcbiAgICAgICAgJ25hbWUnOiAnTWl0b3hhbnRyb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY0JyxcbiAgICAgICAgJ25hbWUnOiAnbW9ub3JkZW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjknLFxuICAgICAgICAnbmFtZSc6ICdzaXJvbGltdXMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZiJyxcbiAgICAgICAgJ25hbWUnOiAndGFuZXNwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZjJyxcbiAgICAgICAgJ25hbWUnOiAndGhpb3JpZGF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZkJyxcbiAgICAgICAgJ25hbWUnOiAndHJldGlub2luIChhdHJhKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZScsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZmJyxcbiAgICAgICAgJ25hbWUnOiAndHJpZmx1b3BlcmF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcwJyxcbiAgICAgICAgJ25hbWUnOiAndHJvZ2xpdGF6b25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcxJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MicsXG4gICAgICAgICduYW1lJzogJ3VuYzA2NDYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzMnLFxuICAgICAgICAnbmFtZSc6ICd1bmMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc0JyxcbiAgICAgICAgJ25hbWUnOiAndmFscHJvaWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NScsXG4gICAgICAgICduYW1lJzogJ3Zvcmlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzYnLFxuICAgICAgICAnbmFtZSc6ICd3aXRoYWZlcmluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzcnLFxuICAgICAgICAnbmFtZSc6ICd3b3J0bWFubmluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNCxcbiAgICAgICd0YXJnZXQnOiAwLFxuICAgICAgJ3ZhbHVlJzogODYuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZicsXG4gICAgICAgICduYW1lJzogJ2FscGhhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTEnLFxuICAgICAgICAnbmFtZSc6ICdiZXRhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MycsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTMzOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NycsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTgnLFxuICAgICAgICAnbmFtZSc6ICdmbHVwaGV6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU5JyxcbiAgICAgICAgJ25hbWUnOiAnZnVsdmVzdHJhbnQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzViJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VuaXN0ZWluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MycsXG4gICAgICAgICduYW1lJzogJ01pdG94YW50cm9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NCcsXG4gICAgICAgICduYW1lJzogJ21vbm9yZGVuJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY5JyxcbiAgICAgICAgJ25hbWUnOiAnc2lyb2xpbXVzJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YicsXG4gICAgICAgICduYW1lJzogJ3RhbmVzcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YycsXG4gICAgICAgICduYW1lJzogJ3RoaW9yaWRhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2ZCcsXG4gICAgICAgICduYW1lJzogJ3RyZXRpbm9pbiAoYXRyYSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmUnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZicsXG4gICAgICAgICduYW1lJzogJ3RyaWZsdW9wZXJhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MCcsXG4gICAgICAgICduYW1lJzogJ3Ryb2dsaXRhem9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MScsXG4gICAgICAgICduYW1lJzogJ3VuYzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzInLFxuICAgICAgICAnbmFtZSc6ICd1bmMwNjQ2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzczJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMTIxNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NCcsXG4gICAgICAgICduYW1lJzogJ3ZhbHByb2ljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc2JyxcbiAgICAgICAgJ25hbWUnOiAnd2l0aGFmZXJpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc3JyxcbiAgICAgICAgJ25hbWUnOiAnd29ydG1hbm5pbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGYnLFxuICAgICAgICAnbmFtZSc6ICdhbHBoYS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUxJyxcbiAgICAgICAgJ25hbWUnOiAnYmV0YS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTInLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEyOTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTMnLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEzMzgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTQnLFxuICAgICAgICAnbmFtZSc6ICdDUEktMTY5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU1JyxcbiAgICAgICAgJ25hbWUnOiAnZGVjaXRhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NicsXG4gICAgICAgICduYW1lJzogJ0RNU08nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTcnLFxuICAgICAgICAnbmFtZSc6ICdlbnRpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU4JyxcbiAgICAgICAgJ25hbWUnOiAnZmx1cGhlemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OScsXG4gICAgICAgICduYW1lJzogJ2Z1bHZlc3RyYW50J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YicsXG4gICAgICAgICduYW1lJzogJ2dlbmlzdGVpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjMnLFxuICAgICAgICAnbmFtZSc6ICdNaXRveGFudHJvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjQnLFxuICAgICAgICAnbmFtZSc6ICdtb25vcmRlbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NScsXG4gICAgICAgICduYW1lJzogJ09TSS0wMjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjYnLFxuICAgICAgICAnbmFtZSc6ICdyYXBhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjcnLFxuICAgICAgICAnbmFtZSc6ICdyZXN2ZXJhdHJvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OCcsXG4gICAgICAgICduYW1lJzogJ3NhbGVybWlkZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OScsXG4gICAgICAgICduYW1lJzogJ3Npcm9saW11cydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YScsXG4gICAgICAgICduYW1lJzogJ3N0YXVyb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmInLFxuICAgICAgICAnbmFtZSc6ICd0YW5lc3BhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmMnLFxuICAgICAgICAnbmFtZSc6ICd0aGlvcmlkYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmQnLFxuICAgICAgICAnbmFtZSc6ICd0cmV0aW5vaW4gKGF0cmEpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZlJyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmYnLFxuICAgICAgICAnbmFtZSc6ICd0cmlmbHVvcGVyYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzAnLFxuICAgICAgICAnbmFtZSc6ICd0cm9nbGl0YXpvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzEnLFxuICAgICAgICAnbmFtZSc6ICd1bmMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcyJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDY0NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MycsXG4gICAgICAgICduYW1lJzogJ3VuYzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzQnLFxuICAgICAgICAnbmFtZSc6ICd2YWxwcm9pYyBhY2lkJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc1JyxcbiAgICAgICAgJ25hbWUnOiAndm9yaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NicsXG4gICAgICAgICduYW1lJzogJ3dpdGhhZmVyaW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NycsXG4gICAgICAgICduYW1lJzogJ3dvcnRtYW5uaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzgnLFxuICAgICAgICAnbmFtZSc6ICd6ZWJ1bGFyaW5lJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA0LFxuICAgICAgJ3RhcmdldCc6IDEsXG4gICAgICAndmFsdWUnOiA4Ni4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRmJyxcbiAgICAgICAgJ25hbWUnOiAnYWxwaGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MScsXG4gICAgICAgICduYW1lJzogJ2JldGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUzJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMzM4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU3JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OCcsXG4gICAgICAgICduYW1lJzogJ2ZsdXBoZXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTknLFxuICAgICAgICAnbmFtZSc6ICdmdWx2ZXN0cmFudCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWInLFxuICAgICAgICAnbmFtZSc6ICdnZW5pc3RlaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYzJyxcbiAgICAgICAgJ25hbWUnOiAnTWl0b3hhbnRyb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY0JyxcbiAgICAgICAgJ25hbWUnOiAnbW9ub3JkZW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjknLFxuICAgICAgICAnbmFtZSc6ICdzaXJvbGltdXMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZiJyxcbiAgICAgICAgJ25hbWUnOiAndGFuZXNwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZjJyxcbiAgICAgICAgJ25hbWUnOiAndGhpb3JpZGF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZkJyxcbiAgICAgICAgJ25hbWUnOiAndHJldGlub2luIChhdHJhKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZScsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZmJyxcbiAgICAgICAgJ25hbWUnOiAndHJpZmx1b3BlcmF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcwJyxcbiAgICAgICAgJ25hbWUnOiAndHJvZ2xpdGF6b25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcxJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MicsXG4gICAgICAgICduYW1lJzogJ3VuYzA2NDYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzMnLFxuICAgICAgICAnbmFtZSc6ICd1bmMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc0JyxcbiAgICAgICAgJ25hbWUnOiAndmFscHJvaWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NScsXG4gICAgICAgICduYW1lJzogJ3Zvcmlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzYnLFxuICAgICAgICAnbmFtZSc6ICd3aXRoYWZlcmluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzcnLFxuICAgICAgICAnbmFtZSc6ICd3b3J0bWFubmluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZicsXG4gICAgICAgICduYW1lJzogJ2FscGhhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTEnLFxuICAgICAgICAnbmFtZSc6ICdiZXRhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MycsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTMzOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NycsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTgnLFxuICAgICAgICAnbmFtZSc6ICdmbHVwaGV6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU5JyxcbiAgICAgICAgJ25hbWUnOiAnZnVsdmVzdHJhbnQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzViJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VuaXN0ZWluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MycsXG4gICAgICAgICduYW1lJzogJ01pdG94YW50cm9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NCcsXG4gICAgICAgICduYW1lJzogJ21vbm9yZGVuJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY5JyxcbiAgICAgICAgJ25hbWUnOiAnc2lyb2xpbXVzJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YicsXG4gICAgICAgICduYW1lJzogJ3RhbmVzcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YycsXG4gICAgICAgICduYW1lJzogJ3RoaW9yaWRhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2ZCcsXG4gICAgICAgICduYW1lJzogJ3RyZXRpbm9pbiAoYXRyYSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmUnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZicsXG4gICAgICAgICduYW1lJzogJ3RyaWZsdW9wZXJhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MCcsXG4gICAgICAgICduYW1lJzogJ3Ryb2dsaXRhem9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MScsXG4gICAgICAgICduYW1lJzogJ3VuYzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzInLFxuICAgICAgICAnbmFtZSc6ICd1bmMwNjQ2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzczJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMTIxNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NCcsXG4gICAgICAgICduYW1lJzogJ3ZhbHByb2ljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc2JyxcbiAgICAgICAgJ25hbWUnOiAnd2l0aGFmZXJpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc3JyxcbiAgICAgICAgJ25hbWUnOiAnd29ydG1hbm5pbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDQsXG4gICAgICAndGFyZ2V0JzogNSxcbiAgICAgICd2YWx1ZSc6IDg2LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGYnLFxuICAgICAgICAnbmFtZSc6ICdhbHBoYS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUxJyxcbiAgICAgICAgJ25hbWUnOiAnYmV0YS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTInLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEyOTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTMnLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEzMzgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTQnLFxuICAgICAgICAnbmFtZSc6ICdDUEktMTY5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU1JyxcbiAgICAgICAgJ25hbWUnOiAnZGVjaXRhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NicsXG4gICAgICAgICduYW1lJzogJ0RNU08nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTcnLFxuICAgICAgICAnbmFtZSc6ICdlbnRpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU4JyxcbiAgICAgICAgJ25hbWUnOiAnZmx1cGhlemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OScsXG4gICAgICAgICduYW1lJzogJ2Z1bHZlc3RyYW50J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YicsXG4gICAgICAgICduYW1lJzogJ2dlbmlzdGVpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjMnLFxuICAgICAgICAnbmFtZSc6ICdNaXRveGFudHJvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjQnLFxuICAgICAgICAnbmFtZSc6ICdtb25vcmRlbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NScsXG4gICAgICAgICduYW1lJzogJ09TSS0wMjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjYnLFxuICAgICAgICAnbmFtZSc6ICdyYXBhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjcnLFxuICAgICAgICAnbmFtZSc6ICdyZXN2ZXJhdHJvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OCcsXG4gICAgICAgICduYW1lJzogJ3NhbGVybWlkZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OScsXG4gICAgICAgICduYW1lJzogJ3Npcm9saW11cydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YScsXG4gICAgICAgICduYW1lJzogJ3N0YXVyb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmInLFxuICAgICAgICAnbmFtZSc6ICd0YW5lc3BhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmMnLFxuICAgICAgICAnbmFtZSc6ICd0aGlvcmlkYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmQnLFxuICAgICAgICAnbmFtZSc6ICd0cmV0aW5vaW4gKGF0cmEpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZlJyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmYnLFxuICAgICAgICAnbmFtZSc6ICd0cmlmbHVvcGVyYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzAnLFxuICAgICAgICAnbmFtZSc6ICd0cm9nbGl0YXpvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzEnLFxuICAgICAgICAnbmFtZSc6ICd1bmMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcyJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDY0NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MycsXG4gICAgICAgICduYW1lJzogJ3VuYzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzQnLFxuICAgICAgICAnbmFtZSc6ICd2YWxwcm9pYyBhY2lkJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc1JyxcbiAgICAgICAgJ25hbWUnOiAndm9yaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NicsXG4gICAgICAgICduYW1lJzogJ3dpdGhhZmVyaW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NycsXG4gICAgICAgICduYW1lJzogJ3dvcnRtYW5uaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzgnLFxuICAgICAgICAnbmFtZSc6ICd6ZWJ1bGFyaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRmJyxcbiAgICAgICAgJ25hbWUnOiAnYWxwaGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MScsXG4gICAgICAgICduYW1lJzogJ2JldGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUzJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMzM4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU3JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OCcsXG4gICAgICAgICduYW1lJzogJ2ZsdXBoZXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTknLFxuICAgICAgICAnbmFtZSc6ICdmdWx2ZXN0cmFudCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWInLFxuICAgICAgICAnbmFtZSc6ICdnZW5pc3RlaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYzJyxcbiAgICAgICAgJ25hbWUnOiAnTWl0b3hhbnRyb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY0JyxcbiAgICAgICAgJ25hbWUnOiAnbW9ub3JkZW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjknLFxuICAgICAgICAnbmFtZSc6ICdzaXJvbGltdXMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZiJyxcbiAgICAgICAgJ25hbWUnOiAndGFuZXNwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZjJyxcbiAgICAgICAgJ25hbWUnOiAndGhpb3JpZGF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZkJyxcbiAgICAgICAgJ25hbWUnOiAndHJldGlub2luIChhdHJhKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZScsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZmJyxcbiAgICAgICAgJ25hbWUnOiAndHJpZmx1b3BlcmF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcwJyxcbiAgICAgICAgJ25hbWUnOiAndHJvZ2xpdGF6b25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcxJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MicsXG4gICAgICAgICduYW1lJzogJ3VuYzA2NDYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzMnLFxuICAgICAgICAnbmFtZSc6ICd1bmMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc0JyxcbiAgICAgICAgJ25hbWUnOiAndmFscHJvaWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NScsXG4gICAgICAgICduYW1lJzogJ3Zvcmlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzYnLFxuICAgICAgICAnbmFtZSc6ICd3aXRoYWZlcmluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzcnLFxuICAgICAgICAnbmFtZSc6ICd3b3J0bWFubmluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNCxcbiAgICAgICd0YXJnZXQnOiA3LFxuICAgICAgJ3ZhbHVlJzogODYuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZicsXG4gICAgICAgICduYW1lJzogJ2FscGhhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTEnLFxuICAgICAgICAnbmFtZSc6ICdiZXRhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MycsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTMzOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NycsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTgnLFxuICAgICAgICAnbmFtZSc6ICdmbHVwaGV6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU5JyxcbiAgICAgICAgJ25hbWUnOiAnZnVsdmVzdHJhbnQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzViJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VuaXN0ZWluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MycsXG4gICAgICAgICduYW1lJzogJ01pdG94YW50cm9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NCcsXG4gICAgICAgICduYW1lJzogJ21vbm9yZGVuJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY5JyxcbiAgICAgICAgJ25hbWUnOiAnc2lyb2xpbXVzJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YicsXG4gICAgICAgICduYW1lJzogJ3RhbmVzcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YycsXG4gICAgICAgICduYW1lJzogJ3RoaW9yaWRhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2ZCcsXG4gICAgICAgICduYW1lJzogJ3RyZXRpbm9pbiAoYXRyYSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmUnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZicsXG4gICAgICAgICduYW1lJzogJ3RyaWZsdW9wZXJhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MCcsXG4gICAgICAgICduYW1lJzogJ3Ryb2dsaXRhem9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MScsXG4gICAgICAgICduYW1lJzogJ3VuYzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzInLFxuICAgICAgICAnbmFtZSc6ICd1bmMwNjQ2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzczJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMTIxNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NCcsXG4gICAgICAgICduYW1lJzogJ3ZhbHByb2ljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc2JyxcbiAgICAgICAgJ25hbWUnOiAnd2l0aGFmZXJpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc3JyxcbiAgICAgICAgJ25hbWUnOiAnd29ydG1hbm5pbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGYnLFxuICAgICAgICAnbmFtZSc6ICdhbHBoYS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUxJyxcbiAgICAgICAgJ25hbWUnOiAnYmV0YS1lc3RyYWRpb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTInLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEyOTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTMnLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEzMzgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTQnLFxuICAgICAgICAnbmFtZSc6ICdDUEktMTY5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU1JyxcbiAgICAgICAgJ25hbWUnOiAnZGVjaXRhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NicsXG4gICAgICAgICduYW1lJzogJ0RNU08nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTcnLFxuICAgICAgICAnbmFtZSc6ICdlbnRpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU4JyxcbiAgICAgICAgJ25hbWUnOiAnZmx1cGhlemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OScsXG4gICAgICAgICduYW1lJzogJ2Z1bHZlc3RyYW50J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YicsXG4gICAgICAgICduYW1lJzogJ2dlbmlzdGVpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjMnLFxuICAgICAgICAnbmFtZSc6ICdNaXRveGFudHJvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjQnLFxuICAgICAgICAnbmFtZSc6ICdtb25vcmRlbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NScsXG4gICAgICAgICduYW1lJzogJ09TSS0wMjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjYnLFxuICAgICAgICAnbmFtZSc6ICdyYXBhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjcnLFxuICAgICAgICAnbmFtZSc6ICdyZXN2ZXJhdHJvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OCcsXG4gICAgICAgICduYW1lJzogJ3NhbGVybWlkZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OScsXG4gICAgICAgICduYW1lJzogJ3Npcm9saW11cydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YScsXG4gICAgICAgICduYW1lJzogJ3N0YXVyb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmInLFxuICAgICAgICAnbmFtZSc6ICd0YW5lc3BhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmMnLFxuICAgICAgICAnbmFtZSc6ICd0aGlvcmlkYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmQnLFxuICAgICAgICAnbmFtZSc6ICd0cmV0aW5vaW4gKGF0cmEpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZlJyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmYnLFxuICAgICAgICAnbmFtZSc6ICd0cmlmbHVvcGVyYXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzAnLFxuICAgICAgICAnbmFtZSc6ICd0cm9nbGl0YXpvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzEnLFxuICAgICAgICAnbmFtZSc6ICd1bmMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcyJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDY0NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MycsXG4gICAgICAgICduYW1lJzogJ3VuYzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzQnLFxuICAgICAgICAnbmFtZSc6ICd2YWxwcm9pYyBhY2lkJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc1JyxcbiAgICAgICAgJ25hbWUnOiAndm9yaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NicsXG4gICAgICAgICduYW1lJzogJ3dpdGhhZmVyaW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NycsXG4gICAgICAgICduYW1lJzogJ3dvcnRtYW5uaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzgnLFxuICAgICAgICAnbmFtZSc6ICd6ZWJ1bGFyaW5lJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA0LFxuICAgICAgJ3RhcmdldCc6IDgsXG4gICAgICAndmFsdWUnOiA4Ni4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRmJyxcbiAgICAgICAgJ25hbWUnOiAnYWxwaGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MScsXG4gICAgICAgICduYW1lJzogJ2JldGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUzJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMzM4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU3JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OCcsXG4gICAgICAgICduYW1lJzogJ2ZsdXBoZXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTknLFxuICAgICAgICAnbmFtZSc6ICdmdWx2ZXN0cmFudCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWInLFxuICAgICAgICAnbmFtZSc6ICdnZW5pc3RlaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYzJyxcbiAgICAgICAgJ25hbWUnOiAnTWl0b3hhbnRyb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY0JyxcbiAgICAgICAgJ25hbWUnOiAnbW9ub3JkZW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjknLFxuICAgICAgICAnbmFtZSc6ICdzaXJvbGltdXMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZiJyxcbiAgICAgICAgJ25hbWUnOiAndGFuZXNwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZjJyxcbiAgICAgICAgJ25hbWUnOiAndGhpb3JpZGF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZkJyxcbiAgICAgICAgJ25hbWUnOiAndHJldGlub2luIChhdHJhKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZScsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZmJyxcbiAgICAgICAgJ25hbWUnOiAndHJpZmx1b3BlcmF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcwJyxcbiAgICAgICAgJ25hbWUnOiAndHJvZ2xpdGF6b25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcxJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MicsXG4gICAgICAgICduYW1lJzogJ3VuYzA2NDYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzMnLFxuICAgICAgICAnbmFtZSc6ICd1bmMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc0JyxcbiAgICAgICAgJ25hbWUnOiAndmFscHJvaWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NScsXG4gICAgICAgICduYW1lJzogJ3Zvcmlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzYnLFxuICAgICAgICAnbmFtZSc6ICd3aXRoYWZlcmluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzcnLFxuICAgICAgICAnbmFtZSc6ICd3b3J0bWFubmluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZicsXG4gICAgICAgICduYW1lJzogJ2FscGhhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTEnLFxuICAgICAgICAnbmFtZSc6ICdiZXRhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MycsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTMzOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NycsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTgnLFxuICAgICAgICAnbmFtZSc6ICdmbHVwaGV6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU5JyxcbiAgICAgICAgJ25hbWUnOiAnZnVsdmVzdHJhbnQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzViJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VuaXN0ZWluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MycsXG4gICAgICAgICduYW1lJzogJ01pdG94YW50cm9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NCcsXG4gICAgICAgICduYW1lJzogJ21vbm9yZGVuJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY5JyxcbiAgICAgICAgJ25hbWUnOiAnc2lyb2xpbXVzJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YicsXG4gICAgICAgICduYW1lJzogJ3RhbmVzcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YycsXG4gICAgICAgICduYW1lJzogJ3RoaW9yaWRhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2ZCcsXG4gICAgICAgICduYW1lJzogJ3RyZXRpbm9pbiAoYXRyYSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmUnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZicsXG4gICAgICAgICduYW1lJzogJ3RyaWZsdW9wZXJhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MCcsXG4gICAgICAgICduYW1lJzogJ3Ryb2dsaXRhem9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MScsXG4gICAgICAgICduYW1lJzogJ3VuYzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzInLFxuICAgICAgICAnbmFtZSc6ICd1bmMwNjQ2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzczJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMTIxNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NCcsXG4gICAgICAgICduYW1lJzogJ3ZhbHByb2ljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc2JyxcbiAgICAgICAgJ25hbWUnOiAnd2l0aGFmZXJpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc3JyxcbiAgICAgICAgJ25hbWUnOiAnd29ydG1hbm5pbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDQsXG4gICAgICAndGFyZ2V0JzogMTEsXG4gICAgICAndmFsdWUnOiA4Ni4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRmJyxcbiAgICAgICAgJ25hbWUnOiAnYWxwaGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MScsXG4gICAgICAgICduYW1lJzogJ2JldGEtZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUzJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMzM4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU3JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1OCcsXG4gICAgICAgICduYW1lJzogJ2ZsdXBoZXppbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTknLFxuICAgICAgICAnbmFtZSc6ICdmdWx2ZXN0cmFudCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWInLFxuICAgICAgICAnbmFtZSc6ICdnZW5pc3RlaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYzJyxcbiAgICAgICAgJ25hbWUnOiAnTWl0b3hhbnRyb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY0JyxcbiAgICAgICAgJ25hbWUnOiAnbW9ub3JkZW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjknLFxuICAgICAgICAnbmFtZSc6ICdzaXJvbGltdXMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZiJyxcbiAgICAgICAgJ25hbWUnOiAndGFuZXNwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZjJyxcbiAgICAgICAgJ25hbWUnOiAndGhpb3JpZGF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZkJyxcbiAgICAgICAgJ25hbWUnOiAndHJldGlub2luIChhdHJhKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZScsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzZmJyxcbiAgICAgICAgJ25hbWUnOiAndHJpZmx1b3BlcmF6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcwJyxcbiAgICAgICAgJ25hbWUnOiAndHJvZ2xpdGF6b25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzcxJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MicsXG4gICAgICAgICduYW1lJzogJ3VuYzA2NDYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzMnLFxuICAgICAgICAnbmFtZSc6ICd1bmMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc0JyxcbiAgICAgICAgJ25hbWUnOiAndmFscHJvaWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NScsXG4gICAgICAgICduYW1lJzogJ3Zvcmlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzYnLFxuICAgICAgICAnbmFtZSc6ICd3aXRoYWZlcmluIGEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzcnLFxuICAgICAgICAnbmFtZSc6ICd3b3J0bWFubmluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZicsXG4gICAgICAgICduYW1lJzogJ2FscGhhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTEnLFxuICAgICAgICAnbmFtZSc6ICdiZXRhLWVzdHJhZGlvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MycsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTMzOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NycsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTgnLFxuICAgICAgICAnbmFtZSc6ICdmbHVwaGV6aW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU5JyxcbiAgICAgICAgJ25hbWUnOiAnZnVsdmVzdHJhbnQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzViJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VuaXN0ZWluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MycsXG4gICAgICAgICduYW1lJzogJ01pdG94YW50cm9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NCcsXG4gICAgICAgICduYW1lJzogJ21vbm9yZGVuJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY5JyxcbiAgICAgICAgJ25hbWUnOiAnc2lyb2xpbXVzJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YicsXG4gICAgICAgICduYW1lJzogJ3RhbmVzcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YycsXG4gICAgICAgICduYW1lJzogJ3RoaW9yaWRhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2ZCcsXG4gICAgICAgICduYW1lJzogJ3RyZXRpbm9pbiAoYXRyYSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNmUnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4gYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM2ZicsXG4gICAgICAgICduYW1lJzogJ3RyaWZsdW9wZXJhemluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MCcsXG4gICAgICAgICduYW1lJzogJ3Ryb2dsaXRhem9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3MScsXG4gICAgICAgICduYW1lJzogJ3VuYzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzInLFxuICAgICAgICAnbmFtZSc6ICd1bmMwNjQ2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzczJyxcbiAgICAgICAgJ25hbWUnOiAndW5jMTIxNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NCcsXG4gICAgICAgICduYW1lJzogJ3ZhbHByb2ljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc2JyxcbiAgICAgICAgJ25hbWUnOiAnd2l0aGFmZXJpbiBhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc3JyxcbiAgICAgICAgJ25hbWUnOiAnd29ydG1hbm5pbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDQsXG4gICAgICAndGFyZ2V0JzogMTYsXG4gICAgICAndmFsdWUnOiA4Ni4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZGQ4JyxcbiAgICAgICAgJ25hbWUnOiAnQ29sbGFnZW4gSSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRkOScsXG4gICAgICAgICduYW1lJzogJ0NvbGxhZ2VuIFR5cGUgSUknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZGEnLFxuICAgICAgICAnbmFtZSc6ICdDb2xsYWdlbiBUeXBlIElJSSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRkYicsXG4gICAgICAgICduYW1lJzogJ0NvbGxhZ2VuIFR5cGUgSVYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZGMnLFxuICAgICAgICAnbmFtZSc6ICdDb2xsYWdlbiBUeXBlIFYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZGQnLFxuICAgICAgICAnbmFtZSc6ICdDb2xsYWdlbiBYWElJSSBhbHBoYTEvQ09MMjNBMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRkZScsXG4gICAgICAgICduYW1lJzogJ0Rlc21vZ2xlaW4gMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRkZicsXG4gICAgICAgICduYW1lJzogJ0UtY2FkaGVyaW4gRmMgQ2hpbWVyYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRlMCcsXG4gICAgICAgICduYW1lJzogJ0VDTTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZTEnLFxuICAgICAgICAnbmFtZSc6ICdGaWJyb25lY3RpbiAxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZGUyJyxcbiAgICAgICAgJ25hbWUnOiAnR0FQNDMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZTMnLFxuICAgICAgICAnbmFtZSc6ICdIeUEtNTAwSydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRlNCcsXG4gICAgICAgICduYW1lJzogJ0h5QS01MEsnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZTUnLFxuICAgICAgICAnbmFtZSc6ICdJQ0FNLTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZTYnLFxuICAgICAgICAnbmFtZSc6ICdJbnRlZ3JpbiBhbHBoYTEwQmV0YTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZTcnLFxuICAgICAgICAnbmFtZSc6ICdJbnRlZ3JpbiBhbHBoYTExQmV0YTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZTgnLFxuICAgICAgICAnbmFtZSc6ICdJbnRlZ3JpbiBhbHBoYTJCZXRhMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRlOScsXG4gICAgICAgICduYW1lJzogJ0ludGVncmluIGFscGhhM0JldGExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZGVhJyxcbiAgICAgICAgJ25hbWUnOiAnSW50ZWdyaW4gYWxwaGE0QmV0YTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZWInLFxuICAgICAgICAnbmFtZSc6ICdJbnRlZ3JpbiBhbHBoYTZCZXRhNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRlYycsXG4gICAgICAgICduYW1lJzogJ0ludGVncmluIGFscGhhOUJldGExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZGVkJyxcbiAgICAgICAgJ25hbWUnOiAnSW50ZWdyaW4gYWxwaGFNQmV0YTInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZWUnLFxuICAgICAgICAnbmFtZSc6ICdJbnRlZ3JpbiBhbHBoYVZCZXRhNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRlZicsXG4gICAgICAgICduYW1lJzogJ0lUR0FNLUIyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZGYwJyxcbiAgICAgICAgJ25hbWUnOiAnbGFtaW5pbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmMScsXG4gICAgICAgICduYW1lJzogJ0xhbWluaW4tMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmMicsXG4gICAgICAgICduYW1lJzogJ0xhbWluaW4tNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmMycsXG4gICAgICAgICduYW1lJzogJ0x1bWljYW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZjQnLFxuICAgICAgICAnbmFtZSc6ICdNLUNhZGhlcmluL0NhZGhlcmluLTE1IEZjIENoaW1lcmEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZjUnLFxuICAgICAgICAnbmFtZSc6ICdPc3Rlb2FkaGVyaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZjYnLFxuICAgICAgICAnbmFtZSc6ICdPc3Rlb3BvbnRpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmNycsXG4gICAgICAgICduYW1lJzogJ1AtQ2FkaGVyaW4gRmMgQ2hpbWVyYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmOCcsXG4gICAgICAgICduYW1lJzogJ1BFQ0FNMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmOScsXG4gICAgICAgICduYW1lJzogJ1JHRC1jeWNsaWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZmEnLFxuICAgICAgICAnbmFtZSc6ICdyaE5pZG9nZW4tMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmYicsXG4gICAgICAgICduYW1lJzogJ1Rlc2NpbiBDJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZGZjJyxcbiAgICAgICAgJ25hbWUnOiAnVkNBTTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZkZmQnLFxuICAgICAgICAnbmFtZSc6ICd2aXRyb25lY3RpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmRmZScsXG4gICAgICAgICduYW1lJzogJ0FMQ0FNJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZGZmJyxcbiAgICAgICAgJ25hbWUnOiAnQ2FkaGVyaW4tMjAgKENBRC0yMCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMDAnLFxuICAgICAgICAnbmFtZSc6ICdDYWRoZXJpbi02L0tDQUQgRmMgQ2hpbWVyYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUwMScsXG4gICAgICAgICduYW1lJzogJ3JoQ2FkaGVyaW4tOCAoQ0FELTgpL0ZDIENoaW1lcmEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMDInLFxuICAgICAgICAnbmFtZSc6ICdDRDQ0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTAzJyxcbiAgICAgICAgJ25hbWUnOiAnQ0VBQ0FNNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUwNCcsXG4gICAgICAgICduYW1lJzogJ0FOR1BUMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUwNScsXG4gICAgICAgICduYW1lJzogJ0FOR1BUMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUwNicsXG4gICAgICAgICduYW1lJzogJ0FSRUcgKGFtcGhpcmVndWxpbiknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMDcnLFxuICAgICAgICAnbmFtZSc6ICdDSS00QVMtMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUwOCcsXG4gICAgICAgICduYW1lJzogJ0NUR0YnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMDknLFxuICAgICAgICAnbmFtZSc6ICdDWENMMTIvU0RGMWEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMGEnLFxuICAgICAgICAnbmFtZSc6ICdDWENMMTIvU0RGMWIgYWEgMjItOTMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMGInLFxuICAgICAgICAnbmFtZSc6ICdETEwxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTBjJyxcbiAgICAgICAgJ25hbWUnOiAnRExMNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYxMDBiY2U3MDZjM2NkZmQxMScsXG4gICAgICAgICduYW1lJzogJ0VHRidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUwZScsXG4gICAgICAgICduYW1lJzogJ0ItZXN0cmFkaW9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTBmJyxcbiAgICAgICAgJ25hbWUnOiAnRmFzIExpZ2FuZC9UTkZTRjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMTAnLFxuICAgICAgICAnbmFtZSc6ICdGZXR1aW4gQS9BSFNHJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTExJyxcbiAgICAgICAgJ25hbWUnOiAnRkdGIGJhc2ljIDE0NiBhYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUxMicsXG4gICAgICAgICduYW1lJzogJ0ZHRjInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMTMnLFxuICAgICAgICAnbmFtZSc6ICdGR0Y2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTE0JyxcbiAgICAgICAgJ25hbWUnOiAnRkxUMydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUxNScsXG4gICAgICAgICduYW1lJzogJ0dNLUNTRidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUxNicsXG4gICAgICAgICduYW1lJzogJ0dyby1hJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjEwMGJjZTcwNmMzY2RmZDEwJyxcbiAgICAgICAgJ25hbWUnOiAnSEdGJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTE4JyxcbiAgICAgICAgJ25hbWUnOiAnSUdGLTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMTknLFxuICAgICAgICAnbmFtZSc6ICdJR0ZCUDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMWEnLFxuICAgICAgICAnbmFtZSc6ICdJR0ZCUDMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMWInLFxuICAgICAgICAnbmFtZSc6ICdJTC03J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTFjJyxcbiAgICAgICAgJ25hbWUnOiAnQ1hDTDgvSUwtOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUxZCcsXG4gICAgICAgICduYW1lJzogJ0lMLTEzJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTFlJyxcbiAgICAgICAgJ25hbWUnOiAnSUwtMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMWYnLFxuICAgICAgICAnbmFtZSc6ICdJTC02J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTIwJyxcbiAgICAgICAgJ25hbWUnOiAnSW50ZXJsZXVraW4tMSBiZXRhIChJTC0xQmV0YSkgW2NhdGFib2xpbl0nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMjEnLFxuICAgICAgICAnbmFtZSc6ICdKYWdnZWQgMSBGYyBDaGltZXJhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTIyJyxcbiAgICAgICAgJ25hbWUnOiAnSmFnZ2VkIDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMjMnLFxuICAgICAgICAnbmFtZSc6ICdLaW5pbm9nZW4gSGlnaCBNb2xlY3VsYXIgV2VpZ2h0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTI0JyxcbiAgICAgICAgJ25hbWUnOiAnTEVDVDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMjUnLFxuICAgICAgICAnbmFtZSc6ICdMZXB0aW4vT0InXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMjYnLFxuICAgICAgICAnbmFtZSc6ICdMWVZFLTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMjcnLFxuICAgICAgICAnbmFtZSc6ICdhLUhSRydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUyOCcsXG4gICAgICAgICduYW1lJzogJ05SRzEtQmV0YTEvSFJHMS1CZXRhMSBFR0YgZG9tYWluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTI5JyxcbiAgICAgICAgJ25hbWUnOiAnT3N0ZW9wcm90ZWdlcmluL1RORlJTRjExQidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUyYScsXG4gICAgICAgICduYW1lJzogJ09zdGVvYWN0aXZpbi9HUE5NQiBGYyBDaGltZXJhJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTJiJyxcbiAgICAgICAgJ25hbWUnOiAnUERHRi1BQidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY1MDBiY2U3MDZjM2NkZmUyYycsXG4gICAgICAgICduYW1lJzogJ1BER0YtQkInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNTAwYmNlNzA2YzNjZGZlMmQnLFxuICAgICAgICAnbmFtZSc6ICdQb2RvcGxhbmluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTJlJyxcbiAgICAgICAgJ25hbWUnOiAnUHJvZ2VzdGVyb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjUwMGJjZTcwNmMzY2RmZTJmJyxcbiAgICAgICAgJ25hbWUnOiAnUFROIChwbGVpb3Ryb3BpbiknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNjAwYmNlNzA2YzNjZGZlMzAnLFxuICAgICAgICAnbmFtZSc6ICdyaEJNUC0yJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjYwMGJjZTcwNmMzY2RmZTMxJyxcbiAgICAgICAgJ25hbWUnOiAncmhCTVAtMydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY2MDBiY2U3MDZjM2NkZmUzMicsXG4gICAgICAgICduYW1lJzogJ3JoQk1QLTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNjAwYmNlNzA2YzNjZGZlMzMnLFxuICAgICAgICAnbmFtZSc6ICdyaEJNUC01J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjYwMGJjZTcwNmMzY2RmZTM0JyxcbiAgICAgICAgJ25hbWUnOiAncmhCTVAtNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY2MDBiY2U3MDZjM2NkZmUzNScsXG4gICAgICAgICduYW1lJzogJ3JoQk1QLTcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNjAwYmNlNzA2YzNjZGZlMzYnLFxuICAgICAgICAnbmFtZSc6ICdyaFRSQU5DRSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY2MDBiY2U3MDZjM2NkZmUzNycsXG4gICAgICAgICduYW1lJzogJ1NDRi9jLWtpdCBsaWdhbmQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNjAwYmNlNzA2YzNjZGZlMzgnLFxuICAgICAgICAnbmFtZSc6ICdTSEgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNjAwYmNlNzA2YzNjZGZlMzknLFxuICAgICAgICAnbmFtZSc6ICdTTURGLUhSRydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY2MDBiY2U3MDZjM2NkZmUzYScsXG4gICAgICAgICduYW1lJzogJ1RHRi1CZXRhIExhdGVuY3kgQXNzb2NpYXRlZCBQcm90ZWluJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjYwMGJjZTcwNmMzY2RmZTNiJyxcbiAgICAgICAgJ25hbWUnOiAnVEdGLUIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjYwMGJjZTcwNmMzY2RmZTNjJyxcbiAgICAgICAgJ25hbWUnOiAnVEdGLUIyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjYwMGJjZTcwNmMzY2RmZTNkJyxcbiAgICAgICAgJ25hbWUnOiAnVE5GYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY2MDBiY2U3MDZjM2NkZmUzZScsXG4gICAgICAgICduYW1lJzogJ1Rocm9tYm9wb2lldGluL1RwbydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY2MDBiY2U3MDZjM2NkZmUzZicsXG4gICAgICAgICduYW1lJzogJ1ZFR0YgMTY1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjYwMGJjZTcwNmMzY2RmZTQwJyxcbiAgICAgICAgJ25hbWUnOiAnV05UM2EnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmNjAwYmNlNzA2YzNjZGZlNDEnLFxuICAgICAgICAnbmFtZSc6ICdXTlQ1YSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmY2MDBiY2U3MDZjM2NkZmU0MicsXG4gICAgICAgICduYW1lJzogJ1dOVDEwYSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNSxcbiAgICAgICd0YXJnZXQnOiAxNixcbiAgICAgICd2YWx1ZSc6IDEwNy4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDRlJyxcbiAgICAgICAgJ25hbWUnOiAndHJhbmNoZTInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNGYnLFxuICAgICAgICAnbmFtZSc6ICcxMjcxNzM4LTYyLTUgKE1JLTIpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1NicsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQgKE1TMjc1KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1NycsXG4gICAgICAgICduYW1lJzogJ0VQWi01Njc2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU4JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaLTU2ODcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTknLFxuICAgICAgICAnbmFtZSc6ICdFUFowMDQ3NzcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNWEnLFxuICAgICAgICAnbmFtZSc6ICdFWDUyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2OCcsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbi1hJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDY5JyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2YicsXG4gICAgICAgICduYW1lJzogJ1VOQzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNixcbiAgICAgICd0YXJnZXQnOiAwLFxuICAgICAgJ3ZhbHVlJzogMzEuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ0ZScsXG4gICAgICAgICduYW1lJzogJ3RyYW5jaGUyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDRmJyxcbiAgICAgICAgJ25hbWUnOiAnMTI3MTczOC02Mi01IChNSS0yKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTInLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEyOTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTQnLFxuICAgICAgICAnbmFtZSc6ICdDUEktMTY5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU1JyxcbiAgICAgICAgJ25hbWUnOiAnZGVjaXRhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NicsXG4gICAgICAgICduYW1lJzogJ0RNU08nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTYnLFxuICAgICAgICAnbmFtZSc6ICdlbnRpbm9zdGF0IChNUzI3NSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTcnLFxuICAgICAgICAnbmFtZSc6ICdFUFotNTY3NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1OCcsXG4gICAgICAgICduYW1lJzogJ0VQWi01Njg3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU5JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaMDA0Nzc3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDVhJyxcbiAgICAgICAgJ25hbWUnOiAnRVg1MjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NScsXG4gICAgICAgICduYW1lJzogJ09TSS0wMjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjYnLFxuICAgICAgICAnbmFtZSc6ICdyYXBhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjcnLFxuICAgICAgICAnbmFtZSc6ICdyZXN2ZXJhdHJvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OCcsXG4gICAgICAgICduYW1lJzogJ3NhbGVybWlkZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YScsXG4gICAgICAgICduYW1lJzogJ3N0YXVyb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNjgnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4tYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2OScsXG4gICAgICAgICduYW1lJzogJ1VOQzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNmInLFxuICAgICAgICAnbmFtZSc6ICdVTkMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc1JyxcbiAgICAgICAgJ25hbWUnOiAndm9yaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDYsXG4gICAgICAndGFyZ2V0JzogMSxcbiAgICAgICd2YWx1ZSc6IDMxLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNGUnLFxuICAgICAgICAnbmFtZSc6ICd0cmFuY2hlMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ0ZicsXG4gICAgICAgICduYW1lJzogJzEyNzE3MzgtNjItNSAoTUktMiknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNGUnLFxuICAgICAgICAnbmFtZSc6ICdhY2V0eWxkaWxpbmUgKENpLTk5NCknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTAnLFxuICAgICAgICAnbmFtZSc6ICdiZWxpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUyJyxcbiAgICAgICAgJ25hbWUnOiAnQklYIDAxMjk0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU0JyxcbiAgICAgICAgJ25hbWUnOiAnQ1BJLTE2OSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NScsXG4gICAgICAgICduYW1lJzogJ2RlY2l0YWJpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTYnLFxuICAgICAgICAnbmFtZSc6ICdETVNPJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU2JyxcbiAgICAgICAgJ25hbWUnOiAnZW50aW5vc3RhdCAoTVMyNzUpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU3JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaLTU2NzYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTgnLFxuICAgICAgICAnbmFtZSc6ICdFUFotNTY4NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1OScsXG4gICAgICAgICduYW1lJzogJ0VQWjAwNDc3NydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1YScsXG4gICAgICAgICduYW1lJzogJ0VYNTI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVhJyxcbiAgICAgICAgJ25hbWUnOiAnZ2VsZGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YycsXG4gICAgICAgICduYW1lJzogJ0dTSy1KNCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZCcsXG4gICAgICAgICduYW1lJzogJ0dTSzEyMTAxNTFBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVlJyxcbiAgICAgICAgJ25hbWUnOiAnZ3NrMTI2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVmJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLNTI1NzYyQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MCcsXG4gICAgICAgICduYW1lJzogJ2pxMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MScsXG4gICAgICAgICduYW1lJzogJ0xZLTI5NDAwMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2MicsXG4gICAgICAgICduYW1lJzogJ21ldGh5bHN0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjUnLFxuICAgICAgICAnbmFtZSc6ICdPU0ktMDI3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY2JyxcbiAgICAgICAgJ25hbWUnOiAncmFwYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY3JyxcbiAgICAgICAgJ25hbWUnOiAncmVzdmVyYXRyb2wnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjgnLFxuICAgICAgICAnbmFtZSc6ICdzYWxlcm1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNmEnLFxuICAgICAgICAnbmFtZSc6ICdzdGF1cm9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDY4JyxcbiAgICAgICAgJ25hbWUnOiAndHJpY2hvc3RhdGluLWEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNjknLFxuICAgICAgICAnbmFtZSc6ICdVTkMwMzIxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDZiJyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMTIxNSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3NScsXG4gICAgICAgICduYW1lJzogJ3Zvcmlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzgnLFxuICAgICAgICAnbmFtZSc6ICd6ZWJ1bGFyaW5lJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA2LFxuICAgICAgJ3RhcmdldCc6IDExLFxuICAgICAgJ3ZhbHVlJzogMzEuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ0ZScsXG4gICAgICAgICduYW1lJzogJ3RyYW5jaGUyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDRmJyxcbiAgICAgICAgJ25hbWUnOiAnMTI3MTczOC02Mi01IChNSS0yKSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM0ZScsXG4gICAgICAgICduYW1lJzogJ2FjZXR5bGRpbGluZSAoQ2ktOTk0KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MCcsXG4gICAgICAgICduYW1lJzogJ2JlbGlub3N0YXQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTInLFxuICAgICAgICAnbmFtZSc6ICdCSVggMDEyOTQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTQnLFxuICAgICAgICAnbmFtZSc6ICdDUEktMTY5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU1JyxcbiAgICAgICAgJ25hbWUnOiAnZGVjaXRhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NicsXG4gICAgICAgICduYW1lJzogJ0RNU08nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTYnLFxuICAgICAgICAnbmFtZSc6ICdlbnRpbm9zdGF0IChNUzI3NSknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTcnLFxuICAgICAgICAnbmFtZSc6ICdFUFotNTY3NidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1OCcsXG4gICAgICAgICduYW1lJzogJ0VQWi01Njg3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU5JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaMDA0Nzc3J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDVhJyxcbiAgICAgICAgJ25hbWUnOiAnRVg1MjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWEnLFxuICAgICAgICAnbmFtZSc6ICdnZWxkYW15Y2luJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVjJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLLUo0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzVkJyxcbiAgICAgICAgJ25hbWUnOiAnR1NLMTIxMDE1MUEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWUnLFxuICAgICAgICAnbmFtZSc6ICdnc2sxMjYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWYnLFxuICAgICAgICAnbmFtZSc6ICdHU0s1MjU3NjJBJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYwJyxcbiAgICAgICAgJ25hbWUnOiAnanExJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYxJyxcbiAgICAgICAgJ25hbWUnOiAnTFktMjk0MDAyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzYyJyxcbiAgICAgICAgJ25hbWUnOiAnbWV0aHlsc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NScsXG4gICAgICAgICduYW1lJzogJ09TSS0wMjcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjYnLFxuICAgICAgICAnbmFtZSc6ICdyYXBhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjcnLFxuICAgICAgICAnbmFtZSc6ICdyZXN2ZXJhdHJvbCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2OCcsXG4gICAgICAgICduYW1lJzogJ3NhbGVybWlkZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2YScsXG4gICAgICAgICduYW1lJzogJ3N0YXVyb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNjgnLFxuICAgICAgICAnbmFtZSc6ICd0cmljaG9zdGF0aW4tYSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2OScsXG4gICAgICAgICduYW1lJzogJ1VOQzAzMjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNmInLFxuICAgICAgICAnbmFtZSc6ICdVTkMxMjE1J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc1JyxcbiAgICAgICAgJ25hbWUnOiAndm9yaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM3OCcsXG4gICAgICAgICduYW1lJzogJ3plYnVsYXJpbmUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDYsXG4gICAgICAndGFyZ2V0JzogMTUsXG4gICAgICAndmFsdWUnOiAzMS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDRlJyxcbiAgICAgICAgJ25hbWUnOiAndHJhbmNoZTInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNGYnLFxuICAgICAgICAnbmFtZSc6ICcxMjcxNzM4LTYyLTUgKE1JLTIpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzRlJyxcbiAgICAgICAgJ25hbWUnOiAnYWNldHlsZGlsaW5lIChDaS05OTQpJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzUwJyxcbiAgICAgICAgJ25hbWUnOiAnYmVsaW5vc3RhdCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1MicsXG4gICAgICAgICduYW1lJzogJ0JJWCAwMTI5NCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1NCcsXG4gICAgICAgICduYW1lJzogJ0NQSS0xNjknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNTUnLFxuICAgICAgICAnbmFtZSc6ICdkZWNpdGFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzU2JyxcbiAgICAgICAgJ25hbWUnOiAnRE1TTydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1NicsXG4gICAgICAgICduYW1lJzogJ2VudGlub3N0YXQgKE1TMjc1KSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ1NycsXG4gICAgICAgICduYW1lJzogJ0VQWi01Njc2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDU4JyxcbiAgICAgICAgJ25hbWUnOiAnRVBaLTU2ODcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNTknLFxuICAgICAgICAnbmFtZSc6ICdFUFowMDQ3NzcnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkNWEnLFxuICAgICAgICAnbmFtZSc6ICdFWDUyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1YScsXG4gICAgICAgICduYW1lJzogJ2dlbGRhbXljaW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWMnLFxuICAgICAgICAnbmFtZSc6ICdHU0stSjQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNWQnLFxuICAgICAgICAnbmFtZSc6ICdHU0sxMjEwMTUxQSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZScsXG4gICAgICAgICduYW1lJzogJ2dzazEyNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM1ZicsXG4gICAgICAgICduYW1lJzogJ0dTSzUyNTc2MkEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjAnLFxuICAgICAgICAnbmFtZSc6ICdqcTEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjEnLFxuICAgICAgICAnbmFtZSc6ICdMWS0yOTQwMDInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZjAwYmNlNzA2YzNjZGZjNjInLFxuICAgICAgICAnbmFtZSc6ICdtZXRoeWxzdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY1JyxcbiAgICAgICAgJ25hbWUnOiAnT1NJLTAyNydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NicsXG4gICAgICAgICduYW1lJzogJ3JhcGFteWNpbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVmMDBiY2U3MDZjM2NkZmM2NycsXG4gICAgICAgICduYW1lJzogJ3Jlc3ZlcmF0cm9sJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzY4JyxcbiAgICAgICAgJ25hbWUnOiAnc2FsZXJtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWYwMGJjZTcwNmMzY2RmYzZhJyxcbiAgICAgICAgJ25hbWUnOiAnc3RhdXJvc3BvcmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2OCcsXG4gICAgICAgICduYW1lJzogJ3RyaWNob3N0YXRpbi1hJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDY5JyxcbiAgICAgICAgJ25hbWUnOiAnVU5DMDMyMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQ2YicsXG4gICAgICAgICduYW1lJzogJ1VOQzEyMTUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjNzUnLFxuICAgICAgICAnbmFtZSc6ICd2b3Jpbm9zdGF0J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzc4JyxcbiAgICAgICAgJ25hbWUnOiAnemVidWxhcmluZSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNixcbiAgICAgICd0YXJnZXQnOiAxNixcbiAgICAgICd2YWx1ZSc6IDMxLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTInLFxuICAgICAgICAnbmFtZSc6ICdBZmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlMycsXG4gICAgICAgICduYW1lJzogJ0F4aXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU0JyxcbiAgICAgICAgJ25hbWUnOiAnQm9zdXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU1JyxcbiAgICAgICAgJ25hbWUnOiAnQ2Fib3phbnRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU2JyxcbiAgICAgICAgJ25hbWUnOiAnQ2VyaXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU3JyxcbiAgICAgICAgJ25hbWUnOiAnQ3Jpem90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlOCcsXG4gICAgICAgICduYW1lJzogJ0RhYnJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTknLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWEnLFxuICAgICAgICAnbmFtZSc6ICdFcmxvdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWInLFxuICAgICAgICAnbmFtZSc6ICdHZWZpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWMnLFxuICAgICAgICAnbmFtZSc6ICdJbWF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZCcsXG4gICAgICAgICduYW1lJzogJ0xhcGF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZScsXG4gICAgICAgICduYW1lJzogJ05pbG90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZicsXG4gICAgICAgICduYW1lJzogJ1Bhem9wYW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMCcsXG4gICAgICAgICduYW1lJzogJ3BvbmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMScsXG4gICAgICAgICduYW1lJzogJ1JlZ29yYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmYyJyxcbiAgICAgICAgJ25hbWUnOiAnUnV4b2xpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZjMnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjQnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjUnLFxuICAgICAgICAnbmFtZSc6ICdUb2ZhY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmNicsXG4gICAgICAgICduYW1lJzogJ1RyYW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjcnLFxuICAgICAgICAnbmFtZSc6ICdWYW5kZXRhbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjknLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmYScsXG4gICAgICAgICduYW1lJzogJ1RyYXN0dXp1bWFiICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmInLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIExvcGVyYW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmMnLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIERvbXBlcmlkb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmZkJyxcbiAgICAgICAgJ25hbWUnOiAnU3VuaXRpbmliICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmUnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBEb21wZXJpZG9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmZicsXG4gICAgICAgICduYW1lJzogJ1N1bml0aW5pYiArIExvcGFyZW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDAnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDEnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWIgKyBVcnNvZGVveHljaG9saWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMicsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIEVudGVjYXZpcidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMycsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIERpZXRoeWxwcm9waW9uJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA0JyxcbiAgICAgICAgJ25hbWUnOiAnU29yYWZlbmliICsgT2xtZXNhcnRhbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwNScsXG4gICAgICAgICduYW1lJzogJ1NvcmVmZW5pYiArIERpY2xvZmVuYWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDYnLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWIgKyBDeXRhcmFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA3JyxcbiAgICAgICAgJ25hbWUnOiAnRXJsb3RpbmliICsgQ2VmdXJveGltZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwOCcsXG4gICAgICAgICduYW1lJzogJ0ltYXRpbmliICsgQ3ljbG9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA5JyxcbiAgICAgICAgJ25hbWUnOiAnVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGEnLFxuICAgICAgICAnbmFtZSc6ICdMb3BlcmFtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzBiJyxcbiAgICAgICAgJ25hbWUnOiAnRG9tcGVyaWRvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGMnLFxuICAgICAgICAnbmFtZSc6ICdQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGQnLFxuICAgICAgICAnbmFtZSc6ICdFbnRlY2F2aXInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGUnLFxuICAgICAgICAnbmFtZSc6ICdEaWV0aHlscHJvcGlvbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwZicsXG4gICAgICAgICduYW1lJzogJ09sbWVzYXJ0YW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTAnLFxuICAgICAgICAnbmFtZSc6ICdEaWNsb2ZlbmFjJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzExJyxcbiAgICAgICAgJ25hbWUnOiAnQ3l0YXJhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMxMicsXG4gICAgICAgICduYW1lJzogJ0NlZnVyb3hpbWUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTMnLFxuICAgICAgICAnbmFtZSc6ICdDeWNsb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTInLFxuICAgICAgICAnbmFtZSc6ICdBZmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlMycsXG4gICAgICAgICduYW1lJzogJ0F4aXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU0JyxcbiAgICAgICAgJ25hbWUnOiAnQm9zdXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU1JyxcbiAgICAgICAgJ25hbWUnOiAnQ2Fib3phbnRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU2JyxcbiAgICAgICAgJ25hbWUnOiAnQ2VyaXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU3JyxcbiAgICAgICAgJ25hbWUnOiAnQ3Jpem90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlOCcsXG4gICAgICAgICduYW1lJzogJ0RhYnJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTknLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWEnLFxuICAgICAgICAnbmFtZSc6ICdFcmxvdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWInLFxuICAgICAgICAnbmFtZSc6ICdHZWZpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWMnLFxuICAgICAgICAnbmFtZSc6ICdJbWF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZCcsXG4gICAgICAgICduYW1lJzogJ0xhcGF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZScsXG4gICAgICAgICduYW1lJzogJ05pbG90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZicsXG4gICAgICAgICduYW1lJzogJ1Bhem9wYW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMCcsXG4gICAgICAgICduYW1lJzogJ3BvbmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMScsXG4gICAgICAgICduYW1lJzogJ1JlZ29yYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmYyJyxcbiAgICAgICAgJ25hbWUnOiAnUnV4b2xpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZjMnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjQnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjUnLFxuICAgICAgICAnbmFtZSc6ICdUb2ZhY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmNicsXG4gICAgICAgICduYW1lJzogJ1RyYW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjcnLFxuICAgICAgICAnbmFtZSc6ICdWYW5kZXRhbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjknLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmYScsXG4gICAgICAgICduYW1lJzogJ1RyYXN0dXp1bWFiICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmInLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIExvcGVyYW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmMnLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIERvbXBlcmlkb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmZkJyxcbiAgICAgICAgJ25hbWUnOiAnU3VuaXRpbmliICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmUnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBEb21wZXJpZG9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmZicsXG4gICAgICAgICduYW1lJzogJ1N1bml0aW5pYiArIExvcGFyZW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDAnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDEnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWIgKyBVcnNvZGVveHljaG9saWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMicsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIEVudGVjYXZpcidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMycsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIERpZXRoeWxwcm9waW9uJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA0JyxcbiAgICAgICAgJ25hbWUnOiAnU29yYWZlbmliICsgT2xtZXNhcnRhbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwNScsXG4gICAgICAgICduYW1lJzogJ1NvcmVmZW5pYiArIERpY2xvZmVuYWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDYnLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWIgKyBDeXRhcmFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA3JyxcbiAgICAgICAgJ25hbWUnOiAnRXJsb3RpbmliICsgQ2VmdXJveGltZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwOCcsXG4gICAgICAgICduYW1lJzogJ0ltYXRpbmliICsgQ3ljbG9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA5JyxcbiAgICAgICAgJ25hbWUnOiAnVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGEnLFxuICAgICAgICAnbmFtZSc6ICdMb3BlcmFtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzBiJyxcbiAgICAgICAgJ25hbWUnOiAnRG9tcGVyaWRvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGMnLFxuICAgICAgICAnbmFtZSc6ICdQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGQnLFxuICAgICAgICAnbmFtZSc6ICdFbnRlY2F2aXInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGUnLFxuICAgICAgICAnbmFtZSc6ICdEaWV0aHlscHJvcGlvbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwZicsXG4gICAgICAgICduYW1lJzogJ09sbWVzYXJ0YW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTAnLFxuICAgICAgICAnbmFtZSc6ICdEaWNsb2ZlbmFjJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzExJyxcbiAgICAgICAgJ25hbWUnOiAnQ3l0YXJhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMxMicsXG4gICAgICAgICduYW1lJzogJ0NlZnVyb3hpbWUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTMnLFxuICAgICAgICAnbmFtZSc6ICdDeWNsb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTInLFxuICAgICAgICAnbmFtZSc6ICdBZmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlMycsXG4gICAgICAgICduYW1lJzogJ0F4aXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU0JyxcbiAgICAgICAgJ25hbWUnOiAnQm9zdXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU1JyxcbiAgICAgICAgJ25hbWUnOiAnQ2Fib3phbnRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU2JyxcbiAgICAgICAgJ25hbWUnOiAnQ2VyaXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU3JyxcbiAgICAgICAgJ25hbWUnOiAnQ3Jpem90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlOCcsXG4gICAgICAgICduYW1lJzogJ0RhYnJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTknLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWEnLFxuICAgICAgICAnbmFtZSc6ICdFcmxvdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWInLFxuICAgICAgICAnbmFtZSc6ICdHZWZpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWMnLFxuICAgICAgICAnbmFtZSc6ICdJbWF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZCcsXG4gICAgICAgICduYW1lJzogJ0xhcGF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZScsXG4gICAgICAgICduYW1lJzogJ05pbG90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZicsXG4gICAgICAgICduYW1lJzogJ1Bhem9wYW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMCcsXG4gICAgICAgICduYW1lJzogJ3BvbmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMScsXG4gICAgICAgICduYW1lJzogJ1JlZ29yYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmYyJyxcbiAgICAgICAgJ25hbWUnOiAnUnV4b2xpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZjMnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjQnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjUnLFxuICAgICAgICAnbmFtZSc6ICdUb2ZhY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmNicsXG4gICAgICAgICduYW1lJzogJ1RyYW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjcnLFxuICAgICAgICAnbmFtZSc6ICdWYW5kZXRhbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjknLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmYScsXG4gICAgICAgICduYW1lJzogJ1RyYXN0dXp1bWFiICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmInLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIExvcGVyYW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmMnLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIERvbXBlcmlkb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmZkJyxcbiAgICAgICAgJ25hbWUnOiAnU3VuaXRpbmliICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmUnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBEb21wZXJpZG9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmZicsXG4gICAgICAgICduYW1lJzogJ1N1bml0aW5pYiArIExvcGFyZW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDAnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDEnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWIgKyBVcnNvZGVveHljaG9saWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMicsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIEVudGVjYXZpcidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMycsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIERpZXRoeWxwcm9waW9uJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA0JyxcbiAgICAgICAgJ25hbWUnOiAnU29yYWZlbmliICsgT2xtZXNhcnRhbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwNScsXG4gICAgICAgICduYW1lJzogJ1NvcmVmZW5pYiArIERpY2xvZmVuYWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDYnLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWIgKyBDeXRhcmFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA3JyxcbiAgICAgICAgJ25hbWUnOiAnRXJsb3RpbmliICsgQ2VmdXJveGltZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwOCcsXG4gICAgICAgICduYW1lJzogJ0ltYXRpbmliICsgQ3ljbG9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA5JyxcbiAgICAgICAgJ25hbWUnOiAnVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGEnLFxuICAgICAgICAnbmFtZSc6ICdMb3BlcmFtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzBiJyxcbiAgICAgICAgJ25hbWUnOiAnRG9tcGVyaWRvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGMnLFxuICAgICAgICAnbmFtZSc6ICdQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGQnLFxuICAgICAgICAnbmFtZSc6ICdFbnRlY2F2aXInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGUnLFxuICAgICAgICAnbmFtZSc6ICdEaWV0aHlscHJvcGlvbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwZicsXG4gICAgICAgICduYW1lJzogJ09sbWVzYXJ0YW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTAnLFxuICAgICAgICAnbmFtZSc6ICdEaWNsb2ZlbmFjJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzExJyxcbiAgICAgICAgJ25hbWUnOiAnQ3l0YXJhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMxMicsXG4gICAgICAgICduYW1lJzogJ0NlZnVyb3hpbWUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTMnLFxuICAgICAgICAnbmFtZSc6ICdDeWNsb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTInLFxuICAgICAgICAnbmFtZSc6ICdBZmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlMycsXG4gICAgICAgICduYW1lJzogJ0F4aXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU0JyxcbiAgICAgICAgJ25hbWUnOiAnQm9zdXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU1JyxcbiAgICAgICAgJ25hbWUnOiAnQ2Fib3phbnRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU2JyxcbiAgICAgICAgJ25hbWUnOiAnQ2VyaXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU3JyxcbiAgICAgICAgJ25hbWUnOiAnQ3Jpem90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlOCcsXG4gICAgICAgICduYW1lJzogJ0RhYnJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTknLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWEnLFxuICAgICAgICAnbmFtZSc6ICdFcmxvdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWInLFxuICAgICAgICAnbmFtZSc6ICdHZWZpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWMnLFxuICAgICAgICAnbmFtZSc6ICdJbWF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZCcsXG4gICAgICAgICduYW1lJzogJ0xhcGF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZScsXG4gICAgICAgICduYW1lJzogJ05pbG90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZicsXG4gICAgICAgICduYW1lJzogJ1Bhem9wYW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMCcsXG4gICAgICAgICduYW1lJzogJ3BvbmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMScsXG4gICAgICAgICduYW1lJzogJ1JlZ29yYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmYyJyxcbiAgICAgICAgJ25hbWUnOiAnUnV4b2xpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZjMnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjQnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjUnLFxuICAgICAgICAnbmFtZSc6ICdUb2ZhY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmNicsXG4gICAgICAgICduYW1lJzogJ1RyYW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjcnLFxuICAgICAgICAnbmFtZSc6ICdWYW5kZXRhbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjknLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmYScsXG4gICAgICAgICduYW1lJzogJ1RyYXN0dXp1bWFiICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmInLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIExvcGVyYW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmMnLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIERvbXBlcmlkb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmZkJyxcbiAgICAgICAgJ25hbWUnOiAnU3VuaXRpbmliICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmUnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBEb21wZXJpZG9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmZicsXG4gICAgICAgICduYW1lJzogJ1N1bml0aW5pYiArIExvcGFyZW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDAnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDEnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWIgKyBVcnNvZGVveHljaG9saWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMicsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIEVudGVjYXZpcidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMycsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIERpZXRoeWxwcm9waW9uJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA0JyxcbiAgICAgICAgJ25hbWUnOiAnU29yYWZlbmliICsgT2xtZXNhcnRhbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwNScsXG4gICAgICAgICduYW1lJzogJ1NvcmVmZW5pYiArIERpY2xvZmVuYWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDYnLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWIgKyBDeXRhcmFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA3JyxcbiAgICAgICAgJ25hbWUnOiAnRXJsb3RpbmliICsgQ2VmdXJveGltZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwOCcsXG4gICAgICAgICduYW1lJzogJ0ltYXRpbmliICsgQ3ljbG9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA5JyxcbiAgICAgICAgJ25hbWUnOiAnVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGEnLFxuICAgICAgICAnbmFtZSc6ICdMb3BlcmFtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzBiJyxcbiAgICAgICAgJ25hbWUnOiAnRG9tcGVyaWRvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGMnLFxuICAgICAgICAnbmFtZSc6ICdQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGQnLFxuICAgICAgICAnbmFtZSc6ICdFbnRlY2F2aXInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGUnLFxuICAgICAgICAnbmFtZSc6ICdEaWV0aHlscHJvcGlvbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwZicsXG4gICAgICAgICduYW1lJzogJ09sbWVzYXJ0YW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTAnLFxuICAgICAgICAnbmFtZSc6ICdEaWNsb2ZlbmFjJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzExJyxcbiAgICAgICAgJ25hbWUnOiAnQ3l0YXJhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMxMicsXG4gICAgICAgICduYW1lJzogJ0NlZnVyb3hpbWUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTMnLFxuICAgICAgICAnbmFtZSc6ICdDeWNsb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTInLFxuICAgICAgICAnbmFtZSc6ICdBZmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlMycsXG4gICAgICAgICduYW1lJzogJ0F4aXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU0JyxcbiAgICAgICAgJ25hbWUnOiAnQm9zdXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU1JyxcbiAgICAgICAgJ25hbWUnOiAnQ2Fib3phbnRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU2JyxcbiAgICAgICAgJ25hbWUnOiAnQ2VyaXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU3JyxcbiAgICAgICAgJ25hbWUnOiAnQ3Jpem90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlOCcsXG4gICAgICAgICduYW1lJzogJ0RhYnJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTknLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWEnLFxuICAgICAgICAnbmFtZSc6ICdFcmxvdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWInLFxuICAgICAgICAnbmFtZSc6ICdHZWZpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWMnLFxuICAgICAgICAnbmFtZSc6ICdJbWF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZCcsXG4gICAgICAgICduYW1lJzogJ0xhcGF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZScsXG4gICAgICAgICduYW1lJzogJ05pbG90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZicsXG4gICAgICAgICduYW1lJzogJ1Bhem9wYW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMCcsXG4gICAgICAgICduYW1lJzogJ3BvbmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMScsXG4gICAgICAgICduYW1lJzogJ1JlZ29yYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmYyJyxcbiAgICAgICAgJ25hbWUnOiAnUnV4b2xpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZjMnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjQnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjUnLFxuICAgICAgICAnbmFtZSc6ICdUb2ZhY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmNicsXG4gICAgICAgICduYW1lJzogJ1RyYW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjcnLFxuICAgICAgICAnbmFtZSc6ICdWYW5kZXRhbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjknLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmYScsXG4gICAgICAgICduYW1lJzogJ1RyYXN0dXp1bWFiICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmInLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIExvcGVyYW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmMnLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIERvbXBlcmlkb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmZkJyxcbiAgICAgICAgJ25hbWUnOiAnU3VuaXRpbmliICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmUnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBEb21wZXJpZG9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmZicsXG4gICAgICAgICduYW1lJzogJ1N1bml0aW5pYiArIExvcGFyZW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDAnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDEnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWIgKyBVcnNvZGVveHljaG9saWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMicsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIEVudGVjYXZpcidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMycsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIERpZXRoeWxwcm9waW9uJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA0JyxcbiAgICAgICAgJ25hbWUnOiAnU29yYWZlbmliICsgT2xtZXNhcnRhbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwNScsXG4gICAgICAgICduYW1lJzogJ1NvcmVmZW5pYiArIERpY2xvZmVuYWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDYnLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWIgKyBDeXRhcmFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA3JyxcbiAgICAgICAgJ25hbWUnOiAnRXJsb3RpbmliICsgQ2VmdXJveGltZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwOCcsXG4gICAgICAgICduYW1lJzogJ0ltYXRpbmliICsgQ3ljbG9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA5JyxcbiAgICAgICAgJ25hbWUnOiAnVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGEnLFxuICAgICAgICAnbmFtZSc6ICdMb3BlcmFtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzBiJyxcbiAgICAgICAgJ25hbWUnOiAnRG9tcGVyaWRvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGMnLFxuICAgICAgICAnbmFtZSc6ICdQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGQnLFxuICAgICAgICAnbmFtZSc6ICdFbnRlY2F2aXInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGUnLFxuICAgICAgICAnbmFtZSc6ICdEaWV0aHlscHJvcGlvbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwZicsXG4gICAgICAgICduYW1lJzogJ09sbWVzYXJ0YW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTAnLFxuICAgICAgICAnbmFtZSc6ICdEaWNsb2ZlbmFjJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzExJyxcbiAgICAgICAgJ25hbWUnOiAnQ3l0YXJhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMxMicsXG4gICAgICAgICduYW1lJzogJ0NlZnVyb3hpbWUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTMnLFxuICAgICAgICAnbmFtZSc6ICdDeWNsb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTInLFxuICAgICAgICAnbmFtZSc6ICdBZmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlMycsXG4gICAgICAgICduYW1lJzogJ0F4aXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU0JyxcbiAgICAgICAgJ25hbWUnOiAnQm9zdXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU1JyxcbiAgICAgICAgJ25hbWUnOiAnQ2Fib3phbnRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU2JyxcbiAgICAgICAgJ25hbWUnOiAnQ2VyaXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU3JyxcbiAgICAgICAgJ25hbWUnOiAnQ3Jpem90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlOCcsXG4gICAgICAgICduYW1lJzogJ0RhYnJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTknLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWEnLFxuICAgICAgICAnbmFtZSc6ICdFcmxvdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWInLFxuICAgICAgICAnbmFtZSc6ICdHZWZpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWMnLFxuICAgICAgICAnbmFtZSc6ICdJbWF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZCcsXG4gICAgICAgICduYW1lJzogJ0xhcGF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZScsXG4gICAgICAgICduYW1lJzogJ05pbG90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZicsXG4gICAgICAgICduYW1lJzogJ1Bhem9wYW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMCcsXG4gICAgICAgICduYW1lJzogJ3BvbmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMScsXG4gICAgICAgICduYW1lJzogJ1JlZ29yYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmYyJyxcbiAgICAgICAgJ25hbWUnOiAnUnV4b2xpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZjMnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjQnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjUnLFxuICAgICAgICAnbmFtZSc6ICdUb2ZhY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmNicsXG4gICAgICAgICduYW1lJzogJ1RyYW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjcnLFxuICAgICAgICAnbmFtZSc6ICdWYW5kZXRhbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjknLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmYScsXG4gICAgICAgICduYW1lJzogJ1RyYXN0dXp1bWFiICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmInLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIExvcGVyYW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmMnLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIERvbXBlcmlkb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmZkJyxcbiAgICAgICAgJ25hbWUnOiAnU3VuaXRpbmliICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmUnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBEb21wZXJpZG9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmZicsXG4gICAgICAgICduYW1lJzogJ1N1bml0aW5pYiArIExvcGFyZW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDAnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDEnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWIgKyBVcnNvZGVveHljaG9saWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMicsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIEVudGVjYXZpcidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMycsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIERpZXRoeWxwcm9waW9uJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA0JyxcbiAgICAgICAgJ25hbWUnOiAnU29yYWZlbmliICsgT2xtZXNhcnRhbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwNScsXG4gICAgICAgICduYW1lJzogJ1NvcmVmZW5pYiArIERpY2xvZmVuYWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDYnLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWIgKyBDeXRhcmFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA3JyxcbiAgICAgICAgJ25hbWUnOiAnRXJsb3RpbmliICsgQ2VmdXJveGltZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwOCcsXG4gICAgICAgICduYW1lJzogJ0ltYXRpbmliICsgQ3ljbG9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA5JyxcbiAgICAgICAgJ25hbWUnOiAnVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGEnLFxuICAgICAgICAnbmFtZSc6ICdMb3BlcmFtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzBiJyxcbiAgICAgICAgJ25hbWUnOiAnRG9tcGVyaWRvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGMnLFxuICAgICAgICAnbmFtZSc6ICdQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGQnLFxuICAgICAgICAnbmFtZSc6ICdFbnRlY2F2aXInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGUnLFxuICAgICAgICAnbmFtZSc6ICdEaWV0aHlscHJvcGlvbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwZicsXG4gICAgICAgICduYW1lJzogJ09sbWVzYXJ0YW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTAnLFxuICAgICAgICAnbmFtZSc6ICdEaWNsb2ZlbmFjJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzExJyxcbiAgICAgICAgJ25hbWUnOiAnQ3l0YXJhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMxMicsXG4gICAgICAgICduYW1lJzogJ0NlZnVyb3hpbWUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTMnLFxuICAgICAgICAnbmFtZSc6ICdDeWNsb3Nwb3JpbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTInLFxuICAgICAgICAnbmFtZSc6ICdBZmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlMycsXG4gICAgICAgICduYW1lJzogJ0F4aXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU0JyxcbiAgICAgICAgJ25hbWUnOiAnQm9zdXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU1JyxcbiAgICAgICAgJ25hbWUnOiAnQ2Fib3phbnRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU2JyxcbiAgICAgICAgJ25hbWUnOiAnQ2VyaXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmU3JyxcbiAgICAgICAgJ25hbWUnOiAnQ3Jpem90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlOCcsXG4gICAgICAgICduYW1lJzogJ0RhYnJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZTknLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWEnLFxuICAgICAgICAnbmFtZSc6ICdFcmxvdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWInLFxuICAgICAgICAnbmFtZSc6ICdHZWZpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZWMnLFxuICAgICAgICAnbmFtZSc6ICdJbWF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZCcsXG4gICAgICAgICduYW1lJzogJ0xhcGF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZScsXG4gICAgICAgICduYW1lJzogJ05pbG90aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJlZicsXG4gICAgICAgICduYW1lJzogJ1Bhem9wYW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMCcsXG4gICAgICAgICduYW1lJzogJ3BvbmF0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVjMDBiY2U3MDZjM2NkZmJmMScsXG4gICAgICAgICduYW1lJzogJ1JlZ29yYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWMwMGJjZTcwNmMzY2RmYmYyJyxcbiAgICAgICAgJ25hbWUnOiAnUnV4b2xpdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlYzAwYmNlNzA2YzNjZGZiZjMnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjQnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjUnLFxuICAgICAgICAnbmFtZSc6ICdUb2ZhY2l0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmNicsXG4gICAgICAgICduYW1lJzogJ1RyYW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjcnLFxuICAgICAgICAnbmFtZSc6ICdWYW5kZXRhbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjknLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmYScsXG4gICAgICAgICduYW1lJzogJ1RyYXN0dXp1bWFiICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmInLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIExvcGVyYW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmMnLFxuICAgICAgICAnbmFtZSc6ICdUcmFzdHV6dW1hYiArIERvbXBlcmlkb25lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmZkJyxcbiAgICAgICAgJ25hbWUnOiAnU3VuaXRpbmliICsgVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZmUnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBEb21wZXJpZG9uZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmZicsXG4gICAgICAgICduYW1lJzogJ1N1bml0aW5pYiArIExvcGFyZW1pZGUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDAnLFxuICAgICAgICAnbmFtZSc6ICdTdW5pdGluaWIgKyBQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDEnLFxuICAgICAgICAnbmFtZSc6ICdTb3JhZmVuaWIgKyBVcnNvZGVveHljaG9saWMgYWNpZCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMicsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIEVudGVjYXZpcidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwMycsXG4gICAgICAgICduYW1lJzogJ1NvcmFmZW5pYiArIERpZXRoeWxwcm9waW9uJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA0JyxcbiAgICAgICAgJ25hbWUnOiAnU29yYWZlbmliICsgT2xtZXNhcnRhbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwNScsXG4gICAgICAgICduYW1lJzogJ1NvcmVmZW5pYiArIERpY2xvZmVuYWMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMDYnLFxuICAgICAgICAnbmFtZSc6ICdEYXNhdGluaWIgKyBDeXRhcmFiaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA3JyxcbiAgICAgICAgJ25hbWUnOiAnRXJsb3RpbmliICsgQ2VmdXJveGltZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwOCcsXG4gICAgICAgICduYW1lJzogJ0ltYXRpbmliICsgQ3ljbG9zcG9yaW5lJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzA5JyxcbiAgICAgICAgJ25hbWUnOiAnVXJzb2Rlb3h5Y2hvbGljIGFjaWQnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGEnLFxuICAgICAgICAnbmFtZSc6ICdMb3BlcmFtaWRlJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzBiJyxcbiAgICAgICAgJ25hbWUnOiAnRG9tcGVyaWRvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGMnLFxuICAgICAgICAnbmFtZSc6ICdQcmVkbmlzb2xvbmUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGQnLFxuICAgICAgICAnbmFtZSc6ICdFbnRlY2F2aXInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMGUnLFxuICAgICAgICAnbmFtZSc6ICdEaWV0aHlscHJvcGlvbidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMwZicsXG4gICAgICAgICduYW1lJzogJ09sbWVzYXJ0YW4nXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTAnLFxuICAgICAgICAnbmFtZSc6ICdEaWNsb2ZlbmFjJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYzExJyxcbiAgICAgICAgJ25hbWUnOiAnQ3l0YXJhYmluZSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmMxMicsXG4gICAgICAgICduYW1lJzogJ0NlZnVyb3hpbWUnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZjMTMnLFxuICAgICAgICAnbmFtZSc6ICdDeWNsb3Nwb3JpbmUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDcsXG4gICAgICAndGFyZ2V0JzogMTcsXG4gICAgICAndmFsdWUnOiAzNTAuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MCcsXG4gICAgICAgICduYW1lJzogJ3NwaW5hbCBtdXNjdWxhciBhdHJvcGh5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgxJyxcbiAgICAgICAgJ25hbWUnOiAnYW15b3Ryb3BoaWMgbGF0ZXJhbCBzY2xlcm9zaXMnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDcsXG4gICAgICAndGFyZ2V0JzogMjIsXG4gICAgICAndmFsdWUnOiAyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODAnLFxuICAgICAgICAnbmFtZSc6ICdzcGluYWwgbXVzY3VsYXIgYXRyb3BoeSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MScsXG4gICAgICAgICduYW1lJzogJ2FteW90cm9waGljIGxhdGVyYWwgc2NsZXJvc2lzJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA3LFxuICAgICAgJ3RhcmdldCc6IDIzLFxuICAgICAgJ3ZhbHVlJzogMi4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgwJyxcbiAgICAgICAgJ25hbWUnOiAnc3BpbmFsIG11c2N1bGFyIGF0cm9waHknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODEnLFxuICAgICAgICAnbmFtZSc6ICdhbXlvdHJvcGhpYyBsYXRlcmFsIHNjbGVyb3NpcydcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNyxcbiAgICAgICd0YXJnZXQnOiAyNCxcbiAgICAgICd2YWx1ZSc6IDIuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MCcsXG4gICAgICAgICduYW1lJzogJ3NwaW5hbCBtdXNjdWxhciBhdHJvcGh5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgxJyxcbiAgICAgICAgJ25hbWUnOiAnYW15b3Ryb3BoaWMgbGF0ZXJhbCBzY2xlcm9zaXMnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDcsXG4gICAgICAndGFyZ2V0JzogMjUsXG4gICAgICAndmFsdWUnOiAyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODAnLFxuICAgICAgICAnbmFtZSc6ICdzcGluYWwgbXVzY3VsYXIgYXRyb3BoeSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MScsXG4gICAgICAgICduYW1lJzogJ2FteW90cm9waGljIGxhdGVyYWwgc2NsZXJvc2lzJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA3LFxuICAgICAgJ3RhcmdldCc6IDI2LFxuICAgICAgJ3ZhbHVlJzogMi4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgwJyxcbiAgICAgICAgJ25hbWUnOiAnc3BpbmFsIG11c2N1bGFyIGF0cm9waHknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODEnLFxuICAgICAgICAnbmFtZSc6ICdhbXlvdHJvcGhpYyBsYXRlcmFsIHNjbGVyb3NpcydcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNyxcbiAgICAgICd0YXJnZXQnOiAyNyxcbiAgICAgICd2YWx1ZSc6IDIuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MCcsXG4gICAgICAgICduYW1lJzogJ3NwaW5hbCBtdXNjdWxhciBhdHJvcGh5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgxJyxcbiAgICAgICAgJ25hbWUnOiAnYW15b3Ryb3BoaWMgbGF0ZXJhbCBzY2xlcm9zaXMnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDcsXG4gICAgICAndGFyZ2V0JzogMjgsXG4gICAgICAndmFsdWUnOiAyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODAnLFxuICAgICAgICAnbmFtZSc6ICdzcGluYWwgbXVzY3VsYXIgYXRyb3BoeSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MScsXG4gICAgICAgICduYW1lJzogJ2FteW90cm9waGljIGxhdGVyYWwgc2NsZXJvc2lzJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA3LFxuICAgICAgJ3RhcmdldCc6IDI5LFxuICAgICAgJ3ZhbHVlJzogMi4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgwJyxcbiAgICAgICAgJ25hbWUnOiAnc3BpbmFsIG11c2N1bGFyIGF0cm9waHknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODEnLFxuICAgICAgICAnbmFtZSc6ICdhbXlvdHJvcGhpYyBsYXRlcmFsIHNjbGVyb3NpcydcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogNyxcbiAgICAgICd0YXJnZXQnOiAzMCxcbiAgICAgICd2YWx1ZSc6IDIuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MCcsXG4gICAgICAgICduYW1lJzogJ3NwaW5hbCBtdXNjdWxhciBhdHJvcGh5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgxJyxcbiAgICAgICAgJ25hbWUnOiAnYW15b3Ryb3BoaWMgbGF0ZXJhbCBzY2xlcm9zaXMnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDcsXG4gICAgICAndGFyZ2V0JzogMzEsXG4gICAgICAndmFsdWUnOiAyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODAnLFxuICAgICAgICAnbmFtZSc6ICdzcGluYWwgbXVzY3VsYXIgYXRyb3BoeSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MScsXG4gICAgICAgICduYW1lJzogJ2FteW90cm9waGljIGxhdGVyYWwgc2NsZXJvc2lzJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA3LFxuICAgICAgJ3RhcmdldCc6IDMyLFxuICAgICAgJ3ZhbHVlJzogMi4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDIsXG4gICAgICAndmFsdWUnOiA1LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODcnLFxuICAgICAgICAnbmFtZSc6ICdBWjYyOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4OCcsXG4gICAgICAgICduYW1lJzogJ1NlbHVtZXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGEnLFxuICAgICAgICAnbmFtZSc6ICdQTFg0NzIwJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhiJyxcbiAgICAgICAgJ25hbWUnOiAnU0I1OTA4ODUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDgsXG4gICAgICAndGFyZ2V0JzogMyxcbiAgICAgICd2YWx1ZSc6IDUuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4NycsXG4gICAgICAgICduYW1lJzogJ0FaNjI4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg4JyxcbiAgICAgICAgJ25hbWUnOiAnU2VsdW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjgnLFxuICAgICAgICAnbmFtZSc6ICdWZW11cmFmZW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YScsXG4gICAgICAgICduYW1lJzogJ1BMWDQ3MjAnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGInLFxuICAgICAgICAnbmFtZSc6ICdTQjU5MDg4NSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogOCxcbiAgICAgICd0YXJnZXQnOiA5LFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDEwLFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDEzLFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDE0LFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDE4LFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDE5LFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDIwLFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiA4LFxuICAgICAgJ3RhcmdldCc6IDIxLFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgwJyxcbiAgICAgICAgJ25hbWUnOiAnc3BpbmFsIG11c2N1bGFyIGF0cm9waHknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODEnLFxuICAgICAgICAnbmFtZSc6ICdhbXlvdHJvcGhpYyBsYXRlcmFsIHNjbGVyb3NpcydcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogOSxcbiAgICAgICd0YXJnZXQnOiAyMyxcbiAgICAgICd2YWx1ZSc6IDIuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MCcsXG4gICAgICAgICduYW1lJzogJ3NwaW5hbCBtdXNjdWxhciBhdHJvcGh5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgxJyxcbiAgICAgICAgJ25hbWUnOiAnYW15b3Ryb3BoaWMgbGF0ZXJhbCBzY2xlcm9zaXMnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDksXG4gICAgICAndGFyZ2V0JzogMjQsXG4gICAgICAndmFsdWUnOiAyLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODcnLFxuICAgICAgICAnbmFtZSc6ICdBWjYyOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4OCcsXG4gICAgICAgICduYW1lJzogJ1NlbHVtZXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGEnLFxuICAgICAgICAnbmFtZSc6ICdQTFg0NzIwJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhiJyxcbiAgICAgICAgJ25hbWUnOiAnU0I1OTA4ODUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDIsXG4gICAgICAndmFsdWUnOiA1LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODcnLFxuICAgICAgICAnbmFtZSc6ICdBWjYyOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4OCcsXG4gICAgICAgICduYW1lJzogJ1NlbHVtZXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGEnLFxuICAgICAgICAnbmFtZSc6ICdQTFg0NzIwJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhiJyxcbiAgICAgICAgJ25hbWUnOiAnU0I1OTA4ODUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDMsXG4gICAgICAndmFsdWUnOiA1LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkMzUnLFxuICAgICAgICAnbmFtZSc6ICdHREMwOTQxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjEwMGJjZTcwNmMzY2RmY2VlJyxcbiAgICAgICAgJ25hbWUnOiAnTUsyMjA2J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDM2JyxcbiAgICAgICAgJ25hbWUnOiAnV1lFMTI1MTMyJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDM3JyxcbiAgICAgICAgJ25hbWUnOiAnVG9yaW4xJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDM4JyxcbiAgICAgICAgJ25hbWUnOiAnUEQwMzI1OTAxJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDM1JyxcbiAgICAgICAgJ25hbWUnOiAnR0RDMDk0MSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYxMDBiY2U3MDZjM2NkZmNlZScsXG4gICAgICAgICduYW1lJzogJ01LMjIwNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQzNicsXG4gICAgICAgICduYW1lJzogJ1dZRTEyNTEzMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQzNycsXG4gICAgICAgICduYW1lJzogJ1RvcmluMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQzOCcsXG4gICAgICAgICduYW1lJzogJ1BEMDMyNTkwMSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMTAsXG4gICAgICAndGFyZ2V0JzogNixcbiAgICAgICd2YWx1ZSc6IDEwLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODcnLFxuICAgICAgICAnbmFtZSc6ICdBWjYyOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4OCcsXG4gICAgICAgICduYW1lJzogJ1NlbHVtZXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGEnLFxuICAgICAgICAnbmFtZSc6ICdQTFg0NzIwJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhiJyxcbiAgICAgICAgJ25hbWUnOiAnU0I1OTA4ODUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDksXG4gICAgICAndmFsdWUnOiA1LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODcnLFxuICAgICAgICAnbmFtZSc6ICdBWjYyOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4OCcsXG4gICAgICAgICduYW1lJzogJ1NlbHVtZXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGEnLFxuICAgICAgICAnbmFtZSc6ICdQTFg0NzIwJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhiJyxcbiAgICAgICAgJ25hbWUnOiAnU0I1OTA4ODUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDEwLFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjIwMGJjZTcwNmMzY2RmZDM1JyxcbiAgICAgICAgJ25hbWUnOiAnR0RDMDk0MSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYxMDBiY2U3MDZjM2NkZmNlZScsXG4gICAgICAgICduYW1lJzogJ01LMjIwNidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQzNicsXG4gICAgICAgICduYW1lJzogJ1dZRTEyNTEzMidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQzNycsXG4gICAgICAgICduYW1lJzogJ1RvcmluMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQzOCcsXG4gICAgICAgICduYW1lJzogJ1BEMDMyNTkwMSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYyMDBiY2U3MDZjM2NkZmQzNScsXG4gICAgICAgICduYW1lJzogJ0dEQzA5NDEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMTAwYmNlNzA2YzNjZGZjZWUnLFxuICAgICAgICAnbmFtZSc6ICdNSzIyMDYnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkMzYnLFxuICAgICAgICAnbmFtZSc6ICdXWUUxMjUxMzInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkMzcnLFxuICAgICAgICAnbmFtZSc6ICdUb3JpbjEnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMjAwYmNlNzA2YzNjZGZkMzgnLFxuICAgICAgICAnbmFtZSc6ICdQRDAzMjU5MDEnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDEyLFxuICAgICAgJ3ZhbHVlJzogMTAuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4NycsXG4gICAgICAgICduYW1lJzogJ0FaNjI4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg4JyxcbiAgICAgICAgJ25hbWUnOiAnU2VsdW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjgnLFxuICAgICAgICAnbmFtZSc6ICdWZW11cmFmZW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YScsXG4gICAgICAgICduYW1lJzogJ1BMWDQ3MjAnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGInLFxuICAgICAgICAnbmFtZSc6ICdTQjU5MDg4NSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMTAsXG4gICAgICAndGFyZ2V0JzogMTMsXG4gICAgICAndmFsdWUnOiA1LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODcnLFxuICAgICAgICAnbmFtZSc6ICdBWjYyOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4OCcsXG4gICAgICAgICduYW1lJzogJ1NlbHVtZXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGEnLFxuICAgICAgICAnbmFtZSc6ICdQTFg0NzIwJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhiJyxcbiAgICAgICAgJ25hbWUnOiAnU0I1OTA4ODUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDE0LFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiAxMCxcbiAgICAgICd0YXJnZXQnOiAxOCxcbiAgICAgICd2YWx1ZSc6IDUuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4NycsXG4gICAgICAgICduYW1lJzogJ0FaNjI4J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg4JyxcbiAgICAgICAgJ25hbWUnOiAnU2VsdW1ldGluaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZlZDAwYmNlNzA2YzNjZGZiZjgnLFxuICAgICAgICAnbmFtZSc6ICdWZW11cmFmZW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YScsXG4gICAgICAgICduYW1lJzogJ1BMWDQ3MjAnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGInLFxuICAgICAgICAnbmFtZSc6ICdTQjU5MDg4NSdcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMTAsXG4gICAgICAndGFyZ2V0JzogMTksXG4gICAgICAndmFsdWUnOiA1LjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODcnLFxuICAgICAgICAnbmFtZSc6ICdBWjYyOCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4OCcsXG4gICAgICAgICduYW1lJzogJ1NlbHVtZXRpbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZWQwMGJjZTcwNmMzY2RmYmY4JyxcbiAgICAgICAgJ25hbWUnOiAnVmVtdXJhZmVuaWInXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjOGEnLFxuICAgICAgICAnbmFtZSc6ICdQTFg0NzIwJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhiJyxcbiAgICAgICAgJ25hbWUnOiAnU0I1OTA4ODUnXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDIwLFxuICAgICAgJ3ZhbHVlJzogNS4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzg3JyxcbiAgICAgICAgJ25hbWUnOiAnQVo2MjgnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMDAwYmNlNzA2YzNjZGZjODgnLFxuICAgICAgICAnbmFtZSc6ICdTZWx1bWV0aW5pYidcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmVkMDBiY2U3MDZjM2NkZmJmOCcsXG4gICAgICAgICduYW1lJzogJ1ZlbXVyYWZlbmliJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjAwMGJjZTcwNmMzY2RmYzhhJyxcbiAgICAgICAgJ25hbWUnOiAnUExYNDcyMCdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYwMDBiY2U3MDZjM2NkZmM4YicsXG4gICAgICAgICduYW1lJzogJ1NCNTkwODg1J1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiAxMCxcbiAgICAgICd0YXJnZXQnOiAyMSxcbiAgICAgICd2YWx1ZSc6IDUuMFxuICAgIH0sIHtcbiAgICAgICdpbmZvJzogW3tcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MCcsXG4gICAgICAgICduYW1lJzogJ3NwaW5hbCBtdXNjdWxhciBhdHJvcGh5J1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgxJyxcbiAgICAgICAgJ25hbWUnOiAnYW15b3Ryb3BoaWMgbGF0ZXJhbCBzY2xlcm9zaXMnXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkOTAnLFxuICAgICAgICAnbmFtZSc6ICd0dW5pY2FteWNpbidcbiAgICAgIH1dLFxuICAgICAgJ2hpZ2hsaWdodCc6IDAsXG4gICAgICAnc291cmNlJzogMTAsXG4gICAgICAndGFyZ2V0JzogMjIsXG4gICAgICAndmFsdWUnOiAzLjBcbiAgICB9LCB7XG4gICAgICAnaW5mbyc6IFt7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODAnLFxuICAgICAgICAnbmFtZSc6ICdzcGluYWwgbXVzY3VsYXIgYXRyb3BoeSdcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ4MScsXG4gICAgICAgICduYW1lJzogJ2FteW90cm9waGljIGxhdGVyYWwgc2NsZXJvc2lzJ1xuICAgICAgfSwge1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDkwJyxcbiAgICAgICAgJ25hbWUnOiAndHVuaWNhbXljaW4nXG4gICAgICB9XSxcbiAgICAgICdoaWdobGlnaHQnOiAwLFxuICAgICAgJ3NvdXJjZSc6IDEwLFxuICAgICAgJ3RhcmdldCc6IDI0LFxuICAgICAgJ3ZhbHVlJzogMy4wXG4gICAgfSwge1xuICAgICAgJ2luZm8nOiBbe1xuICAgICAgICAncmVsZWFzZSc6IHRydWUsXG4gICAgICAgICdfaWQnOiAnNTVhOTVmZjMwMGJjZTcwNmMzY2RmZDgwJyxcbiAgICAgICAgJ25hbWUnOiAnc3BpbmFsIG11c2N1bGFyIGF0cm9waHknXG4gICAgICB9LCB7XG4gICAgICAgICdyZWxlYXNlJzogdHJ1ZSxcbiAgICAgICAgJ19pZCc6ICc1NWE5NWZmMzAwYmNlNzA2YzNjZGZkODEnLFxuICAgICAgICAnbmFtZSc6ICdhbXlvdHJvcGhpYyBsYXRlcmFsIHNjbGVyb3NpcydcbiAgICAgIH0sIHtcbiAgICAgICAgJ3JlbGVhc2UnOiB0cnVlLFxuICAgICAgICAnX2lkJzogJzU1YTk1ZmYzMDBiY2U3MDZjM2NkZmQ5MCcsXG4gICAgICAgICduYW1lJzogJ3R1bmljYW15Y2luJ1xuICAgICAgfV0sXG4gICAgICAnaGlnaGxpZ2h0JzogMCxcbiAgICAgICdzb3VyY2UnOiAxMCxcbiAgICAgICd0YXJnZXQnOiAzMSxcbiAgICAgICd2YWx1ZSc6IDMuMFxuICAgIH1dXG4gIH07XG59XG4iLCIvKmVzbGludCBjYW1lbGNhc2U6IDAqL1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2luZGV4Q29udHJvbGxlcnMnLCBbJ25nTG9kYXNoJywgJ2NsdXN0ZXJncmFtJ10pXG4gIC5jb250cm9sbGVyKCdEb2NlbnQzQ29udHJvbGxlcicsIERvY2VudDNDb250cm9sbGVyKVxuICAuY29udHJvbGxlcignY2VsbHNNb2RhbEN0cmwnLFxuICBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsICdjZWxscycsXG4gICAgICBmdW5jdGlvbigkc2NvcGUsICRtb2RhbEluc3RhbmNlLCBjZWxscykge1xuICAgICAgICAgICRzY29wZS5jZWxscyA9IGNlbGxzO1xuICAgICAgICAgICRzY29wZS5jZWxsQ291bnQgPSBjZWxscy5sZW5ndGg7XG4gICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICB9O1xuICAgICAgfV0pXG4gIC5jb250cm9sbGVyKCdwZXJ0dXJiYWdlbnNNb2RhbEN0cmwnLFxuICBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsICdwZXJ0dXJiYWdlbnMnLFxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgcGVydHVyYmFnZW5zKSB7XG4gICAgICAgICAgJHNjb3BlLnBlcnR1cmJhZ2VucyA9IHBlcnR1cmJhZ2VucztcbiAgICAgICAgICAkc2NvcGUucGVydHVyYmFnZW5Db3VudCA9IHBlcnR1cmJhZ2Vucy5sZW5ndGg7XG4gICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICB9O1xuICAgICAgfV0pO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIERvY2VudDNDb250cm9sbGVyKCR3aW5kb3csICRzY29wZSwgJGh0dHAsICRtb2RhbCwgZDMsIGQzRGF0YSwgbG9kYXNoKSB7XG5cbiAgdmFyIHZtID0gdGhpcztcbiAgdmFyIGlkeCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmxhc3RJbmRleE9mKCcvJyk7XG4gIHZtLmJhc2VVcmwgPSAkd2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaWR4ICsgMSk7XG4gIHZtLnNlYXJjaCA9IHNlYXJjaDtcbiAgdm0ucmVsZWFzZXMgPSBbXTtcbiAgdm0ucmVzdWx0c0xvYWRpbmcgPSBmYWxzZTtcbiAgdm0ucmVzdWx0SXNTZWFyY2ggPSBmYWxzZTtcbiAgdm0udGlsZUNiID0gdGlsZUNiO1xuICB2bS5zZWFyY2hRID0gJyc7XG4gIHZtLnNlYXJjaFFDb3B5ID0gJyc7XG4gIHZtLmtleXdvcmRzID0gW1xuICAgICdDb2xsYWdlbiBJJyxcbiAgICAnTDEwMDAnLFxuICAgICdNRU1BJyxcbiAgICAnTUNGNycsXG4gIF07XG4gIHZtLnF1ZXJ5ID0ge1xuICAgIGRhdGFzZXQ6ICcnLFxuICAgIGNlbGxMaW5lOiAnJyxcbiAgICBwZXJ0dXJiYWdlbnM6IFtdXG4gIH07XG4gIHZtLmFyZ3VtZW50cyA9IHtcbiAgICBuZXR3b3JrX2RhdGE6IGQzRGF0YSxcbiAgICBzdmdfZGl2X2lkOiAnc3ZnLWRpdicsXG4gICAgcm93X2xhYmVsOiAnQXNzYXlzJyxcbiAgICByb3dfbGFiZWxfc2NhbGU6IDAuNyxcbiAgICBjb2xfbGFiZWw6ICdDZWxsIExpbmVzJyxcbiAgICBvdXRlcl9tYXJnaW5zOiB7XG4gICAgICAndG9wJzogJ2luaGVyaXQnLFxuICAgICAgJ2JvdHRvbSc6ICdpbmhlcml0JyxcbiAgICAgICdsZWZ0JzogJ2luaGVyaXQnLFxuICAgICAgJ3JpZ2h0JzogJ2luaGVyaXQnXG4gICAgfSxcbiAgICBvcGFjaXR5X3NjYWxlOiAnbG9nJyxcbiAgICAvLyBpbnB1dF9kb21haW46IDAuMSxcbiAgICBkb196b29tOiBmYWxzZSxcbiAgICAvLyB0aWxlX2NvbG9yczogWycjMDgzRjUwJywgJyNFRDkxMjQnXSxcbiAgICB0aWxlX2NvbG9yczogWycjMzU5M2IxJywgJyNFRDkxMjQnXSxcbiAgICB0aWxlX2NsaWNrX2hsaWdodDogdHJ1ZSxcbiAgICBoaWdobGlnaHRfY29sb3I6ICd5ZWxsb3cnLFxuICAgIHRpdGxlX3RpbGU6IHRydWUsXG4gICAgY2xpY2tfdGlsZTogdGlsZUNiLFxuICAgIGNsaWNrX2xhYmVsOiBjbGlja0xhYmVsLFxuICAgIC8vICdjbGlja19ncm91cCc6IGNsaWNrX2dyb3VwX2NhbGxiYWNrXG4gICAgcmVzaXplOiBmYWxzZSxcbiAgICBvcmRlcjogJ3JhbmsnLFxuICAgIHpvb206IGZhbHNlLFxuICAgIHN1cGVyX2ZvbnRfc2l6ZTogJzI0cHgnXG4gIH07XG4gIHZtLnNob3dDZWxscyA9IHNob3dDZWxscztcbiAgdm0uc2hvd1BlcnR1cmJhZ2VucyA9IHNob3dQZXJ0dXJiYWdlbnM7XG5cbiAgZnVuY3Rpb24gc2hvd0NlbGxzKGNlbGxzKSB7XG4gICAgICBpZiAoY2VsbHNbMF0gPT0gXCJUQkRcIikge1xuICAgICAgICAgIC8vIG5vcm1hbGl6ZSB0aGUgaW5wdXQgZm9ybWF0IGZvciBtb2RhbFxuICAgICAgICAgIGNlbGxzID0gW3sgbmFtZTogXCJUQkRcIiB9XTtcbiAgICAgIH1cbiAgICAgIGNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICAgIGRlbGV0ZSBjZWxsW1wiJCRoYXNoS2V5XCJdO1xuICAgICAgfSk7XG4gICAgICAkbW9kYWwub3Blbih7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZtLmJhc2VVcmwgKyAnY2VsbHMuaHRtbCcsXG4gICAgICAgICAgY29udHJvbGxlcjogJ2NlbGxzTW9kYWxDdHJsJyxcbiAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgIGNlbGxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxscztcbiAgICAgICAgICAgICAgfS8qLFxuICAgICAgICAgICAgICBjb21tb25LZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb21tb25LZXlzKGNlbGxzKTtcbiAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2hvd1BlcnR1cmJhZ2VucyhwZXJ0dXJiYWdlbnMpIHtcbiAgICAgIGlmIChwZXJ0dXJiYWdlbnNbMF0gPT0gXCJUQkRcIikge1xuICAgICAgICAgIC8vIG5vcm1hbGl6ZSB0aGUgaW5wdXQgZm9ybWF0IGZvciBtb2RhbFxuICAgICAgICAgIHBlcnR1cmJhZ2VucyA9IFt7IG5hbWU6IFwiVEJEXCIgfV1cbiAgICAgIH1cbiAgICAgIHBlcnR1cmJhZ2Vucy5mb3JFYWNoKGZ1bmN0aW9uKHBlcnR1cmJhZ2VuKSB7XG4gICAgICAgICAgZGVsZXRlIHBlcnR1cmJhZ2VuW1wiJCRoYXNoS2V5XCJdO1xuICAgICAgfSk7XG4gICAgICAkbW9kYWwub3Blbih7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZtLmJhc2VVcmwgKyAncGVydHVyYmFnZW5zLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdwZXJ0dXJiYWdlbnNNb2RhbEN0cmwnLFxuICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgcGVydHVyYmFnZW5zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwZXJ0dXJiYWdlbnM7XG4gICAgICAgICAgICAgIH0vKixcbiAgICAgICAgICAgICAgY29tbW9uS2V5czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q29tbW9uS2V5cyhwZXJ0dXJiYWdlbnMpO1xuICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBjbGlja0xhYmVsKGxhYmVsLCByb3dDb2wpIHtcbiAgICB2bS5yZXN1bHRJc1NlYXJjaCA9IGZhbHNlO1xuICAgIGQzLnNlbGVjdEFsbCgnLmhpZ2hsaWdodCcpLnN0eWxlKCdvcGFjaXR5JywgMCk7XG4gICAgdm0ucXVlcnkgPSB7XG4gICAgICBjZWxsTGluZTogcm93Q29sID09PSAnY29sJyA/IGxhYmVsIDogbnVsbCxcbiAgICAgIGRhdGFzZXQ6IHJvd0NvbCA9PT0gJ3JvdycgPyBsYWJlbCA6IG51bGxcbiAgICB9O1xuICAgIHF1ZXJ5TERSKCk7XG4gIH1cblxuICBmdW5jdGlvbiB0aWxlQ2IodGlsZUluZm8pIHtcbiAgICBkMy5zZWxlY3RBbGwoJy50aWxlJykuZWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICBpZiAoIWxvZGFzaC5pc0VxdWFsKGQsIHRpbGVJbmZvKSkge1xuICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0QWxsKCcuaGlnaGxpZ2h0Jykuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2bS5yZXN1bHRJc1NlYXJjaCA9IGZhbHNlO1xuICAgIHZhciBwZXJ0SWRzID0gbG9kYXNoLm1hcCh0aWxlSW5mby5wZXJ0cywgZnVuY3Rpb24ocGVydCkge1xuICAgICAgcmV0dXJuIHBlcnQuX2lkO1xuICAgIH0pO1xuICAgIHZtLnF1ZXJ5ID0ge1xuICAgICAgZGF0YXNldDogdGlsZUluZm8ucm93LFxuICAgICAgY2VsbExpbmU6IHRpbGVJbmZvLmNvbCxcbiAgICAgIHBlcnR1cmJhZ2VuczogcGVydElkcy5qb2luKCcsJylcbiAgICB9O1xuICAgIHF1ZXJ5TERSKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREYXRhc2V0c1dpdGhQZXJ0cyhpbnB1dCwgY2FsbGJhY2spIHtcbiAgICAkaHR0cCh7XG4gICAgICB1cmw6ICdodHRwOi8vYW1wLnBoYXJtLm1zc20uZWR1L0xEUi9hcGkvYXV0b2NvbXBsZXRlL3BlcnR1cmJhZ2VucycsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHE6IGlucHV0XG4gICAgICB9XG4gICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgdmFyIHBlcnRJZHMgPSBbXTtcbiAgICAgIGxvZGFzaC5lYWNoKHJlc3BvbnNlLmRhdGEsIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAob2JqLl9pZCkge1xuICAgICAgICAgIHBlcnRJZHMucHVzaChvYmouX2lkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAkaHR0cCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9hbXAucGhhcm0ubXNzbS5lZHUvTERSL2FwaS9yZWxlYXNlcy9maWx0ZXInLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBwZXJ0dXJiYWdlbnM6IHBlcnRJZHMuam9pbignLCcpXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGRhdGFzZXRzV2l0aFBlcnRzID0gW107XG4gICAgICAgIGxvZGFzaC5lYWNoKHJlc3BvbnNlLmRhdGEsIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgIGlmIChvYmoucmVsZWFzZWQpIHtcbiAgICAgICAgICAgIG9iai5yZWxlYXNlRGF0ZXMudXBjb21pbmcgPSBuZXcgRGF0ZShvYmoucmVsZWFzZURhdGVzXG4gICAgICAgICAgICAgIC51cGNvbWluZyk7XG4gICAgICAgICAgICBkYXRhc2V0c1dpdGhQZXJ0cy5wdXNoKG9iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2soZGF0YXNldHNXaXRoUGVydHMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREYXRhc2V0c1dpdGhDTGluZXMoaW5wdXQsIGNhbGxiYWNrKSB7XG4gICAgJGh0dHAoe1xuICAgICAgdXJsOiAnaHR0cDovL2FtcC5waGFybS5tc3NtLmVkdS9MRFIvYXBpL3JlbGVhc2VzL2ZpbHRlcicsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGNlbGxMaW5lOiBpbnB1dFxuICAgICAgfVxuICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHZhciBkYXRhc2V0c1dpdGhDTGluZXMgPSBbXTtcbiAgICAgIGxvZGFzaC5lYWNoKHJlc3BvbnNlLmRhdGEsIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAob2JqLnJlbGVhc2VkKSB7XG4gICAgICAgICAgb2JqLnJlbGVhc2VEYXRlcy51cGNvbWluZyA9IG5ldyBEYXRlKG9iai5yZWxlYXNlRGF0ZXMudXBjb21pbmcpO1xuICAgICAgICAgIGRhdGFzZXRzV2l0aENMaW5lcy5wdXNoKG9iaik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2FsbGJhY2soZGF0YXNldHNXaXRoQ0xpbmVzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERhdGFzZXRzKGlucHV0LCBjYWxsYmFjaykge1xuICAgICRodHRwKHtcbiAgICAgIHVybDogJ2h0dHA6Ly9hbXAucGhhcm0ubXNzbS5lZHUvTERSL2FwaS9yZWxlYXNlcy9zZWFyY2gnLFxuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBxOiBpbnB1dFxuICAgICAgfVxuICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHZhciBkYXRhc2V0cyA9IFtdO1xuICAgICAgbG9kYXNoLmVhY2gocmVzcG9uc2UuZGF0YSwgZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmIChvYmoucmVsZWFzZWQpIHtcbiAgICAgICAgICBvYmoucmVsZWFzZURhdGVzLnVwY29taW5nID0gbmV3IERhdGUob2JqLnJlbGVhc2VEYXRlcy51cGNvbWluZyk7XG4gICAgICAgICAgZGF0YXNldHMucHVzaChvYmopO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNhbGxiYWNrKGRhdGFzZXRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRm9ySWNvbnMocmVsZWFzZSkge1xuICAgIHZhciBkc05hbWUgPSByZWxlYXNlLmRhdGFzZXROYW1lO1xuICAgIHZhciBhc3NheSA9IHJlbGVhc2UubWV0YWRhdGEuYXNzYXlbMF07XG4gICAgLy8gQXNzYXkgUmVnRXhwc1xuICAgIHZhciBsMTAwMFJlZ0V4ID0gL0wxMDAwL2k7XG4gICAgdmFyIHAxMDBSZWdFeCA9IC9QMTAwL2k7XG4gICAgdmFyIGdjcEFiYnJSZWdFeCA9IC9HQ1AvaTtcbiAgICB2YXIgcm5hU2VxUmVnRXggPSAvUk5BWy1dP1NlcS9pO1xuICAgIHZhciBnY3BSZWdFeCA9IC9HbG9iYWwgQ2hyb21hdGluIFByb2ZpbGluZy9pO1xuXG4gICAgdmFyIGlzTDEwMDAgPSBsMTAwMFJlZ0V4LnRlc3QoZHNOYW1lKSB8fCBsMTAwMFJlZ0V4LnRlc3QoYXNzYXkpO1xuICAgIHZhciBpc1AxMDAgPSBwMTAwUmVnRXgudGVzdChkc05hbWUpIHx8IHAxMDBSZWdFeC50ZXN0KGFzc2F5KTtcbiAgICB2YXIgaXNSTkFTZXEgPSBybmFTZXFSZWdFeC50ZXN0KGRzTmFtZSkgfHwgcm5hU2VxUmVnRXgudGVzdChhc3NheSk7XG4gICAgdmFyIGlzR0NQID0gZ2NwQWJiclJlZ0V4LnRlc3QoZHNOYW1lKSB8fCBnY3BBYmJyUmVnRXgudGVzdChhc3NheSkgfHxcbiAgICAgIGdjcFJlZ0V4LnRlc3QoZHNOYW1lKSB8fCBnY3BSZWdFeC50ZXN0KGRzTmFtZSk7XG5cbiAgICByZWxlYXNlLnVzZVNsaWNlciA9IGlzTDEwMDA7XG4gICAgcmVsZWFzZS51c2VQaUxJTkNTID0gaXNQMTAwIHx8IGlzR0NQO1xuICAgIHJlbGVhc2UudXNlTW9zYWljID0gaXNQMTAwIHx8IGlzR0NQO1xuXG4gICAgaWYgKGlzUk5BU2VxKSB7XG4gICAgICBpZiAocmVsZWFzZS5ncm91cC5uYW1lID09PSAnTmV1cm9MSU5DUycpIHtcbiAgICAgICAgcmVsZWFzZS5pTElOQ1NMaW5rID0gJ2h0dHA6Ly9laDMudWMuZWR1L0dlbm9taWNzUG9ydGFscy9EYXRhc2V0TGFuZGluZ1BhZ2UuZG8/ZGF0YV9zZXQ9TERTLTEyMzgnO1xuICAgICAgfSBlbHNlIGlmIChyZWxlYXNlLmdyb3VwLm5hbWUgPT09ICdEVE9YUycpIHtcbiAgICAgICAgdmFyIHVwRGF0ZSA9IHJlbGVhc2UucmVsZWFzZURhdGVzLnVwY29taW5nLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICB2YXIganVuZURhdGUgPSBuZXcgRGF0ZSgnNi8zMC8yMDE1Jykuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgIHZhciBhdWd1c3REYXRlID0gbmV3IERhdGUoJzgvMjAvMjAxNScpLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICAvLyBDaGVjayBpZiByZWxlYXNlIGRhdGUgaXMgNi8zMC8xNVxuICAgICAgICBpZiAodXBEYXRlID09PSBqdW5lRGF0ZSkge1xuICAgICAgICAgIHJlbGVhc2UuaUxJTkNTTGluayA9ICdodHRwOi8vZWgzLnVjLmVkdS9HZW5vbWljc1BvcnRhbHMvRGF0YXNldExhbmRpbmdQYWdlLmRvP2RhdGFfc2V0PUxEUy0xMjM3JztcbiAgICAgICAgfSBlbHNlIGlmICh1cERhdGUgPT09IGF1Z3VzdERhdGUpIHtcbiAgICAgICAgICByZWxlYXNlLmlMSU5DU0xpbmsgPSAnaHR0cDovL2VoMy51Yy5lZHUvR2Vub21pY3NQb3J0YWxzL0RhdGFzZXRMYW5kaW5nUGFnZS5kbz9kYXRhX3NldD1MRFMtMTIzOSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZWFyY2gocXVlcnkpIHtcbiAgICBpZiAoISFxdWVyeSAmJiBxdWVyeS5sZW5ndGgpIHtcbiAgICAgIHZtLnNlYXJjaFEgPSBxdWVyeTtcbiAgICB9IGVsc2UgaWYgKCF2bS5zZWFyY2hRLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZtLnJlc3VsdElzU2VhcmNoID0gdHJ1ZTtcbiAgICB2bS5zZWFyY2hRQ29weSA9IHZtLnNlYXJjaFE7XG4gICAgdmFyIGxhYmVsU2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgIGQzLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JykuZWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICB2YXIgbGFiZWwgPSBkMy5zZWxlY3QodGhpcykudGV4dCgpO1xuICAgICAgaWYgKHZtLnNlYXJjaFEudG9Mb3dlckNhc2UoKSA9PT0gbGFiZWwudG9Mb3dlckNhc2UoKSAmJiAhbGFiZWxTZWxlY3RlZCkge1xuICAgICAgICBkMy5zZWxlY3QodGhpcykub24oJ2NsaWNrJykuYXBwbHkodGhpcywgW2QsIGldKTtcbiAgICAgICAgbGFiZWxTZWxlY3RlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkMy5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfdGV4dCcpLmVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgdmFyIGxhYmVsID0gZDMuc2VsZWN0KHRoaXMpLnRleHQoKTtcbiAgICAgIGlmICh2bS5zZWFyY2hRLnRvTG93ZXJDYXNlKCkgPT09IGxhYmVsLnRvTG93ZXJDYXNlKCkgJiYgIWxhYmVsU2VsZWN0ZWQpIHtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLm9uKCdjbGljaycpLmFwcGx5KHRoaXMsIFtkLCBpXSk7XG4gICAgICAgIGxhYmVsU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGxhYmVsU2VsZWN0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2bS5yZXN1bHRzTG9hZGluZyA9IHRydWU7XG5cbiAgICBnZXREYXRhc2V0c1dpdGhQZXJ0cyh2bS5zZWFyY2hRLCBmdW5jdGlvbihkc1dpdGhQZXJ0cykge1xuICAgICAgZ2V0RGF0YXNldHNXaXRoQ0xpbmVzKHZtLnNlYXJjaFEsIGZ1bmN0aW9uKGRzV2l0aENMaW5lcykge1xuICAgICAgICBnZXREYXRhc2V0cyh2bS5zZWFyY2hRLCBmdW5jdGlvbihkYXRhc2V0cykge1xuICAgICAgICAgIHZhciBjb25jYXRBcnIgPSBkc1dpdGhQZXJ0cy5jb25jYXQoZHNXaXRoQ0xpbmVzLCBkYXRhc2V0cyk7XG4gICAgICAgICAgdm0ucmVsZWFzZXMgPSBsb2Rhc2gudW5pcShjb25jYXRBcnIsIGZhbHNlLCAnX2lkJyk7XG4gICAgICAgICAgZDMuc2VsZWN0QWxsKCcuY2xpY2tfaGxpZ2h0Jykuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgICBsb2Rhc2guZWFjaCh2bS5yZWxlYXNlcywgZnVuY3Rpb24ocmVsZWFzZSkge1xuICAgICAgICAgICAgY2hlY2tGb3JJY29ucyhyZWxlYXNlKTtcbiAgICAgICAgICAgIHZhciBwZXJ0cyA9IHJlbGVhc2UubWV0YWRhdGEucGVydHVyYmFnZW5zO1xuICAgICAgICAgICAgdmFyIHBlcnRJZHMgPSBsb2Rhc2gubWFwKHBlcnRzLCBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9iai5faWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLnRpbGUnKS5lYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICBsb2Rhc2guZWFjaChkLmluZm8sIGZ1bmN0aW9uKHBlcnRPYmopIHtcbiAgICAgICAgICAgICAgICBpZiAocGVydElkcy5pbmRleE9mKHBlcnRPYmouX2lkKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhhdCkuc2VsZWN0QWxsKCcuaGlnaGxpZ2h0JylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgJ3llbGxvdycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2bS5yZXN1bHRzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVlcnlMRFIoKSB7XG4gICAgJGh0dHAoe1xuICAgICAgdXJsOiAnaHR0cDovL2FtcC5waGFybS5tc3NtLmVkdS9MRFIvYXBpL3JlbGVhc2VzL2ZpbHRlcicsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcGFyYW1zOiB2bS5xdWVyeVxuICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHZtLnJlbGVhc2VzID0gW107XG4gICAgICBsb2Rhc2guZWFjaChyZXNwb25zZS5kYXRhLCBmdW5jdGlvbihyZWxlYXNlKSB7XG4gICAgICAgIGlmIChyZWxlYXNlLnJlbGVhc2VkKSB7XG4gICAgICAgICAgcmVsZWFzZS5yZWxlYXNlRGF0ZXMudXBjb21pbmcgPSBuZXcgRGF0ZShyZWxlYXNlLnJlbGVhc2VEYXRlcy51cGNvbWluZyk7XG4gICAgICAgICAgY2hlY2tGb3JJY29ucyhyZWxlYXNlKVxuICAgICAgICAgIHZtLnJlbGVhc2VzLnB1c2gocmVsZWFzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdm0uc3VtbWFyeSA9IHtcbiAgICBjZW50ZXI6IDAsXG4gICAgYXNzYXlzOiAwLFxuICAgIGNlbGxMaW5lczogMCxcbiAgICBwZXJ0dXJiYWdlbnM6IDBcbiAgfTtcblxuICBmdW5jdGlvbiBjb3VudFVwVG8oZmllbGQsIGNvdW50LCBtYXgsIHN0ZXAsIHRpbWUpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGNvdW50ID09PSBtYXgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChjb3VudCArIHN0ZXAgPiBtYXgpIHtcbiAgICAgICAgY291bnRVcFRvKGZpZWxkLCBjb3VudCwgbWF4LCAxLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ID0gY291bnQgKyBzdGVwO1xuICAgICAgICB2bS5zdW1tYXJ5W2ZpZWxkXSA9IGNvdW50O1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIGNvdW50VXBUbyhmaWVsZCwgY291bnQsIG1heCwgc3RlcCwgdGltZSk7XG4gICAgICB9XG4gICAgfSwgdGltZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUNvdW50cygpIHtcbiAgICAkaHR0cCh7XG4gICAgICB1cmw6ICdodHRwOi8vYW1wLnBoYXJtLm1zc20uZWR1L0xEUi9hcGkvY291bnRzL3JlbGVhc2VkJyxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgdmFyIGNvdW50cyA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICBjb3VudHMuY2VudGVyID0gNjtcbiAgICAgIGNvdW50VXBUbygnY2VudGVyJywgMCwgY291bnRzLmNlbnRlciwgMSwgNTApO1xuICAgICAgY291bnRVcFRvKCdhc3NheXMnLCAwLCBjb3VudHMuYXNzYXlzLCAxLCAxMCk7XG4gICAgICBjb3VudFVwVG8oJ3BlcnR1cmJhZ2VucycsIDAsIGNvdW50cy5wZXJ0dXJiYWdlbnMsIDUwLCAxMCk7XG4gICAgICBjb3VudFVwVG8oJ2NlbGxMaW5lcycsIDAsIGNvdW50cy5jZWxsTGluZXMsIDUsIDEwKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdlbmVyYXRlQ291bnRzKCk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
